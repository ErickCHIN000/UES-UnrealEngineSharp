using System;
using System.Collections.Generic;
using UES;
using UES.Collections;
using UES.Extensions;
using UEObject = UES.UEObject;
using Object = UES.UEObject;
using SystemGuid = System.Guid;
using UESTransform = UES.Extensions.Transform;
using SDK.Script.CoreUObject;
using SDK.Script.InputCore;
using SDK.Script.AudioExtensions;
using SDK.Script.Chaos;
using SDK.Script.Landscape;
using SDK.Script.Slate;
using SDK.Script.PhysicsCore;
using SDK.Script.SlateCore;
using SDK.Script.PacketHandler;
using SDK.Script.PropertyAccess;
using SDK.Script.AudioPlatformConfiguration;
using SDK.Script.ClothingSystemRuntimeInterface;
using Enum = SDK.Script.CoreUObject.Enum;
namespace SDK.Script.Engine
{
    public class LightmassWorldInfoSettings : UEObject
    {
        public LightmassWorldInfoSettings(nint addr) : base(addr) { }
        public LightmassWorldInfoSettings() : base(0) { }
        public float StaticLightingLevelScale { get { return this["StaticLightingLevelScale"].GetValue<float>(); } set { this["StaticLightingLevelScale"].SetValue<float>(value); } }
        public int NumIndirectLightingBounces { get { return this["NumIndirectLightingBounces"].GetValue<int>(); } set { this["NumIndirectLightingBounces"].SetValue<int>(value); } }
        public int NumSkyLightingBounces { get { return this["NumSkyLightingBounces"].GetValue<int>(); } set { this["NumSkyLightingBounces"].SetValue<int>(value); } }
        public float IndirectLightingQuality { get { return this["IndirectLightingQuality"].GetValue<float>(); } set { this["IndirectLightingQuality"].SetValue<float>(value); } }
        public float IndirectLightingSmoothness { get { return this["IndirectLightingSmoothness"].GetValue<float>(); } set { this["IndirectLightingSmoothness"].SetValue<float>(value); } }
        public Color EnvironmentColor { get { return this[nameof(EnvironmentColor)].As<Color>(); } set { this["EnvironmentColor"] = value; } }
        public float EnvironmentIntensity { get { return this["EnvironmentIntensity"].GetValue<float>(); } set { this["EnvironmentIntensity"].SetValue<float>(value); } }
        public float EmissiveBoost { get { return this["EmissiveBoost"].GetValue<float>(); } set { this["EmissiveBoost"].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this["DiffuseBoost"].GetValue<float>(); } set { this["DiffuseBoost"].SetValue<float>(value); } }
        public byte VolumeLightingMethod { get { return this["VolumeLightingMethod"].GetValue<byte>(); } set { this["VolumeLightingMethod"].SetValue<byte>(value); } }
        public bool bUseAmbientOcclusion { get { return this["bUseAmbientOcclusion"].Flag; } set { this["bUseAmbientOcclusion"].Flag = value; } }
        public bool bGenerateAmbientOcclusionMaterialMask { get { return this["bGenerateAmbientOcclusionMaterialMask"].Flag; } set { this["bGenerateAmbientOcclusionMaterialMask"].Flag = value; } }
        public bool bVisualizeMaterialDiffuse { get { return this["bVisualizeMaterialDiffuse"].Flag; } set { this["bVisualizeMaterialDiffuse"].Flag = value; } }
        public bool bVisualizeAmbientOcclusion { get { return this["bVisualizeAmbientOcclusion"].Flag; } set { this["bVisualizeAmbientOcclusion"].Flag = value; } }
        public bool bCompressLightmaps { get { return this["bCompressLightmaps"].Flag; } set { this["bCompressLightmaps"].Flag = value; } }
        public float VolumetricLightmapDetailCellSize { get { return this["VolumetricLightmapDetailCellSize"].GetValue<float>(); } set { this["VolumetricLightmapDetailCellSize"].SetValue<float>(value); } }
        public float VolumetricLightmapMaximumBrickMemoryMb { get { return this["VolumetricLightmapMaximumBrickMemoryMb"].GetValue<float>(); } set { this["VolumetricLightmapMaximumBrickMemoryMb"].SetValue<float>(value); } }
        public float VolumetricLightmapSphericalHarmonicSmoothing { get { return this["VolumetricLightmapSphericalHarmonicSmoothing"].GetValue<float>(); } set { this["VolumetricLightmapSphericalHarmonicSmoothing"].SetValue<float>(value); } }
        public float VolumeLightSamplePlacementScale { get { return this["VolumeLightSamplePlacementScale"].GetValue<float>(); } set { this["VolumeLightSamplePlacementScale"].SetValue<float>(value); } }
        public float DirectIlluminationOcclusionFraction { get { return this["DirectIlluminationOcclusionFraction"].GetValue<float>(); } set { this["DirectIlluminationOcclusionFraction"].SetValue<float>(value); } }
        public float IndirectIlluminationOcclusionFraction { get { return this["IndirectIlluminationOcclusionFraction"].GetValue<float>(); } set { this["IndirectIlluminationOcclusionFraction"].SetValue<float>(value); } }
        public float OcclusionExponent { get { return this["OcclusionExponent"].GetValue<float>(); } set { this["OcclusionExponent"].SetValue<float>(value); } }
        public float FullyOccludedSamplesFraction { get { return this["FullyOccludedSamplesFraction"].GetValue<float>(); } set { this["FullyOccludedSamplesFraction"].SetValue<float>(value); } }
        public float MaxOcclusionDistance { get { return this["MaxOcclusionDistance"].GetValue<float>(); } set { this["MaxOcclusionDistance"].SetValue<float>(value); } }
    }
    public class NetViewer : UEObject
    {
        public NetViewer(nint addr) : base(addr) { }
        public NetViewer() : base(0) { }
        public NetConnection Connection { get { return this[nameof(Connection)].As<NetConnection>(); } set { this["Connection"] = value; } }
        public Actor InViewer { get { return this[nameof(InViewer)].As<Actor>(); } set { this["InViewer"] = value; } }
        public Actor ViewTarget { get { return this[nameof(ViewTarget)].As<Actor>(); } set { this["ViewTarget"] = value; } }
        public Vector ViewLocation { get { return this[nameof(ViewLocation)].As<Vector>(); } set { this["ViewLocation"] = value; } }
        public Vector ViewDir { get { return this[nameof(ViewDir)].As<Vector>(); } set { this["ViewDir"] = value; } }
    }
    public class HierarchicalSimplification : UEObject
    {
        public HierarchicalSimplification(nint addr) : base(addr) { }
        public HierarchicalSimplification() : base(0) { }
        public float TransitionScreenSize { get { return this["TransitionScreenSize"].GetValue<float>(); } set { this["TransitionScreenSize"].SetValue<float>(value); } }
        public float OverrideDrawDistance { get { return this["OverrideDrawDistance"].GetValue<float>(); } set { this["OverrideDrawDistance"].SetValue<float>(value); } }
        public bool bUseOverrideDrawDistance { get { return this["bUseOverrideDrawDistance"].Flag; } set { this["bUseOverrideDrawDistance"].Flag = value; } }
        public bool bAllowSpecificExclusion { get { return this["bAllowSpecificExclusion"].Flag; } set { this["bAllowSpecificExclusion"].Flag = value; } }
        public bool bSimplifyMesh { get { return this["bSimplifyMesh"].Flag; } set { this["bSimplifyMesh"].Flag = value; } }
        public bool bOnlyGenerateClustersForVolumes { get { return this["bOnlyGenerateClustersForVolumes"].Flag; } set { this["bOnlyGenerateClustersForVolumes"].Flag = value; } }
        public bool bReusePreviousLevelClusters { get { return this["bReusePreviousLevelClusters"].Flag; } set { this["bReusePreviousLevelClusters"].Flag = value; } }
        public MeshProxySettings ProxySetting { get { return this[nameof(ProxySetting)].As<MeshProxySettings>(); } set { this["ProxySetting"] = value; } }
        public MeshMergingSettings MergeSetting { get { return this[nameof(MergeSetting)].As<MeshMergingSettings>(); } set { this["MergeSetting"] = value; } }
        public float DesiredBoundRadius { get { return this["DesiredBoundRadius"].GetValue<float>(); } set { this["DesiredBoundRadius"].SetValue<float>(value); } }
        public float DesiredFillingPercentage { get { return this["DesiredFillingPercentage"].GetValue<float>(); } set { this["DesiredFillingPercentage"].SetValue<float>(value); } }
        public int MinNumberOfActorsToBuild { get { return this["MinNumberOfActorsToBuild"].GetValue<int>(); } set { this["MinNumberOfActorsToBuild"].SetValue<int>(value); } }
    }
    public class BroadphaseSettings : UEObject
    {
        public BroadphaseSettings(nint addr) : base(addr) { }
        public BroadphaseSettings() : base(0) { }
        public bool bUseMBPOnClient { get { return this["bUseMBPOnClient"].Flag; } set { this["bUseMBPOnClient"].Flag = value; } }
        public bool bUseMBPOnServer { get { return this["bUseMBPOnServer"].Flag; } set { this["bUseMBPOnServer"].Flag = value; } }
        public bool bUseMBPOuterBounds { get { return this["bUseMBPOuterBounds"].Flag; } set { this["bUseMBPOuterBounds"].Flag = value; } }
        public Box MBPBounds { get { return this[nameof(MBPBounds)].As<Box>(); } set { this["MBPBounds"] = value; } }
        public Box MBPOuterBounds { get { return this[nameof(MBPOuterBounds)].As<Box>(); } set { this["MBPOuterBounds"] = value; } }
        public uint MBPNumSubdivs { get { return this["MBPNumSubdivs"].GetValue<uint>(); } set { this["MBPNumSubdivs"].SetValue<uint>(value); } }
    }
    public class PSCPoolElem : UEObject
    {
        public PSCPoolElem(nint addr) : base(addr) { }
        public PSCPoolElem() : base(0) { }
        public ParticleSystemComponent PSC { get { return this[nameof(PSC)].As<ParticleSystemComponent>(); } set { this["PSC"] = value; } }
    }
    public class PSCPool : UEObject
    {
        public PSCPool(nint addr) : base(addr) { }
        public PSCPool() : base(0) { }
        public Array<PSCPoolElem> FreeElements { get { return new Array<PSCPoolElem>(this["FreeElements"]); } set { this["FreeElements"] = value; } }
    }
    public class WorldPSCPool : UEObject
    {
        public WorldPSCPool(nint addr) : base(addr) { }
        public WorldPSCPool() : base(0) { }
        public UEObject WorldParticleSystemPools { get { return this["WorldParticleSystemPools"]; } set { this["WorldParticleSystemPools"] = value; } }
    }
    public class LevelViewportInfo : UEObject
    {
        public LevelViewportInfo(nint addr) : base(addr) { }
        public LevelViewportInfo() : base(0) { }
        public Vector CamPosition { get { return this[nameof(CamPosition)].As<Vector>(); } set { this["CamPosition"] = value; } }
        public Rotator CamRotation { get { return this[nameof(CamRotation)].As<Rotator>(); } set { this["CamRotation"] = value; } }
        public float CamOrthoZoom { get { return this["CamOrthoZoom"].GetValue<float>(); } set { this["CamOrthoZoom"].SetValue<float>(value); } }
        public bool CamUpdated { get { return this["CamUpdated"].Flag; } set { this["CamUpdated"].Flag = value; } }
    }
    public class StartPhysicsTickFunction : TickFunction
    {
        public StartPhysicsTickFunction(nint addr) : base(addr) { }
        public StartPhysicsTickFunction() : base(0) { }
    }
    public class EndPhysicsTickFunction : TickFunction
    {
        public EndPhysicsTickFunction(nint addr) : base(addr) { }
        public EndPhysicsTickFunction() : base(0) { }
    }
    public class LevelCollection : UEObject
    {
        public LevelCollection(nint addr) : base(addr) { }
        public LevelCollection() : base(0) { }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
        public Level PersistentLevel { get { return this[nameof(PersistentLevel)].As<Level>(); } set { this["PersistentLevel"] = value; } }
        public UEObject Levels { get { return this["Levels"]; } set { this["Levels"] = value; } }
    }
    public class StreamingLevelsToConsider : UEObject
    {
        public StreamingLevelsToConsider(nint addr) : base(addr) { }
        public StreamingLevelsToConsider() : base(0) { }
        public Array<LevelStreaming> StreamingLevels { get { return new Array<LevelStreaming>(this["StreamingLevels"]); } set { this["StreamingLevels"] = value; } }
    }
    public class VoiceSettings : UEObject
    {
        public VoiceSettings(nint addr) : base(addr) { }
        public VoiceSettings() : base(0) { }
        public SceneComponent ComponentToAttachTo { get { return this[nameof(ComponentToAttachTo)].As<SceneComponent>(); } set { this["ComponentToAttachTo"] = value; } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
    }
    public class VirtualTextureSpacePoolConfig : UEObject
    {
        public VirtualTextureSpacePoolConfig(nint addr) : base(addr) { }
        public VirtualTextureSpacePoolConfig() : base(0) { }
        public int MinTileSize { get { return this["MinTileSize"].GetValue<int>(); } set { this["MinTileSize"].SetValue<int>(value); } }
        public int MaxTileSize { get { return this["MaxTileSize"].GetValue<int>(); } set { this["MaxTileSize"].SetValue<int>(value); } }
        public List<byte> Formats { get { return this["Formats"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public int SizeInMegabyte { get { return this["SizeInMegabyte"].GetValue<int>(); } set { this["SizeInMegabyte"].SetValue<int>(value); } }
        public bool bAllowSizeScale { get { return this["bAllowSizeScale"].Flag; } set { this["bAllowSizeScale"].Flag = value; } }
        public uint ScalabilityGroup { get { return this["ScalabilityGroup"].GetValue<uint>(); } set { this["ScalabilityGroup"].SetValue<uint>(value); } }
    }
    public class VirtualTextureBuildSettings : UEObject
    {
        public VirtualTextureBuildSettings(nint addr) : base(addr) { }
        public VirtualTextureBuildSettings() : base(0) { }
        public int TileSize { get { return this["TileSize"].GetValue<int>(); } set { this["TileSize"].SetValue<int>(value); } }
        public int TileBorderSize { get { return this["TileBorderSize"].GetValue<int>(); } set { this["TileBorderSize"].SetValue<int>(value); } }
        public bool bEnableCompressCrunch { get { return this["bEnableCompressCrunch"].Flag; } set { this["bEnableCompressCrunch"].Flag = value; } }
        public bool bEnableCompressZlib { get { return this["bEnableCompressZlib"].Flag; } set { this["bEnableCompressZlib"].Flag = value; } }
    }
    public class HardwareCursorReference : UEObject
    {
        public HardwareCursorReference(nint addr) : base(addr) { }
        public HardwareCursorReference() : base(0) { }
        public string CursorPath { get { return this["CursorPath"].ToString(); } set { /* String properties are read-only */ } }
        public Vector2D HotSpot { get { return this[nameof(HotSpot)].As<Vector2D>(); } set { this["HotSpot"] = value; } }
    }
    public class UpdateLevelVisibilityLevelInfo : UEObject
    {
        public UpdateLevelVisibilityLevelInfo(nint addr) : base(addr) { }
        public UpdateLevelVisibilityLevelInfo() : base(0) { }
        public string PackageName { get { return this["PackageName"].ToString(); } set { /* String properties are read-only */ } }
        public string Filename { get { return this["Filename"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsVisible { get { return this["bIsVisible"].Flag; } set { this["bIsVisible"].Flag = value; } }
    }
    public class TouchInputControl : UEObject
    {
        public TouchInputControl(nint addr) : base(addr) { }
        public TouchInputControl() : base(0) { }
        public Texture2D image1 { get { return this[nameof(image1)].As<Texture2D>(); } set { this["image1"] = value; } }
        public Texture2D image2 { get { return this[nameof(image2)].As<Texture2D>(); } set { this["image2"] = value; } }
        public Vector2D Center { get { return this[nameof(Center)].As<Vector2D>(); } set { this["Center"] = value; } }
        public Vector2D VisualSize { get { return this[nameof(VisualSize)].As<Vector2D>(); } set { this["VisualSize"] = value; } }
        public Vector2D ThumbSize { get { return this[nameof(ThumbSize)].As<Vector2D>(); } set { this["ThumbSize"] = value; } }
        public Vector2D InteractionSize { get { return this[nameof(InteractionSize)].As<Vector2D>(); } set { this["InteractionSize"] = value; } }
        public Vector2D InputScale { get { return this[nameof(InputScale)].As<Vector2D>(); } set { this["InputScale"] = value; } }
        public Key MainInputKey { get { return this[nameof(MainInputKey)].As<Key>(); } set { this["MainInputKey"] = value; } }
        public Key AltInputKey { get { return this[nameof(AltInputKey)].As<Key>(); } set { this["AltInputKey"] = value; } }
    }
    public class TimeStretchCurveMarker : UEObject
    {
        public TimeStretchCurveMarker(nint addr) : base(addr) { }
        public TimeStretchCurveMarker() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float alpha { get { return this["alpha"].GetValue<float>(); } set { this["alpha"].SetValue<float>(value); } }
    }
    public class TimeStretchCurve : UEObject
    {
        public TimeStretchCurve(nint addr) : base(addr) { }
        public TimeStretchCurve() : base(0) { }
        public float SamplingRate { get { return this["SamplingRate"].GetValue<float>(); } set { this["SamplingRate"].SetValue<float>(value); } }
        public float CurveValueMinPrecision { get { return this["CurveValueMinPrecision"].GetValue<float>(); } set { this["CurveValueMinPrecision"].SetValue<float>(value); } }
        public Array<TimeStretchCurveMarker> Markers { get { return new Array<TimeStretchCurveMarker>(this["Markers"]); } set { this["Markers"] = value; } }
        public float Sum_dT_i_by_C_i { get { return this["Sum_dT_i_by_C_i"].GetValue<float>(); } set { this["Sum_dT_i_by_C_i"].SetValue<float>(value); } }
    }
    public class TimeStretchCurveInstance : UEObject
    {
        public TimeStretchCurveInstance(nint addr) : base(addr) { }
        public TimeStretchCurveInstance() : base(0) { }
        public bool bHasValidData { get { return this["bHasValidData"].Flag; } set { this["bHasValidData"].Flag = value; } }
    }
    public class TTTrackId : UEObject
    {
        public TTTrackId(nint addr) : base(addr) { }
        public TTTrackId() : base(0) { }
        public int TrackType { get { return this["TrackType"].GetValue<int>(); } set { this["TrackType"].SetValue<int>(value); } }
        public int TrackIndex { get { return this["TrackIndex"].GetValue<int>(); } set { this["TrackIndex"].SetValue<int>(value); } }
    }
    public class TTEventTrack : TTTrackBase
    {
        public TTEventTrack(nint addr) : base(addr) { }
        public TTEventTrack() : base(0) { }
        public string FunctionName { get { return this["FunctionName"].ToString(); } set { /* String properties are read-only */ } }
        public CurveFloat CurveKeys { get { return this[nameof(CurveKeys)].As<CurveFloat>(); } set { this["CurveKeys"] = value; } }
    }
    public class TTFloatTrack : TTPropertyTrack
    {
        public TTFloatTrack(nint addr) : base(addr) { }
        public TTFloatTrack() : base(0) { }
        public CurveFloat CurveFloat { get { return this[nameof(CurveFloat)].As<CurveFloat>(); } set { this["CurveFloat"] = value; } }
    }
    public class TTVectorTrack : TTPropertyTrack
    {
        public TTVectorTrack(nint addr) : base(addr) { }
        public TTVectorTrack() : base(0) { }
        public CurveVector CurveVector { get { return this[nameof(CurveVector)].As<CurveVector>(); } set { this["CurveVector"] = value; } }
    }
    public class TTLinearColorTrack : TTPropertyTrack
    {
        public TTLinearColorTrack(nint addr) : base(addr) { }
        public TTLinearColorTrack() : base(0) { }
        public CurveLinearColor CurveLinearColor { get { return this[nameof(CurveLinearColor)].As<CurveLinearColor>(); } set { this["CurveLinearColor"] = value; } }
    }
    public class TTPropertyTrack : TTTrackBase
    {
        public TTPropertyTrack(nint addr) : base(addr) { }
        public TTPropertyTrack() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TTTrackBase : UEObject
    {
        public TTTrackBase(nint addr) : base(addr) { }
        public TTTrackBase() : base(0) { }
        public string TrackName { get { return this["TrackName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsExternalCurve { get { return this["bIsExternalCurve"].Flag; } set { this["bIsExternalCurve"].Flag = value; } }
    }
    public class TimelineEventEntry : UEObject
    {
        public TimelineEventEntry(nint addr) : base(addr) { }
        public TimelineEventEntry() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public UEObject EventFunc { get { return this["EventFunc"]; } set { this["EventFunc"] = value; } }
    }
    public class TimelineVectorTrack : UEObject
    {
        public TimelineVectorTrack(nint addr) : base(addr) { }
        public TimelineVectorTrack() : base(0) { }
        public CurveVector VectorCurve { get { return this[nameof(VectorCurve)].As<CurveVector>(); } set { this["VectorCurve"] = value; } }
        public UEObject InterpFunc { get { return this["InterpFunc"]; } set { this["InterpFunc"] = value; } }
        public string TrackName { get { return this["TrackName"].ToString(); } set { /* String properties are read-only */ } }
        public string VectorPropertyName { get { return this["VectorPropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TimelineFloatTrack : UEObject
    {
        public TimelineFloatTrack(nint addr) : base(addr) { }
        public TimelineFloatTrack() : base(0) { }
        public CurveFloat FloatCurve { get { return this[nameof(FloatCurve)].As<CurveFloat>(); } set { this["FloatCurve"] = value; } }
        public UEObject InterpFunc { get { return this["InterpFunc"]; } set { this["InterpFunc"] = value; } }
        public string TrackName { get { return this["TrackName"].ToString(); } set { /* String properties are read-only */ } }
        public string FloatPropertyName { get { return this["FloatPropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TimelineLinearColorTrack : UEObject
    {
        public TimelineLinearColorTrack(nint addr) : base(addr) { }
        public TimelineLinearColorTrack() : base(0) { }
        public CurveLinearColor LinearColorCurve { get { return this[nameof(LinearColorCurve)].As<CurveLinearColor>(); } set { this["LinearColorCurve"] = value; } }
        public UEObject InterpFunc { get { return this["InterpFunc"]; } set { this["InterpFunc"] = value; } }
        public string TrackName { get { return this["TrackName"].ToString(); } set { /* String properties are read-only */ } }
        public string LinearColorPropertyName { get { return this["LinearColorPropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class Timeline : UEObject
    {
        public Timeline(nint addr) : base(addr) { }
        public Timeline() : base(0) { }
        public byte LengthMode { get { return this["LengthMode"].GetValue<byte>(); } set { this["LengthMode"].SetValue<byte>(value); } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bReversePlayback { get { return this["bReversePlayback"].Flag; } set { this["bReversePlayback"].Flag = value; } }
        public bool bPlaying { get { return this["bPlaying"].Flag; } set { this["bPlaying"].Flag = value; } }
        public float Length { get { return this["Length"].GetValue<float>(); } set { this["Length"].SetValue<float>(value); } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public float position { get { return this["position"].GetValue<float>(); } set { this["position"].SetValue<float>(value); } }
        public Array<TimelineEventEntry> Events { get { return new Array<TimelineEventEntry>(this["Events"]); } set { this["Events"] = value; } }
        public Array<TimelineVectorTrack> InterpVectors { get { return new Array<TimelineVectorTrack>(this["InterpVectors"]); } set { this["InterpVectors"] = value; } }
        public Array<TimelineFloatTrack> InterpFloats { get { return new Array<TimelineFloatTrack>(this["InterpFloats"]); } set { this["InterpFloats"] = value; } }
        public Array<TimelineLinearColorTrack> InterpLinearColors { get { return new Array<TimelineLinearColorTrack>(this["InterpLinearColors"]); } set { this["InterpLinearColors"] = value; } }
        public UEObject TimelinePostUpdateFunc { get { return this["TimelinePostUpdateFunc"]; } set { this["TimelinePostUpdateFunc"] = value; } }
        public UEObject TimelineFinishedFunc { get { return this["TimelineFinishedFunc"]; } set { this["TimelineFinishedFunc"] = value; } }
        public UEObject PropertySetObject { get { return this["PropertySetObject"]; } set { this["PropertySetObject"] = value; } }
        public string DirectionPropertyName { get { return this["DirectionPropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class StreamingRenderAssetPrimitiveInfo : UEObject
    {
        public StreamingRenderAssetPrimitiveInfo(nint addr) : base(addr) { }
        public StreamingRenderAssetPrimitiveInfo() : base(0) { }
        public StreamableRenderAsset RenderAsset { get { return this[nameof(RenderAsset)].As<StreamableRenderAsset>(); } set { this["RenderAsset"] = value; } }
        public BoxSphereBounds Bounds { get { return this[nameof(Bounds)].As<BoxSphereBounds>(); } set { this["Bounds"] = value; } }
        public float TexelFactor { get { return this["TexelFactor"].GetValue<float>(); } set { this["TexelFactor"].SetValue<float>(value); } }
        public uint PackedRelativeBox { get { return this["PackedRelativeBox"].GetValue<uint>(); } set { this["PackedRelativeBox"].SetValue<uint>(value); } }
        public bool bAllowInvalidTexelFactorWhenUnregistered { get { return this["bAllowInvalidTexelFactorWhenUnregistered"].Flag; } set { this["bAllowInvalidTexelFactorWhenUnregistered"].Flag = value; } }
    }
    public class TextureLODGroup : UEObject
    {
        public TextureLODGroup(nint addr) : base(addr) { }
        public TextureLODGroup() : base(0) { }
        public byte Group { get { return this["Group"].GetValue<byte>(); } set { this["Group"].SetValue<byte>(value); } }
        public int LODBias { get { return this["LODBias"].GetValue<int>(); } set { this["LODBias"].SetValue<int>(value); } }
        public int LODBias_Smaller { get { return this["LODBias_Smaller"].GetValue<int>(); } set { this["LODBias_Smaller"].SetValue<int>(value); } }
        public int LODBias_Smallest { get { return this["LODBias_Smallest"].GetValue<int>(); } set { this["LODBias_Smallest"].SetValue<int>(value); } }
        public int NumStreamedMips { get { return this["NumStreamedMips"].GetValue<int>(); } set { this["NumStreamedMips"].SetValue<int>(value); } }
        public byte MipGenSettings { get { return this["MipGenSettings"].GetValue<byte>(); } set { this["MipGenSettings"].SetValue<byte>(value); } }
        public int MinLODSize { get { return this["MinLODSize"].GetValue<int>(); } set { this["MinLODSize"].SetValue<int>(value); } }
        public int MaxLODSize { get { return this["MaxLODSize"].GetValue<int>(); } set { this["MaxLODSize"].SetValue<int>(value); } }
        public int MaxLODSize_Smaller { get { return this["MaxLODSize_Smaller"].GetValue<int>(); } set { this["MaxLODSize_Smaller"].SetValue<int>(value); } }
        public int MaxLODSize_Smallest { get { return this["MaxLODSize_Smallest"].GetValue<int>(); } set { this["MaxLODSize_Smallest"].SetValue<int>(value); } }
        public int OptionalLODBias { get { return this["OptionalLODBias"].GetValue<int>(); } set { this["OptionalLODBias"].SetValue<int>(value); } }
        public int OptionalMaxLODSize { get { return this["OptionalMaxLODSize"].GetValue<int>(); } set { this["OptionalMaxLODSize"].SetValue<int>(value); } }
        public string MinMagFilter { get { return this["MinMagFilter"].ToString(); } set { /* String properties are read-only */ } }
        public string MipFilter { get { return this["MipFilter"].ToString(); } set { /* String properties are read-only */ } }
        public ETextureMipLoadOptions MipLoadOptions { get { return (ETextureMipLoadOptions)this["MipLoadOptions"].GetValue<int>(); } set { this["MipLoadOptions"].SetValue<int>((int)value); } }
        public bool HighPriorityLoad { get { return this["HighPriorityLoad"].Flag; } set { this["HighPriorityLoad"].Flag = value; } }
        public bool DuplicateNonOptionalMips { get { return this["DuplicateNonOptionalMips"].Flag; } set { this["DuplicateNonOptionalMips"].Flag = value; } }
        public float Downscale { get { return this["Downscale"].GetValue<float>(); } set { this["Downscale"].SetValue<float>(value); } }
        public ETextureDownscaleOptions DownscaleOptions { get { return (ETextureDownscaleOptions)this["DownscaleOptions"].GetValue<int>(); } set { this["DownscaleOptions"].SetValue<int>((int)value); } }
        public int VirtualTextureTileCountBias { get { return this["VirtualTextureTileCountBias"].GetValue<int>(); } set { this["VirtualTextureTileCountBias"].SetValue<int>(value); } }
        public int VirtualTextureTileSizeBias { get { return this["VirtualTextureTileSizeBias"].GetValue<int>(); } set { this["VirtualTextureTileSizeBias"].SetValue<int>(value); } }
        public byte LossyCompressionAmount { get { return this["LossyCompressionAmount"].GetValue<byte>(); } set { this["LossyCompressionAmount"].SetValue<byte>(value); } }
    }
    public class TextureSourceBlock : UEObject
    {
        public TextureSourceBlock(nint addr) : base(addr) { }
        public TextureSourceBlock() : base(0) { }
        public int BlockX { get { return this["BlockX"].GetValue<int>(); } set { this["BlockX"].SetValue<int>(value); } }
        public int BlockY { get { return this["BlockY"].GetValue<int>(); } set { this["BlockY"].SetValue<int>(value); } }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public int NumSlices { get { return this["NumSlices"].GetValue<int>(); } set { this["NumSlices"].SetValue<int>(value); } }
        public int NumMips { get { return this["NumMips"].GetValue<int>(); } set { this["NumMips"].SetValue<int>(value); } }
    }
    public class TextureSource : UEObject
    {
        public TextureSource(nint addr) : base(addr) { }
        public TextureSource() : base(0) { }
    }
    public class TexturePlatformData : UEObject
    {
        public TexturePlatformData(nint addr) : base(addr) { }
        public TexturePlatformData() : base(0) { }
    }
    public class TextureFormatSettings : UEObject
    {
        public TextureFormatSettings(nint addr) : base(addr) { }
        public TextureFormatSettings() : base(0) { }
        public byte CompressionSettings { get { return this["CompressionSettings"].GetValue<byte>(); } set { this["CompressionSettings"].SetValue<byte>(value); } }
        public bool CompressionNoAlpha { get { return this["CompressionNoAlpha"].Flag; } set { this["CompressionNoAlpha"].Flag = value; } }
        public bool CompressionNone { get { return this["CompressionNone"].Flag; } set { this["CompressionNone"].Flag = value; } }
        public bool CompressionYCoCg { get { return this["CompressionYCoCg"].Flag; } set { this["CompressionYCoCg"].Flag = value; } }
        public bool sRGB { get { return this["sRGB"].Flag; } set { this["sRGB"].Flag = value; } }
    }
    public class SubsurfaceProfileStruct : UEObject
    {
        public SubsurfaceProfileStruct(nint addr) : base(addr) { }
        public SubsurfaceProfileStruct() : base(0) { }
        public LinearColor SurfaceAlbedo { get { return this[nameof(SurfaceAlbedo)].As<LinearColor>(); } set { this["SurfaceAlbedo"] = value; } }
        public LinearColor MeanFreePathColor { get { return this[nameof(MeanFreePathColor)].As<LinearColor>(); } set { this["MeanFreePathColor"] = value; } }
        public float MeanFreePathDistance { get { return this["MeanFreePathDistance"].GetValue<float>(); } set { this["MeanFreePathDistance"].SetValue<float>(value); } }
        public float WorldUnitScale { get { return this["WorldUnitScale"].GetValue<float>(); } set { this["WorldUnitScale"].SetValue<float>(value); } }
        public bool bEnableBurley { get { return this["bEnableBurley"].Flag; } set { this["bEnableBurley"].Flag = value; } }
        public float ScatterRadius { get { return this["ScatterRadius"].GetValue<float>(); } set { this["ScatterRadius"].SetValue<float>(value); } }
        public LinearColor SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<LinearColor>(); } set { this["SubsurfaceColor"] = value; } }
        public LinearColor FalloffColor { get { return this[nameof(FalloffColor)].As<LinearColor>(); } set { this["FalloffColor"] = value; } }
        public LinearColor BoundaryColorBleed { get { return this[nameof(BoundaryColorBleed)].As<LinearColor>(); } set { this["BoundaryColorBleed"] = value; } }
        public float ExtinctionScale { get { return this["ExtinctionScale"].GetValue<float>(); } set { this["ExtinctionScale"].SetValue<float>(value); } }
        public float NormalScale { get { return this["NormalScale"].GetValue<float>(); } set { this["NormalScale"].SetValue<float>(value); } }
        public float ScatteringDistribution { get { return this["ScatteringDistribution"].GetValue<float>(); } set { this["ScatteringDistribution"].SetValue<float>(value); } }
        public float IOR { get { return this["IOR"].GetValue<float>(); } set { this["IOR"].SetValue<float>(value); } }
        public float Roughness0 { get { return this["Roughness0"].GetValue<float>(); } set { this["Roughness0"].SetValue<float>(value); } }
        public float Roughness1 { get { return this["Roughness1"].GetValue<float>(); } set { this["Roughness1"].SetValue<float>(value); } }
        public float LobeMix { get { return this["LobeMix"].GetValue<float>(); } set { this["LobeMix"].SetValue<float>(value); } }
        public LinearColor TransmissionTintColor { get { return this[nameof(TransmissionTintColor)].As<LinearColor>(); } set { this["TransmissionTintColor"] = value; } }
    }
    public class EquirectProps : UEObject
    {
        public EquirectProps(nint addr) : base(addr) { }
        public EquirectProps() : base(0) { }
        public Box2D LeftUVRect { get { return this[nameof(LeftUVRect)].As<Box2D>(); } set { this["LeftUVRect"] = value; } }
        public Box2D RightUVRect { get { return this[nameof(RightUVRect)].As<Box2D>(); } set { this["RightUVRect"] = value; } }
        public Vector2D LeftScale { get { return this[nameof(LeftScale)].As<Vector2D>(); } set { this["LeftScale"] = value; } }
        public Vector2D RightScale { get { return this[nameof(RightScale)].As<Vector2D>(); } set { this["RightScale"] = value; } }
        public Vector2D LeftBias { get { return this[nameof(LeftBias)].As<Vector2D>(); } set { this["LeftBias"] = value; } }
        public Vector2D RightBias { get { return this[nameof(RightBias)].As<Vector2D>(); } set { this["RightBias"] = value; } }
    }
    public class StaticSwitchParameter : StaticParameterBase
    {
        public StaticSwitchParameter(nint addr) : base(addr) { }
        public StaticSwitchParameter() : base(0) { }
        public bool Value { get { return this["Value"].Flag; } set { this["Value"].Flag = value; } }
    }
    public class StaticComponentMaskParameter : StaticParameterBase
    {
        public StaticComponentMaskParameter(nint addr) : base(addr) { }
        public StaticComponentMaskParameter() : base(0) { }
        public bool R { get { return this["R"].Flag; } set { this["R"].Flag = value; } }
        public bool G { get { return this["G"].Flag; } set { this["G"].Flag = value; } }
        public bool B { get { return this["B"].Flag; } set { this["B"].Flag = value; } }
        public bool A { get { return this["A"].Flag; } set { this["A"].Flag = value; } }
    }
    public class StaticTerrainLayerWeightParameter : StaticParameterBase
    {
        public StaticTerrainLayerWeightParameter(nint addr) : base(addr) { }
        public StaticTerrainLayerWeightParameter() : base(0) { }
        public int WeightmapIndex { get { return this["WeightmapIndex"].GetValue<int>(); } set { this["WeightmapIndex"].SetValue<int>(value); } }
        public bool bWeightBasedBlend { get { return this["bWeightBasedBlend"].Flag; } set { this["bWeightBasedBlend"].Flag = value; } }
    }
    public class StaticMaterialLayersParameter : StaticParameterBase
    {
        public StaticMaterialLayersParameter(nint addr) : base(addr) { }
        public StaticMaterialLayersParameter() : base(0) { }
        public MaterialLayersFunctions Value { get { return this[nameof(Value)].As<MaterialLayersFunctions>(); } set { this["Value"] = value; } }
    }
    public class StaticParameterBase : UEObject
    {
        public StaticParameterBase(nint addr) : base(addr) { }
        public StaticParameterBase() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public bool bOverride { get { return this["bOverride"].Flag; } set { this["bOverride"].Flag = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class StaticParameterSet : UEObject
    {
        public StaticParameterSet(nint addr) : base(addr) { }
        public StaticParameterSet() : base(0) { }
        public Array<StaticSwitchParameter> StaticSwitchParameters { get { return new Array<StaticSwitchParameter>(this["StaticSwitchParameters"]); } set { this["StaticSwitchParameters"] = value; } }
        public Array<StaticComponentMaskParameter> StaticComponentMaskParameters { get { return new Array<StaticComponentMaskParameter>(this["StaticComponentMaskParameters"]); } set { this["StaticComponentMaskParameters"] = value; } }
        public Array<StaticTerrainLayerWeightParameter> TerrainLayerWeightParameters { get { return new Array<StaticTerrainLayerWeightParameter>(this["TerrainLayerWeightParameters"]); } set { this["TerrainLayerWeightParameters"] = value; } }
        public Array<StaticMaterialLayersParameter> MaterialLayersParameters { get { return new Array<StaticMaterialLayersParameter>(this["MaterialLayersParameters"]); } set { this["MaterialLayersParameters"] = value; } }
    }
    public class StaticMeshComponentLODInfo : UEObject
    {
        public StaticMeshComponentLODInfo(nint addr) : base(addr) { }
        public StaticMeshComponentLODInfo() : base(0) { }
    }
    public class PaintedVertex : UEObject
    {
        public PaintedVertex(nint addr) : base(addr) { }
        public PaintedVertex() : base(0) { }
        public Vector position { get { return this[nameof(position)].As<Vector>(); } set { this["position"] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Vector4 Normal { get { return this[nameof(Normal)].As<Vector4>(); } set { this["Normal"] = value; } }
    }
    public class StaticMeshVertexColorLODData : UEObject
    {
        public StaticMeshVertexColorLODData(nint addr) : base(addr) { }
        public StaticMeshVertexColorLODData() : base(0) { }
        public Array<PaintedVertex> PaintedVertices { get { return new Array<PaintedVertex>(this["PaintedVertices"]); } set { this["PaintedVertices"] = value; } }
        public Array<Color> VertexBufferColors { get { return new Array<Color>(this["VertexBufferColors"]); } set { this["VertexBufferColors"] = value; } }
        public uint LODIndex { get { return this["LODIndex"].GetValue<uint>(); } set { this["LODIndex"].SetValue<uint>(value); } }
    }
    public class StreamingTextureBuildInfo : UEObject
    {
        public StreamingTextureBuildInfo(nint addr) : base(addr) { }
        public StreamingTextureBuildInfo() : base(0) { }
        public uint PackedRelativeBox { get { return this["PackedRelativeBox"].GetValue<uint>(); } set { this["PackedRelativeBox"].SetValue<uint>(value); } }
        public int TextureLevelIndex { get { return this["TextureLevelIndex"].GetValue<int>(); } set { this["TextureLevelIndex"].SetValue<int>(value); } }
        public float TexelFactor { get { return this["TexelFactor"].GetValue<float>(); } set { this["TexelFactor"].SetValue<float>(value); } }
    }
    public class StaticMeshComponentInstanceData : PrimitiveComponentInstanceData
    {
        public StaticMeshComponentInstanceData(nint addr) : base(addr) { }
        public StaticMeshComponentInstanceData() : base(0) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public Array<StaticMeshVertexColorLODData> VertexColorLODs { get { return new Array<StaticMeshVertexColorLODData>(this["VertexColorLODs"]); } set { this["VertexColorLODs"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> CachedStaticLighting { get { return new Array<SDK.Script.CoreUObject.Guid>(this["CachedStaticLighting"]); } set { this["CachedStaticLighting"] = value; } }
        public Array<StreamingTextureBuildInfo> StreamingTextureData { get { return new Array<StreamingTextureBuildInfo>(this["StreamingTextureData"]); } set { this["StreamingTextureData"] = value; } }
    }
    public class StaticMeshOptimizationSettings : UEObject
    {
        public StaticMeshOptimizationSettings(nint addr) : base(addr) { }
        public StaticMeshOptimizationSettings() : base(0) { }
        public byte ReductionMethod { get { return this["ReductionMethod"].GetValue<byte>(); } set { this["ReductionMethod"].SetValue<byte>(value); } }
        public float NumOfTrianglesPercentage { get { return this["NumOfTrianglesPercentage"].GetValue<float>(); } set { this["NumOfTrianglesPercentage"].SetValue<float>(value); } }
        public float MaxDeviationPercentage { get { return this["MaxDeviationPercentage"].GetValue<float>(); } set { this["MaxDeviationPercentage"].SetValue<float>(value); } }
        public float WeldingThreshold { get { return this["WeldingThreshold"].GetValue<float>(); } set { this["WeldingThreshold"].SetValue<float>(value); } }
        public bool bRecalcNormals { get { return this["bRecalcNormals"].Flag; } set { this["bRecalcNormals"].Flag = value; } }
        public float NormalsThreshold { get { return this["NormalsThreshold"].GetValue<float>(); } set { this["NormalsThreshold"].SetValue<float>(value); } }
        public byte SilhouetteImportance { get { return this["SilhouetteImportance"].GetValue<byte>(); } set { this["SilhouetteImportance"].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this["TextureImportance"].GetValue<byte>(); } set { this["TextureImportance"].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this["ShadingImportance"].GetValue<byte>(); } set { this["ShadingImportance"].SetValue<byte>(value); } }
    }
    public class StaticMeshSourceModel : UEObject
    {
        public StaticMeshSourceModel(nint addr) : base(addr) { }
        public StaticMeshSourceModel() : base(0) { }
        public MeshBuildSettings BuildSettings { get { return this[nameof(BuildSettings)].As<MeshBuildSettings>(); } set { this["BuildSettings"] = value; } }
        public MeshReductionSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<MeshReductionSettings>(); } set { this["ReductionSettings"] = value; } }
        public float LODDistance { get { return this["LODDistance"].GetValue<float>(); } set { this["LODDistance"].SetValue<float>(value); } }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public string SourceImportFilename { get { return this["SourceImportFilename"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MeshSectionInfo : UEObject
    {
        public MeshSectionInfo(nint addr) : base(addr) { }
        public MeshSectionInfo() : base(0) { }
        public int MaterialIndex { get { return this["MaterialIndex"].GetValue<int>(); } set { this["MaterialIndex"].SetValue<int>(value); } }
        public bool bEnableCollision { get { return this["bEnableCollision"].Flag; } set { this["bEnableCollision"].Flag = value; } }
        public bool bCastShadow { get { return this["bCastShadow"].Flag; } set { this["bCastShadow"].Flag = value; } }
        public bool bVisibleInRayTracing { get { return this["bVisibleInRayTracing"].Flag; } set { this["bVisibleInRayTracing"].Flag = value; } }
        public bool bForceOpaque { get { return this["bForceOpaque"].Flag; } set { this["bForceOpaque"].Flag = value; } }
    }
    public class MeshSectionInfoMap : UEObject
    {
        public MeshSectionInfoMap(nint addr) : base(addr) { }
        public MeshSectionInfoMap() : base(0) { }
        public UEObject Map { get { return this["Map"]; } set { this["Map"] = value; } }
    }
    public class AssetEditorOrbitCameraPosition : UEObject
    {
        public AssetEditorOrbitCameraPosition(nint addr) : base(addr) { }
        public AssetEditorOrbitCameraPosition() : base(0) { }
        public bool bIsSet { get { return this["bIsSet"].Flag; } set { this["bIsSet"].Flag = value; } }
        public Vector CamOrbitPoint { get { return this[nameof(CamOrbitPoint)].As<Vector>(); } set { this["CamOrbitPoint"] = value; } }
        public Vector CamOrbitZoom { get { return this[nameof(CamOrbitZoom)].As<Vector>(); } set { this["CamOrbitZoom"] = value; } }
        public Rotator CamOrbitRotation { get { return this[nameof(CamOrbitRotation)].As<Rotator>(); } set { this["CamOrbitRotation"] = value; } }
    }
    public class StaticMaterial : UEObject
    {
        public StaticMaterial(nint addr) : base(addr) { }
        public StaticMaterial() : base(0) { }
        public MaterialInterface MaterialInterface { get { return this[nameof(MaterialInterface)].As<MaterialInterface>(); } set { this["MaterialInterface"] = value; } }
        public string MaterialSlotName { get { return this["MaterialSlotName"].ToString(); } set { /* String properties are read-only */ } }
        public string ImportedMaterialSlotName { get { return this["ImportedMaterialSlotName"].ToString(); } set { /* String properties are read-only */ } }
        public MeshUVChannelInfo UVChannelData { get { return this[nameof(UVChannelData)].As<MeshUVChannelInfo>(); } set { this["UVChannelData"] = value; } }
    }
    public class MaterialRemapIndex : UEObject
    {
        public MaterialRemapIndex(nint addr) : base(addr) { }
        public MaterialRemapIndex() : base(0) { }
        public uint ImportVersionKey { get { return this["ImportVersionKey"].GetValue<uint>(); } set { this["ImportVersionKey"].SetValue<uint>(value); } }
        public List<int> MaterialRemap { get { return this["MaterialRemap"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class SplineMeshParams : UEObject
    {
        public SplineMeshParams(nint addr) : base(addr) { }
        public SplineMeshParams() : base(0) { }
        public Vector StartPos { get { return this[nameof(StartPos)].As<Vector>(); } set { this["StartPos"] = value; } }
        public Vector StartTangent { get { return this[nameof(StartTangent)].As<Vector>(); } set { this["StartTangent"] = value; } }
        public Vector2D StartScale { get { return this[nameof(StartScale)].As<Vector2D>(); } set { this["StartScale"] = value; } }
        public float StartRoll { get { return this["StartRoll"].GetValue<float>(); } set { this["StartRoll"].SetValue<float>(value); } }
        public Vector2D StartOffset { get { return this[nameof(StartOffset)].As<Vector2D>(); } set { this["StartOffset"] = value; } }
        public Vector EndPos { get { return this[nameof(EndPos)].As<Vector>(); } set { this["EndPos"] = value; } }
        public Vector2D EndScale { get { return this[nameof(EndScale)].As<Vector2D>(); } set { this["EndScale"] = value; } }
        public Vector EndTangent { get { return this[nameof(EndTangent)].As<Vector>(); } set { this["EndTangent"] = value; } }
        public float EndRoll { get { return this["EndRoll"].GetValue<float>(); } set { this["EndRoll"].SetValue<float>(value); } }
        public Vector2D EndOffset { get { return this[nameof(EndOffset)].As<Vector2D>(); } set { this["EndOffset"] = value; } }
    }
    public class SplineMeshInstanceData : SceneComponentInstanceData
    {
        public SplineMeshInstanceData(nint addr) : base(addr) { }
        public SplineMeshInstanceData() : base(0) { }
        public Vector StartPos { get { return this[nameof(StartPos)].As<Vector>(); } set { this["StartPos"] = value; } }
        public Vector EndPos { get { return this[nameof(EndPos)].As<Vector>(); } set { this["EndPos"] = value; } }
        public Vector StartTangent { get { return this[nameof(StartTangent)].As<Vector>(); } set { this["StartTangent"] = value; } }
        public Vector EndTangent { get { return this[nameof(EndTangent)].As<Vector>(); } set { this["EndTangent"] = value; } }
    }
    public class SplinePoint : UEObject
    {
        public SplinePoint(nint addr) : base(addr) { }
        public SplinePoint() : base(0) { }
        public float InputKey { get { return this["InputKey"].GetValue<float>(); } set { this["InputKey"].SetValue<float>(value); } }
        public Vector position { get { return this[nameof(position)].As<Vector>(); } set { this["position"] = value; } }
        public Vector ArriveTangent { get { return this[nameof(ArriveTangent)].As<Vector>(); } set { this["ArriveTangent"] = value; } }
        public Vector LeaveTangent { get { return this[nameof(LeaveTangent)].As<Vector>(); } set { this["LeaveTangent"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public byte Type { get { return this["Type"].GetValue<byte>(); } set { this["Type"].SetValue<byte>(value); } }
    }
    public class SplineCurves : UEObject
    {
        public SplineCurves(nint addr) : base(addr) { }
        public SplineCurves() : base(0) { }
        public InterpCurveVector position { get { return this[nameof(position)].As<InterpCurveVector>(); } set { this["position"] = value; } }
        public InterpCurveQuat Rotation { get { return this[nameof(Rotation)].As<InterpCurveQuat>(); } set { this["Rotation"] = value; } }
        public InterpCurveVector Scale { get { return this[nameof(Scale)].As<InterpCurveVector>(); } set { this["Scale"] = value; } }
        public InterpCurveFloat ReparamTable { get { return this[nameof(ReparamTable)].As<InterpCurveFloat>(); } set { this["ReparamTable"] = value; } }
        public SplineMetadata MetaData { get { return this[nameof(MetaData)].As<SplineMetadata>(); } set { this["MetaData"] = value; } }
        public uint Version { get { return this["Version"].GetValue<uint>(); } set { this["Version"].SetValue<uint>(value); } }
    }
    public class SplineInstanceData : SceneComponentInstanceData
    {
        public SplineInstanceData(nint addr) : base(addr) { }
        public SplineInstanceData() : base(0) { }
        public bool bSplineHasBeenEdited { get { return this["bSplineHasBeenEdited"].Flag; } set { this["bSplineHasBeenEdited"].Flag = value; } }
        public SplineCurves SplineCurves { get { return this[nameof(SplineCurves)].As<SplineCurves>(); } set { this["SplineCurves"] = value; } }
        public SplineCurves SplineCurvesPreUCS { get { return this[nameof(SplineCurvesPreUCS)].As<SplineCurves>(); } set { this["SplineCurvesPreUCS"] = value; } }
    }
    public class StreamedAudioPlatformData : UEObject
    {
        public StreamedAudioPlatformData(nint addr) : base(addr) { }
        public StreamedAudioPlatformData() : base(0) { }
    }
    public class SoundWaveSpectralData : UEObject
    {
        public SoundWaveSpectralData(nint addr) : base(addr) { }
        public SoundWaveSpectralData() : base(0) { }
        public float FrequencyHz { get { return this["FrequencyHz"].GetValue<float>(); } set { this["FrequencyHz"].SetValue<float>(value); } }
        public float Magnitude { get { return this["Magnitude"].GetValue<float>(); } set { this["Magnitude"].SetValue<float>(value); } }
        public float NormalizedMagnitude { get { return this["NormalizedMagnitude"].GetValue<float>(); } set { this["NormalizedMagnitude"].SetValue<float>(value); } }
    }
    public class SoundWaveSpectralDataPerSound : UEObject
    {
        public SoundWaveSpectralDataPerSound(nint addr) : base(addr) { }
        public SoundWaveSpectralDataPerSound() : base(0) { }
        public Array<SoundWaveSpectralData> SpectralData { get { return new Array<SoundWaveSpectralData>(this["SpectralData"]); } set { this["SpectralData"] = value; } }
        public float PlaybackTime { get { return this["PlaybackTime"].GetValue<float>(); } set { this["PlaybackTime"].SetValue<float>(value); } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
    }
    public class SoundWaveEnvelopeDataPerSound : UEObject
    {
        public SoundWaveEnvelopeDataPerSound(nint addr) : base(addr) { }
        public SoundWaveEnvelopeDataPerSound() : base(0) { }
        public float Envelope { get { return this["Envelope"].GetValue<float>(); } set { this["Envelope"].SetValue<float>(value); } }
        public float PlaybackTime { get { return this["PlaybackTime"].GetValue<float>(); } set { this["PlaybackTime"].SetValue<float>(value); } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
    }
    public class SoundWaveSpectralDataEntry : UEObject
    {
        public SoundWaveSpectralDataEntry(nint addr) : base(addr) { }
        public SoundWaveSpectralDataEntry() : base(0) { }
        public float Magnitude { get { return this["Magnitude"].GetValue<float>(); } set { this["Magnitude"].SetValue<float>(value); } }
        public float NormalizedMagnitude { get { return this["NormalizedMagnitude"].GetValue<float>(); } set { this["NormalizedMagnitude"].SetValue<float>(value); } }
    }
    public class SoundWaveSpectralTimeData : UEObject
    {
        public SoundWaveSpectralTimeData(nint addr) : base(addr) { }
        public SoundWaveSpectralTimeData() : base(0) { }
        public Array<SoundWaveSpectralDataEntry> Data { get { return new Array<SoundWaveSpectralDataEntry>(this["Data"]); } set { this["Data"] = value; } }
        public float TimeSec { get { return this["TimeSec"].GetValue<float>(); } set { this["TimeSec"].SetValue<float>(value); } }
    }
    public class SoundWaveEnvelopeTimeData : UEObject
    {
        public SoundWaveEnvelopeTimeData(nint addr) : base(addr) { }
        public SoundWaveEnvelopeTimeData() : base(0) { }
        public float Amplitude { get { return this["Amplitude"].GetValue<float>(); } set { this["Amplitude"].SetValue<float>(value); } }
        public float TimeSec { get { return this["TimeSec"].GetValue<float>(); } set { this["TimeSec"].SetValue<float>(value); } }
    }
    public class SoundSubmixSpectralAnalysisBandSettings : UEObject
    {
        public SoundSubmixSpectralAnalysisBandSettings(nint addr) : base(addr) { }
        public SoundSubmixSpectralAnalysisBandSettings() : base(0) { }
        public float BandFrequency { get { return this["BandFrequency"].GetValue<float>(); } set { this["BandFrequency"].SetValue<float>(value); } }
        public int AttackTimeMsec { get { return this["AttackTimeMsec"].GetValue<int>(); } set { this["AttackTimeMsec"].SetValue<int>(value); } }
        public int ReleaseTimeMsec { get { return this["ReleaseTimeMsec"].GetValue<int>(); } set { this["ReleaseTimeMsec"].SetValue<int>(value); } }
        public float QFactor { get { return this["QFactor"].GetValue<float>(); } set { this["QFactor"].SetValue<float>(value); } }
    }
    public class SoundSourceBusSendInfo : UEObject
    {
        public SoundSourceBusSendInfo(nint addr) : base(addr) { }
        public SoundSourceBusSendInfo() : base(0) { }
        public ESourceBusSendLevelControlMethod SourceBusSendLevelControlMethod { get { return (ESourceBusSendLevelControlMethod)this["SourceBusSendLevelControlMethod"].GetValue<int>(); } set { this["SourceBusSendLevelControlMethod"].SetValue<int>((int)value); } }
        public SoundSourceBus SoundSourceBus { get { return this[nameof(SoundSourceBus)].As<SoundSourceBus>(); } set { this["SoundSourceBus"] = value; } }
        public AudioBus AudioBus { get { return this[nameof(AudioBus)].As<AudioBus>(); } set { this["AudioBus"] = value; } }
        public float SendLevel { get { return this["SendLevel"].GetValue<float>(); } set { this["SendLevel"].SetValue<float>(value); } }
        public float MinSendLevel { get { return this["MinSendLevel"].GetValue<float>(); } set { this["MinSendLevel"].SetValue<float>(value); } }
        public float MaxSendLevel { get { return this["MaxSendLevel"].GetValue<float>(); } set { this["MaxSendLevel"].SetValue<float>(value); } }
        public float MinSendDistance { get { return this["MinSendDistance"].GetValue<float>(); } set { this["MinSendDistance"].SetValue<float>(value); } }
        public float MaxSendDistance { get { return this["MaxSendDistance"].GetValue<float>(); } set { this["MaxSendDistance"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSendLevelCurve { get { return this[nameof(CustomSendLevelCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSendLevelCurve"] = value; } }
    }
    public class ModulatorContinuousParams : UEObject
    {
        public ModulatorContinuousParams(nint addr) : base(addr) { }
        public ModulatorContinuousParams() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public float Default { get { return this["Default"].GetValue<float>(); } set { this["Default"].SetValue<float>(value); } }
        public float MinInput { get { return this["MinInput"].GetValue<float>(); } set { this["MinInput"].SetValue<float>(value); } }
        public float MaxInput { get { return this["MaxInput"].GetValue<float>(); } set { this["MaxInput"].SetValue<float>(value); } }
        public float MinOutput { get { return this["MinOutput"].GetValue<float>(); } set { this["MinOutput"].SetValue<float>(value); } }
        public float MaxOutput { get { return this["MaxOutput"].GetValue<float>(); } set { this["MaxOutput"].SetValue<float>(value); } }
        public byte ParamMode { get { return this["ParamMode"].GetValue<byte>(); } set { this["ParamMode"].SetValue<byte>(value); } }
    }
    public class DistanceDatum : UEObject
    {
        public DistanceDatum(nint addr) : base(addr) { }
        public DistanceDatum() : base(0) { }
        public float FadeInDistanceStart { get { return this["FadeInDistanceStart"].GetValue<float>(); } set { this["FadeInDistanceStart"].SetValue<float>(value); } }
        public float FadeInDistanceEnd { get { return this["FadeInDistanceEnd"].GetValue<float>(); } set { this["FadeInDistanceEnd"].SetValue<float>(value); } }
        public float FadeOutDistanceStart { get { return this["FadeOutDistanceStart"].GetValue<float>(); } set { this["FadeOutDistanceStart"].SetValue<float>(value); } }
        public float FadeOutDistanceEnd { get { return this["FadeOutDistanceEnd"].GetValue<float>(); } set { this["FadeOutDistanceEnd"].SetValue<float>(value); } }
        public float Volume { get { return this["Volume"].GetValue<float>(); } set { this["Volume"].SetValue<float>(value); } }
        public float MinVolume { get { return this["MinVolume"].GetValue<float>(); } set { this["MinVolume"].SetValue<float>(value); } }
    }
    public class SoundModulationDefaultRoutingSettings : SoundModulationDefaultSettings
    {
        public SoundModulationDefaultRoutingSettings(nint addr) : base(addr) { }
        public SoundModulationDefaultRoutingSettings() : base(0) { }
        public EModulationRouting VolumeRouting { get { return (EModulationRouting)this["VolumeRouting"].GetValue<int>(); } set { this["VolumeRouting"].SetValue<int>((int)value); } }
        public EModulationRouting PitchRouting { get { return (EModulationRouting)this["PitchRouting"].GetValue<int>(); } set { this["PitchRouting"].SetValue<int>((int)value); } }
        public EModulationRouting HighpassRouting { get { return (EModulationRouting)this["HighpassRouting"].GetValue<int>(); } set { this["HighpassRouting"].SetValue<int>((int)value); } }
        public EModulationRouting LowpassRouting { get { return (EModulationRouting)this["LowpassRouting"].GetValue<int>(); } set { this["LowpassRouting"].SetValue<int>((int)value); } }
    }
    public class AudioEQEffect : AudioEffectParameters
    {
        public AudioEQEffect(nint addr) : base(addr) { }
        public AudioEQEffect() : base(0) { }
        public float FrequencyCenter0 { get { return this["FrequencyCenter0"].GetValue<float>(); } set { this["FrequencyCenter0"].SetValue<float>(value); } }
        public float Gain0 { get { return this["Gain0"].GetValue<float>(); } set { this["Gain0"].SetValue<float>(value); } }
        public float Bandwidth0 { get { return this["Bandwidth0"].GetValue<float>(); } set { this["Bandwidth0"].SetValue<float>(value); } }
        public float FrequencyCenter1 { get { return this["FrequencyCenter1"].GetValue<float>(); } set { this["FrequencyCenter1"].SetValue<float>(value); } }
        public float Gain1 { get { return this["Gain1"].GetValue<float>(); } set { this["Gain1"].SetValue<float>(value); } }
        public float Bandwidth1 { get { return this["Bandwidth1"].GetValue<float>(); } set { this["Bandwidth1"].SetValue<float>(value); } }
        public float FrequencyCenter2 { get { return this["FrequencyCenter2"].GetValue<float>(); } set { this["FrequencyCenter2"].SetValue<float>(value); } }
        public float Gain2 { get { return this["Gain2"].GetValue<float>(); } set { this["Gain2"].SetValue<float>(value); } }
        public float Bandwidth2 { get { return this["Bandwidth2"].GetValue<float>(); } set { this["Bandwidth2"].SetValue<float>(value); } }
        public float FrequencyCenter3 { get { return this["FrequencyCenter3"].GetValue<float>(); } set { this["FrequencyCenter3"].SetValue<float>(value); } }
        public float Gain3 { get { return this["Gain3"].GetValue<float>(); } set { this["Gain3"].SetValue<float>(value); } }
        public float Bandwidth3 { get { return this["Bandwidth3"].GetValue<float>(); } set { this["Bandwidth3"].SetValue<float>(value); } }
    }
    public class SoundClassAdjuster : UEObject
    {
        public SoundClassAdjuster(nint addr) : base(addr) { }
        public SoundClassAdjuster() : base(0) { }
        public SoundClass SoundClassObject { get { return this[nameof(SoundClassObject)].As<SoundClass>(); } set { this["SoundClassObject"] = value; } }
        public float VolumeAdjuster { get { return this["VolumeAdjuster"].GetValue<float>(); } set { this["VolumeAdjuster"].SetValue<float>(value); } }
        public float PitchAdjuster { get { return this["PitchAdjuster"].GetValue<float>(); } set { this["PitchAdjuster"].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this["LowPassFilterFrequency"].GetValue<float>(); } set { this["LowPassFilterFrequency"].SetValue<float>(value); } }
        public bool bApplyToChildren { get { return this["bApplyToChildren"].Flag; } set { this["bApplyToChildren"].Flag = value; } }
        public float VoiceCenterChannelVolumeAdjuster { get { return this["VoiceCenterChannelVolumeAdjuster"].GetValue<float>(); } set { this["VoiceCenterChannelVolumeAdjuster"].SetValue<float>(value); } }
    }
    public class SoundGroup : UEObject
    {
        public SoundGroup(nint addr) : base(addr) { }
        public SoundGroup() : base(0) { }
        public byte SoundGroup_Property { get { return this["SoundGroup"].GetValue<byte>(); } set { this["SoundGroup"].SetValue<byte>(value); } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bAlwaysDecompressOnLoad { get { return this["bAlwaysDecompressOnLoad"].Flag; } set { this["bAlwaysDecompressOnLoad"].Flag = value; } }
        public float DecompressedDuration { get { return this["DecompressedDuration"].GetValue<float>(); } set { this["DecompressedDuration"].SetValue<float>(value); } }
    }
    public class SourceEffectChainEntry : UEObject
    {
        public SourceEffectChainEntry(nint addr) : base(addr) { }
        public SourceEffectChainEntry() : base(0) { }
        public SoundEffectSourcePreset Preset { get { return this[nameof(Preset)].As<SoundEffectSourcePreset>(); } set { this["Preset"] = value; } }
        public bool bBypass { get { return this["bBypass"].Flag; } set { this["bBypass"].Flag = value; } }
    }
    public class SoundNodeEditorData : UEObject
    {
        public SoundNodeEditorData(nint addr) : base(addr) { }
        public SoundNodeEditorData() : base(0) { }
    }
    public class SoundConcurrencySettings : UEObject
    {
        public SoundConcurrencySettings(nint addr) : base(addr) { }
        public SoundConcurrencySettings() : base(0) { }
        public int MaxCount { get { return this["MaxCount"].GetValue<int>(); } set { this["MaxCount"].SetValue<int>(value); } }
        public bool bLimitToOwner { get { return this["bLimitToOwner"].Flag; } set { this["bLimitToOwner"].Flag = value; } }
        public byte ResolutionRule { get { return this["ResolutionRule"].GetValue<byte>(); } set { this["ResolutionRule"].SetValue<byte>(value); } }
        public float RetriggerTime { get { return this["RetriggerTime"].GetValue<float>(); } set { this["RetriggerTime"].SetValue<float>(value); } }
        public float VolumeScale { get { return this["VolumeScale"].GetValue<float>(); } set { this["VolumeScale"].SetValue<float>(value); } }
        public EConcurrencyVolumeScaleMode VolumeScaleMode { get { return (EConcurrencyVolumeScaleMode)this["VolumeScaleMode"].GetValue<int>(); } set { this["VolumeScaleMode"].SetValue<int>((int)value); } }
        public float VolumeScaleAttackTime { get { return this["VolumeScaleAttackTime"].GetValue<float>(); } set { this["VolumeScaleAttackTime"].SetValue<float>(value); } }
        public bool bVolumeScaleCanRelease { get { return this["bVolumeScaleCanRelease"].Flag; } set { this["bVolumeScaleCanRelease"].Flag = value; } }
        public float VolumeScaleReleaseTime { get { return this["VolumeScaleReleaseTime"].GetValue<float>(); } set { this["VolumeScaleReleaseTime"].SetValue<float>(value); } }
        public float VoiceStealReleaseTime { get { return this["VoiceStealReleaseTime"].GetValue<float>(); } set { this["VoiceStealReleaseTime"].SetValue<float>(value); } }
    }
    public class SoundClassEditorData : UEObject
    {
        public SoundClassEditorData(nint addr) : base(addr) { }
        public SoundClassEditorData() : base(0) { }
    }
    public class SoundModulationDefaultSettings : UEObject
    {
        public SoundModulationDefaultSettings(nint addr) : base(addr) { }
        public SoundModulationDefaultSettings() : base(0) { }
        public SoundModulationDestinationSettings VolumeModulationDestination { get { return this[nameof(VolumeModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["VolumeModulationDestination"] = value; } }
        public SoundModulationDestinationSettings PitchModulationDestination { get { return this[nameof(PitchModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["PitchModulationDestination"] = value; } }
        public SoundModulationDestinationSettings HighpassModulationDestination { get { return this[nameof(HighpassModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["HighpassModulationDestination"] = value; } }
        public SoundModulationDestinationSettings LowpassModulationDestination { get { return this[nameof(LowpassModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["LowpassModulationDestination"] = value; } }
    }
    public class SoundClassProperties : UEObject
    {
        public SoundClassProperties(nint addr) : base(addr) { }
        public SoundClassProperties() : base(0) { }
        public float Volume { get { return this["Volume"].GetValue<float>(); } set { this["Volume"].SetValue<float>(value); } }
        public float Pitch { get { return this["Pitch"].GetValue<float>(); } set { this["Pitch"].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this["LowPassFilterFrequency"].GetValue<float>(); } set { this["LowPassFilterFrequency"].SetValue<float>(value); } }
        public float AttenuationDistanceScale { get { return this["AttenuationDistanceScale"].GetValue<float>(); } set { this["AttenuationDistanceScale"].SetValue<float>(value); } }
        public float LFEBleed { get { return this["LFEBleed"].GetValue<float>(); } set { this["LFEBleed"].SetValue<float>(value); } }
        public float VoiceCenterChannelVolume { get { return this["VoiceCenterChannelVolume"].GetValue<float>(); } set { this["VoiceCenterChannelVolume"].SetValue<float>(value); } }
        public float RadioFilterVolume { get { return this["RadioFilterVolume"].GetValue<float>(); } set { this["RadioFilterVolume"].SetValue<float>(value); } }
        public float RadioFilterVolumeThreshold { get { return this["RadioFilterVolumeThreshold"].GetValue<float>(); } set { this["RadioFilterVolumeThreshold"].SetValue<float>(value); } }
        public bool bApplyEffects { get { return this["bApplyEffects"].Flag; } set { this["bApplyEffects"].Flag = value; } }
        public bool bAlwaysPlay { get { return this["bAlwaysPlay"].Flag; } set { this["bAlwaysPlay"].Flag = value; } }
        public bool bIsUISound { get { return this["bIsUISound"].Flag; } set { this["bIsUISound"].Flag = value; } }
        public bool bIsMusic { get { return this["bIsMusic"].Flag; } set { this["bIsMusic"].Flag = value; } }
        public bool bCenterChannelOnly { get { return this["bCenterChannelOnly"].Flag; } set { this["bCenterChannelOnly"].Flag = value; } }
        public bool bApplyAmbientVolumes { get { return this["bApplyAmbientVolumes"].Flag; } set { this["bApplyAmbientVolumes"].Flag = value; } }
        public bool bReverb { get { return this["bReverb"].Flag; } set { this["bReverb"].Flag = value; } }
        public float Default2DReverbSendAmount { get { return this["Default2DReverbSendAmount"].GetValue<float>(); } set { this["Default2DReverbSendAmount"].SetValue<float>(value); } }
        public SoundModulationDefaultSettings ModulationSettings { get { return this[nameof(ModulationSettings)].As<SoundModulationDefaultSettings>(); } set { this["ModulationSettings"] = value; } }
        public byte OutputTarget { get { return this["OutputTarget"].GetValue<byte>(); } set { this["OutputTarget"].SetValue<byte>(value); } }
        public ESoundWaveLoadingBehavior LoadingBehavior { get { return (ESoundWaveLoadingBehavior)this["LoadingBehavior"].GetValue<int>(); } set { this["LoadingBehavior"].SetValue<int>((int)value); } }
        public SoundSubmix DefaultSubmix { get { return this[nameof(DefaultSubmix)].As<SoundSubmix>(); } set { this["DefaultSubmix"] = value; } }
    }
    public class PassiveSoundMixModifier : UEObject
    {
        public PassiveSoundMixModifier(nint addr) : base(addr) { }
        public PassiveSoundMixModifier() : base(0) { }
        public SoundMix SoundMix { get { return this[nameof(SoundMix)].As<SoundMix>(); } set { this["SoundMix"] = value; } }
        public float MinVolumeThreshold { get { return this["MinVolumeThreshold"].GetValue<float>(); } set { this["MinVolumeThreshold"].SetValue<float>(value); } }
        public float MaxVolumeThreshold { get { return this["MaxVolumeThreshold"].GetValue<float>(); } set { this["MaxVolumeThreshold"].SetValue<float>(value); } }
    }
    public class AttenuationSubmixSendSettings : UEObject
    {
        public AttenuationSubmixSendSettings(nint addr) : base(addr) { }
        public AttenuationSubmixSendSettings() : base(0) { }
        public SoundSubmixBase Submix { get { return this[nameof(Submix)].As<SoundSubmixBase>(); } set { this["Submix"] = value; } }
        public ESubmixSendMethod SubmixSendMethod { get { return (ESubmixSendMethod)this["SubmixSendMethod"].GetValue<int>(); } set { this["SubmixSendMethod"].SetValue<int>((int)value); } }
        public float SubmixSendLevelMin { get { return this["SubmixSendLevelMin"].GetValue<float>(); } set { this["SubmixSendLevelMin"].SetValue<float>(value); } }
        public float SubmixSendLevelMax { get { return this["SubmixSendLevelMax"].GetValue<float>(); } set { this["SubmixSendLevelMax"].SetValue<float>(value); } }
        public float SubmixSendDistanceMin { get { return this["SubmixSendDistanceMin"].GetValue<float>(); } set { this["SubmixSendDistanceMin"].SetValue<float>(value); } }
        public float SubmixSendDistanceMax { get { return this["SubmixSendDistanceMax"].GetValue<float>(); } set { this["SubmixSendDistanceMax"].SetValue<float>(value); } }
        public float ManualSubmixSendLevel { get { return this["ManualSubmixSendLevel"].GetValue<float>(); } set { this["ManualSubmixSendLevel"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSubmixSendCurve { get { return this[nameof(CustomSubmixSendCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSubmixSendCurve"] = value; } }
    }
    public class SoundAttenuationPluginSettings : UEObject
    {
        public SoundAttenuationPluginSettings(nint addr) : base(addr) { }
        public SoundAttenuationPluginSettings() : base(0) { }
        public Array<SpatializationPluginSourceSettingsBase> SpatializationPluginSettingsArray { get { return new Array<SpatializationPluginSourceSettingsBase>(this["SpatializationPluginSettingsArray"]); } set { this["SpatializationPluginSettingsArray"] = value; } }
        public Array<OcclusionPluginSourceSettingsBase> OcclusionPluginSettingsArray { get { return new Array<OcclusionPluginSourceSettingsBase>(this["OcclusionPluginSettingsArray"]); } set { this["OcclusionPluginSettingsArray"] = value; } }
        public Array<ReverbPluginSourceSettingsBase> ReverbPluginSettingsArray { get { return new Array<ReverbPluginSourceSettingsBase>(this["ReverbPluginSettingsArray"]); } set { this["ReverbPluginSettingsArray"] = value; } }
    }
    public class SoundAttenuationSettings : BaseAttenuationSettings
    {
        public SoundAttenuationSettings(nint addr) : base(addr) { }
        public SoundAttenuationSettings() : base(0) { }
        public bool bAttenuate { get { return this["bAttenuate"].Flag; } set { this["bAttenuate"].Flag = value; } }
        public bool bAttenuateWithPortals { get { return this["bAttenuateWithPortals"].Flag; } set { this["bAttenuateWithPortals"].Flag = value; } }
        public bool bSpatialize { get { return this["bSpatialize"].Flag; } set { this["bSpatialize"].Flag = value; } }
        public bool bAttenuateWithLPF { get { return this["bAttenuateWithLPF"].Flag; } set { this["bAttenuateWithLPF"].Flag = value; } }
        public bool bEnableListenerFocus { get { return this["bEnableListenerFocus"].Flag; } set { this["bEnableListenerFocus"].Flag = value; } }
        public bool bEnableFocusInterpolation { get { return this["bEnableFocusInterpolation"].Flag; } set { this["bEnableFocusInterpolation"].Flag = value; } }
        public bool bEnableOcclusion { get { return this["bEnableOcclusion"].Flag; } set { this["bEnableOcclusion"].Flag = value; } }
        public bool bUseComplexCollisionForOcclusion { get { return this["bUseComplexCollisionForOcclusion"].Flag; } set { this["bUseComplexCollisionForOcclusion"].Flag = value; } }
        public bool bEnableReverbSend { get { return this["bEnableReverbSend"].Flag; } set { this["bEnableReverbSend"].Flag = value; } }
        public bool bEnablePriorityAttenuation { get { return this["bEnablePriorityAttenuation"].Flag; } set { this["bEnablePriorityAttenuation"].Flag = value; } }
        public bool bApplyNormalizationToStereoSounds { get { return this["bApplyNormalizationToStereoSounds"].Flag; } set { this["bApplyNormalizationToStereoSounds"].Flag = value; } }
        public bool bEnableLogFrequencyScaling { get { return this["bEnableLogFrequencyScaling"].Flag; } set { this["bEnableLogFrequencyScaling"].Flag = value; } }
        public bool bEnableSubmixSends { get { return this["bEnableSubmixSends"].Flag; } set { this["bEnableSubmixSends"].Flag = value; } }
        public byte SpatializationAlgorithm { get { return this["SpatializationAlgorithm"].GetValue<byte>(); } set { this["SpatializationAlgorithm"].SetValue<byte>(value); } }
        public float BinauralRadius { get { return this["BinauralRadius"].GetValue<float>(); } set { this["BinauralRadius"].SetValue<float>(value); } }
        public EAirAbsorptionMethod AbsorptionMethod { get { return (EAirAbsorptionMethod)this["AbsorptionMethod"].GetValue<int>(); } set { this["AbsorptionMethod"].SetValue<int>((int)value); } }
        public byte OcclusionTraceChannel { get { return this["OcclusionTraceChannel"].GetValue<byte>(); } set { this["OcclusionTraceChannel"].SetValue<byte>(value); } }
        public EReverbSendMethod ReverbSendMethod { get { return (EReverbSendMethod)this["ReverbSendMethod"].GetValue<int>(); } set { this["ReverbSendMethod"].SetValue<int>((int)value); } }
        public EPriorityAttenuationMethod PriorityAttenuationMethod { get { return (EPriorityAttenuationMethod)this["PriorityAttenuationMethod"].GetValue<int>(); } set { this["PriorityAttenuationMethod"].SetValue<int>((int)value); } }
        public float OmniRadius { get { return this["OmniRadius"].GetValue<float>(); } set { this["OmniRadius"].SetValue<float>(value); } }
        public float StereoSpread { get { return this["StereoSpread"].GetValue<float>(); } set { this["StereoSpread"].SetValue<float>(value); } }
        public float LPFRadiusMin { get { return this["LPFRadiusMin"].GetValue<float>(); } set { this["LPFRadiusMin"].SetValue<float>(value); } }
        public float LPFRadiusMax { get { return this["LPFRadiusMax"].GetValue<float>(); } set { this["LPFRadiusMax"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomLowpassAirAbsorptionCurve { get { return this[nameof(CustomLowpassAirAbsorptionCurve)].As<RuntimeFloatCurve>(); } set { this["CustomLowpassAirAbsorptionCurve"] = value; } }
        public RuntimeFloatCurve CustomHighpassAirAbsorptionCurve { get { return this[nameof(CustomHighpassAirAbsorptionCurve)].As<RuntimeFloatCurve>(); } set { this["CustomHighpassAirAbsorptionCurve"] = value; } }
        public float LPFFrequencyAtMin { get { return this["LPFFrequencyAtMin"].GetValue<float>(); } set { this["LPFFrequencyAtMin"].SetValue<float>(value); } }
        public float LPFFrequencyAtMax { get { return this["LPFFrequencyAtMax"].GetValue<float>(); } set { this["LPFFrequencyAtMax"].SetValue<float>(value); } }
        public float HPFFrequencyAtMin { get { return this["HPFFrequencyAtMin"].GetValue<float>(); } set { this["HPFFrequencyAtMin"].SetValue<float>(value); } }
        public float HPFFrequencyAtMax { get { return this["HPFFrequencyAtMax"].GetValue<float>(); } set { this["HPFFrequencyAtMax"].SetValue<float>(value); } }
        public float FocusAzimuth { get { return this["FocusAzimuth"].GetValue<float>(); } set { this["FocusAzimuth"].SetValue<float>(value); } }
        public float NonFocusAzimuth { get { return this["NonFocusAzimuth"].GetValue<float>(); } set { this["NonFocusAzimuth"].SetValue<float>(value); } }
        public float FocusDistanceScale { get { return this["FocusDistanceScale"].GetValue<float>(); } set { this["FocusDistanceScale"].SetValue<float>(value); } }
        public float NonFocusDistanceScale { get { return this["NonFocusDistanceScale"].GetValue<float>(); } set { this["NonFocusDistanceScale"].SetValue<float>(value); } }
        public float FocusPriorityScale { get { return this["FocusPriorityScale"].GetValue<float>(); } set { this["FocusPriorityScale"].SetValue<float>(value); } }
        public float NonFocusPriorityScale { get { return this["NonFocusPriorityScale"].GetValue<float>(); } set { this["NonFocusPriorityScale"].SetValue<float>(value); } }
        public float FocusVolumeAttenuation { get { return this["FocusVolumeAttenuation"].GetValue<float>(); } set { this["FocusVolumeAttenuation"].SetValue<float>(value); } }
        public float NonFocusVolumeAttenuation { get { return this["NonFocusVolumeAttenuation"].GetValue<float>(); } set { this["NonFocusVolumeAttenuation"].SetValue<float>(value); } }
        public float FocusAttackInterpSpeed { get { return this["FocusAttackInterpSpeed"].GetValue<float>(); } set { this["FocusAttackInterpSpeed"].SetValue<float>(value); } }
        public float FocusReleaseInterpSpeed { get { return this["FocusReleaseInterpSpeed"].GetValue<float>(); } set { this["FocusReleaseInterpSpeed"].SetValue<float>(value); } }
        public float OcclusionLowPassFilterFrequency { get { return this["OcclusionLowPassFilterFrequency"].GetValue<float>(); } set { this["OcclusionLowPassFilterFrequency"].SetValue<float>(value); } }
        public float OcclusionVolumeAttenuation { get { return this["OcclusionVolumeAttenuation"].GetValue<float>(); } set { this["OcclusionVolumeAttenuation"].SetValue<float>(value); } }
        public float OcclusionInterpolationTime { get { return this["OcclusionInterpolationTime"].GetValue<float>(); } set { this["OcclusionInterpolationTime"].SetValue<float>(value); } }
        public float ReverbWetLevelMin { get { return this["ReverbWetLevelMin"].GetValue<float>(); } set { this["ReverbWetLevelMin"].SetValue<float>(value); } }
        public float ReverbWetLevelMax { get { return this["ReverbWetLevelMax"].GetValue<float>(); } set { this["ReverbWetLevelMax"].SetValue<float>(value); } }
        public float ReverbDistanceMin { get { return this["ReverbDistanceMin"].GetValue<float>(); } set { this["ReverbDistanceMin"].SetValue<float>(value); } }
        public float ReverbDistanceMax { get { return this["ReverbDistanceMax"].GetValue<float>(); } set { this["ReverbDistanceMax"].SetValue<float>(value); } }
        public float ManualReverbSendLevel { get { return this["ManualReverbSendLevel"].GetValue<float>(); } set { this["ManualReverbSendLevel"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomReverbSendCurve { get { return this[nameof(CustomReverbSendCurve)].As<RuntimeFloatCurve>(); } set { this["CustomReverbSendCurve"] = value; } }
        public Array<AttenuationSubmixSendSettings> SubmixSendSettings { get { return new Array<AttenuationSubmixSendSettings>(this["SubmixSendSettings"]); } set { this["SubmixSendSettings"] = value; } }
        public float PriorityAttenuationMin { get { return this["PriorityAttenuationMin"].GetValue<float>(); } set { this["PriorityAttenuationMin"].SetValue<float>(value); } }
        public float PriorityAttenuationMax { get { return this["PriorityAttenuationMax"].GetValue<float>(); } set { this["PriorityAttenuationMax"].SetValue<float>(value); } }
        public float PriorityAttenuationDistanceMin { get { return this["PriorityAttenuationDistanceMin"].GetValue<float>(); } set { this["PriorityAttenuationDistanceMin"].SetValue<float>(value); } }
        public float PriorityAttenuationDistanceMax { get { return this["PriorityAttenuationDistanceMax"].GetValue<float>(); } set { this["PriorityAttenuationDistanceMax"].SetValue<float>(value); } }
        public float ManualPriorityAttenuation { get { return this["ManualPriorityAttenuation"].GetValue<float>(); } set { this["ManualPriorityAttenuation"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomPriorityAttenuationCurve { get { return this[nameof(CustomPriorityAttenuationCurve)].As<RuntimeFloatCurve>(); } set { this["CustomPriorityAttenuationCurve"] = value; } }
        public SoundAttenuationPluginSettings PluginSettings { get { return this[nameof(PluginSettings)].As<SoundAttenuationPluginSettings>(); } set { this["PluginSettings"] = value; } }
    }
    public class CurveMetaData : UEObject
    {
        public CurveMetaData(nint addr) : base(addr) { }
        public CurveMetaData() : base(0) { }
    }
    public class SmartNameMapping : UEObject
    {
        public SmartNameMapping(nint addr) : base(addr) { }
        public SmartNameMapping() : base(0) { }
    }
    public class SmartNameContainer : UEObject
    {
        public SmartNameContainer(nint addr) : base(addr) { }
        public SmartNameContainer() : base(0) { }
    }
    public class PrecomputedSkyLightInstanceData : SceneComponentInstanceData
    {
        public PrecomputedSkyLightInstanceData(nint addr) : base(addr) { }
        public PrecomputedSkyLightInstanceData() : base(0) { }
        public SDK.Script.CoreUObject.Guid LightGuid { get { return this[nameof(LightGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LightGuid"] = value; } }
        public float AverageBrightness { get { return this["AverageBrightness"].GetValue<float>(); } set { this["AverageBrightness"].SetValue<float>(value); } }
    }
    public class TentDistribution : UEObject
    {
        public TentDistribution(nint addr) : base(addr) { }
        public TentDistribution() : base(0) { }
        public float TipAltitude { get { return this["TipAltitude"].GetValue<float>(); } set { this["TipAltitude"].SetValue<float>(value); } }
        public float TipValue { get { return this["TipValue"].GetValue<float>(); } set { this["TipValue"].SetValue<float>(value); } }
        public float Width { get { return this["Width"].GetValue<float>(); } set { this["Width"].SetValue<float>(value); } }
    }
    public class SkinWeightProfileManagerTickFunction : TickFunction
    {
        public SkinWeightProfileManagerTickFunction(nint addr) : base(addr) { }
        public SkinWeightProfileManagerTickFunction() : base(0) { }
    }
    public class SkinWeightProfileInfo : UEObject
    {
        public SkinWeightProfileInfo(nint addr) : base(addr) { }
        public SkinWeightProfileInfo() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public PerPlatformBool DefaultProfile { get { return this[nameof(DefaultProfile)].As<PerPlatformBool>(); } set { this["DefaultProfile"] = value; } }
        public PerPlatformInt DefaultProfileFromLODIndex { get { return this[nameof(DefaultProfileFromLODIndex)].As<PerPlatformInt>(); } set { this["DefaultProfileFromLODIndex"] = value; } }
    }
    public class SkelMeshSkinWeightInfo : UEObject
    {
        public SkelMeshSkinWeightInfo(nint addr) : base(addr) { }
        public SkelMeshSkinWeightInfo() : base(0) { }
        public int Bones { get { return this["Bones"].GetValue<int>(); } set { this["Bones"].SetValue<int>(value); } }
        public byte Weights { get { return this["Weights"].GetValue<byte>(); } set { this["Weights"].SetValue<byte>(value); } }
    }
    public class SkelMeshComponentLODInfo : UEObject
    {
        public SkelMeshComponentLODInfo(nint addr) : base(addr) { }
        public SkelMeshComponentLODInfo() : base(0) { }
        public List<bool> HiddenMaterials { get { return this["HiddenMaterials"].GetList<bool>(); } set { /* Arrays are read-only */ } }
    }
    public class VertexOffsetUsage : UEObject
    {
        public VertexOffsetUsage(nint addr) : base(addr) { }
        public VertexOffsetUsage() : base(0) { }
        public int Usage { get { return this["Usage"].GetValue<int>(); } set { this["Usage"].SetValue<int>(value); } }
    }
    public class SkeletonToMeshLinkup : UEObject
    {
        public SkeletonToMeshLinkup(nint addr) : base(addr) { }
        public SkeletonToMeshLinkup() : base(0) { }
        public List<int> SkeletonToMeshTable { get { return this["SkeletonToMeshTable"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<int> MeshToSkeletonTable { get { return this["MeshToSkeletonTable"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class BoneNode : UEObject
    {
        public BoneNode(nint addr) : base(addr) { }
        public BoneNode() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public int ParentIndex { get { return this["ParentIndex"].GetValue<int>(); } set { this["ParentIndex"].SetValue<int>(value); } }
        public byte TranslationRetargetingMode { get { return this["TranslationRetargetingMode"].GetValue<byte>(); } set { this["TranslationRetargetingMode"].SetValue<byte>(value); } }
    }
    public class ReferencePose : UEObject
    {
        public ReferencePose(nint addr) : base(addr) { }
        public ReferencePose() : base(0) { }
        public string PoseName { get { return this["PoseName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SDK.Script.CoreUObject.Transform> ReferencePose_Property { get { return new Array<SDK.Script.CoreUObject.Transform>(this["ReferencePose"]); } set { this["ReferencePose"] = value; } }
    }
    public class BoneReductionSetting : UEObject
    {
        public BoneReductionSetting(nint addr) : base(addr) { }
        public BoneReductionSetting() : base(0) { }
        public List<string> BonesToRemove { get { return this["BonesToRemove"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class NameMapping : UEObject
    {
        public NameMapping(nint addr) : base(addr) { }
        public NameMapping() : base(0) { }
        public string NodeName { get { return this["NodeName"].ToString(); } set { /* String properties are read-only */ } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class RigConfiguration : UEObject
    {
        public RigConfiguration(nint addr) : base(addr) { }
        public RigConfiguration() : base(0) { }
        public Rig Rig { get { return this[nameof(Rig)].As<Rig>(); } set { this["Rig"] = value; } }
        public Array<NameMapping> BoneMappingTable { get { return new Array<NameMapping>(this["BoneMappingTable"]); } set { this["BoneMappingTable"] = value; } }
    }
    public class AnimSlotGroup : UEObject
    {
        public AnimSlotGroup(nint addr) : base(addr) { }
        public AnimSlotGroup() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> SlotNames { get { return this["SlotNames"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class VirtualBone : UEObject
    {
        public VirtualBone(nint addr) : base(addr) { }
        public VirtualBone() : base(0) { }
        public string SourceBoneName { get { return this["SourceBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public string TargetBoneName { get { return this["TargetBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public string VirtualBoneName { get { return this["VirtualBoneName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SkeletalMeshSamplingRegionMaterialFilter : UEObject
    {
        public SkeletalMeshSamplingRegionMaterialFilter(nint addr) : base(addr) { }
        public SkeletalMeshSamplingRegionMaterialFilter() : base(0) { }
        public string MaterialName { get { return this["MaterialName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SkeletalMeshSamplingRegionBoneFilter : UEObject
    {
        public SkeletalMeshSamplingRegionBoneFilter(nint addr) : base(addr) { }
        public SkeletalMeshSamplingRegionBoneFilter() : base(0) { }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIncludeOrExclude { get { return this["bIncludeOrExclude"].Flag; } set { this["bIncludeOrExclude"].Flag = value; } }
        public bool bApplyToChildren { get { return this["bApplyToChildren"].Flag; } set { this["bApplyToChildren"].Flag = value; } }
    }
    public class SkeletalMeshSamplingRegion : UEObject
    {
        public SkeletalMeshSamplingRegion(nint addr) : base(addr) { }
        public SkeletalMeshSamplingRegion() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public int LODIndex { get { return this["LODIndex"].GetValue<int>(); } set { this["LODIndex"].SetValue<int>(value); } }
        public bool bSupportUniformlyDistributedSampling { get { return this["bSupportUniformlyDistributedSampling"].Flag; } set { this["bSupportUniformlyDistributedSampling"].Flag = value; } }
        public Array<SkeletalMeshSamplingRegionMaterialFilter> MaterialFilters { get { return new Array<SkeletalMeshSamplingRegionMaterialFilter>(this["MaterialFilters"]); } set { this["MaterialFilters"] = value; } }
        public Array<SkeletalMeshSamplingRegionBoneFilter> BoneFilters { get { return new Array<SkeletalMeshSamplingRegionBoneFilter>(this["BoneFilters"]); } set { this["BoneFilters"] = value; } }
    }
    public class SkeletalMeshSamplingLODBuiltData : UEObject
    {
        public SkeletalMeshSamplingLODBuiltData(nint addr) : base(addr) { }
        public SkeletalMeshSamplingLODBuiltData() : base(0) { }
    }
    public class SkeletalMeshSamplingRegionBuiltData : UEObject
    {
        public SkeletalMeshSamplingRegionBuiltData(nint addr) : base(addr) { }
        public SkeletalMeshSamplingRegionBuiltData() : base(0) { }
    }
    public class SkeletalMeshSamplingBuiltData : UEObject
    {
        public SkeletalMeshSamplingBuiltData(nint addr) : base(addr) { }
        public SkeletalMeshSamplingBuiltData() : base(0) { }
        public Array<SkeletalMeshSamplingLODBuiltData> WholeMeshBuiltData { get { return new Array<SkeletalMeshSamplingLODBuiltData>(this["WholeMeshBuiltData"]); } set { this["WholeMeshBuiltData"] = value; } }
        public Array<SkeletalMeshSamplingRegionBuiltData> RegionBuiltData { get { return new Array<SkeletalMeshSamplingRegionBuiltData>(this["RegionBuiltData"]); } set { this["RegionBuiltData"] = value; } }
    }
    public class SkeletalMeshSamplingInfo : UEObject
    {
        public SkeletalMeshSamplingInfo(nint addr) : base(addr) { }
        public SkeletalMeshSamplingInfo() : base(0) { }
        public Array<SkeletalMeshSamplingRegion> Regions { get { return new Array<SkeletalMeshSamplingRegion>(this["Regions"]); } set { this["Regions"] = value; } }
        public SkeletalMeshSamplingBuiltData BuiltData { get { return this[nameof(BuiltData)].As<SkeletalMeshSamplingBuiltData>(); } set { this["BuiltData"] = value; } }
    }
    public class BoneFilter : UEObject
    {
        public BoneFilter(nint addr) : base(addr) { }
        public BoneFilter() : base(0) { }
        public bool bExcludeSelf { get { return this["bExcludeSelf"].Flag; } set { this["bExcludeSelf"].Flag = value; } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SkeletalMeshLODGroupSettings : UEObject
    {
        public SkeletalMeshLODGroupSettings(nint addr) : base(addr) { }
        public SkeletalMeshLODGroupSettings() : base(0) { }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public float LODHysteresis { get { return this["LODHysteresis"].GetValue<float>(); } set { this["LODHysteresis"].SetValue<float>(value); } }
        public EBoneFilterActionOption BoneFilterActionOption { get { return (EBoneFilterActionOption)this["BoneFilterActionOption"].GetValue<int>(); } set { this["BoneFilterActionOption"].SetValue<int>((int)value); } }
        public Array<BoneFilter> BoneList { get { return new Array<BoneFilter>(this["BoneList"]); } set { this["BoneList"] = value; } }
        public List<string> BonesToPrioritize { get { return this["BonesToPrioritize"].GetStringList(); } set { /* Arrays are read-only */ } }
        public float WeightOfPrioritization { get { return this["WeightOfPrioritization"].GetValue<float>(); } set { this["WeightOfPrioritization"].SetValue<float>(value); } }
        public AnimSequence BakePose { get { return this[nameof(BakePose)].As<AnimSequence>(); } set { this["BakePose"] = value; } }
        public SkeletalMeshOptimizationSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<SkeletalMeshOptimizationSettings>(); } set { this["ReductionSettings"] = value; } }
    }
    public class SkeletalMeshComponentEndPhysicsTickFunction : TickFunction
    {
        public SkeletalMeshComponentEndPhysicsTickFunction(nint addr) : base(addr) { }
        public SkeletalMeshComponentEndPhysicsTickFunction() : base(0) { }
    }
    public class SkeletalMeshComponentClothTickFunction : TickFunction
    {
        public SkeletalMeshComponentClothTickFunction(nint addr) : base(addr) { }
        public SkeletalMeshComponentClothTickFunction() : base(0) { }
    }
    public class BoneMirrorInfo : UEObject
    {
        public BoneMirrorInfo(nint addr) : base(addr) { }
        public BoneMirrorInfo() : base(0) { }
        public int SourceIndex { get { return this["SourceIndex"].GetValue<int>(); } set { this["SourceIndex"].SetValue<int>(value); } }
        public byte BoneFlipAxis { get { return this["BoneFlipAxis"].GetValue<byte>(); } set { this["BoneFlipAxis"].SetValue<byte>(value); } }
    }
    public class BoneMirrorExport : UEObject
    {
        public BoneMirrorExport(nint addr) : base(addr) { }
        public BoneMirrorExport() : base(0) { }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public string SourceBoneName { get { return this["SourceBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public byte BoneFlipAxis { get { return this["BoneFlipAxis"].GetValue<byte>(); } set { this["BoneFlipAxis"].SetValue<byte>(value); } }
    }
    public class SkeletalMeshClothBuildParams : UEObject
    {
        public SkeletalMeshClothBuildParams(nint addr) : base(addr) { }
        public SkeletalMeshClothBuildParams() : base(0) { }
        public UEObject TargetAsset { get { return this["TargetAsset"]; } set { this["TargetAsset"] = value; } }
        public int TargetLod { get { return this["TargetLod"].GetValue<int>(); } set { this["TargetLod"].SetValue<int>(value); } }
        public bool bRemapParameters { get { return this["bRemapParameters"].Flag; } set { this["bRemapParameters"].Flag = value; } }
        public string AssetName { get { return this["AssetName"].ToString(); } set { /* String properties are read-only */ } }
        public int LODIndex { get { return this["LODIndex"].GetValue<int>(); } set { this["LODIndex"].SetValue<int>(value); } }
        public int SourceSection { get { return this["SourceSection"].GetValue<int>(); } set { this["SourceSection"].SetValue<int>(value); } }
        public bool bRemoveFromMesh { get { return this["bRemoveFromMesh"].Flag; } set { this["bRemoveFromMesh"].Flag = value; } }
        public UEObject PhysicsAsset { get { return this["PhysicsAsset"]; } set { this["PhysicsAsset"] = value; } }
    }
    public class SkeletalMeshOptimizationSettings : UEObject
    {
        public SkeletalMeshOptimizationSettings(nint addr) : base(addr) { }
        public SkeletalMeshOptimizationSettings() : base(0) { }
        public byte TerminationCriterion { get { return this["TerminationCriterion"].GetValue<byte>(); } set { this["TerminationCriterion"].SetValue<byte>(value); } }
        public float NumOfTrianglesPercentage { get { return this["NumOfTrianglesPercentage"].GetValue<float>(); } set { this["NumOfTrianglesPercentage"].SetValue<float>(value); } }
        public float NumOfVertPercentage { get { return this["NumOfVertPercentage"].GetValue<float>(); } set { this["NumOfVertPercentage"].SetValue<float>(value); } }
        public uint MaxNumOfTriangles { get { return this["MaxNumOfTriangles"].GetValue<uint>(); } set { this["MaxNumOfTriangles"].SetValue<uint>(value); } }
        public uint MaxNumOfVerts { get { return this["MaxNumOfVerts"].GetValue<uint>(); } set { this["MaxNumOfVerts"].SetValue<uint>(value); } }
        public float MaxDeviationPercentage { get { return this["MaxDeviationPercentage"].GetValue<float>(); } set { this["MaxDeviationPercentage"].SetValue<float>(value); } }
        public byte ReductionMethod { get { return this["ReductionMethod"].GetValue<byte>(); } set { this["ReductionMethod"].SetValue<byte>(value); } }
        public byte SilhouetteImportance { get { return this["SilhouetteImportance"].GetValue<byte>(); } set { this["SilhouetteImportance"].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this["TextureImportance"].GetValue<byte>(); } set { this["TextureImportance"].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this["ShadingImportance"].GetValue<byte>(); } set { this["ShadingImportance"].SetValue<byte>(value); } }
        public byte SkinningImportance { get { return this["SkinningImportance"].GetValue<byte>(); } set { this["SkinningImportance"].SetValue<byte>(value); } }
        public bool bRemapMorphTargets { get { return this["bRemapMorphTargets"].Flag; } set { this["bRemapMorphTargets"].Flag = value; } }
        public bool bRecalcNormals { get { return this["bRecalcNormals"].Flag; } set { this["bRecalcNormals"].Flag = value; } }
        public float WeldingThreshold { get { return this["WeldingThreshold"].GetValue<float>(); } set { this["WeldingThreshold"].SetValue<float>(value); } }
        public float NormalsThreshold { get { return this["NormalsThreshold"].GetValue<float>(); } set { this["NormalsThreshold"].SetValue<float>(value); } }
        public int MaxBonesPerVertex { get { return this["MaxBonesPerVertex"].GetValue<int>(); } set { this["MaxBonesPerVertex"].SetValue<int>(value); } }
        public bool bEnforceBoneBoundaries { get { return this["bEnforceBoneBoundaries"].Flag; } set { this["bEnforceBoneBoundaries"].Flag = value; } }
        public float VolumeImportance { get { return this["VolumeImportance"].GetValue<float>(); } set { this["VolumeImportance"].SetValue<float>(value); } }
        public bool bLockEdges { get { return this["bLockEdges"].Flag; } set { this["bLockEdges"].Flag = value; } }
        public bool bLockColorBounaries { get { return this["bLockColorBounaries"].Flag; } set { this["bLockColorBounaries"].Flag = value; } }
        public int BaseLOD { get { return this["BaseLOD"].GetValue<int>(); } set { this["BaseLOD"].SetValue<int>(value); } }
    }
    public class SkeletalMeshLODInfo : UEObject
    {
        public SkeletalMeshLODInfo(nint addr) : base(addr) { }
        public SkeletalMeshLODInfo() : base(0) { }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public float LODHysteresis { get { return this["LODHysteresis"].GetValue<float>(); } set { this["LODHysteresis"].SetValue<float>(value); } }
        public List<int> LODMaterialMap { get { return this["LODMaterialMap"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public SkeletalMeshBuildSettings BuildSettings { get { return this[nameof(BuildSettings)].As<SkeletalMeshBuildSettings>(); } set { this["BuildSettings"] = value; } }
        public SkeletalMeshOptimizationSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<SkeletalMeshOptimizationSettings>(); } set { this["ReductionSettings"] = value; } }
        public Array<BoneReference> BonesToRemove { get { return new Array<BoneReference>(this["BonesToRemove"]); } set { this["BonesToRemove"] = value; } }
        public Array<BoneReference> BonesToPrioritize { get { return new Array<BoneReference>(this["BonesToPrioritize"]); } set { this["BonesToPrioritize"] = value; } }
        public float WeightOfPrioritization { get { return this["WeightOfPrioritization"].GetValue<float>(); } set { this["WeightOfPrioritization"].SetValue<float>(value); } }
        public AnimSequence BakePose { get { return this[nameof(BakePose)].As<AnimSequence>(); } set { this["BakePose"] = value; } }
        public AnimSequence BakePoseOverride { get { return this[nameof(BakePoseOverride)].As<AnimSequence>(); } set { this["BakePoseOverride"] = value; } }
        public string SourceImportFilename { get { return this["SourceImportFilename"].ToString(); } set { /* String properties are read-only */ } }
        public ESkinCacheUsage SkinCacheUsage { get { return (ESkinCacheUsage)this["SkinCacheUsage"].GetValue<int>(); } set { this["SkinCacheUsage"].SetValue<int>((int)value); } }
        public bool bHasBeenSimplified { get { return this["bHasBeenSimplified"].Flag; } set { this["bHasBeenSimplified"].Flag = value; } }
        public bool bHasPerLODVertexColors { get { return this["bHasPerLODVertexColors"].Flag; } set { this["bHasPerLODVertexColors"].Flag = value; } }
        public bool bAllowCPUAccess { get { return this["bAllowCPUAccess"].Flag; } set { this["bAllowCPUAccess"].Flag = value; } }
        public bool bSupportUniformlyDistributedSampling { get { return this["bSupportUniformlyDistributedSampling"].Flag; } set { this["bSupportUniformlyDistributedSampling"].Flag = value; } }
    }
    public class ClothPhysicsProperties_Legacy : UEObject
    {
        public ClothPhysicsProperties_Legacy(nint addr) : base(addr) { }
        public ClothPhysicsProperties_Legacy() : base(0) { }
        public float VerticalResistance { get { return this["VerticalResistance"].GetValue<float>(); } set { this["VerticalResistance"].SetValue<float>(value); } }
        public float HorizontalResistance { get { return this["HorizontalResistance"].GetValue<float>(); } set { this["HorizontalResistance"].SetValue<float>(value); } }
        public float BendResistance { get { return this["BendResistance"].GetValue<float>(); } set { this["BendResistance"].SetValue<float>(value); } }
        public float ShearResistance { get { return this["ShearResistance"].GetValue<float>(); } set { this["ShearResistance"].SetValue<float>(value); } }
        public float Friction { get { return this["Friction"].GetValue<float>(); } set { this["Friction"].SetValue<float>(value); } }
        public float Damping { get { return this["Damping"].GetValue<float>(); } set { this["Damping"].SetValue<float>(value); } }
        public float TetherStiffness { get { return this["TetherStiffness"].GetValue<float>(); } set { this["TetherStiffness"].SetValue<float>(value); } }
        public float TetherLimit { get { return this["TetherLimit"].GetValue<float>(); } set { this["TetherLimit"].SetValue<float>(value); } }
        public float Drag { get { return this["Drag"].GetValue<float>(); } set { this["Drag"].SetValue<float>(value); } }
        public float StiffnessFrequency { get { return this["StiffnessFrequency"].GetValue<float>(); } set { this["StiffnessFrequency"].SetValue<float>(value); } }
        public float GravityScale { get { return this["GravityScale"].GetValue<float>(); } set { this["GravityScale"].SetValue<float>(value); } }
        public float MassScale { get { return this["MassScale"].GetValue<float>(); } set { this["MassScale"].SetValue<float>(value); } }
        public float InertiaBlend { get { return this["InertiaBlend"].GetValue<float>(); } set { this["InertiaBlend"].SetValue<float>(value); } }
        public float SelfCollisionThickness { get { return this["SelfCollisionThickness"].GetValue<float>(); } set { this["SelfCollisionThickness"].SetValue<float>(value); } }
        public float SelfCollisionSquashScale { get { return this["SelfCollisionSquashScale"].GetValue<float>(); } set { this["SelfCollisionSquashScale"].SetValue<float>(value); } }
        public float SelfCollisionStiffness { get { return this["SelfCollisionStiffness"].GetValue<float>(); } set { this["SelfCollisionStiffness"].SetValue<float>(value); } }
        public float SolverFrequency { get { return this["SolverFrequency"].GetValue<float>(); } set { this["SolverFrequency"].SetValue<float>(value); } }
        public float FiberCompression { get { return this["FiberCompression"].GetValue<float>(); } set { this["FiberCompression"].SetValue<float>(value); } }
        public float FiberExpansion { get { return this["FiberExpansion"].GetValue<float>(); } set { this["FiberExpansion"].SetValue<float>(value); } }
        public float FiberResistance { get { return this["FiberResistance"].GetValue<float>(); } set { this["FiberResistance"].SetValue<float>(value); } }
    }
    public class ClothingAssetData_Legacy : UEObject
    {
        public ClothingAssetData_Legacy(nint addr) : base(addr) { }
        public ClothingAssetData_Legacy() : base(0) { }
        public string AssetName { get { return this["AssetName"].ToString(); } set { /* String properties are read-only */ } }
        public string ApexFileName { get { return this["ApexFileName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bClothPropertiesChanged { get { return this["bClothPropertiesChanged"].Flag; } set { this["bClothPropertiesChanged"].Flag = value; } }
        public ClothPhysicsProperties_Legacy PhysicsProperties { get { return this[nameof(PhysicsProperties)].As<ClothPhysicsProperties_Legacy>(); } set { this["PhysicsProperties"] = value; } }
    }
    public class SkeletalMaterial : UEObject
    {
        public SkeletalMaterial(nint addr) : base(addr) { }
        public SkeletalMaterial() : base(0) { }
        public MaterialInterface MaterialInterface { get { return this[nameof(MaterialInterface)].As<MaterialInterface>(); } set { this["MaterialInterface"] = value; } }
        public string MaterialSlotName { get { return this["MaterialSlotName"].ToString(); } set { /* String properties are read-only */ } }
        public MeshUVChannelInfo UVChannelData { get { return this[nameof(UVChannelData)].As<MeshUVChannelInfo>(); } set { this["UVChannelData"] = value; } }
    }
    public class SingleAnimationPlayData : UEObject
    {
        public SingleAnimationPlayData(nint addr) : base(addr) { }
        public SingleAnimationPlayData() : base(0) { }
        public AnimationAsset AnimToPlay { get { return this[nameof(AnimToPlay)].As<AnimationAsset>(); } set { this["AnimToPlay"] = value; } }
        public bool bSavedLooping { get { return this["bSavedLooping"].Flag; } set { this["bSavedLooping"].Flag = value; } }
        public bool bSavedPlaying { get { return this["bSavedPlaying"].Flag; } set { this["bSavedPlaying"].Flag = value; } }
        public float SavedPosition { get { return this["SavedPosition"].GetValue<float>(); } set { this["SavedPosition"].SetValue<float>(value); } }
        public float SavedPlayRate { get { return this["SavedPlayRate"].GetValue<float>(); } set { this["SavedPlayRate"].SetValue<float>(value); } }
    }
    public class SceneViewExtensionIsActiveFunctor : UEObject
    {
        public SceneViewExtensionIsActiveFunctor(nint addr) : base(addr) { }
        public SceneViewExtensionIsActiveFunctor() : base(0) { }
    }
    public class EngineShowFlagsSetting : UEObject
    {
        public EngineShowFlagsSetting(nint addr) : base(addr) { }
        public EngineShowFlagsSetting() : base(0) { }
        public string ShowFlagName { get { return this["ShowFlagName"].ToString(); } set { /* String properties are read-only */ } }
        public bool Enabled { get { return this["Enabled"].Flag; } set { this["Enabled"].Flag = value; } }
    }
    public class ColorGradePerRangeSettings : UEObject
    {
        public ColorGradePerRangeSettings(nint addr) : base(addr) { }
        public ColorGradePerRangeSettings() : base(0) { }
        public Vector4 Saturation { get { return this[nameof(Saturation)].As<Vector4>(); } set { this["Saturation"] = value; } }
        public Vector4 Contrast { get { return this[nameof(Contrast)].As<Vector4>(); } set { this["Contrast"] = value; } }
        public Vector4 Gamma { get { return this[nameof(Gamma)].As<Vector4>(); } set { this["Gamma"] = value; } }
        public Vector4 Gain { get { return this[nameof(Gain)].As<Vector4>(); } set { this["Gain"] = value; } }
        public Vector4 Offset { get { return this[nameof(Offset)].As<Vector4>(); } set { this["Offset"] = value; } }
    }
    public class ColorGradingSettings : UEObject
    {
        public ColorGradingSettings(nint addr) : base(addr) { }
        public ColorGradingSettings() : base(0) { }
        public ColorGradePerRangeSettings Global { get { return this[nameof(Global)].As<ColorGradePerRangeSettings>(); } set { this["Global"] = value; } }
        public ColorGradePerRangeSettings Shadows { get { return this[nameof(Shadows)].As<ColorGradePerRangeSettings>(); } set { this["Shadows"] = value; } }
        public ColorGradePerRangeSettings Midtones { get { return this[nameof(Midtones)].As<ColorGradePerRangeSettings>(); } set { this["Midtones"] = value; } }
        public ColorGradePerRangeSettings Highlights { get { return this[nameof(Highlights)].As<ColorGradePerRangeSettings>(); } set { this["Highlights"] = value; } }
        public float ShadowsMax { get { return this["ShadowsMax"].GetValue<float>(); } set { this["ShadowsMax"].SetValue<float>(value); } }
        public float HighlightsMin { get { return this["HighlightsMin"].GetValue<float>(); } set { this["HighlightsMin"].SetValue<float>(value); } }
    }
    public class FilmStockSettings : UEObject
    {
        public FilmStockSettings(nint addr) : base(addr) { }
        public FilmStockSettings() : base(0) { }
        public float Slope { get { return this["Slope"].GetValue<float>(); } set { this["Slope"].SetValue<float>(value); } }
        public float Toe { get { return this["Toe"].GetValue<float>(); } set { this["Toe"].SetValue<float>(value); } }
        public float Shoulder { get { return this["Shoulder"].GetValue<float>(); } set { this["Shoulder"].SetValue<float>(value); } }
        public float BlackClip { get { return this["BlackClip"].GetValue<float>(); } set { this["BlackClip"].SetValue<float>(value); } }
        public float WhiteClip { get { return this["WhiteClip"].GetValue<float>(); } set { this["WhiteClip"].SetValue<float>(value); } }
    }
    public class GaussianSumBloomSettings : UEObject
    {
        public GaussianSumBloomSettings(nint addr) : base(addr) { }
        public GaussianSumBloomSettings() : base(0) { }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
        public float Threshold { get { return this["Threshold"].GetValue<float>(); } set { this["Threshold"].SetValue<float>(value); } }
        public float SizeScale { get { return this["SizeScale"].GetValue<float>(); } set { this["SizeScale"].SetValue<float>(value); } }
        public float Filter1Size { get { return this["Filter1Size"].GetValue<float>(); } set { this["Filter1Size"].SetValue<float>(value); } }
        public float Filter2Size { get { return this["Filter2Size"].GetValue<float>(); } set { this["Filter2Size"].SetValue<float>(value); } }
        public float Filter3Size { get { return this["Filter3Size"].GetValue<float>(); } set { this["Filter3Size"].SetValue<float>(value); } }
        public float Filter4Size { get { return this["Filter4Size"].GetValue<float>(); } set { this["Filter4Size"].SetValue<float>(value); } }
        public float Filter5Size { get { return this["Filter5Size"].GetValue<float>(); } set { this["Filter5Size"].SetValue<float>(value); } }
        public float Filter6Size { get { return this["Filter6Size"].GetValue<float>(); } set { this["Filter6Size"].SetValue<float>(value); } }
        public LinearColor Filter1Tint { get { return this[nameof(Filter1Tint)].As<LinearColor>(); } set { this["Filter1Tint"] = value; } }
        public LinearColor Filter2Tint { get { return this[nameof(Filter2Tint)].As<LinearColor>(); } set { this["Filter2Tint"] = value; } }
        public LinearColor Filter3Tint { get { return this[nameof(Filter3Tint)].As<LinearColor>(); } set { this["Filter3Tint"] = value; } }
        public LinearColor Filter4Tint { get { return this[nameof(Filter4Tint)].As<LinearColor>(); } set { this["Filter4Tint"] = value; } }
        public LinearColor Filter5Tint { get { return this[nameof(Filter5Tint)].As<LinearColor>(); } set { this["Filter5Tint"] = value; } }
        public LinearColor Filter6Tint { get { return this[nameof(Filter6Tint)].As<LinearColor>(); } set { this["Filter6Tint"] = value; } }
    }
    public class ConvolutionBloomSettings : UEObject
    {
        public ConvolutionBloomSettings(nint addr) : base(addr) { }
        public ConvolutionBloomSettings() : base(0) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public float Size { get { return this["Size"].GetValue<float>(); } set { this["Size"].SetValue<float>(value); } }
        public Vector2D CenterUV { get { return this[nameof(CenterUV)].As<Vector2D>(); } set { this["CenterUV"] = value; } }
        public float PreFilterMin { get { return this["PreFilterMin"].GetValue<float>(); } set { this["PreFilterMin"].SetValue<float>(value); } }
        public float PreFilterMax { get { return this["PreFilterMax"].GetValue<float>(); } set { this["PreFilterMax"].SetValue<float>(value); } }
        public float PreFilterMult { get { return this["PreFilterMult"].GetValue<float>(); } set { this["PreFilterMult"].SetValue<float>(value); } }
        public float BufferScale { get { return this["BufferScale"].GetValue<float>(); } set { this["BufferScale"].SetValue<float>(value); } }
    }
    public class LensBloomSettings : UEObject
    {
        public LensBloomSettings(nint addr) : base(addr) { }
        public LensBloomSettings() : base(0) { }
        public GaussianSumBloomSettings GaussianSum { get { return this[nameof(GaussianSum)].As<GaussianSumBloomSettings>(); } set { this["GaussianSum"] = value; } }
        public ConvolutionBloomSettings Convolution { get { return this[nameof(Convolution)].As<ConvolutionBloomSettings>(); } set { this["Convolution"] = value; } }
        public byte Method { get { return this["Method"].GetValue<byte>(); } set { this["Method"].SetValue<byte>(value); } }
    }
    public class LensImperfectionSettings : UEObject
    {
        public LensImperfectionSettings(nint addr) : base(addr) { }
        public LensImperfectionSettings() : base(0) { }
        public Texture Dirtmask { get { return this[nameof(Dirtmask)].As<Texture>(); } set { this["Dirtmask"] = value; } }
        public float DirtMaskIntensity { get { return this["DirtMaskIntensity"].GetValue<float>(); } set { this["DirtMaskIntensity"].SetValue<float>(value); } }
        public LinearColor DirtMaskTint { get { return this[nameof(DirtMaskTint)].As<LinearColor>(); } set { this["DirtMaskTint"] = value; } }
    }
    public class LensSettings : UEObject
    {
        public LensSettings(nint addr) : base(addr) { }
        public LensSettings() : base(0) { }
        public LensBloomSettings Bloom { get { return this[nameof(Bloom)].As<LensBloomSettings>(); } set { this["Bloom"] = value; } }
        public LensImperfectionSettings Imperfections { get { return this[nameof(Imperfections)].As<LensImperfectionSettings>(); } set { this["Imperfections"] = value; } }
        public float ChromaticAberration { get { return this["ChromaticAberration"].GetValue<float>(); } set { this["ChromaticAberration"].SetValue<float>(value); } }
    }
    public class CameraExposureSettings : UEObject
    {
        public CameraExposureSettings(nint addr) : base(addr) { }
        public CameraExposureSettings() : base(0) { }
        public byte Method { get { return this["Method"].GetValue<byte>(); } set { this["Method"].SetValue<byte>(value); } }
        public float LowPercent { get { return this["LowPercent"].GetValue<float>(); } set { this["LowPercent"].SetValue<float>(value); } }
        public float HighPercent { get { return this["HighPercent"].GetValue<float>(); } set { this["HighPercent"].SetValue<float>(value); } }
        public float MinBrightness { get { return this["MinBrightness"].GetValue<float>(); } set { this["MinBrightness"].SetValue<float>(value); } }
        public float MaxBrightness { get { return this["MaxBrightness"].GetValue<float>(); } set { this["MaxBrightness"].SetValue<float>(value); } }
        public float SpeedUp { get { return this["SpeedUp"].GetValue<float>(); } set { this["SpeedUp"].SetValue<float>(value); } }
        public float SpeedDown { get { return this["SpeedDown"].GetValue<float>(); } set { this["SpeedDown"].SetValue<float>(value); } }
        public float Bias { get { return this["Bias"].GetValue<float>(); } set { this["Bias"].SetValue<float>(value); } }
        public CurveFloat BiasCurve { get { return this[nameof(BiasCurve)].As<CurveFloat>(); } set { this["BiasCurve"] = value; } }
        public Texture MeterMask { get { return this[nameof(MeterMask)].As<Texture>(); } set { this["MeterMask"] = value; } }
        public float HistogramLogMin { get { return this["HistogramLogMin"].GetValue<float>(); } set { this["HistogramLogMin"].SetValue<float>(value); } }
        public float HistogramLogMax { get { return this["HistogramLogMax"].GetValue<float>(); } set { this["HistogramLogMax"].SetValue<float>(value); } }
        public float CalibrationConstant { get { return this["CalibrationConstant"].GetValue<float>(); } set { this["CalibrationConstant"].SetValue<float>(value); } }
        public bool ApplyPhysicalCameraExposure { get { return this["ApplyPhysicalCameraExposure"].Flag; } set { this["ApplyPhysicalCameraExposure"].Flag = value; } }
    }
    public class RootMotionSource_ConstantForce : RootMotionSource
    {
        public RootMotionSource_ConstantForce(nint addr) : base(addr) { }
        public RootMotionSource_ConstantForce() : base(0) { }
        public Vector Force { get { return this[nameof(Force)].As<Vector>(); } set { this["Force"] = value; } }
        public CurveFloat StrengthOverTime { get { return this[nameof(StrengthOverTime)].As<CurveFloat>(); } set { this["StrengthOverTime"] = value; } }
    }
    public class RootMotionSource_RadialForce : RootMotionSource
    {
        public RootMotionSource_RadialForce(nint addr) : base(addr) { }
        public RootMotionSource_RadialForce() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Actor LocationActor { get { return this[nameof(LocationActor)].As<Actor>(); } set { this["LocationActor"] = value; } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public float Strength { get { return this["Strength"].GetValue<float>(); } set { this["Strength"].SetValue<float>(value); } }
        public bool bIsPush { get { return this["bIsPush"].Flag; } set { this["bIsPush"].Flag = value; } }
        public bool bNoZForce { get { return this["bNoZForce"].Flag; } set { this["bNoZForce"].Flag = value; } }
        public CurveFloat StrengthDistanceFalloff { get { return this[nameof(StrengthDistanceFalloff)].As<CurveFloat>(); } set { this["StrengthDistanceFalloff"] = value; } }
        public CurveFloat StrengthOverTime { get { return this[nameof(StrengthOverTime)].As<CurveFloat>(); } set { this["StrengthOverTime"] = value; } }
        public bool bUseFixedWorldDirection { get { return this["bUseFixedWorldDirection"].Flag; } set { this["bUseFixedWorldDirection"].Flag = value; } }
        public Rotator FixedWorldDirection { get { return this[nameof(FixedWorldDirection)].As<Rotator>(); } set { this["FixedWorldDirection"] = value; } }
    }
    public class RootMotionSource_MoveToForce : RootMotionSource
    {
        public RootMotionSource_MoveToForce(nint addr) : base(addr) { }
        public RootMotionSource_MoveToForce() : base(0) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public bool bRestrictSpeedToExpected { get { return this["bRestrictSpeedToExpected"].Flag; } set { this["bRestrictSpeedToExpected"].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
    }
    public class RootMotionSource_MoveToDynamicForce : RootMotionSource
    {
        public RootMotionSource_MoveToDynamicForce(nint addr) : base(addr) { }
        public RootMotionSource_MoveToDynamicForce() : base(0) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector InitialTargetLocation { get { return this[nameof(InitialTargetLocation)].As<Vector>(); } set { this["InitialTargetLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public bool bRestrictSpeedToExpected { get { return this["bRestrictSpeedToExpected"].Flag; } set { this["bRestrictSpeedToExpected"].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
        public CurveFloat TimeMappingCurve { get { return this[nameof(TimeMappingCurve)].As<CurveFloat>(); } set { this["TimeMappingCurve"] = value; } }
    }
    public class RootMotionSource_JumpForce : RootMotionSource
    {
        public RootMotionSource_JumpForce(nint addr) : base(addr) { }
        public RootMotionSource_JumpForce() : base(0) { }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Distance { get { return this["Distance"].GetValue<float>(); } set { this["Distance"].SetValue<float>(value); } }
        public float Height { get { return this["Height"].GetValue<float>(); } set { this["Height"].SetValue<float>(value); } }
        public bool bDisableTimeout { get { return this["bDisableTimeout"].Flag; } set { this["bDisableTimeout"].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
        public CurveFloat TimeMappingCurve { get { return this[nameof(TimeMappingCurve)].As<CurveFloat>(); } set { this["TimeMappingCurve"] = value; } }
    }
    public class Node : UEObject
    {
        public Node(nint addr) : base(addr) { }
        public Node() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string ParentName { get { return this["ParentName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bAdvanced { get { return this["bAdvanced"].Flag; } set { this["bAdvanced"].Flag = value; } }
    }
    public class RigTransformConstraint : UEObject
    {
        public RigTransformConstraint(nint addr) : base(addr) { }
        public RigTransformConstraint() : base(0) { }
        public byte TranformType { get { return this["TranformType"].GetValue<byte>(); } set { this["TranformType"].SetValue<byte>(value); } }
        public string ParentSpace { get { return this["ParentSpace"].ToString(); } set { /* String properties are read-only */ } }
        public float Weight { get { return this["Weight"].GetValue<float>(); } set { this["Weight"].SetValue<float>(value); } }
    }
    public class TransformBaseConstraint : UEObject
    {
        public TransformBaseConstraint(nint addr) : base(addr) { }
        public TransformBaseConstraint() : base(0) { }
        public Array<RigTransformConstraint> TransformConstraints { get { return new Array<RigTransformConstraint>(this["TransformConstraints"]); } set { this["TransformConstraints"] = value; } }
    }
    public class TransformBase : UEObject
    {
        public TransformBase(nint addr) : base(addr) { }
        public TransformBase() : base(0) { }
        public string Node { get { return this["Node"].ToString(); } set { /* String properties are read-only */ } }
        public TransformBaseConstraint Constraints { get { return this[nameof(Constraints)].As<TransformBaseConstraint>(); } set { this["Constraints"] = value; } }
    }
    public class CompressedRichCurve : UEObject
    {
        public CompressedRichCurve(nint addr) : base(addr) { }
        public CompressedRichCurve() : base(0) { }
    }
    public class ReverbSettings : UEObject
    {
        public ReverbSettings(nint addr) : base(addr) { }
        public ReverbSettings() : base(0) { }
        public bool bApplyReverb { get { return this["bApplyReverb"].Flag; } set { this["bApplyReverb"].Flag = value; } }
        public ReverbEffect ReverbEffect { get { return this[nameof(ReverbEffect)].As<ReverbEffect>(); } set { this["ReverbEffect"] = value; } }
        public SoundEffectSubmixPreset ReverbPluginEffect { get { return this[nameof(ReverbPluginEffect)].As<SoundEffectSubmixPreset>(); } set { this["ReverbPluginEffect"] = value; } }
        public float Volume { get { return this["Volume"].GetValue<float>(); } set { this["Volume"].SetValue<float>(value); } }
        public float FadeTime { get { return this["FadeTime"].GetValue<float>(); } set { this["FadeTime"].SetValue<float>(value); } }
    }
    public class LevelNameAndTime : UEObject
    {
        public LevelNameAndTime(nint addr) : base(addr) { }
        public LevelNameAndTime() : base(0) { }
        public string LevelName { get { return this["LevelName"].ToString(); } set { /* String properties are read-only */ } }
        public uint LevelChangeTimeInMS { get { return this["LevelChangeTimeInMS"].GetValue<uint>(); } set { this["LevelChangeTimeInMS"].SetValue<uint>(value); } }
    }
    public class QuartzTransportTimeStamp : UEObject
    {
        public QuartzTransportTimeStamp(nint addr) : base(addr) { }
        public QuartzTransportTimeStamp() : base(0) { }
        public int Bars { get { return this["Bars"].GetValue<int>(); } set { this["Bars"].SetValue<int>(value); } }
        public int Beat { get { return this["Beat"].GetValue<int>(); } set { this["Beat"].SetValue<int>(value); } }
        public float BeatFraction { get { return this["BeatFraction"].GetValue<float>(); } set { this["BeatFraction"].SetValue<float>(value); } }
        public float Seconds { get { return this["Seconds"].GetValue<float>(); } set { this["Seconds"].SetValue<float>(value); } }
    }
    public class QuartzQuantizationBoundary : UEObject
    {
        public QuartzQuantizationBoundary(nint addr) : base(addr) { }
        public QuartzQuantizationBoundary() : base(0) { }
        public EQuartzCommandQuantization Quantization { get { return (EQuartzCommandQuantization)this["Quantization"].GetValue<int>(); } set { this["Quantization"].SetValue<int>((int)value); } }
        public float Multiplier { get { return this["Multiplier"].GetValue<float>(); } set { this["Multiplier"].SetValue<float>(value); } }
        public EQuarztQuantizationReference CountingReferencePoint { get { return (EQuarztQuantizationReference)this["CountingReferencePoint"].GetValue<int>(); } set { this["CountingReferencePoint"].SetValue<int>((int)value); } }
        public bool bFireOnClockStart { get { return this["bFireOnClockStart"].Flag; } set { this["bFireOnClockStart"].Flag = value; } }
    }
    public class QuartzPulseOverrideStep : UEObject
    {
        public QuartzPulseOverrideStep(nint addr) : base(addr) { }
        public QuartzPulseOverrideStep() : base(0) { }
        public int NumberOfPulses { get { return this["NumberOfPulses"].GetValue<int>(); } set { this["NumberOfPulses"].SetValue<int>(value); } }
        public EQuartzCommandQuantization PulseDuration { get { return (EQuartzCommandQuantization)this["PulseDuration"].GetValue<int>(); } set { this["PulseDuration"].SetValue<int>((int)value); } }
    }
    public class QuartzTimeSignature : UEObject
    {
        public QuartzTimeSignature(nint addr) : base(addr) { }
        public QuartzTimeSignature() : base(0) { }
        public int NumBeats { get { return this["NumBeats"].GetValue<int>(); } set { this["NumBeats"].SetValue<int>(value); } }
        public EQuartzTimeSignatureQuantization BeatType { get { return (EQuartzTimeSignatureQuantization)this["BeatType"].GetValue<int>(); } set { this["BeatType"].SetValue<int>((int)value); } }
        public Array<QuartzPulseOverrideStep> OptionalPulseOverride { get { return new Array<QuartzPulseOverrideStep>(this["OptionalPulseOverride"]); } set { this["OptionalPulseOverride"] = value; } }
    }
    public class QuartzClockSettings : UEObject
    {
        public QuartzClockSettings(nint addr) : base(addr) { }
        public QuartzClockSettings() : base(0) { }
        public QuartzTimeSignature TimeSignature { get { return this[nameof(TimeSignature)].As<QuartzTimeSignature>(); } set { this["TimeSignature"] = value; } }
        public bool bIgnoreLevelChange { get { return this["bIgnoreLevelChange"].Flag; } set { this["bIgnoreLevelChange"].Flag = value; } }
    }
    public class SpriteCategoryInfo : UEObject
    {
        public SpriteCategoryInfo(nint addr) : base(addr) { }
        public SpriteCategoryInfo() : base(0) { }
        public string Category { get { return this["Category"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PrimitiveComponentInstanceData : SceneComponentInstanceData
    {
        public PrimitiveComponentInstanceData(nint addr) : base(addr) { }
        public PrimitiveComponentInstanceData() : base(0) { }
        public SDK.Script.CoreUObject.Transform ComponentTransform { get { return this[nameof(ComponentTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["ComponentTransform"] = value; } }
        public int VisibilityId { get { return this["VisibilityId"].GetValue<int>(); } set { this["VisibilityId"].SetValue<int>(value); } }
        public PrimitiveComponent LODParent { get { return this[nameof(LODParent)].As<PrimitiveComponent>(); } set { this["LODParent"] = value; } }
    }
    public class PreviewMeshCollectionEntry : UEObject
    {
        public PreviewMeshCollectionEntry(nint addr) : base(addr) { }
        public PreviewMeshCollectionEntry() : base(0) { }
        public UEObject SkeletalMesh { get { return this["SkeletalMesh"]; } set { this["SkeletalMesh"] = value; } }
    }
    public class PreviewAttachedObjectPair : UEObject
    {
        public PreviewAttachedObjectPair(nint addr) : base(addr) { }
        public PreviewAttachedObjectPair() : base(0) { }
        public UEObject AttachedObject { get { return this["AttachedObject"]; } set { this["AttachedObject"] = value; } }
        public UEObject Object { get { return this[nameof(Object)]; } set { this["Object"] = value; } }
        public string AttachedTo { get { return this["AttachedTo"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PreviewAssetAttachContainer : UEObject
    {
        public PreviewAssetAttachContainer(nint addr) : base(addr) { }
        public PreviewAssetAttachContainer() : base(0) { }
        public Array<PreviewAttachedObjectPair> AttachedObjects { get { return new Array<PreviewAttachedObjectPair>(this["AttachedObjects"]); } set { this["AttachedObjects"] = value; } }
    }
    public class PoseData : UEObject
    {
        public PoseData(nint addr) : base(addr) { }
        public PoseData() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> LocalSpacePose { get { return new Array<SDK.Script.CoreUObject.Transform>(this["LocalSpacePose"]); } set { this["LocalSpacePose"] = value; } }
        public UEObject TrackToBufferIndex { get { return this["TrackToBufferIndex"]; } set { this["TrackToBufferIndex"] = value; } }
        public List<float> CurveData { get { return this["CurveData"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class PoseDataContainer : UEObject
    {
        public PoseDataContainer(nint addr) : base(addr) { }
        public PoseDataContainer() : base(0) { }
        public Array<SmartName> PoseNames { get { return new Array<SmartName>(this["PoseNames"]); } set { this["PoseNames"] = value; } }
        public List<string> Tracks { get { return this["Tracks"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject TrackMap { get { return this["TrackMap"]; } set { this["TrackMap"] = value; } }
        public Array<PoseData> Poses { get { return new Array<PoseData>(this["Poses"]); } set { this["Poses"] = value; } }
        public Array<AnimCurveBase> Curves { get { return new Array<AnimCurveBase>(this["Curves"]); } set { this["Curves"] = value; } }
    }
    public class PlayerMuteList : UEObject
    {
        public PlayerMuteList(nint addr) : base(addr) { }
        public PlayerMuteList() : base(0) { }
        public bool bHasVoiceHandshakeCompleted { get { return this["bHasVoiceHandshakeCompleted"].Flag; } set { this["bHasVoiceHandshakeCompleted"].Flag = value; } }
        public int VoiceChannelIdx { get { return this["VoiceChannelIdx"].GetValue<int>(); } set { this["VoiceChannelIdx"].SetValue<int>(value); } }
    }
    public class KeyBind : UEObject
    {
        public KeyBind(nint addr) : base(addr) { }
        public KeyBind() : base(0) { }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
        public string Command { get { return this["Command"].ToString(); } set { /* String properties are read-only */ } }
        public bool Control { get { return this["Control"].Flag; } set { this["Control"].Flag = value; } }
        public bool Shift { get { return this["Shift"].Flag; } set { this["Shift"].Flag = value; } }
        public bool Alt { get { return this["Alt"].Flag; } set { this["Alt"].Flag = value; } }
        public bool Cmd { get { return this["Cmd"].Flag; } set { this["Cmd"].Flag = value; } }
        public bool bIgnoreCtrl { get { return this["bIgnoreCtrl"].Flag; } set { this["bIgnoreCtrl"].Flag = value; } }
        public bool bIgnoreShift { get { return this["bIgnoreShift"].Flag; } set { this["bIgnoreShift"].Flag = value; } }
        public bool bIgnoreAlt { get { return this["bIgnoreAlt"].Flag; } set { this["bIgnoreAlt"].Flag = value; } }
        public bool bIgnoreCmd { get { return this["bIgnoreCmd"].Flag; } set { this["bIgnoreCmd"].Flag = value; } }
        public bool bDisabled { get { return this["bDisabled"].Flag; } set { this["bDisabled"].Flag = value; } }
    }
    public class InputAxisProperties : UEObject
    {
        public InputAxisProperties(nint addr) : base(addr) { }
        public InputAxisProperties() : base(0) { }
        public float DeadZone { get { return this["DeadZone"].GetValue<float>(); } set { this["DeadZone"].SetValue<float>(value); } }
        public float Sensitivity { get { return this["Sensitivity"].GetValue<float>(); } set { this["Sensitivity"].SetValue<float>(value); } }
        public float Exponent { get { return this["Exponent"].GetValue<float>(); } set { this["Exponent"].SetValue<float>(value); } }
        public bool bInvert { get { return this["bInvert"].Flag; } set { this["bInvert"].Flag = value; } }
    }
    public class InputAxisConfigEntry : UEObject
    {
        public InputAxisConfigEntry(nint addr) : base(addr) { }
        public InputAxisConfigEntry() : base(0) { }
        public string AxisKeyName { get { return this["AxisKeyName"].ToString(); } set { /* String properties are read-only */ } }
        public InputAxisProperties AxisProperties { get { return this[nameof(AxisProperties)].As<InputAxisProperties>(); } set { this["AxisProperties"] = value; } }
    }
    public class InputActionKeyMapping : UEObject
    {
        public InputActionKeyMapping(nint addr) : base(addr) { }
        public InputActionKeyMapping() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bShift { get { return this["bShift"].Flag; } set { this["bShift"].Flag = value; } }
        public bool bCtrl { get { return this["bCtrl"].Flag; } set { this["bCtrl"].Flag = value; } }
        public bool bAlt { get { return this["bAlt"].Flag; } set { this["bAlt"].Flag = value; } }
        public bool bCmd { get { return this["bCmd"].Flag; } set { this["bCmd"].Flag = value; } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class InputAxisKeyMapping : UEObject
    {
        public InputAxisKeyMapping(nint addr) : base(addr) { }
        public InputAxisKeyMapping() : base(0) { }
        public string AxisName { get { return this["AxisName"].ToString(); } set { /* String properties are read-only */ } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class InputActionSpeechMapping : UEObject
    {
        public InputActionSpeechMapping(nint addr) : base(addr) { }
        public InputActionSpeechMapping() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public string SpeechKeyword { get { return this["SpeechKeyword"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class UpdateLevelStreamingLevelStatus : UEObject
    {
        public UpdateLevelStreamingLevelStatus(nint addr) : base(addr) { }
        public UpdateLevelStreamingLevelStatus() : base(0) { }
        public string PackageName { get { return this["PackageName"].ToString(); } set { /* String properties are read-only */ } }
        public int LODIndex { get { return this["LODIndex"].GetValue<int>(); } set { this["LODIndex"].SetValue<int>(value); } }
        public bool bNewShouldBeLoaded { get { return this["bNewShouldBeLoaded"].Flag; } set { this["bNewShouldBeLoaded"].Flag = value; } }
        public bool bNewShouldBeVisible { get { return this["bNewShouldBeVisible"].Flag; } set { this["bNewShouldBeVisible"].Flag = value; } }
        public bool bNewShouldBlockOnLoad { get { return this["bNewShouldBlockOnLoad"].Flag; } set { this["bNewShouldBlockOnLoad"].Flag = value; } }
    }
    public class CameraCacheEntry : UEObject
    {
        public CameraCacheEntry(nint addr) : base(addr) { }
        public CameraCacheEntry() : base(0) { }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class TViewTarget : UEObject
    {
        public TViewTarget(nint addr) : base(addr) { }
        public TViewTarget() : base(0) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
    }
    public class ViewTargetTransitionParams : UEObject
    {
        public ViewTargetTransitionParams(nint addr) : base(addr) { }
        public ViewTargetTransitionParams() : base(0) { }
        public float BlendTime { get { return this["BlendTime"].GetValue<float>(); } set { this["BlendTime"].SetValue<float>(value); } }
        public byte BlendFunction { get { return this["BlendFunction"].GetValue<byte>(); } set { this["BlendFunction"].SetValue<byte>(value); } }
        public float BlendExp { get { return this["BlendExp"].GetValue<float>(); } set { this["BlendExp"].SetValue<float>(value); } }
        public bool bLockOutgoing { get { return this["bLockOutgoing"].Flag; } set { this["bLockOutgoing"].Flag = value; } }
    }
    public class DelegateArray : UEObject
    {
        public DelegateArray(nint addr) : base(addr) { }
        public DelegateArray() : base(0) { }
        public Array<UEObject> Delegates { get { return new Array<UEObject>(this["Delegates"]); } set { this["Delegates"] = value; } }
    }
    public class PhysicalSurfaceName : UEObject
    {
        public PhysicalSurfaceName(nint addr) : base(addr) { }
        public PhysicalSurfaceName() : base(0) { }
        public byte Type { get { return this["Type"].GetValue<byte>(); } set { this["Type"].SetValue<byte>(value); } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ChaosPhysicsSettings : UEObject
    {
        public ChaosPhysicsSettings(nint addr) : base(addr) { }
        public ChaosPhysicsSettings() : base(0) { }
        public EChaosThreadingMode DefaultThreadingModel { get { return (EChaosThreadingMode)this["DefaultThreadingModel"].GetValue<int>(); } set { this["DefaultThreadingModel"].SetValue<int>((int)value); } }
        public EChaosSolverTickMode DedicatedThreadTickMode { get { return (EChaosSolverTickMode)this["DedicatedThreadTickMode"].GetValue<int>(); } set { this["DedicatedThreadTickMode"].SetValue<int>((int)value); } }
        public EChaosBufferMode DedicatedThreadBufferMode { get { return (EChaosBufferMode)this["DedicatedThreadBufferMode"].GetValue<int>(); } set { this["DedicatedThreadBufferMode"].SetValue<int>((int)value); } }
    }
    public class PhysicsConstraintProfileHandle : UEObject
    {
        public PhysicsConstraintProfileHandle(nint addr) : base(addr) { }
        public PhysicsConstraintProfileHandle() : base(0) { }
        public ConstraintProfileProperties ProfileProperties { get { return this[nameof(ProfileProperties)].As<ConstraintProfileProperties>(); } set { this["ProfileProperties"] = value; } }
        public string ProfileName { get { return this["ProfileName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SolverIterations : UEObject
    {
        public SolverIterations(nint addr) : base(addr) { }
        public SolverIterations() : base(0) { }
        public float FixedTimeStep { get { return this["FixedTimeStep"].GetValue<float>(); } set { this["FixedTimeStep"].SetValue<float>(value); } }
        public int SolverIterations_Property { get { return this["SolverIterations"].GetValue<int>(); } set { this["SolverIterations"].SetValue<int>(value); } }
        public int JointIterations { get { return this["JointIterations"].GetValue<int>(); } set { this["JointIterations"].SetValue<int>(value); } }
        public int CollisionIterations { get { return this["CollisionIterations"].GetValue<int>(); } set { this["CollisionIterations"].SetValue<int>(value); } }
        public int SolverPushOutIterations { get { return this["SolverPushOutIterations"].GetValue<int>(); } set { this["SolverPushOutIterations"].SetValue<int>(value); } }
        public int JointPushOutIterations { get { return this["JointPushOutIterations"].GetValue<int>(); } set { this["JointPushOutIterations"].SetValue<int>(value); } }
        public int CollisionPushOutIterations { get { return this["CollisionPushOutIterations"].GetValue<int>(); } set { this["CollisionPushOutIterations"].SetValue<int>(value); } }
    }
    public class PhysicalAnimationProfile : UEObject
    {
        public PhysicalAnimationProfile(nint addr) : base(addr) { }
        public PhysicalAnimationProfile() : base(0) { }
        public string ProfileName { get { return this["ProfileName"].ToString(); } set { /* String properties are read-only */ } }
        public PhysicalAnimationData PhysicalAnimationData { get { return this[nameof(PhysicalAnimationData)].As<PhysicalAnimationData>(); } set { this["PhysicalAnimationData"] = value; } }
    }
    public class PhysicalAnimationData : UEObject
    {
        public PhysicalAnimationData(nint addr) : base(addr) { }
        public PhysicalAnimationData() : base(0) { }
        public string BodyName { get { return this["BodyName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsLocalSimulation { get { return this["bIsLocalSimulation"].Flag; } set { this["bIsLocalSimulation"].Flag = value; } }
        public float OrientationStrength { get { return this["OrientationStrength"].GetValue<float>(); } set { this["OrientationStrength"].SetValue<float>(value); } }
        public float AngularVelocityStrength { get { return this["AngularVelocityStrength"].GetValue<float>(); } set { this["AngularVelocityStrength"].SetValue<float>(value); } }
        public float PositionStrength { get { return this["PositionStrength"].GetValue<float>(); } set { this["PositionStrength"].SetValue<float>(value); } }
        public float VelocityStrength { get { return this["VelocityStrength"].GetValue<float>(); } set { this["VelocityStrength"].SetValue<float>(value); } }
        public float MaxLinearForce { get { return this["MaxLinearForce"].GetValue<float>(); } set { this["MaxLinearForce"].SetValue<float>(value); } }
        public float MaxAngularForce { get { return this["MaxAngularForce"].GetValue<float>(); } set { this["MaxAngularForce"].SetValue<float>(value); } }
    }
    public class FreezablePerPlatformInt : UEObject
    {
        public FreezablePerPlatformInt(nint addr) : base(addr) { }
        public FreezablePerPlatformInt() : base(0) { }
    }
    public class ParticleEmitterReplayFrame : UEObject
    {
        public ParticleEmitterReplayFrame(nint addr) : base(addr) { }
        public ParticleEmitterReplayFrame() : base(0) { }
    }
    public class ParticleSystemReplayFrame : UEObject
    {
        public ParticleSystemReplayFrame(nint addr) : base(addr) { }
        public ParticleSystemReplayFrame() : base(0) { }
    }
    public class ParticleSystemWorldManagerTickFunction : TickFunction
    {
        public ParticleSystemWorldManagerTickFunction(nint addr) : base(addr) { }
        public ParticleSystemWorldManagerTickFunction() : base(0) { }
    }
    public class ParticleSysParam : UEObject
    {
        public ParticleSysParam(nint addr) : base(addr) { }
        public ParticleSysParam() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public byte ParamType { get { return this["ParamType"].GetValue<byte>(); } set { this["ParamType"].SetValue<byte>(value); } }
        public float Scalar { get { return this["Scalar"].GetValue<float>(); } set { this["Scalar"].SetValue<float>(value); } }
        public float Scalar_Low { get { return this["Scalar_Low"].GetValue<float>(); } set { this["Scalar_Low"].SetValue<float>(value); } }
        public Vector Vector { get { return this[nameof(Vector)].As<Vector>(); } set { this["Vector"] = value; } }
        public Vector Vector_Low { get { return this[nameof(Vector_Low)].As<Vector>(); } set { this["Vector_Low"] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class ParticleSystemLOD : UEObject
    {
        public ParticleSystemLOD(nint addr) : base(addr) { }
        public ParticleSystemLOD() : base(0) { }
    }
    public class LODSoloTrack : UEObject
    {
        public LODSoloTrack(nint addr) : base(addr) { }
        public LODSoloTrack() : base(0) { }
        public List<byte> SoloEnableSetting { get { return this["SoloEnableSetting"].GetList<byte>(); } set { /* Arrays are read-only */ } }
    }
    public class NamedEmitterMaterial : UEObject
    {
        public NamedEmitterMaterial(nint addr) : base(addr) { }
        public NamedEmitterMaterial() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class GPUSpriteLocalVectorFieldInfo : UEObject
    {
        public GPUSpriteLocalVectorFieldInfo(nint addr) : base(addr) { }
        public GPUSpriteLocalVectorFieldInfo() : base(0) { }
        public VectorField Field { get { return this[nameof(Field)].As<VectorField>(); } set { this["Field"] = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public Rotator MinInitialRotation { get { return this[nameof(MinInitialRotation)].As<Rotator>(); } set { this["MinInitialRotation"] = value; } }
        public Rotator MaxInitialRotation { get { return this[nameof(MaxInitialRotation)].As<Rotator>(); } set { this["MaxInitialRotation"] = value; } }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
        public float Tightness { get { return this["Tightness"].GetValue<float>(); } set { this["Tightness"].SetValue<float>(value); } }
        public bool bIgnoreComponentTransform { get { return this["bIgnoreComponentTransform"].Flag; } set { this["bIgnoreComponentTransform"].Flag = value; } }
        public bool bTileX { get { return this["bTileX"].Flag; } set { this["bTileX"].Flag = value; } }
        public bool bTileY { get { return this["bTileY"].Flag; } set { this["bTileY"].Flag = value; } }
        public bool bTileZ { get { return this["bTileZ"].Flag; } set { this["bTileZ"].Flag = value; } }
        public bool bUseFixDT { get { return this["bUseFixDT"].Flag; } set { this["bUseFixDT"].Flag = value; } }
    }
    public class GPUSpriteEmitterInfo : UEObject
    {
        public GPUSpriteEmitterInfo(nint addr) : base(addr) { }
        public GPUSpriteEmitterInfo() : base(0) { }
        public ParticleModuleRequired RequiredModule { get { return this[nameof(RequiredModule)].As<ParticleModuleRequired>(); } set { this["RequiredModule"] = value; } }
        public ParticleModuleSpawn SpawnModule { get { return this[nameof(SpawnModule)].As<ParticleModuleSpawn>(); } set { this["SpawnModule"] = value; } }
        public ParticleModuleSpawnPerUnit SpawnPerUnitModule { get { return this[nameof(SpawnPerUnitModule)].As<ParticleModuleSpawnPerUnit>(); } set { this["SpawnPerUnitModule"] = value; } }
        public Array<UEObject> SpawnModules { get { return new Array<UEObject>(this["SpawnModules"]); } set { this["SpawnModules"] = value; } }
        public GPUSpriteLocalVectorFieldInfo LocalVectorField { get { return this[nameof(LocalVectorField)].As<GPUSpriteLocalVectorFieldInfo>(); } set { this["LocalVectorField"] = value; } }
        public FloatDistribution VectorFieldScale { get { return this[nameof(VectorFieldScale)].As<FloatDistribution>(); } set { this["VectorFieldScale"] = value; } }
        public FloatDistribution DragCoefficient { get { return this[nameof(DragCoefficient)].As<FloatDistribution>(); } set { this["DragCoefficient"] = value; } }
        public FloatDistribution PointAttractorStrength { get { return this[nameof(PointAttractorStrength)].As<FloatDistribution>(); } set { this["PointAttractorStrength"] = value; } }
        public FloatDistribution Resilience { get { return this[nameof(Resilience)].As<FloatDistribution>(); } set { this["Resilience"] = value; } }
        public Vector ConstantAcceleration { get { return this[nameof(ConstantAcceleration)].As<Vector>(); } set { this["ConstantAcceleration"] = value; } }
        public Vector PointAttractorPosition { get { return this[nameof(PointAttractorPosition)].As<Vector>(); } set { this["PointAttractorPosition"] = value; } }
        public float PointAttractorRadiusSq { get { return this["PointAttractorRadiusSq"].GetValue<float>(); } set { this["PointAttractorRadiusSq"].SetValue<float>(value); } }
        public Vector OrbitOffsetBase { get { return this[nameof(OrbitOffsetBase)].As<Vector>(); } set { this["OrbitOffsetBase"] = value; } }
        public Vector OrbitOffsetRange { get { return this[nameof(OrbitOffsetRange)].As<Vector>(); } set { this["OrbitOffsetRange"] = value; } }
        public Vector2D InvMaxSize { get { return this[nameof(InvMaxSize)].As<Vector2D>(); } set { this["InvMaxSize"] = value; } }
        public float InvRotationRateScale { get { return this["InvRotationRateScale"].GetValue<float>(); } set { this["InvRotationRateScale"].SetValue<float>(value); } }
        public float MaxLifetime { get { return this["MaxLifetime"].GetValue<float>(); } set { this["MaxLifetime"].SetValue<float>(value); } }
        public int MaxParticleCount { get { return this["MaxParticleCount"].GetValue<int>(); } set { this["MaxParticleCount"].SetValue<int>(value); } }
        public byte ScreenAlignment { get { return this["ScreenAlignment"].GetValue<byte>(); } set { this["ScreenAlignment"].SetValue<byte>(value); } }
        public byte LockAxisFlag { get { return this["LockAxisFlag"].GetValue<byte>(); } set { this["LockAxisFlag"].SetValue<byte>(value); } }
        public bool bEnableCollision { get { return this["bEnableCollision"].Flag; } set { this["bEnableCollision"].Flag = value; } }
        public byte CollisionMode { get { return this["CollisionMode"].GetValue<byte>(); } set { this["CollisionMode"].SetValue<byte>(value); } }
        public bool bRemoveHMDRoll { get { return this["bRemoveHMDRoll"].Flag; } set { this["bRemoveHMDRoll"].Flag = value; } }
        public float MinFacingCameraBlendDistance { get { return this["MinFacingCameraBlendDistance"].GetValue<float>(); } set { this["MinFacingCameraBlendDistance"].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this["MaxFacingCameraBlendDistance"].GetValue<float>(); } set { this["MaxFacingCameraBlendDistance"].SetValue<float>(value); } }
        public RawDistributionVector DynamicColor { get { return this[nameof(DynamicColor)].As<RawDistributionVector>(); } set { this["DynamicColor"] = value; } }
        public RawDistributionFloat DynamicAlpha { get { return this[nameof(DynamicAlpha)].As<RawDistributionFloat>(); } set { this["DynamicAlpha"] = value; } }
        public RawDistributionVector DynamicColorScale { get { return this[nameof(DynamicColorScale)].As<RawDistributionVector>(); } set { this["DynamicColorScale"] = value; } }
        public RawDistributionFloat DynamicAlphaScale { get { return this[nameof(DynamicAlphaScale)].As<RawDistributionFloat>(); } set { this["DynamicAlphaScale"] = value; } }
    }
    public class GPUSpriteResourceData : UEObject
    {
        public GPUSpriteResourceData(nint addr) : base(addr) { }
        public GPUSpriteResourceData() : base(0) { }
        public Array<Color> QuantizedColorSamples { get { return new Array<Color>(this["QuantizedColorSamples"]); } set { this["QuantizedColorSamples"] = value; } }
        public Array<Color> QuantizedMiscSamples { get { return new Array<Color>(this["QuantizedMiscSamples"]); } set { this["QuantizedMiscSamples"] = value; } }
        public Array<Color> QuantizedSimulationAttrSamples { get { return new Array<Color>(this["QuantizedSimulationAttrSamples"]); } set { this["QuantizedSimulationAttrSamples"] = value; } }
        public Vector4 ColorScale { get { return this[nameof(ColorScale)].As<Vector4>(); } set { this["ColorScale"] = value; } }
        public Vector4 ColorBias { get { return this[nameof(ColorBias)].As<Vector4>(); } set { this["ColorBias"] = value; } }
        public Vector4 MiscScale { get { return this[nameof(MiscScale)].As<Vector4>(); } set { this["MiscScale"] = value; } }
        public Vector4 MiscBias { get { return this[nameof(MiscBias)].As<Vector4>(); } set { this["MiscBias"] = value; } }
        public Vector4 SimulationAttrCurveScale { get { return this[nameof(SimulationAttrCurveScale)].As<Vector4>(); } set { this["SimulationAttrCurveScale"] = value; } }
        public Vector4 SimulationAttrCurveBias { get { return this[nameof(SimulationAttrCurveBias)].As<Vector4>(); } set { this["SimulationAttrCurveBias"] = value; } }
        public Vector4 SubImageSize { get { return this[nameof(SubImageSize)].As<Vector4>(); } set { this["SubImageSize"] = value; } }
        public Vector4 SizeBySpeed { get { return this[nameof(SizeBySpeed)].As<Vector4>(); } set { this["SizeBySpeed"] = value; } }
        public Vector ConstantAcceleration { get { return this[nameof(ConstantAcceleration)].As<Vector>(); } set { this["ConstantAcceleration"] = value; } }
        public Vector OrbitOffsetBase { get { return this[nameof(OrbitOffsetBase)].As<Vector>(); } set { this["OrbitOffsetBase"] = value; } }
        public Vector OrbitOffsetRange { get { return this[nameof(OrbitOffsetRange)].As<Vector>(); } set { this["OrbitOffsetRange"] = value; } }
        public Vector OrbitFrequencyBase { get { return this[nameof(OrbitFrequencyBase)].As<Vector>(); } set { this["OrbitFrequencyBase"] = value; } }
        public Vector OrbitFrequencyRange { get { return this[nameof(OrbitFrequencyRange)].As<Vector>(); } set { this["OrbitFrequencyRange"] = value; } }
        public Vector OrbitPhaseBase { get { return this[nameof(OrbitPhaseBase)].As<Vector>(); } set { this["OrbitPhaseBase"] = value; } }
        public Vector OrbitPhaseRange { get { return this[nameof(OrbitPhaseRange)].As<Vector>(); } set { this["OrbitPhaseRange"] = value; } }
        public float GlobalVectorFieldScale { get { return this["GlobalVectorFieldScale"].GetValue<float>(); } set { this["GlobalVectorFieldScale"].SetValue<float>(value); } }
        public float GlobalVectorFieldTightness { get { return this["GlobalVectorFieldTightness"].GetValue<float>(); } set { this["GlobalVectorFieldTightness"].SetValue<float>(value); } }
        public float PerParticleVectorFieldScale { get { return this["PerParticleVectorFieldScale"].GetValue<float>(); } set { this["PerParticleVectorFieldScale"].SetValue<float>(value); } }
        public float PerParticleVectorFieldBias { get { return this["PerParticleVectorFieldBias"].GetValue<float>(); } set { this["PerParticleVectorFieldBias"].SetValue<float>(value); } }
        public float DragCoefficientScale { get { return this["DragCoefficientScale"].GetValue<float>(); } set { this["DragCoefficientScale"].SetValue<float>(value); } }
        public float DragCoefficientBias { get { return this["DragCoefficientBias"].GetValue<float>(); } set { this["DragCoefficientBias"].SetValue<float>(value); } }
        public float ResilienceScale { get { return this["ResilienceScale"].GetValue<float>(); } set { this["ResilienceScale"].SetValue<float>(value); } }
        public float ResilienceBias { get { return this["ResilienceBias"].GetValue<float>(); } set { this["ResilienceBias"].SetValue<float>(value); } }
        public float CollisionRadiusScale { get { return this["CollisionRadiusScale"].GetValue<float>(); } set { this["CollisionRadiusScale"].SetValue<float>(value); } }
        public float CollisionRadiusBias { get { return this["CollisionRadiusBias"].GetValue<float>(); } set { this["CollisionRadiusBias"].SetValue<float>(value); } }
        public float CollisionTimeBias { get { return this["CollisionTimeBias"].GetValue<float>(); } set { this["CollisionTimeBias"].SetValue<float>(value); } }
        public float CollisionRandomSpread { get { return this["CollisionRandomSpread"].GetValue<float>(); } set { this["CollisionRandomSpread"].SetValue<float>(value); } }
        public float CollisionRandomDistribution { get { return this["CollisionRandomDistribution"].GetValue<float>(); } set { this["CollisionRandomDistribution"].SetValue<float>(value); } }
        public float OneMinusFriction { get { return this["OneMinusFriction"].GetValue<float>(); } set { this["OneMinusFriction"].SetValue<float>(value); } }
        public float RotationRateScale { get { return this["RotationRateScale"].GetValue<float>(); } set { this["RotationRateScale"].SetValue<float>(value); } }
        public float CameraMotionBlurAmount { get { return this["CameraMotionBlurAmount"].GetValue<float>(); } set { this["CameraMotionBlurAmount"].SetValue<float>(value); } }
        public byte ScreenAlignment { get { return this["ScreenAlignment"].GetValue<byte>(); } set { this["ScreenAlignment"].SetValue<byte>(value); } }
        public byte LockAxisFlag { get { return this["LockAxisFlag"].GetValue<byte>(); } set { this["LockAxisFlag"].SetValue<byte>(value); } }
        public Vector2D PivotOffset { get { return this[nameof(PivotOffset)].As<Vector2D>(); } set { this["PivotOffset"] = value; } }
        public bool bRemoveHMDRoll { get { return this["bRemoveHMDRoll"].Flag; } set { this["bRemoveHMDRoll"].Flag = value; } }
        public float MinFacingCameraBlendDistance { get { return this["MinFacingCameraBlendDistance"].GetValue<float>(); } set { this["MinFacingCameraBlendDistance"].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this["MaxFacingCameraBlendDistance"].GetValue<float>(); } set { this["MaxFacingCameraBlendDistance"].SetValue<float>(value); } }
    }
    public class BeamTargetData : UEObject
    {
        public BeamTargetData(nint addr) : base(addr) { }
        public BeamTargetData() : base(0) { }
        public string TargetName { get { return this["TargetName"].ToString(); } set { /* String properties are read-only */ } }
        public float TargetPercentage { get { return this["TargetPercentage"].GetValue<float>(); } set { this["TargetPercentage"].SetValue<float>(value); } }
    }
    public class EmitterDynamicParameter : UEObject
    {
        public EmitterDynamicParameter(nint addr) : base(addr) { }
        public EmitterDynamicParameter() : base(0) { }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUseEmitterTime { get { return this["bUseEmitterTime"].Flag; } set { this["bUseEmitterTime"].Flag = value; } }
        public bool bSpawnTimeOnly { get { return this["bSpawnTimeOnly"].Flag; } set { this["bSpawnTimeOnly"].Flag = value; } }
        public byte ValueMethod { get { return this["ValueMethod"].GetValue<byte>(); } set { this["ValueMethod"].SetValue<byte>(value); } }
        public bool bScaleVelocityByParamValue { get { return this["bScaleVelocityByParamValue"].Flag; } set { this["bScaleVelocityByParamValue"].Flag = value; } }
        public RawDistributionFloat ParamValue { get { return this[nameof(ParamValue)].As<RawDistributionFloat>(); } set { this["ParamValue"] = value; } }
    }
    public class OrbitOptions : UEObject
    {
        public OrbitOptions(nint addr) : base(addr) { }
        public OrbitOptions() : base(0) { }
        public bool bProcessDuringSpawn { get { return this["bProcessDuringSpawn"].Flag; } set { this["bProcessDuringSpawn"].Flag = value; } }
        public bool bProcessDuringUpdate { get { return this["bProcessDuringUpdate"].Flag; } set { this["bProcessDuringUpdate"].Flag = value; } }
        public bool bUseEmitterTime { get { return this["bUseEmitterTime"].Flag; } set { this["bUseEmitterTime"].Flag = value; } }
    }
    public class LocationBoneSocketInfo : UEObject
    {
        public LocationBoneSocketInfo(nint addr) : base(addr) { }
        public LocationBoneSocketInfo() : base(0) { }
        public string BoneSocketName { get { return this["BoneSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
    }
    public class ParticleEvent_GenerateInfo : UEObject
    {
        public ParticleEvent_GenerateInfo(nint addr) : base(addr) { }
        public ParticleEvent_GenerateInfo() : base(0) { }
        public byte Type { get { return this["Type"].GetValue<byte>(); } set { this["Type"].SetValue<byte>(value); } }
        public int Frequency { get { return this["Frequency"].GetValue<int>(); } set { this["Frequency"].SetValue<int>(value); } }
        public int ParticleFrequency { get { return this["ParticleFrequency"].GetValue<int>(); } set { this["ParticleFrequency"].SetValue<int>(value); } }
        public bool FirstTimeOnly { get { return this["FirstTimeOnly"].Flag; } set { this["FirstTimeOnly"].Flag = value; } }
        public bool LastTimeOnly { get { return this["LastTimeOnly"].Flag; } set { this["LastTimeOnly"].Flag = value; } }
        public bool UseReflectedImpactVector { get { return this["UseReflectedImpactVector"].Flag; } set { this["UseReflectedImpactVector"].Flag = value; } }
        public bool bUseOrbitOffset { get { return this["bUseOrbitOffset"].Flag; } set { this["bUseOrbitOffset"].Flag = value; } }
        public string CustomName { get { return this["CustomName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ParticleModuleEventSendToGame> ParticleModuleEventsToSendToGame { get { return new Array<ParticleModuleEventSendToGame>(this["ParticleModuleEventsToSendToGame"]); } set { this["ParticleModuleEventsToSendToGame"] = value; } }
    }
    public class BeamModifierOptions : UEObject
    {
        public BeamModifierOptions(nint addr) : base(addr) { }
        public BeamModifierOptions() : base(0) { }
        public bool bModify { get { return this["bModify"].Flag; } set { this["bModify"].Flag = value; } }
        public bool bScale { get { return this["bScale"].Flag; } set { this["bScale"].Flag = value; } }
        public bool bLock { get { return this["bLock"].Flag; } set { this["bLock"].Flag = value; } }
    }
    public class ParticleCurvePair : UEObject
    {
        public ParticleCurvePair(nint addr) : base(addr) { }
        public ParticleCurvePair() : base(0) { }
        public string CurveName { get { return this["CurveName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject CurveObject { get { return this[nameof(CurveObject)]; } set { this["CurveObject"] = value; } }
    }
    public class ParticleRandomSeedInfo : UEObject
    {
        public ParticleRandomSeedInfo(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bGetSeedFromInstance { get { return this["bGetSeedFromInstance"].Flag; } set { this["bGetSeedFromInstance"].Flag = value; } }
        public bool bInstanceSeedIsIndex { get { return this["bInstanceSeedIsIndex"].Flag; } set { this["bInstanceSeedIsIndex"].Flag = value; } }
        public bool bResetSeedOnEmitterLooping { get { return this["bResetSeedOnEmitterLooping"].Flag; } set { this["bResetSeedOnEmitterLooping"].Flag = value; } }
        public bool bRandomlySelectSeedArray { get { return this["bRandomlySelectSeedArray"].Flag; } set { this["bRandomlySelectSeedArray"].Flag = value; } }
        public List<int> RandomSeeds { get { return this["RandomSeeds"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class ParticleBurst : UEObject
    {
        public ParticleBurst(nint addr) : base(addr) { }
        public ParticleBurst() : base(0) { }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public int CountLow { get { return this["CountLow"].GetValue<int>(); } set { this["CountLow"].SetValue<int>(value); } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
    }
    public class NodeItem : UEObject
    {
        public NodeItem(nint addr) : base(addr) { }
        public NodeItem() : base(0) { }
        public string ParentName { get { return this["ParentName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
    }
    public class NetworkEmulationProfileDescription : UEObject
    {
        public NetworkEmulationProfileDescription(nint addr) : base(addr) { }
        public NetworkEmulationProfileDescription() : base(0) { }
        public string ProfileName { get { return this["ProfileName"].ToString(); } set { /* String properties are read-only */ } }
        public string ToolTip { get { return this["ToolTip"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PacketSimulationSettings : UEObject
    {
        public PacketSimulationSettings(nint addr) : base(addr) { }
        public PacketSimulationSettings() : base(0) { }
        public int PktLoss { get { return this["PktLoss"].GetValue<int>(); } set { this["PktLoss"].SetValue<int>(value); } }
        public int PktLossMaxSize { get { return this["PktLossMaxSize"].GetValue<int>(); } set { this["PktLossMaxSize"].SetValue<int>(value); } }
        public int PktLossMinSize { get { return this["PktLossMinSize"].GetValue<int>(); } set { this["PktLossMinSize"].SetValue<int>(value); } }
        public int PktOrder { get { return this["PktOrder"].GetValue<int>(); } set { this["PktOrder"].SetValue<int>(value); } }
        public int PktDup { get { return this["PktDup"].GetValue<int>(); } set { this["PktDup"].SetValue<int>(value); } }
        public int PktLag { get { return this["PktLag"].GetValue<int>(); } set { this["PktLag"].SetValue<int>(value); } }
        public int PktLagVariance { get { return this["PktLagVariance"].GetValue<int>(); } set { this["PktLagVariance"].SetValue<int>(value); } }
        public int PktLagMin { get { return this["PktLagMin"].GetValue<int>(); } set { this["PktLagMin"].SetValue<int>(value); } }
        public int PktLagMax { get { return this["PktLagMax"].GetValue<int>(); } set { this["PktLagMax"].SetValue<int>(value); } }
        public int PktIncomingLagMin { get { return this["PktIncomingLagMin"].GetValue<int>(); } set { this["PktIncomingLagMin"].SetValue<int>(value); } }
        public int PktIncomingLagMax { get { return this["PktIncomingLagMax"].GetValue<int>(); } set { this["PktIncomingLagMax"].SetValue<int>(value); } }
        public int PktIncomingLoss { get { return this["PktIncomingLoss"].GetValue<int>(); } set { this["PktIncomingLoss"].SetValue<int>(value); } }
        public int PktJitter { get { return this["PktJitter"].GetValue<int>(); } set { this["PktJitter"].SetValue<int>(value); } }
    }
    public class ChannelDefinition : UEObject
    {
        public ChannelDefinition(nint addr) : base(addr) { }
        public ChannelDefinition() : base(0) { }
        public string ChannelName { get { return this["ChannelName"].ToString(); } set { /* String properties are read-only */ } }
        public string ClassName { get { return this["ClassName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject ChannelClass { get { return this["ChannelClass"]; } set { this["ChannelClass"] = value; } }
        public int StaticChannelIndex { get { return this["StaticChannelIndex"].GetValue<int>(); } set { this["StaticChannelIndex"].SetValue<int>(value); } }
        public bool bTickOnCreate { get { return this["bTickOnCreate"].Flag; } set { this["bTickOnCreate"].Flag = value; } }
        public bool bServerOpen { get { return this["bServerOpen"].Flag; } set { this["bServerOpen"].Flag = value; } }
        public bool bClientOpen { get { return this["bClientOpen"].Flag; } set { this["bClientOpen"].Flag = value; } }
        public bool bInitialServer { get { return this["bInitialServer"].Flag; } set { this["bInitialServer"].Flag = value; } }
        public bool bInitialClient { get { return this["bInitialClient"].Flag; } set { this["bInitialClient"].Flag = value; } }
    }
    public class NavigationLink : NavigationLinkBase
    {
        public NavigationLink(nint addr) : base(addr) { }
        public NavigationLink() : base(0) { }
        public Vector Left { get { return this[nameof(Left)].As<Vector>(); } set { this["Left"] = value; } }
        public Vector Right { get { return this[nameof(Right)].As<Vector>(); } set { this["Right"] = value; } }
    }
    public class NavigationSegmentLink : NavigationLinkBase
    {
        public NavigationSegmentLink(nint addr) : base(addr) { }
        public NavigationSegmentLink() : base(0) { }
        public Vector LeftStart { get { return this[nameof(LeftStart)].As<Vector>(); } set { this["LeftStart"] = value; } }
        public Vector LeftEnd { get { return this[nameof(LeftEnd)].As<Vector>(); } set { this["LeftEnd"] = value; } }
        public Vector RightStart { get { return this[nameof(RightStart)].As<Vector>(); } set { this["RightStart"] = value; } }
        public Vector RightEnd { get { return this[nameof(RightEnd)].As<Vector>(); } set { this["RightEnd"] = value; } }
    }
    public class NavigationLinkBase : UEObject
    {
        public NavigationLinkBase(nint addr) : base(addr) { }
        public NavigationLinkBase() : base(0) { }
        public float LeftProjectHeight { get { return this["LeftProjectHeight"].GetValue<float>(); } set { this["LeftProjectHeight"].SetValue<float>(value); } }
        public float MaxFallDownLength { get { return this["MaxFallDownLength"].GetValue<float>(); } set { this["MaxFallDownLength"].SetValue<float>(value); } }
        public float SnapRadius { get { return this["SnapRadius"].GetValue<float>(); } set { this["SnapRadius"].SetValue<float>(value); } }
        public float SnapHeight { get { return this["SnapHeight"].GetValue<float>(); } set { this["SnapHeight"].SetValue<float>(value); } }
        public NavAgentSelector SupportedAgents { get { return this[nameof(SupportedAgents)].As<NavAgentSelector>(); } set { this["SupportedAgents"] = value; } }
        public bool bSupportsAgent0 { get { return this["bSupportsAgent0"].Flag; } set { this["bSupportsAgent0"].Flag = value; } }
        public bool bSupportsAgent1 { get { return this["bSupportsAgent1"].Flag; } set { this["bSupportsAgent1"].Flag = value; } }
        public bool bSupportsAgent2 { get { return this["bSupportsAgent2"].Flag; } set { this["bSupportsAgent2"].Flag = value; } }
        public bool bSupportsAgent3 { get { return this["bSupportsAgent3"].Flag; } set { this["bSupportsAgent3"].Flag = value; } }
        public bool bSupportsAgent4 { get { return this["bSupportsAgent4"].Flag; } set { this["bSupportsAgent4"].Flag = value; } }
        public bool bSupportsAgent5 { get { return this["bSupportsAgent5"].Flag; } set { this["bSupportsAgent5"].Flag = value; } }
        public bool bSupportsAgent6 { get { return this["bSupportsAgent6"].Flag; } set { this["bSupportsAgent6"].Flag = value; } }
        public bool bSupportsAgent7 { get { return this["bSupportsAgent7"].Flag; } set { this["bSupportsAgent7"].Flag = value; } }
        public bool bSupportsAgent8 { get { return this["bSupportsAgent8"].Flag; } set { this["bSupportsAgent8"].Flag = value; } }
        public bool bSupportsAgent9 { get { return this["bSupportsAgent9"].Flag; } set { this["bSupportsAgent9"].Flag = value; } }
        public bool bSupportsAgent10 { get { return this["bSupportsAgent10"].Flag; } set { this["bSupportsAgent10"].Flag = value; } }
        public bool bSupportsAgent11 { get { return this["bSupportsAgent11"].Flag; } set { this["bSupportsAgent11"].Flag = value; } }
        public bool bSupportsAgent12 { get { return this["bSupportsAgent12"].Flag; } set { this["bSupportsAgent12"].Flag = value; } }
        public bool bSupportsAgent13 { get { return this["bSupportsAgent13"].Flag; } set { this["bSupportsAgent13"].Flag = value; } }
        public bool bSupportsAgent14 { get { return this["bSupportsAgent14"].Flag; } set { this["bSupportsAgent14"].Flag = value; } }
        public bool bSupportsAgent15 { get { return this["bSupportsAgent15"].Flag; } set { this["bSupportsAgent15"].Flag = value; } }
        public byte Direction { get { return this["Direction"].GetValue<byte>(); } set { this["Direction"].SetValue<byte>(value); } }
        public bool bUseSnapHeight { get { return this["bUseSnapHeight"].Flag; } set { this["bUseSnapHeight"].Flag = value; } }
        public bool bSnapToCheapestArea { get { return this["bSnapToCheapestArea"].Flag; } set { this["bSnapToCheapestArea"].Flag = value; } }
        public bool bCustomFlag0 { get { return this["bCustomFlag0"].Flag; } set { this["bCustomFlag0"].Flag = value; } }
        public bool bCustomFlag1 { get { return this["bCustomFlag1"].Flag; } set { this["bCustomFlag1"].Flag = value; } }
        public bool bCustomFlag2 { get { return this["bCustomFlag2"].Flag; } set { this["bCustomFlag2"].Flag = value; } }
        public bool bCustomFlag3 { get { return this["bCustomFlag3"].Flag; } set { this["bCustomFlag3"].Flag = value; } }
        public bool bCustomFlag4 { get { return this["bCustomFlag4"].Flag; } set { this["bCustomFlag4"].Flag = value; } }
        public bool bCustomFlag5 { get { return this["bCustomFlag5"].Flag; } set { this["bCustomFlag5"].Flag = value; } }
        public bool bCustomFlag6 { get { return this["bCustomFlag6"].Flag; } set { this["bCustomFlag6"].Flag = value; } }
        public bool bCustomFlag7 { get { return this["bCustomFlag7"].Flag; } set { this["bCustomFlag7"].Flag = value; } }
        public UEObject AreaClass { get { return this["AreaClass"]; } set { this["AreaClass"] = value; } }
    }
    public class NavAgentSelector : UEObject
    {
        public NavAgentSelector(nint addr) : base(addr) { }
        public NavAgentSelector() : base(0) { }
        public bool bSupportsAgent0 { get { return this["bSupportsAgent0"].Flag; } set { this["bSupportsAgent0"].Flag = value; } }
        public bool bSupportsAgent1 { get { return this["bSupportsAgent1"].Flag; } set { this["bSupportsAgent1"].Flag = value; } }
        public bool bSupportsAgent2 { get { return this["bSupportsAgent2"].Flag; } set { this["bSupportsAgent2"].Flag = value; } }
        public bool bSupportsAgent3 { get { return this["bSupportsAgent3"].Flag; } set { this["bSupportsAgent3"].Flag = value; } }
        public bool bSupportsAgent4 { get { return this["bSupportsAgent4"].Flag; } set { this["bSupportsAgent4"].Flag = value; } }
        public bool bSupportsAgent5 { get { return this["bSupportsAgent5"].Flag; } set { this["bSupportsAgent5"].Flag = value; } }
        public bool bSupportsAgent6 { get { return this["bSupportsAgent6"].Flag; } set { this["bSupportsAgent6"].Flag = value; } }
        public bool bSupportsAgent7 { get { return this["bSupportsAgent7"].Flag; } set { this["bSupportsAgent7"].Flag = value; } }
        public bool bSupportsAgent8 { get { return this["bSupportsAgent8"].Flag; } set { this["bSupportsAgent8"].Flag = value; } }
        public bool bSupportsAgent9 { get { return this["bSupportsAgent9"].Flag; } set { this["bSupportsAgent9"].Flag = value; } }
        public bool bSupportsAgent10 { get { return this["bSupportsAgent10"].Flag; } set { this["bSupportsAgent10"].Flag = value; } }
        public bool bSupportsAgent11 { get { return this["bSupportsAgent11"].Flag; } set { this["bSupportsAgent11"].Flag = value; } }
        public bool bSupportsAgent12 { get { return this["bSupportsAgent12"].Flag; } set { this["bSupportsAgent12"].Flag = value; } }
        public bool bSupportsAgent13 { get { return this["bSupportsAgent13"].Flag; } set { this["bSupportsAgent13"].Flag = value; } }
        public bool bSupportsAgent14 { get { return this["bSupportsAgent14"].Flag; } set { this["bSupportsAgent14"].Flag = value; } }
        public bool bSupportsAgent15 { get { return this["bSupportsAgent15"].Flag; } set { this["bSupportsAgent15"].Flag = value; } }
    }
    public class NavDataConfig : NavAgentProperties
    {
        public NavDataConfig(nint addr) : base(addr) { }
        public NavDataConfig() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Vector DefaultQueryExtent { get { return this[nameof(DefaultQueryExtent)].As<Vector>(); } set { this["DefaultQueryExtent"] = value; } }
        public UEObject NavigationDataClass { get { return this["NavigationDataClass"]; } set { this["NavigationDataClass"] = value; } }
        public UEObject NavDataClass { get { return this["NavDataClass"]; } set { this["NavDataClass"] = value; } }
    }
    public class NavAgentProperties : MovementProperties
    {
        public NavAgentProperties(nint addr) : base(addr) { }
        public NavAgentProperties() : base(0) { }
        public float AgentRadius { get { return this["AgentRadius"].GetValue<float>(); } set { this["AgentRadius"].SetValue<float>(value); } }
        public float AgentHeight { get { return this["AgentHeight"].GetValue<float>(); } set { this["AgentHeight"].SetValue<float>(value); } }
        public float AgentStepHeight { get { return this["AgentStepHeight"].GetValue<float>(); } set { this["AgentStepHeight"].SetValue<float>(value); } }
        public float NavWalkingSearchHeightScale { get { return this["NavWalkingSearchHeightScale"].GetValue<float>(); } set { this["NavWalkingSearchHeightScale"].SetValue<float>(value); } }
        public SoftClassPath PreferredNavData { get { return this[nameof(PreferredNavData)].As<SoftClassPath>(); } set { this["PreferredNavData"] = value; } }
    }
    public class MovementProperties : UEObject
    {
        public MovementProperties(nint addr) : base(addr) { }
        public MovementProperties() : base(0) { }
        public bool bCanCrouch { get { return this["bCanCrouch"].Flag; } set { this["bCanCrouch"].Flag = value; } }
        public bool bCanJump { get { return this["bCanJump"].Flag; } set { this["bCanJump"].Flag = value; } }
        public bool bCanWalk { get { return this["bCanWalk"].Flag; } set { this["bCanWalk"].Flag = value; } }
        public bool bCanSwim { get { return this["bCanSwim"].Flag; } set { this["bCanSwim"].Flag = value; } }
        public bool bCanFly { get { return this["bCanFly"].Flag; } set { this["bCanFly"].Flag = value; } }
        public bool bIsGhost { get { return this["bIsGhost"].Flag; } set { this["bIsGhost"].Flag = value; } }
    }
    public class NavAvoidanceMask : UEObject
    {
        public NavAvoidanceMask(nint addr) : base(addr) { }
        public NavAvoidanceMask() : base(0) { }
        public bool bGroup0 { get { return this["bGroup0"].Flag; } set { this["bGroup0"].Flag = value; } }
        public bool bGroup1 { get { return this["bGroup1"].Flag; } set { this["bGroup1"].Flag = value; } }
        public bool bGroup2 { get { return this["bGroup2"].Flag; } set { this["bGroup2"].Flag = value; } }
        public bool bGroup3 { get { return this["bGroup3"].Flag; } set { this["bGroup3"].Flag = value; } }
        public bool bGroup4 { get { return this["bGroup4"].Flag; } set { this["bGroup4"].Flag = value; } }
        public bool bGroup5 { get { return this["bGroup5"].Flag; } set { this["bGroup5"].Flag = value; } }
        public bool bGroup6 { get { return this["bGroup6"].Flag; } set { this["bGroup6"].Flag = value; } }
        public bool bGroup7 { get { return this["bGroup7"].Flag; } set { this["bGroup7"].Flag = value; } }
        public bool bGroup8 { get { return this["bGroup8"].Flag; } set { this["bGroup8"].Flag = value; } }
        public bool bGroup9 { get { return this["bGroup9"].Flag; } set { this["bGroup9"].Flag = value; } }
        public bool bGroup10 { get { return this["bGroup10"].Flag; } set { this["bGroup10"].Flag = value; } }
        public bool bGroup11 { get { return this["bGroup11"].Flag; } set { this["bGroup11"].Flag = value; } }
        public bool bGroup12 { get { return this["bGroup12"].Flag; } set { this["bGroup12"].Flag = value; } }
        public bool bGroup13 { get { return this["bGroup13"].Flag; } set { this["bGroup13"].Flag = value; } }
        public bool bGroup14 { get { return this["bGroup14"].Flag; } set { this["bGroup14"].Flag = value; } }
        public bool bGroup15 { get { return this["bGroup15"].Flag; } set { this["bGroup15"].Flag = value; } }
        public bool bGroup16 { get { return this["bGroup16"].Flag; } set { this["bGroup16"].Flag = value; } }
        public bool bGroup17 { get { return this["bGroup17"].Flag; } set { this["bGroup17"].Flag = value; } }
        public bool bGroup18 { get { return this["bGroup18"].Flag; } set { this["bGroup18"].Flag = value; } }
        public bool bGroup19 { get { return this["bGroup19"].Flag; } set { this["bGroup19"].Flag = value; } }
        public bool bGroup20 { get { return this["bGroup20"].Flag; } set { this["bGroup20"].Flag = value; } }
        public bool bGroup21 { get { return this["bGroup21"].Flag; } set { this["bGroup21"].Flag = value; } }
        public bool bGroup22 { get { return this["bGroup22"].Flag; } set { this["bGroup22"].Flag = value; } }
        public bool bGroup23 { get { return this["bGroup23"].Flag; } set { this["bGroup23"].Flag = value; } }
        public bool bGroup24 { get { return this["bGroup24"].Flag; } set { this["bGroup24"].Flag = value; } }
        public bool bGroup25 { get { return this["bGroup25"].Flag; } set { this["bGroup25"].Flag = value; } }
        public bool bGroup26 { get { return this["bGroup26"].Flag; } set { this["bGroup26"].Flag = value; } }
        public bool bGroup27 { get { return this["bGroup27"].Flag; } set { this["bGroup27"].Flag = value; } }
        public bool bGroup28 { get { return this["bGroup28"].Flag; } set { this["bGroup28"].Flag = value; } }
        public bool bGroup29 { get { return this["bGroup29"].Flag; } set { this["bGroup29"].Flag = value; } }
        public bool bGroup30 { get { return this["bGroup30"].Flag; } set { this["bGroup30"].Flag = value; } }
        public bool bGroup31 { get { return this["bGroup31"].Flag; } set { this["bGroup31"].Flag = value; } }
    }
    public class NameCurveKey : UEObject
    {
        public NameCurveKey(nint addr) : base(addr) { }
        public NameCurveKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public string Value { get { return this["Value"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class NameCurve : IndexedCurve
    {
        public NameCurve(nint addr) : base(addr) { }
        public NameCurve() : base(0) { }
        public Array<NameCurveKey> Keys { get { return new Array<NameCurveKey>(this["Keys"]); } set { this["Keys"] = value; } }
    }
    public class PurchaseInfo : UEObject
    {
        public PurchaseInfo(nint addr) : base(addr) { }
        public PurchaseInfo() : base(0) { }
        public string Identifier { get { return this["Identifier"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayDescription { get { return this["DisplayDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayPrice { get { return this["DisplayPrice"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MeshReductionSettings : UEObject
    {
        public MeshReductionSettings(nint addr) : base(addr) { }
        public MeshReductionSettings() : base(0) { }
        public float PercentTriangles { get { return this["PercentTriangles"].GetValue<float>(); } set { this["PercentTriangles"].SetValue<float>(value); } }
        public float PercentVertices { get { return this["PercentVertices"].GetValue<float>(); } set { this["PercentVertices"].SetValue<float>(value); } }
        public float MaxDeviation { get { return this["MaxDeviation"].GetValue<float>(); } set { this["MaxDeviation"].SetValue<float>(value); } }
        public float PixelError { get { return this["PixelError"].GetValue<float>(); } set { this["PixelError"].SetValue<float>(value); } }
        public float WeldingThreshold { get { return this["WeldingThreshold"].GetValue<float>(); } set { this["WeldingThreshold"].SetValue<float>(value); } }
        public float HardAngleThreshold { get { return this["HardAngleThreshold"].GetValue<float>(); } set { this["HardAngleThreshold"].SetValue<float>(value); } }
        public int BaseLODModel { get { return this["BaseLODModel"].GetValue<int>(); } set { this["BaseLODModel"].SetValue<int>(value); } }
        public byte SilhouetteImportance { get { return this["SilhouetteImportance"].GetValue<byte>(); } set { this["SilhouetteImportance"].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this["TextureImportance"].GetValue<byte>(); } set { this["TextureImportance"].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this["ShadingImportance"].GetValue<byte>(); } set { this["ShadingImportance"].SetValue<byte>(value); } }
        public bool bRecalculateNormals { get { return this["bRecalculateNormals"].Flag; } set { this["bRecalculateNormals"].Flag = value; } }
        public bool bGenerateUniqueLightmapUVs { get { return this["bGenerateUniqueLightmapUVs"].Flag; } set { this["bGenerateUniqueLightmapUVs"].Flag = value; } }
        public bool bKeepSymmetry { get { return this["bKeepSymmetry"].Flag; } set { this["bKeepSymmetry"].Flag = value; } }
        public bool bVisibilityAided { get { return this["bVisibilityAided"].Flag; } set { this["bVisibilityAided"].Flag = value; } }
        public bool bCullOccluded { get { return this["bCullOccluded"].Flag; } set { this["bCullOccluded"].Flag = value; } }
        public EStaticMeshReductionTerimationCriterion TerminationCriterion { get { return (EStaticMeshReductionTerimationCriterion)this["TerminationCriterion"].GetValue<int>(); } set { this["TerminationCriterion"].SetValue<int>((int)value); } }
        public byte VisibilityAggressiveness { get { return this["VisibilityAggressiveness"].GetValue<byte>(); } set { this["VisibilityAggressiveness"].SetValue<byte>(value); } }
        public byte VertexColorImportance { get { return this["VertexColorImportance"].GetValue<byte>(); } set { this["VertexColorImportance"].SetValue<byte>(value); } }
    }
    public class MeshProxySettings : UEObject
    {
        public MeshProxySettings(nint addr) : base(addr) { }
        public MeshProxySettings() : base(0) { }
        public int ScreenSize { get { return this["ScreenSize"].GetValue<int>(); } set { this["ScreenSize"].SetValue<int>(value); } }
        public float VoxelSize { get { return this["VoxelSize"].GetValue<float>(); } set { this["VoxelSize"].SetValue<float>(value); } }
        public MaterialProxySettings MaterialSettings { get { return this[nameof(MaterialSettings)].As<MaterialProxySettings>(); } set { this["MaterialSettings"] = value; } }
        public float MergeDistance { get { return this["MergeDistance"].GetValue<float>(); } set { this["MergeDistance"].SetValue<float>(value); } }
        public Color UnresolvedGeometryColor { get { return this[nameof(UnresolvedGeometryColor)].As<Color>(); } set { this["UnresolvedGeometryColor"] = value; } }
        public float MaxRayCastDist { get { return this["MaxRayCastDist"].GetValue<float>(); } set { this["MaxRayCastDist"].SetValue<float>(value); } }
        public float HardAngleThreshold { get { return this["HardAngleThreshold"].GetValue<float>(); } set { this["HardAngleThreshold"].SetValue<float>(value); } }
        public int LightMapResolution { get { return this["LightMapResolution"].GetValue<int>(); } set { this["LightMapResolution"].SetValue<int>(value); } }
        public byte NormalCalculationMethod { get { return this["NormalCalculationMethod"].GetValue<byte>(); } set { this["NormalCalculationMethod"].SetValue<byte>(value); } }
        public byte LandscapeCullingPrecision { get { return this["LandscapeCullingPrecision"].GetValue<byte>(); } set { this["LandscapeCullingPrecision"].SetValue<byte>(value); } }
        public bool bCalculateCorrectLODModel { get { return this["bCalculateCorrectLODModel"].Flag; } set { this["bCalculateCorrectLODModel"].Flag = value; } }
        public bool bOverrideVoxelSize { get { return this["bOverrideVoxelSize"].Flag; } set { this["bOverrideVoxelSize"].Flag = value; } }
        public bool bOverrideTransferDistance { get { return this["bOverrideTransferDistance"].Flag; } set { this["bOverrideTransferDistance"].Flag = value; } }
        public bool bUseHardAngleThreshold { get { return this["bUseHardAngleThreshold"].Flag; } set { this["bUseHardAngleThreshold"].Flag = value; } }
        public bool bComputeLightMapResolution { get { return this["bComputeLightMapResolution"].Flag; } set { this["bComputeLightMapResolution"].Flag = value; } }
        public bool bRecalculateNormals { get { return this["bRecalculateNormals"].Flag; } set { this["bRecalculateNormals"].Flag = value; } }
        public bool bUseLandscapeCulling { get { return this["bUseLandscapeCulling"].Flag; } set { this["bUseLandscapeCulling"].Flag = value; } }
        public bool bAllowAdjacency { get { return this["bAllowAdjacency"].Flag; } set { this["bAllowAdjacency"].Flag = value; } }
        public bool bAllowDistanceField { get { return this["bAllowDistanceField"].Flag; } set { this["bAllowDistanceField"].Flag = value; } }
        public bool bReuseMeshLightmapUVs { get { return this["bReuseMeshLightmapUVs"].Flag; } set { this["bReuseMeshLightmapUVs"].Flag = value; } }
        public bool bCreateCollision { get { return this["bCreateCollision"].Flag; } set { this["bCreateCollision"].Flag = value; } }
        public bool bAllowVertexColors { get { return this["bAllowVertexColors"].Flag; } set { this["bAllowVertexColors"].Flag = value; } }
        public bool bGenerateLightmapUVs { get { return this["bGenerateLightmapUVs"].Flag; } set { this["bGenerateLightmapUVs"].Flag = value; } }
    }
    public class MeshMergingSettings : UEObject
    {
        public MeshMergingSettings(nint addr) : base(addr) { }
        public MeshMergingSettings() : base(0) { }
        public int TargetLightMapResolution { get { return this["TargetLightMapResolution"].GetValue<int>(); } set { this["TargetLightMapResolution"].SetValue<int>(value); } }
        public EUVOutput OutputUVs { get { return (EUVOutput)this["OutputUVs"].GetValue<int>(); } set { this["OutputUVs"].SetValue<int>((int)value); } }
        public MaterialProxySettings MaterialSettings { get { return this[nameof(MaterialSettings)].As<MaterialProxySettings>(); } set { this["MaterialSettings"] = value; } }
        public int GutterSize { get { return this["GutterSize"].GetValue<int>(); } set { this["GutterSize"].SetValue<int>(value); } }
        public int SpecificLOD { get { return this["SpecificLOD"].GetValue<int>(); } set { this["SpecificLOD"].SetValue<int>(value); } }
        public EMeshLODSelectionType LODSelectionType { get { return (EMeshLODSelectionType)this["LODSelectionType"].GetValue<int>(); } set { this["LODSelectionType"].SetValue<int>((int)value); } }
        public bool bGenerateLightMapUV { get { return this["bGenerateLightMapUV"].Flag; } set { this["bGenerateLightMapUV"].Flag = value; } }
        public bool bComputedLightMapResolution { get { return this["bComputedLightMapResolution"].Flag; } set { this["bComputedLightMapResolution"].Flag = value; } }
        public bool bPivotPointAtZero { get { return this["bPivotPointAtZero"].Flag; } set { this["bPivotPointAtZero"].Flag = value; } }
        public bool bMergePhysicsData { get { return this["bMergePhysicsData"].Flag; } set { this["bMergePhysicsData"].Flag = value; } }
        public bool bMergeMaterials { get { return this["bMergeMaterials"].Flag; } set { this["bMergeMaterials"].Flag = value; } }
        public bool bCreateMergedMaterial { get { return this["bCreateMergedMaterial"].Flag; } set { this["bCreateMergedMaterial"].Flag = value; } }
        public bool bBakeVertexDataToMesh { get { return this["bBakeVertexDataToMesh"].Flag; } set { this["bBakeVertexDataToMesh"].Flag = value; } }
        public bool bUseVertexDataForBakingMaterial { get { return this["bUseVertexDataForBakingMaterial"].Flag; } set { this["bUseVertexDataForBakingMaterial"].Flag = value; } }
        public bool bUseTextureBinning { get { return this["bUseTextureBinning"].Flag; } set { this["bUseTextureBinning"].Flag = value; } }
        public bool bReuseMeshLightmapUVs { get { return this["bReuseMeshLightmapUVs"].Flag; } set { this["bReuseMeshLightmapUVs"].Flag = value; } }
        public bool bMergeEquivalentMaterials { get { return this["bMergeEquivalentMaterials"].Flag; } set { this["bMergeEquivalentMaterials"].Flag = value; } }
        public bool bUseLandscapeCulling { get { return this["bUseLandscapeCulling"].Flag; } set { this["bUseLandscapeCulling"].Flag = value; } }
        public bool bIncludeImposters { get { return this["bIncludeImposters"].Flag; } set { this["bIncludeImposters"].Flag = value; } }
        public bool bAllowDistanceField { get { return this["bAllowDistanceField"].Flag; } set { this["bAllowDistanceField"].Flag = value; } }
    }
    public class MeshInstancingSettings : UEObject
    {
        public MeshInstancingSettings(nint addr) : base(addr) { }
        public MeshInstancingSettings() : base(0) { }
        public UEObject ActorClassToUse { get { return this["ActorClassToUse"]; } set { this["ActorClassToUse"] = value; } }
        public int InstanceReplacementThreshold { get { return this["InstanceReplacementThreshold"].GetValue<int>(); } set { this["InstanceReplacementThreshold"].SetValue<int>(value); } }
        public EMeshInstancingReplacementMethod MeshReplacementMethod { get { return (EMeshInstancingReplacementMethod)this["MeshReplacementMethod"].GetValue<int>(); } set { this["MeshReplacementMethod"].SetValue<int>((int)value); } }
        public bool bSkipMeshesWithVertexColors { get { return this["bSkipMeshesWithVertexColors"].Flag; } set { this["bSkipMeshesWithVertexColors"].Flag = value; } }
        public bool bUseHLODVolumes { get { return this["bUseHLODVolumes"].Flag; } set { this["bUseHLODVolumes"].Flag = value; } }
        public UEObject ISMComponentToUse { get { return this["ISMComponentToUse"]; } set { this["ISMComponentToUse"] = value; } }
    }
    public class MemberReference : UEObject
    {
        public MemberReference(nint addr) : base(addr) { }
        public MemberReference() : base(0) { }
        public UEObject MemberParent { get { return this[nameof(MemberParent)]; } set { this["MemberParent"] = value; } }
        public string MemberScope { get { return this["MemberScope"].ToString(); } set { /* String properties are read-only */ } }
        public string MemberName { get { return this["MemberName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid MemberGuid { get { return this[nameof(MemberGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["MemberGuid"] = value; } }
        public bool bSelfContext { get { return this["bSelfContext"].Flag; } set { this["bSelfContext"].Flag = value; } }
        public bool bWasDeprecated { get { return this["bWasDeprecated"].Flag; } set { this["bWasDeprecated"].Flag = value; } }
    }
    public class CameraCutInfo : UEObject
    {
        public CameraCutInfo(nint addr) : base(addr) { }
        public CameraCutInfo() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
    }
    public class InterpGroupActorInfo : UEObject
    {
        public InterpGroupActorInfo(nint addr) : base(addr) { }
        public InterpGroupActorInfo() : base(0) { }
        public string ObjectName { get { return this["ObjectName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<Actor> Actors { get { return new Array<Actor>(this["Actors"]); } set { this["Actors"] = value; } }
    }
    public class CollectionScalarParameter : CollectionParameterBase
    {
        public CollectionScalarParameter(nint addr) : base(addr) { }
        public CollectionScalarParameter() : base(0) { }
        public float DefaultValue { get { return this["DefaultValue"].GetValue<float>(); } set { this["DefaultValue"].SetValue<float>(value); } }
    }
    public class CollectionVectorParameter : CollectionParameterBase
    {
        public CollectionVectorParameter(nint addr) : base(addr) { }
        public CollectionVectorParameter() : base(0) { }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
    }
    public class CollectionParameterBase : UEObject
    {
        public CollectionParameterBase(nint addr) : base(addr) { }
        public CollectionParameterBase() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ID { get { return this[nameof(ID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ID"] = value; } }
    }
    public class MaterialLayersFunctions : UEObject
    {
        public MaterialLayersFunctions(nint addr) : base(addr) { }
        public MaterialLayersFunctions() : base(0) { }
        public Array<MaterialFunctionInterface> Layers { get { return new Array<MaterialFunctionInterface>(this["Layers"]); } set { this["Layers"] = value; } }
        public Array<MaterialFunctionInterface> Blends { get { return new Array<MaterialFunctionInterface>(this["Blends"]); } set { this["Blends"] = value; } }
        public List<bool> LayerStates { get { return this["LayerStates"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public string KeyString { get { return this["KeyString"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class LightmassMaterialInterfaceSettings : UEObject
    {
        public LightmassMaterialInterfaceSettings(nint addr) : base(addr) { }
        public LightmassMaterialInterfaceSettings() : base(0) { }
        public float EmissiveBoost { get { return this["EmissiveBoost"].GetValue<float>(); } set { this["EmissiveBoost"].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this["DiffuseBoost"].GetValue<float>(); } set { this["DiffuseBoost"].SetValue<float>(value); } }
        public float ExportResolutionScale { get { return this["ExportResolutionScale"].GetValue<float>(); } set { this["ExportResolutionScale"].SetValue<float>(value); } }
        public bool bCastShadowAsMasked { get { return this["bCastShadowAsMasked"].Flag; } set { this["bCastShadowAsMasked"].Flag = value; } }
        public bool bOverrideCastShadowAsMasked { get { return this["bOverrideCastShadowAsMasked"].Flag; } set { this["bOverrideCastShadowAsMasked"].Flag = value; } }
        public bool bOverrideEmissiveBoost { get { return this["bOverrideEmissiveBoost"].Flag; } set { this["bOverrideEmissiveBoost"].Flag = value; } }
        public bool bOverrideDiffuseBoost { get { return this["bOverrideDiffuseBoost"].Flag; } set { this["bOverrideDiffuseBoost"].Flag = value; } }
        public bool bOverrideExportResolutionScale { get { return this["bOverrideExportResolutionScale"].Flag; } set { this["bOverrideExportResolutionScale"].Flag = value; } }
    }
    public class MaterialTextureInfo : UEObject
    {
        public MaterialTextureInfo(nint addr) : base(addr) { }
        public MaterialTextureInfo() : base(0) { }
        public float SamplingScale { get { return this["SamplingScale"].GetValue<float>(); } set { this["SamplingScale"].SetValue<float>(value); } }
        public int UVChannelIndex { get { return this["UVChannelIndex"].GetValue<int>(); } set { this["UVChannelIndex"].SetValue<int>(value); } }
        public string TextureName { get { return this["TextureName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MaterialInstanceBasePropertyOverrides : UEObject
    {
        public MaterialInstanceBasePropertyOverrides(nint addr) : base(addr) { }
        public MaterialInstanceBasePropertyOverrides() : base(0) { }
        public bool bOverride_OpacityMaskClipValue { get { return this["bOverride_OpacityMaskClipValue"].Flag; } set { this["bOverride_OpacityMaskClipValue"].Flag = value; } }
        public bool bOverride_BlendMode { get { return this["bOverride_BlendMode"].Flag; } set { this["bOverride_BlendMode"].Flag = value; } }
        public bool bOverride_ShadingModel { get { return this["bOverride_ShadingModel"].Flag; } set { this["bOverride_ShadingModel"].Flag = value; } }
        public bool bOverride_DitheredLODTransition { get { return this["bOverride_DitheredLODTransition"].Flag; } set { this["bOverride_DitheredLODTransition"].Flag = value; } }
        public bool bOverride_CastDynamicShadowAsMasked { get { return this["bOverride_CastDynamicShadowAsMasked"].Flag; } set { this["bOverride_CastDynamicShadowAsMasked"].Flag = value; } }
        public bool bOverride_TwoSided { get { return this["bOverride_TwoSided"].Flag; } set { this["bOverride_TwoSided"].Flag = value; } }
        public bool TwoSided { get { return this["TwoSided"].Flag; } set { this["TwoSided"].Flag = value; } }
        public bool DitheredLODTransition { get { return this["DitheredLODTransition"].Flag; } set { this["DitheredLODTransition"].Flag = value; } }
        public bool bCastDynamicShadowAsMasked { get { return this["bCastDynamicShadowAsMasked"].Flag; } set { this["bCastDynamicShadowAsMasked"].Flag = value; } }
        public byte BlendMode { get { return this["BlendMode"].GetValue<byte>(); } set { this["BlendMode"].SetValue<byte>(value); } }
        public byte ShadingModel { get { return this["ShadingModel"].GetValue<byte>(); } set { this["ShadingModel"].SetValue<byte>(value); } }
        public float OpacityMaskClipValue { get { return this["OpacityMaskClipValue"].GetValue<float>(); } set { this["OpacityMaskClipValue"].SetValue<float>(value); } }
    }
    public class ScalarParameterAtlasInstanceData : UEObject
    {
        public ScalarParameterAtlasInstanceData(nint addr) : base(addr) { }
        public ScalarParameterAtlasInstanceData() : base(0) { }
        public bool bIsUsedAsAtlasPosition { get { return this["bIsUsedAsAtlasPosition"].Flag; } set { this["bIsUsedAsAtlasPosition"].Flag = value; } }
        public UEObject Curve { get { return this["Curve"]; } set { this["Curve"] = value; } }
        public UEObject Atlas { get { return this["Atlas"]; } set { this["Atlas"] = value; } }
    }
    public class ScalarParameterValue : UEObject
    {
        public ScalarParameterValue(nint addr) : base(addr) { }
        public ScalarParameterValue() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public float ParameterValue { get { return this["ParameterValue"].GetValue<float>(); } set { this["ParameterValue"].SetValue<float>(value); } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class VectorParameterValue : UEObject
    {
        public VectorParameterValue(nint addr) : base(addr) { }
        public VectorParameterValue() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public LinearColor ParameterValue { get { return this[nameof(ParameterValue)].As<LinearColor>(); } set { this["ParameterValue"] = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class TextureParameterValue : UEObject
    {
        public TextureParameterValue(nint addr) : base(addr) { }
        public TextureParameterValue() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Texture ParameterValue { get { return this[nameof(ParameterValue)].As<Texture>(); } set { this["ParameterValue"] = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class RuntimeVirtualTextureParameterValue : UEObject
    {
        public RuntimeVirtualTextureParameterValue(nint addr) : base(addr) { }
        public RuntimeVirtualTextureParameterValue() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public RuntimeVirtualTexture ParameterValue { get { return this[nameof(ParameterValue)].As<RuntimeVirtualTexture>(); } set { this["ParameterValue"] = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class FontParameterValue : UEObject
    {
        public FontParameterValue(nint addr) : base(addr) { }
        public FontParameterValue() : base(0) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Font FontValue { get { return this[nameof(FontValue)].As<Font>(); } set { this["FontValue"] = value; } }
        public int FontPage { get { return this["FontPage"].GetValue<int>(); } set { this["FontPage"].SetValue<int>(value); } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class FunctionExpressionInput : UEObject
    {
        public FunctionExpressionInput(nint addr) : base(addr) { }
        public FunctionExpressionInput() : base(0) { }
        public MaterialExpressionFunctionInput ExpressionInput { get { return this[nameof(ExpressionInput)].As<MaterialExpressionFunctionInput>(); } set { this["ExpressionInput"] = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionInputId { get { return this[nameof(ExpressionInputId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionInputId"] = value; } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class FunctionExpressionOutput : UEObject
    {
        public FunctionExpressionOutput(nint addr) : base(addr) { }
        public FunctionExpressionOutput() : base(0) { }
        public MaterialExpressionFunctionOutput ExpressionOutput { get { return this[nameof(ExpressionOutput)].As<MaterialExpressionFunctionOutput>(); } set { this["ExpressionOutput"] = value; } }
        public SDK.Script.CoreUObject.Guid ExpressionOutputId { get { return this[nameof(ExpressionOutputId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionOutputId"] = value; } }
        public ExpressionOutput Output { get { return this[nameof(Output)].As<ExpressionOutput>(); } set { this["Output"] = value; } }
    }
    public class CustomInput : UEObject
    {
        public CustomInput(nint addr) : base(addr) { }
        public CustomInput() : base(0) { }
        public string InputName { get { return this["InputName"].ToString(); } set { /* String properties are read-only */ } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class CustomOutput : UEObject
    {
        public CustomOutput(nint addr) : base(addr) { }
        public CustomOutput() : base(0) { }
        public string OutputName { get { return this["OutputName"].ToString(); } set { /* String properties are read-only */ } }
        public byte OutputType { get { return this["OutputType"].GetValue<byte>(); } set { this["OutputType"].SetValue<byte>(value); } }
    }
    public class CustomDefine : UEObject
    {
        public CustomDefine(nint addr) : base(addr) { }
        public CustomDefine() : base(0) { }
        public string DefineName { get { return this["DefineName"].ToString(); } set { /* String properties are read-only */ } }
        public string DefineValue { get { return this["DefineValue"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ParameterChannelNames : UEObject
    {
        public ParameterChannelNames(nint addr) : base(addr) { }
        public ParameterChannelNames() : base(0) { }
        public string R { get { return this["R"].ToString(); } set { /* String properties are read-only */ } }
        public string G { get { return this["G"].ToString(); } set { /* String properties are read-only */ } }
        public string B { get { return this["B"].ToString(); } set { /* String properties are read-only */ } }
        public string A { get { return this["A"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class StaticComponentMaskValue : UEObject
    {
        public StaticComponentMaskValue(nint addr) : base(addr) { }
        public StaticComponentMaskValue() : base(0) { }
        public bool R { get { return this["R"].Flag; } set { this["R"].Flag = value; } }
        public bool G { get { return this["G"].Flag; } set { this["G"].Flag = value; } }
        public bool B { get { return this["B"].Flag; } set { this["B"].Flag = value; } }
        public bool A { get { return this["A"].Flag; } set { this["A"].Flag = value; } }
    }
    public class MaterialParameterInfo : UEObject
    {
        public MaterialParameterInfo(nint addr) : base(addr) { }
        public MaterialParameterInfo() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public byte Association { get { return this["Association"].GetValue<byte>(); } set { this["Association"].SetValue<byte>(value); } }
        public int Index { get { return this["Index"].GetValue<int>(); } set { this["Index"].SetValue<int>(value); } }
    }
    public class MaterialCachedParameterEntry : UEObject
    {
        public MaterialCachedParameterEntry(nint addr) : base(addr) { }
        public MaterialCachedParameterEntry() : base(0) { }
        public List<ulong> NameHashes { get { return this["NameHashes"].GetList<ulong>(); } set { /* Arrays are read-only */ } }
        public Array<MaterialParameterInfo> ParameterInfos { get { return new Array<MaterialParameterInfo>(this["ParameterInfos"]); } set { this["ParameterInfos"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> ExpressionGuids { get { return new Array<SDK.Script.CoreUObject.Guid>(this["ExpressionGuids"]); } set { this["ExpressionGuids"] = value; } }
    }
    public class MaterialCachedParameters : UEObject
    {
        public MaterialCachedParameters(nint addr) : base(addr) { }
        public MaterialCachedParameters() : base(0) { }
        public MaterialCachedParameterEntry RuntimeEntries { get { return this[nameof(RuntimeEntries)].As<MaterialCachedParameterEntry>(); } set { this["RuntimeEntries"] = value; } }
        public List<float> ScalarValues { get { return this["ScalarValues"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<LinearColor> VectorValues { get { return new Array<LinearColor>(this["VectorValues"]); } set { this["VectorValues"] = value; } }
        public Array<Texture> TextureValues { get { return new Array<Texture>(this["TextureValues"]); } set { this["TextureValues"] = value; } }
        public Array<Font> FontValues { get { return new Array<Font>(this["FontValues"]); } set { this["FontValues"] = value; } }
        public List<int> FontPageValues { get { return this["FontPageValues"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<RuntimeVirtualTexture> RuntimeVirtualTextureValues { get { return new Array<RuntimeVirtualTexture>(this["RuntimeVirtualTextureValues"]); } set { this["RuntimeVirtualTextureValues"] = value; } }
    }
    public class MaterialFunctionInfo : UEObject
    {
        public MaterialFunctionInfo(nint addr) : base(addr) { }
        public MaterialFunctionInfo() : base(0) { }
        public SDK.Script.CoreUObject.Guid StateId { get { return this[nameof(StateId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["StateId"] = value; } }
        public MaterialFunctionInterface Function { get { return this[nameof(Function)].As<MaterialFunctionInterface>(); } set { this["Function"] = value; } }
    }
    public class MaterialParameterCollectionInfo : UEObject
    {
        public MaterialParameterCollectionInfo(nint addr) : base(addr) { }
        public MaterialParameterCollectionInfo() : base(0) { }
        public SDK.Script.CoreUObject.Guid StateId { get { return this[nameof(StateId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["StateId"] = value; } }
        public MaterialParameterCollection ParameterCollection { get { return this[nameof(ParameterCollection)].As<MaterialParameterCollection>(); } set { this["ParameterCollection"] = value; } }
    }
    public class MaterialCachedExpressionData : UEObject
    {
        public MaterialCachedExpressionData(nint addr) : base(addr) { }
        public MaterialCachedExpressionData() : base(0) { }
        public MaterialCachedParameters Parameters { get { return this[nameof(Parameters)].As<MaterialCachedParameters>(); } set { this["Parameters"] = value; } }
        public Array<UEObject> ReferencedTextures { get { return new Array<UEObject>(this["ReferencedTextures"]); } set { this["ReferencedTextures"] = value; } }
        public Array<MaterialFunctionInfo> FunctionInfos { get { return new Array<MaterialFunctionInfo>(this["FunctionInfos"]); } set { this["FunctionInfos"] = value; } }
        public Array<MaterialParameterCollectionInfo> ParameterCollectionInfos { get { return new Array<MaterialParameterCollectionInfo>(this["ParameterCollectionInfos"]); } set { this["ParameterCollectionInfos"] = value; } }
        public Array<MaterialFunctionInterface> DefaultLayers { get { return new Array<MaterialFunctionInterface>(this["DefaultLayers"]); } set { this["DefaultLayers"] = value; } }
        public Array<MaterialFunctionInterface> DefaultLayerBlends { get { return new Array<MaterialFunctionInterface>(this["DefaultLayerBlends"]); } set { this["DefaultLayerBlends"] = value; } }
        public Array<LandscapeGrassType> GrassTypes { get { return new Array<LandscapeGrassType>(this["GrassTypes"]); } set { this["GrassTypes"] = value; } }
        public List<string> DynamicParameterNames { get { return this["DynamicParameterNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<bool> QualityLevelsUsed { get { return this["QualityLevelsUsed"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public bool bHasRuntimeVirtualTextureOutput { get { return this["bHasRuntimeVirtualTextureOutput"].Flag; } set { this["bHasRuntimeVirtualTextureOutput"].Flag = value; } }
        public bool bHasSceneColor { get { return this["bHasSceneColor"].Flag; } set { this["bHasSceneColor"].Flag = value; } }
    }
    public class MaterialSpriteElement : UEObject
    {
        public MaterialSpriteElement(nint addr) : base(addr) { }
        public MaterialSpriteElement() : base(0) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public CurveFloat DistanceToOpacityCurve { get { return this[nameof(DistanceToOpacityCurve)].As<CurveFloat>(); } set { this["DistanceToOpacityCurve"] = value; } }
        public bool bSizeIsInScreenSpace { get { return this["bSizeIsInScreenSpace"].Flag; } set { this["bSizeIsInScreenSpace"].Flag = value; } }
        public float BaseSizeX { get { return this["BaseSizeX"].GetValue<float>(); } set { this["BaseSizeX"].SetValue<float>(value); } }
        public float BaseSizeY { get { return this["BaseSizeY"].GetValue<float>(); } set { this["BaseSizeY"].SetValue<float>(value); } }
        public CurveFloat DistanceToSizeCurve { get { return this[nameof(DistanceToSizeCurve)].As<CurveFloat>(); } set { this["DistanceToSizeCurve"] = value; } }
    }
    public class ParameterGroupData : UEObject
    {
        public ParameterGroupData(nint addr) : base(addr) { }
        public ParameterGroupData() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public int GroupSortPriority { get { return this["GroupSortPriority"].GetValue<int>(); } set { this["GroupSortPriority"].SetValue<int>(value); } }
    }
    public class LODMappingData : UEObject
    {
        public LODMappingData(nint addr) : base(addr) { }
        public LODMappingData() : base(0) { }
        public List<int> Mapping { get { return this["Mapping"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<int> InverseMapping { get { return this["InverseMapping"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class ComponentSync : UEObject
    {
        public ComponentSync(nint addr) : base(addr) { }
        public ComponentSync() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public ESyncOption SyncOption { get { return (ESyncOption)this["SyncOption"].GetValue<int>(); } set { this["SyncOption"].SetValue<int>((int)value); } }
    }
    public class HLODInstancingKey : UEObject
    {
        public HLODInstancingKey(nint addr) : base(addr) { }
        public HLODInstancingKey() : base(0) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class ClientReceiveData : UEObject
    {
        public ClientReceiveData(nint addr) : base(addr) { }
        public ClientReceiveData() : base(0) { }
        public PlayerController LocalPC { get { return this[nameof(LocalPC)].As<PlayerController>(); } set { this["LocalPC"] = value; } }
        public string MessageType { get { return this["MessageType"].ToString(); } set { /* String properties are read-only */ } }
        public int MessageIndex { get { return this["MessageIndex"].GetValue<int>(); } set { this["MessageIndex"].SetValue<int>(value); } }
        public string MessageString { get { return this["MessageString"].ToString(); } set { /* String properties are read-only */ } }
        public PlayerState RelatedPlayerState { get { return this[nameof(RelatedPlayerState)].As<PlayerState>(); } set { this["RelatedPlayerState"] = value; } }
        public UEObject OptionalObject { get { return this[nameof(OptionalObject)]; } set { this["OptionalObject"] = value; } }
    }
    public class BatchedLine : UEObject
    {
        public BatchedLine(nint addr) : base(addr) { }
        public BatchedLine() : base(0) { }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public float Thickness { get { return this["Thickness"].GetValue<float>(); } set { this["Thickness"].SetValue<float>(value); } }
        public float RemainingLifeTime { get { return this["RemainingLifeTime"].GetValue<float>(); } set { this["RemainingLifeTime"].SetValue<float>(value); } }
        public byte DepthPriority { get { return this["DepthPriority"].GetValue<byte>(); } set { this["DepthPriority"].SetValue<byte>(value); } }
    }
    public class BatchedPoint : UEObject
    {
        public BatchedPoint(nint addr) : base(addr) { }
        public BatchedPoint() : base(0) { }
        public Vector position { get { return this[nameof(position)].As<Vector>(); } set { this["position"] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public float PointSize { get { return this["PointSize"].GetValue<float>(); } set { this["PointSize"].SetValue<float>(value); } }
        public float RemainingLifeTime { get { return this["RemainingLifeTime"].GetValue<float>(); } set { this["RemainingLifeTime"].SetValue<float>(value); } }
        public byte DepthPriority { get { return this["DepthPriority"].GetValue<byte>(); } set { this["DepthPriority"].SetValue<byte>(value); } }
    }
    public class PrecomputedLightInstanceData : SceneComponentInstanceData
    {
        public PrecomputedLightInstanceData(nint addr) : base(addr) { }
        public PrecomputedLightInstanceData() : base(0) { }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public SDK.Script.CoreUObject.Guid LightGuid { get { return this[nameof(LightGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LightGuid"] = value; } }
        public int PreviewShadowMapChannel { get { return this["PreviewShadowMapChannel"].GetValue<int>(); } set { this["PreviewShadowMapChannel"].SetValue<int>(value); } }
    }
    public class DynamicTextureInstance : StreamableTextureInstance
    {
        public DynamicTextureInstance(nint addr) : base(addr) { }
        public DynamicTextureInstance() : base(0) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public bool bAttached { get { return this["bAttached"].Flag; } set { this["bAttached"].Flag = value; } }
        public float OriginalRadius { get { return this["OriginalRadius"].GetValue<float>(); } set { this["OriginalRadius"].SetValue<float>(value); } }
    }
    public class StreamableTextureInstance : UEObject
    {
        public StreamableTextureInstance(nint addr) : base(addr) { }
        public StreamableTextureInstance() : base(0) { }
    }
    public class MaterialProxySettings : UEObject
    {
        public MaterialProxySettings(nint addr) : base(addr) { }
        public MaterialProxySettings() : base(0) { }
        public IntPoint TextureSize { get { return this[nameof(TextureSize)].As<IntPoint>(); } set { this["TextureSize"] = value; } }
        public float GutterSpace { get { return this["GutterSpace"].GetValue<float>(); } set { this["GutterSpace"].SetValue<float>(value); } }
        public float MetallicConstant { get { return this["MetallicConstant"].GetValue<float>(); } set { this["MetallicConstant"].SetValue<float>(value); } }
        public float RoughnessConstant { get { return this["RoughnessConstant"].GetValue<float>(); } set { this["RoughnessConstant"].SetValue<float>(value); } }
        public float AnisotropyConstant { get { return this["AnisotropyConstant"].GetValue<float>(); } set { this["AnisotropyConstant"].SetValue<float>(value); } }
        public float SpecularConstant { get { return this["SpecularConstant"].GetValue<float>(); } set { this["SpecularConstant"].SetValue<float>(value); } }
        public float OpacityConstant { get { return this["OpacityConstant"].GetValue<float>(); } set { this["OpacityConstant"].SetValue<float>(value); } }
        public float OpacityMaskConstant { get { return this["OpacityMaskConstant"].GetValue<float>(); } set { this["OpacityMaskConstant"].SetValue<float>(value); } }
        public float AmbientOcclusionConstant { get { return this["AmbientOcclusionConstant"].GetValue<float>(); } set { this["AmbientOcclusionConstant"].SetValue<float>(value); } }
        public byte TextureSizingType { get { return this["TextureSizingType"].GetValue<byte>(); } set { this["TextureSizingType"].SetValue<byte>(value); } }
        public byte MaterialMergeType { get { return this["MaterialMergeType"].GetValue<byte>(); } set { this["MaterialMergeType"].SetValue<byte>(value); } }
        public byte BlendMode { get { return this["BlendMode"].GetValue<byte>(); } set { this["BlendMode"].SetValue<byte>(value); } }
        public bool bAllowTwoSidedMaterial { get { return this["bAllowTwoSidedMaterial"].Flag; } set { this["bAllowTwoSidedMaterial"].Flag = value; } }
        public bool bNormalMap { get { return this["bNormalMap"].Flag; } set { this["bNormalMap"].Flag = value; } }
        public bool bTangentMap { get { return this["bTangentMap"].Flag; } set { this["bTangentMap"].Flag = value; } }
        public bool bMetallicMap { get { return this["bMetallicMap"].Flag; } set { this["bMetallicMap"].Flag = value; } }
        public bool bRoughnessMap { get { return this["bRoughnessMap"].Flag; } set { this["bRoughnessMap"].Flag = value; } }
        public bool bAnisotropyMap { get { return this["bAnisotropyMap"].Flag; } set { this["bAnisotropyMap"].Flag = value; } }
        public bool bSpecularMap { get { return this["bSpecularMap"].Flag; } set { this["bSpecularMap"].Flag = value; } }
        public bool bEmissiveMap { get { return this["bEmissiveMap"].Flag; } set { this["bEmissiveMap"].Flag = value; } }
        public bool bOpacityMap { get { return this["bOpacityMap"].Flag; } set { this["bOpacityMap"].Flag = value; } }
        public bool bOpacityMaskMap { get { return this["bOpacityMaskMap"].Flag; } set { this["bOpacityMaskMap"].Flag = value; } }
        public bool bAmbientOcclusionMap { get { return this["bAmbientOcclusionMap"].Flag; } set { this["bAmbientOcclusionMap"].Flag = value; } }
        public IntPoint DiffuseTextureSize { get { return this[nameof(DiffuseTextureSize)].As<IntPoint>(); } set { this["DiffuseTextureSize"] = value; } }
        public IntPoint NormalTextureSize { get { return this[nameof(NormalTextureSize)].As<IntPoint>(); } set { this["NormalTextureSize"] = value; } }
        public IntPoint TangentTextureSize { get { return this[nameof(TangentTextureSize)].As<IntPoint>(); } set { this["TangentTextureSize"] = value; } }
        public IntPoint MetallicTextureSize { get { return this[nameof(MetallicTextureSize)].As<IntPoint>(); } set { this["MetallicTextureSize"] = value; } }
        public IntPoint RoughnessTextureSize { get { return this[nameof(RoughnessTextureSize)].As<IntPoint>(); } set { this["RoughnessTextureSize"] = value; } }
        public IntPoint AnisotropyTextureSize { get { return this[nameof(AnisotropyTextureSize)].As<IntPoint>(); } set { this["AnisotropyTextureSize"] = value; } }
        public IntPoint SpecularTextureSize { get { return this[nameof(SpecularTextureSize)].As<IntPoint>(); } set { this["SpecularTextureSize"] = value; } }
        public IntPoint EmissiveTextureSize { get { return this[nameof(EmissiveTextureSize)].As<IntPoint>(); } set { this["EmissiveTextureSize"] = value; } }
        public IntPoint OpacityTextureSize { get { return this[nameof(OpacityTextureSize)].As<IntPoint>(); } set { this["OpacityTextureSize"] = value; } }
        public IntPoint OpacityMaskTextureSize { get { return this[nameof(OpacityMaskTextureSize)].As<IntPoint>(); } set { this["OpacityMaskTextureSize"] = value; } }
        public IntPoint AmbientOcclusionTextureSize { get { return this[nameof(AmbientOcclusionTextureSize)].As<IntPoint>(); } set { this["AmbientOcclusionTextureSize"] = value; } }
    }
    public class LevelSimplificationDetails : UEObject
    {
        public LevelSimplificationDetails(nint addr) : base(addr) { }
        public LevelSimplificationDetails() : base(0) { }
        public bool bCreatePackagePerAsset { get { return this["bCreatePackagePerAsset"].Flag; } set { this["bCreatePackagePerAsset"].Flag = value; } }
        public float DetailsPercentage { get { return this["DetailsPercentage"].GetValue<float>(); } set { this["DetailsPercentage"].SetValue<float>(value); } }
        public MaterialProxySettings StaticMeshMaterialSettings { get { return this[nameof(StaticMeshMaterialSettings)].As<MaterialProxySettings>(); } set { this["StaticMeshMaterialSettings"] = value; } }
        public bool bOverrideLandscapeExportLOD { get { return this["bOverrideLandscapeExportLOD"].Flag; } set { this["bOverrideLandscapeExportLOD"].Flag = value; } }
        public int LandscapeExportLOD { get { return this["LandscapeExportLOD"].GetValue<int>(); } set { this["LandscapeExportLOD"].SetValue<int>(value); } }
        public MaterialProxySettings LandscapeMaterialSettings { get { return this[nameof(LandscapeMaterialSettings)].As<MaterialProxySettings>(); } set { this["LandscapeMaterialSettings"] = value; } }
        public bool bBakeFoliageToLandscape { get { return this["bBakeFoliageToLandscape"].Flag; } set { this["bBakeFoliageToLandscape"].Flag = value; } }
        public bool bBakeGrassToLandscape { get { return this["bBakeGrassToLandscape"].Flag; } set { this["bBakeGrassToLandscape"].Flag = value; } }
        public bool bGenerateMeshNormalMap { get { return this["bGenerateMeshNormalMap"].Flag; } set { this["bGenerateMeshNormalMap"].Flag = value; } }
        public bool bGenerateMeshMetallicMap { get { return this["bGenerateMeshMetallicMap"].Flag; } set { this["bGenerateMeshMetallicMap"].Flag = value; } }
        public bool bGenerateMeshRoughnessMap { get { return this["bGenerateMeshRoughnessMap"].Flag; } set { this["bGenerateMeshRoughnessMap"].Flag = value; } }
        public bool bGenerateMeshSpecularMap { get { return this["bGenerateMeshSpecularMap"].Flag; } set { this["bGenerateMeshSpecularMap"].Flag = value; } }
        public bool bGenerateLandscapeNormalMap { get { return this["bGenerateLandscapeNormalMap"].Flag; } set { this["bGenerateLandscapeNormalMap"].Flag = value; } }
        public bool bGenerateLandscapeMetallicMap { get { return this["bGenerateLandscapeMetallicMap"].Flag; } set { this["bGenerateLandscapeMetallicMap"].Flag = value; } }
        public bool bGenerateLandscapeRoughnessMap { get { return this["bGenerateLandscapeRoughnessMap"].Flag; } set { this["bGenerateLandscapeRoughnessMap"].Flag = value; } }
        public bool bGenerateLandscapeSpecularMap { get { return this["bGenerateLandscapeSpecularMap"].Flag; } set { this["bGenerateLandscapeSpecularMap"].Flag = value; } }
    }
    public class ReplicatedStaticActorDestructionInfo : UEObject
    {
        public ReplicatedStaticActorDestructionInfo(nint addr) : base(addr) { }
        public ReplicatedStaticActorDestructionInfo() : base(0) { }
        public UEObject ObjClass { get { return this["ObjClass"]; } set { this["ObjClass"] = value; } }
    }
    public class LayerActorStats : UEObject
    {
        public LayerActorStats(nint addr) : base(addr) { }
        public LayerActorStats() : base(0) { }
        public UEObject Type { get { return this["Type"]; } set { this["Type"] = value; } }
        public int Total { get { return this["Total"].GetValue<int>(); } set { this["Total"].SetValue<int>(value); } }
    }
    public class LatentActionManager : UEObject
    {
        public LatentActionManager(nint addr) : base(addr) { }
        public LatentActionManager() : base(0) { }
    }
    public class DrawToRenderTargetContext : UEObject
    {
        public DrawToRenderTargetContext(nint addr) : base(addr) { }
        public DrawToRenderTargetContext() : base(0) { }
        public TextureRenderTarget2D RenderTarget { get { return this[nameof(RenderTarget)].As<TextureRenderTarget2D>(); } set { this["RenderTarget"] = value; } }
    }
    public class FloatSpringState : UEObject
    {
        public FloatSpringState(nint addr) : base(addr) { }
        public FloatSpringState() : base(0) { }
    }
    public class VectorSpringState : UEObject
    {
        public VectorSpringState(nint addr) : base(addr) { }
        public VectorSpringState() : base(0) { }
    }
    public class VisibilityTrackKey : UEObject
    {
        public VisibilityTrackKey(nint addr) : base(addr) { }
        public VisibilityTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public byte Action { get { return this["Action"].GetValue<byte>(); } set { this["Action"].SetValue<byte>(value); } }
        public byte ActiveCondition { get { return this["ActiveCondition"].GetValue<byte>(); } set { this["ActiveCondition"].SetValue<byte>(value); } }
    }
    public class ToggleTrackKey : UEObject
    {
        public ToggleTrackKey(nint addr) : base(addr) { }
        public ToggleTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public byte ToggleAction { get { return this["ToggleAction"].GetValue<byte>(); } set { this["ToggleAction"].SetValue<byte>(value); } }
    }
    public class SoundTrackKey : UEObject
    {
        public SoundTrackKey(nint addr) : base(addr) { }
        public SoundTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Volume { get { return this["Volume"].GetValue<float>(); } set { this["Volume"].SetValue<float>(value); } }
        public float Pitch { get { return this["Pitch"].GetValue<float>(); } set { this["Pitch"].SetValue<float>(value); } }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
    }
    public class ParticleReplayTrackKey : UEObject
    {
        public ParticleReplayTrackKey(nint addr) : base(addr) { }
        public ParticleReplayTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public int ClipIDNumber { get { return this["ClipIDNumber"].GetValue<int>(); } set { this["ClipIDNumber"].SetValue<int>(value); } }
    }
    public class InterpLookupPoint : UEObject
    {
        public InterpLookupPoint(nint addr) : base(addr) { }
        public InterpLookupPoint() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
    }
    public class InterpLookupTrack : UEObject
    {
        public InterpLookupTrack(nint addr) : base(addr) { }
        public InterpLookupTrack() : base(0) { }
        public Array<InterpLookupPoint> Points { get { return new Array<InterpLookupPoint>(this["Points"]); } set { this["Points"] = value; } }
    }
    public class EventTrackKey : UEObject
    {
        public EventTrackKey(nint addr) : base(addr) { }
        public EventTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public string EventName { get { return this["EventName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DirectorTrackCut : UEObject
    {
        public DirectorTrackCut(nint addr) : base(addr) { }
        public DirectorTrackCut() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float TransitionTime { get { return this["TransitionTime"].GetValue<float>(); } set { this["TransitionTime"].SetValue<float>(value); } }
        public string TargetCamGroup { get { return this["TargetCamGroup"].ToString(); } set { /* String properties are read-only */ } }
        public int ShotNumber { get { return this["ShotNumber"].GetValue<int>(); } set { this["ShotNumber"].SetValue<int>(value); } }
    }
    public class BoolTrackKey : UEObject
    {
        public BoolTrackKey(nint addr) : base(addr) { }
        public BoolTrackKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public bool Value { get { return this["Value"].Flag; } set { this["Value"].Flag = value; } }
    }
    public class AnimControlTrackKey : UEObject
    {
        public AnimControlTrackKey(nint addr) : base(addr) { }
        public AnimControlTrackKey() : base(0) { }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
        public AnimSequence AnimSeq { get { return this[nameof(AnimSeq)].As<AnimSequence>(); } set { this["AnimSeq"] = value; } }
        public float AnimStartOffset { get { return this["AnimStartOffset"].GetValue<float>(); } set { this["AnimStartOffset"].SetValue<float>(value); } }
        public float AnimEndOffset { get { return this["AnimEndOffset"].GetValue<float>(); } set { this["AnimEndOffset"].SetValue<float>(value); } }
        public float AnimPlayRate { get { return this["AnimPlayRate"].GetValue<float>(); } set { this["AnimPlayRate"].SetValue<float>(value); } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bReverse { get { return this["bReverse"].Flag; } set { this["bReverse"].Flag = value; } }
    }
    public class SupportedSubTrackInfo : UEObject
    {
        public SupportedSubTrackInfo(nint addr) : base(addr) { }
        public SupportedSubTrackInfo() : base(0) { }
        public UEObject SupportedClass { get { return this["SupportedClass"]; } set { this["SupportedClass"] = value; } }
        public string SubTrackName { get { return this["SubTrackName"].ToString(); } set { /* String properties are read-only */ } }
        public int GroupIndex { get { return this["GroupIndex"].GetValue<int>(); } set { this["GroupIndex"].SetValue<int>(value); } }
    }
    public class SubTrackGroup : UEObject
    {
        public SubTrackGroup(nint addr) : base(addr) { }
        public SubTrackGroup() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public List<int> TrackIndices { get { return this["TrackIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bIsCollapsed { get { return this["bIsCollapsed"].Flag; } set { this["bIsCollapsed"].Flag = value; } }
        public bool bIsSelected { get { return this["bIsSelected"].Flag; } set { this["bIsSelected"].Flag = value; } }
    }
    public class CameraPreviewInfo : UEObject
    {
        public CameraPreviewInfo(nint addr) : base(addr) { }
        public CameraPreviewInfo() : base(0) { }
        public UEObject PawnClass { get { return this["PawnClass"]; } set { this["PawnClass"] = value; } }
        public AnimSequence AnimSeq { get { return this[nameof(AnimSeq)].As<AnimSequence>(); } set { this["AnimSeq"] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Pawn PawnInst { get { return this[nameof(PawnInst)].As<Pawn>(); } set { this["PawnInst"] = value; } }
    }
    public class InterpEdSelKey : UEObject
    {
        public InterpEdSelKey(nint addr) : base(addr) { }
        public InterpEdSelKey() : base(0) { }
        public InterpGroup Group { get { return this[nameof(Group)].As<InterpGroup>(); } set { this["Group"] = value; } }
        public InterpTrack Track { get { return this[nameof(Track)].As<InterpTrack>(); } set { this["Track"] = value; } }
        public int KeyIndex { get { return this["KeyIndex"].GetValue<int>(); } set { this["KeyIndex"].SetValue<int>(value); } }
        public float UnsnappedPosition { get { return this["UnsnappedPosition"].GetValue<float>(); } set { this["UnsnappedPosition"].SetValue<float>(value); } }
    }
    public class CurveEdEntry : UEObject
    {
        public CurveEdEntry(nint addr) : base(addr) { }
        public CurveEdEntry() : base(0) { }
        public UEObject CurveObject { get { return this[nameof(CurveObject)]; } set { this["CurveObject"] = value; } }
        public Color CurveColor { get { return this[nameof(CurveColor)].As<Color>(); } set { this["CurveColor"] = value; } }
        public string CurveName { get { return this["CurveName"].ToString(); } set { /* String properties are read-only */ } }
        public int bHideCurve { get { return this["bHideCurve"].GetValue<int>(); } set { this["bHideCurve"].SetValue<int>(value); } }
        public int bColorCurve { get { return this["bColorCurve"].GetValue<int>(); } set { this["bColorCurve"].SetValue<int>(value); } }
        public int bFloatingPointColorCurve { get { return this["bFloatingPointColorCurve"].GetValue<int>(); } set { this["bFloatingPointColorCurve"].SetValue<int>(value); } }
        public int bClamp { get { return this["bClamp"].GetValue<int>(); } set { this["bClamp"].SetValue<int>(value); } }
        public float ClampLow { get { return this["ClampLow"].GetValue<float>(); } set { this["ClampLow"].SetValue<float>(value); } }
        public float ClampHigh { get { return this["ClampHigh"].GetValue<float>(); } set { this["ClampHigh"].SetValue<float>(value); } }
    }
    public class CurveEdTab : UEObject
    {
        public CurveEdTab(nint addr) : base(addr) { }
        public CurveEdTab() : base(0) { }
        public string TabName { get { return this["TabName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<CurveEdEntry> Curves { get { return new Array<CurveEdEntry>(this["Curves"]); } set { this["Curves"] = value; } }
        public float ViewStartInput { get { return this["ViewStartInput"].GetValue<float>(); } set { this["ViewStartInput"].SetValue<float>(value); } }
        public float ViewEndInput { get { return this["ViewEndInput"].GetValue<float>(); } set { this["ViewEndInput"].SetValue<float>(value); } }
        public float ViewStartOutput { get { return this["ViewStartOutput"].GetValue<float>(); } set { this["ViewStartOutput"].SetValue<float>(value); } }
        public float ViewEndOutput { get { return this["ViewEndOutput"].GetValue<float>(); } set { this["ViewEndOutput"].SetValue<float>(value); } }
    }
    public class InstancedStaticMeshMappingInfo : UEObject
    {
        public InstancedStaticMeshMappingInfo(nint addr) : base(addr) { }
        public InstancedStaticMeshMappingInfo() : base(0) { }
    }
    public class InstancedStaticMeshLightMapInstanceData : UEObject
    {
        public InstancedStaticMeshLightMapInstanceData(nint addr) : base(addr) { }
        public InstancedStaticMeshLightMapInstanceData() : base(0) { }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> MapBuildDataIds { get { return new Array<SDK.Script.CoreUObject.Guid>(this["MapBuildDataIds"]); } set { this["MapBuildDataIds"] = value; } }
    }
    public class InstancedStaticMeshInstanceData : UEObject
    {
        public InstancedStaticMeshInstanceData(nint addr) : base(addr) { }
        public InstancedStaticMeshInstanceData() : base(0) { }
        public Matrix Transform { get { return this[nameof(Transform)].As<Matrix>(); } set { this["Transform"] = value; } }
    }
    public class InstancedStaticMeshComponentInstanceData : SceneComponentInstanceData
    {
        public InstancedStaticMeshComponentInstanceData(nint addr) : base(addr) { }
        public InstancedStaticMeshComponentInstanceData() : base(0) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public InstancedStaticMeshLightMapInstanceData CachedStaticLighting { get { return this[nameof(CachedStaticLighting)].As<InstancedStaticMeshLightMapInstanceData>(); } set { this["CachedStaticLighting"] = value; } }
        public Array<InstancedStaticMeshInstanceData> PerInstanceSMData { get { return new Array<InstancedStaticMeshInstanceData>(this["PerInstanceSMData"]); } set { this["PerInstanceSMData"] = value; } }
        public List<float> PerInstanceSMCustomData { get { return this["PerInstanceSMCustomData"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public int InstancingRandomSeed { get { return this["InstancingRandomSeed"].GetValue<int>(); } set { this["InstancingRandomSeed"].SetValue<int>(value); } }
    }
    public class BlueprintInputTouchDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputTouchDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputTouchDelegateBinding() : base(0) { }
        public byte InputKeyEvent { get { return this["InputKeyEvent"].GetValue<byte>(); } set { this["InputKeyEvent"].SetValue<byte>(value); } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BlueprintInputKeyDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputKeyDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputKeyDelegateBinding() : base(0) { }
        public InputChord InputChord { get { return this[nameof(InputChord)].As<InputChord>(); } set { this["InputChord"] = value; } }
        public byte InputKeyEvent { get { return this["InputKeyEvent"].GetValue<byte>(); } set { this["InputKeyEvent"].SetValue<byte>(value); } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CachedKeyToActionInfo : UEObject
    {
        public CachedKeyToActionInfo(nint addr) : base(addr) { }
        public CachedKeyToActionInfo() : base(0) { }
        public PlayerInput PlayerInput { get { return this[nameof(PlayerInput)].As<PlayerInput>(); } set { this["PlayerInput"] = value; } }
    }
    public class BlueprintInputAxisKeyDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputAxisKeyDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputAxisKeyDelegateBinding() : base(0) { }
        public Key AxisKey { get { return this[nameof(AxisKey)].As<Key>(); } set { this["AxisKey"] = value; } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BlueprintInputAxisDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputAxisDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputAxisDelegateBinding() : base(0) { }
        public string InputAxisName { get { return this["InputAxisName"].ToString(); } set { /* String properties are read-only */ } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BlueprintInputActionDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputActionDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputActionDelegateBinding() : base(0) { }
        public string InputActionName { get { return this["InputActionName"].ToString(); } set { /* String properties are read-only */ } }
        public byte InputKeyEvent { get { return this["InputKeyEvent"].GetValue<byte>(); } set { this["InputKeyEvent"].SetValue<byte>(value); } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BlueprintInputDelegateBinding : UEObject
    {
        public BlueprintInputDelegateBinding(nint addr) : base(addr) { }
        public BlueprintInputDelegateBinding() : base(0) { }
        public bool bConsumeInput { get { return this["bConsumeInput"].Flag; } set { this["bConsumeInput"].Flag = value; } }
        public bool bExecuteWhenPaused { get { return this["bExecuteWhenPaused"].Flag; } set { this["bExecuteWhenPaused"].Flag = value; } }
        public bool bOverrideParentBinding { get { return this["bOverrideParentBinding"].Flag; } set { this["bOverrideParentBinding"].Flag = value; } }
    }
    public class ComponentKey : UEObject
    {
        public ComponentKey(nint addr) : base(addr) { }
        public ComponentKey() : base(0) { }
        public UEObject OwnerClass { get { return this["OwnerClass"]; } set { this["OwnerClass"] = value; } }
        public string SCSVariableName { get { return this["SCSVariableName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid AssociatedGuid { get { return this[nameof(AssociatedGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["AssociatedGuid"] = value; } }
    }
    public class ComponentOverrideRecord : UEObject
    {
        public ComponentOverrideRecord(nint addr) : base(addr) { }
        public ComponentOverrideRecord() : base(0) { }
        public UEObject ComponentClass { get { return this["ComponentClass"]; } set { this["ComponentClass"] = value; } }
        public ActorComponent ComponentTemplate { get { return this[nameof(ComponentTemplate)].As<ActorComponent>(); } set { this["ComponentTemplate"] = value; } }
        public ComponentKey ComponentKey { get { return this[nameof(ComponentKey)].As<ComponentKey>(); } set { this["ComponentKey"] = value; } }
        public BlueprintCookedComponentInstancingData CookedComponentInstancingData { get { return this[nameof(CookedComponentInstancingData)].As<BlueprintCookedComponentInstancingData>(); } set { this["CookedComponentInstancingData"] = value; } }
    }
    public class ImportanceTexture : UEObject
    {
        public ImportanceTexture(nint addr) : base(addr) { }
        public ImportanceTexture() : base(0) { }
        public IntPoint Size { get { return this[nameof(Size)].As<IntPoint>(); } set { this["Size"] = value; } }
        public int NumMips { get { return this["NumMips"].GetValue<int>(); } set { this["NumMips"].SetValue<int>(value); } }
        public List<float> MarginalCDF { get { return this["MarginalCDF"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> ConditionalCDF { get { return this["ConditionalCDF"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<Color> TextureData { get { return new Array<Color>(this["TextureData"]); } set { this["TextureData"] = value; } }
        public UEObject Texture { get { return this["Texture"]; } set { this["Texture"] = value; } }
        public byte Weighting { get { return this["Weighting"].GetValue<byte>(); } set { this["Weighting"].SetValue<byte>(value); } }
    }
    public class HLODProxyMesh : UEObject
    {
        public HLODProxyMesh(nint addr) : base(addr) { }
        public HLODProxyMesh() : base(0) { }
        public UEObject LODActor { get { return this["LODActor"]; } set { this["LODActor"] = value; } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public string Key { get { return this["Key"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class HLODISMComponentDesc : UEObject
    {
        public HLODISMComponentDesc(nint addr) : base(addr) { }
        public HLODISMComponentDesc() : base(0) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public Array<SDK.Script.CoreUObject.Transform> Instances { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Instances"]); } set { this["Instances"] = value; } }
    }
    public class ClusterNode_DEPRECATED : UEObject
    {
        public ClusterNode_DEPRECATED(nint addr) : base(addr) { }
        public ClusterNode_DEPRECATED() : base(0) { }
        public Vector BoundMin { get { return this[nameof(BoundMin)].As<Vector>(); } set { this["BoundMin"] = value; } }
        public int FirstChild { get { return this["FirstChild"].GetValue<int>(); } set { this["FirstChild"].SetValue<int>(value); } }
        public Vector BoundMax { get { return this[nameof(BoundMax)].As<Vector>(); } set { this["BoundMax"] = value; } }
        public int LastChild { get { return this["LastChild"].GetValue<int>(); } set { this["LastChild"].SetValue<int>(value); } }
        public int FirstInstance { get { return this["FirstInstance"].GetValue<int>(); } set { this["FirstInstance"].SetValue<int>(value); } }
        public int LastInstance { get { return this["LastInstance"].GetValue<int>(); } set { this["LastInstance"].SetValue<int>(value); } }
    }
    public class ClusterNode : UEObject
    {
        public ClusterNode(nint addr) : base(addr) { }
        public ClusterNode() : base(0) { }
        public Vector BoundMin { get { return this[nameof(BoundMin)].As<Vector>(); } set { this["BoundMin"] = value; } }
        public int FirstChild { get { return this["FirstChild"].GetValue<int>(); } set { this["FirstChild"].SetValue<int>(value); } }
        public Vector BoundMax { get { return this[nameof(BoundMax)].As<Vector>(); } set { this["BoundMax"] = value; } }
        public int LastChild { get { return this["LastChild"].GetValue<int>(); } set { this["LastChild"].SetValue<int>(value); } }
        public int FirstInstance { get { return this["FirstInstance"].GetValue<int>(); } set { this["FirstInstance"].SetValue<int>(value); } }
        public int LastInstance { get { return this["LastInstance"].GetValue<int>(); } set { this["LastInstance"].SetValue<int>(value); } }
        public Vector MinInstanceScale { get { return this[nameof(MinInstanceScale)].As<Vector>(); } set { this["MinInstanceScale"] = value; } }
        public Vector MaxInstanceScale { get { return this[nameof(MaxInstanceScale)].As<Vector>(); } set { this["MaxInstanceScale"] = value; } }
    }
    public class HapticFeedbackDetails_Curve : UEObject
    {
        public HapticFeedbackDetails_Curve(nint addr) : base(addr) { }
        public HapticFeedbackDetails_Curve() : base(0) { }
        public RuntimeFloatCurve Frequency { get { return this[nameof(Frequency)].As<RuntimeFloatCurve>(); } set { this["Frequency"] = value; } }
        public RuntimeFloatCurve Amplitude { get { return this[nameof(Amplitude)].As<RuntimeFloatCurve>(); } set { this["Amplitude"] = value; } }
    }
    public class ActiveHapticFeedbackEffect : UEObject
    {
        public ActiveHapticFeedbackEffect(nint addr) : base(addr) { }
        public ActiveHapticFeedbackEffect() : base(0) { }
        public HapticFeedbackEffect_Base HapticEffect { get { return this[nameof(HapticEffect)].As<HapticFeedbackEffect_Base>(); } set { this["HapticEffect"] = value; } }
    }
    public class PredictProjectilePathParams : UEObject
    {
        public PredictProjectilePathParams(nint addr) : base(addr) { }
        public PredictProjectilePathParams() : base(0) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector LaunchVelocity { get { return this[nameof(LaunchVelocity)].As<Vector>(); } set { this["LaunchVelocity"] = value; } }
        public bool bTraceWithCollision { get { return this["bTraceWithCollision"].Flag; } set { this["bTraceWithCollision"].Flag = value; } }
        public float ProjectileRadius { get { return this["ProjectileRadius"].GetValue<float>(); } set { this["ProjectileRadius"].SetValue<float>(value); } }
        public float MaxSimTime { get { return this["MaxSimTime"].GetValue<float>(); } set { this["MaxSimTime"].SetValue<float>(value); } }
        public bool bTraceWithChannel { get { return this["bTraceWithChannel"].Flag; } set { this["bTraceWithChannel"].Flag = value; } }
        public byte TraceChannel { get { return this["TraceChannel"].GetValue<byte>(); } set { this["TraceChannel"].SetValue<byte>(value); } }
        public List<byte> ObjectTypes { get { return this["ObjectTypes"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public Array<Actor> ActorsToIgnore { get { return new Array<Actor>(this["ActorsToIgnore"]); } set { this["ActorsToIgnore"] = value; } }
        public float SimFrequency { get { return this["SimFrequency"].GetValue<float>(); } set { this["SimFrequency"].SetValue<float>(value); } }
        public float OverrideGravityZ { get { return this["OverrideGravityZ"].GetValue<float>(); } set { this["OverrideGravityZ"].SetValue<float>(value); } }
        public byte DrawDebugType { get { return this["DrawDebugType"].GetValue<byte>(); } set { this["DrawDebugType"].SetValue<byte>(value); } }
        public float DrawDebugTime { get { return this["DrawDebugTime"].GetValue<float>(); } set { this["DrawDebugTime"].SetValue<float>(value); } }
        public bool bTraceComplex { get { return this["bTraceComplex"].Flag; } set { this["bTraceComplex"].Flag = value; } }
    }
    public class PredictProjectilePathPointData : UEObject
    {
        public PredictProjectilePathPointData(nint addr) : base(addr) { }
        public PredictProjectilePathPointData() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
    }
    public class PredictProjectilePathResult : UEObject
    {
        public PredictProjectilePathResult(nint addr) : base(addr) { }
        public PredictProjectilePathResult() : base(0) { }
        public Array<PredictProjectilePathPointData> PathData { get { return new Array<PredictProjectilePathPointData>(this["PathData"]); } set { this["PathData"] = value; } }
        public PredictProjectilePathPointData LastTraceDestination { get { return this[nameof(LastTraceDestination)].As<PredictProjectilePathPointData>(); } set { this["LastTraceDestination"] = value; } }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
    }
    public class ForceFeedbackChannelDetails : UEObject
    {
        public ForceFeedbackChannelDetails(nint addr) : base(addr) { }
        public ForceFeedbackChannelDetails() : base(0) { }
        public bool bAffectsLeftLarge { get { return this["bAffectsLeftLarge"].Flag; } set { this["bAffectsLeftLarge"].Flag = value; } }
        public bool bAffectsLeftSmall { get { return this["bAffectsLeftSmall"].Flag; } set { this["bAffectsLeftSmall"].Flag = value; } }
        public bool bAffectsRightLarge { get { return this["bAffectsRightLarge"].Flag; } set { this["bAffectsRightLarge"].Flag = value; } }
        public bool bAffectsRightSmall { get { return this["bAffectsRightSmall"].Flag; } set { this["bAffectsRightSmall"].Flag = value; } }
        public RuntimeFloatCurve Curve { get { return this[nameof(Curve)].As<RuntimeFloatCurve>(); } set { this["Curve"] = value; } }
    }
    public class ForceFeedbackParameters : UEObject
    {
        public ForceFeedbackParameters(nint addr) : base(addr) { }
        public ForceFeedbackParameters() : base(0) { }
        public string Tag { get { return this["Tag"].ToString(); } set { /* String properties are read-only */ } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this["bIgnoreTimeDilation"].Flag; } set { this["bIgnoreTimeDilation"].Flag = value; } }
        public bool bPlayWhilePaused { get { return this["bPlayWhilePaused"].Flag; } set { this["bPlayWhilePaused"].Flag = value; } }
    }
    public class ActiveForceFeedbackEffect : UEObject
    {
        public ActiveForceFeedbackEffect(nint addr) : base(addr) { }
        public ActiveForceFeedbackEffect() : base(0) { }
        public ForceFeedbackEffect ForceFeedbackEffect { get { return this[nameof(ForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["ForceFeedbackEffect"] = value; } }
    }
    public class ForceFeedbackAttenuationSettings : BaseAttenuationSettings
    {
        public ForceFeedbackAttenuationSettings(nint addr) : base(addr) { }
        public ForceFeedbackAttenuationSettings() : base(0) { }
    }
    public class FontImportOptionsData : UEObject
    {
        public FontImportOptionsData(nint addr) : base(addr) { }
        public FontImportOptionsData() : base(0) { }
        public string FontName { get { return this["FontName"].ToString(); } set { /* String properties are read-only */ } }
        public float Height { get { return this["Height"].GetValue<float>(); } set { this["Height"].SetValue<float>(value); } }
        public bool bEnableAntialiasing { get { return this["bEnableAntialiasing"].Flag; } set { this["bEnableAntialiasing"].Flag = value; } }
        public bool bEnableBold { get { return this["bEnableBold"].Flag; } set { this["bEnableBold"].Flag = value; } }
        public bool bEnableItalic { get { return this["bEnableItalic"].Flag; } set { this["bEnableItalic"].Flag = value; } }
        public bool bEnableUnderline { get { return this["bEnableUnderline"].Flag; } set { this["bEnableUnderline"].Flag = value; } }
        public bool bAlphaOnly { get { return this["bAlphaOnly"].Flag; } set { this["bAlphaOnly"].Flag = value; } }
        public byte CharacterSet { get { return this["CharacterSet"].GetValue<byte>(); } set { this["CharacterSet"].SetValue<byte>(value); } }
        public string Chars { get { return this["Chars"].ToString(); } set { /* String properties are read-only */ } }
        public string UnicodeRange { get { return this["UnicodeRange"].ToString(); } set { /* String properties are read-only */ } }
        public string CharsFilePath { get { return this["CharsFilePath"].ToString(); } set { /* String properties are read-only */ } }
        public string CharsFileWildcard { get { return this["CharsFileWildcard"].ToString(); } set { /* String properties are read-only */ } }
        public bool bCreatePrintableOnly { get { return this["bCreatePrintableOnly"].Flag; } set { this["bCreatePrintableOnly"].Flag = value; } }
        public bool bIncludeASCIIRange { get { return this["bIncludeASCIIRange"].Flag; } set { this["bIncludeASCIIRange"].Flag = value; } }
        public LinearColor ForegroundColor { get { return this[nameof(ForegroundColor)].As<LinearColor>(); } set { this["ForegroundColor"] = value; } }
        public bool bEnableDropShadow { get { return this["bEnableDropShadow"].Flag; } set { this["bEnableDropShadow"].Flag = value; } }
        public int TexturePageWidth { get { return this["TexturePageWidth"].GetValue<int>(); } set { this["TexturePageWidth"].SetValue<int>(value); } }
        public int TexturePageMaxHeight { get { return this["TexturePageMaxHeight"].GetValue<int>(); } set { this["TexturePageMaxHeight"].SetValue<int>(value); } }
        public int XPadding { get { return this["XPadding"].GetValue<int>(); } set { this["XPadding"].SetValue<int>(value); } }
        public int YPadding { get { return this["YPadding"].GetValue<int>(); } set { this["YPadding"].SetValue<int>(value); } }
        public int ExtendBoxTop { get { return this["ExtendBoxTop"].GetValue<int>(); } set { this["ExtendBoxTop"].SetValue<int>(value); } }
        public int ExtendBoxBottom { get { return this["ExtendBoxBottom"].GetValue<int>(); } set { this["ExtendBoxBottom"].SetValue<int>(value); } }
        public int ExtendBoxRight { get { return this["ExtendBoxRight"].GetValue<int>(); } set { this["ExtendBoxRight"].SetValue<int>(value); } }
        public int ExtendBoxLeft { get { return this["ExtendBoxLeft"].GetValue<int>(); } set { this["ExtendBoxLeft"].SetValue<int>(value); } }
        public bool bEnableLegacyMode { get { return this["bEnableLegacyMode"].Flag; } set { this["bEnableLegacyMode"].Flag = value; } }
        public int Kerning { get { return this["Kerning"].GetValue<int>(); } set { this["Kerning"].SetValue<int>(value); } }
        public bool bUseDistanceFieldAlpha { get { return this["bUseDistanceFieldAlpha"].Flag; } set { this["bUseDistanceFieldAlpha"].Flag = value; } }
        public int DistanceFieldScaleFactor { get { return this["DistanceFieldScaleFactor"].GetValue<int>(); } set { this["DistanceFieldScaleFactor"].SetValue<int>(value); } }
        public float DistanceFieldScanRadiusScale { get { return this["DistanceFieldScanRadiusScale"].GetValue<float>(); } set { this["DistanceFieldScanRadiusScale"].SetValue<float>(value); } }
    }
    public class FontCharacter : UEObject
    {
        public FontCharacter(nint addr) : base(addr) { }
        public FontCharacter() : base(0) { }
        public int StartU { get { return this["StartU"].GetValue<int>(); } set { this["StartU"].SetValue<int>(value); } }
        public int StartV { get { return this["StartV"].GetValue<int>(); } set { this["StartV"].SetValue<int>(value); } }
        public int USize { get { return this["USize"].GetValue<int>(); } set { this["USize"].SetValue<int>(value); } }
        public int VSize { get { return this["VSize"].GetValue<int>(); } set { this["VSize"].SetValue<int>(value); } }
        public byte TextureIndex { get { return this["TextureIndex"].GetValue<byte>(); } set { this["TextureIndex"].SetValue<byte>(value); } }
        public int VerticalOffset { get { return this["VerticalOffset"].GetValue<int>(); } set { this["VerticalOffset"].SetValue<int>(value); } }
    }
    public class ExponentialHeightFogData : UEObject
    {
        public ExponentialHeightFogData(nint addr) : base(addr) { }
        public ExponentialHeightFogData() : base(0) { }
        public float FogDensity { get { return this["FogDensity"].GetValue<float>(); } set { this["FogDensity"].SetValue<float>(value); } }
        public float FogHeightFalloff { get { return this["FogHeightFalloff"].GetValue<float>(); } set { this["FogHeightFalloff"].SetValue<float>(value); } }
        public float FogHeightOffset { get { return this["FogHeightOffset"].GetValue<float>(); } set { this["FogHeightOffset"].SetValue<float>(value); } }
    }
    public class MaterialShadingModelField : UEObject
    {
        public MaterialShadingModelField(nint addr) : base(addr) { }
        public MaterialShadingModelField() : base(0) { }
        public ushort ShadingModelField { get { return this["ShadingModelField"].GetValue<ushort>(); } set { this["ShadingModelField"].SetValue<ushort>(value); } }
    }
    public class RigidBodyState : UEObject
    {
        public RigidBodyState(nint addr) : base(addr) { }
        public RigidBodyState() : base(0) { }
        public Vector_NetQuantize100 position { get { return this[nameof(position)].As<Vector_NetQuantize100>(); } set { this["position"] = value; } }
        public Quat Quaternion { get { return this[nameof(Quaternion)].As<Quat>(); } set { this["Quaternion"] = value; } }
        public Vector_NetQuantize100 LinVel { get { return this[nameof(LinVel)].As<Vector_NetQuantize100>(); } set { this["LinVel"] = value; } }
        public Vector_NetQuantize100 AngVel { get { return this[nameof(AngVel)].As<Vector_NetQuantize100>(); } set { this["AngVel"] = value; } }
        public byte Flags { get { return this["Flags"].GetValue<byte>(); } set { this["Flags"].SetValue<byte>(value); } }
    }
    public class RigidBodyErrorCorrection : UEObject
    {
        public RigidBodyErrorCorrection(nint addr) : base(addr) { }
        public RigidBodyErrorCorrection() : base(0) { }
        public float PingExtrapolation { get { return this["PingExtrapolation"].GetValue<float>(); } set { this["PingExtrapolation"].SetValue<float>(value); } }
        public float PingLimit { get { return this["PingLimit"].GetValue<float>(); } set { this["PingLimit"].SetValue<float>(value); } }
        public float ErrorPerLinearDifference { get { return this["ErrorPerLinearDifference"].GetValue<float>(); } set { this["ErrorPerLinearDifference"].SetValue<float>(value); } }
        public float ErrorPerAngularDifference { get { return this["ErrorPerAngularDifference"].GetValue<float>(); } set { this["ErrorPerAngularDifference"].SetValue<float>(value); } }
        public float MaxRestoredStateError { get { return this["MaxRestoredStateError"].GetValue<float>(); } set { this["MaxRestoredStateError"].SetValue<float>(value); } }
        public float MaxLinearHardSnapDistance { get { return this["MaxLinearHardSnapDistance"].GetValue<float>(); } set { this["MaxLinearHardSnapDistance"].SetValue<float>(value); } }
        public float PositionLerp { get { return this["PositionLerp"].GetValue<float>(); } set { this["PositionLerp"].SetValue<float>(value); } }
        public float AngleLerp { get { return this["AngleLerp"].GetValue<float>(); } set { this["AngleLerp"].SetValue<float>(value); } }
        public float LinearVelocityCoefficient { get { return this["LinearVelocityCoefficient"].GetValue<float>(); } set { this["LinearVelocityCoefficient"].SetValue<float>(value); } }
        public float AngularVelocityCoefficient { get { return this["AngularVelocityCoefficient"].GetValue<float>(); } set { this["AngularVelocityCoefficient"].SetValue<float>(value); } }
        public float ErrorAccumulationSeconds { get { return this["ErrorAccumulationSeconds"].GetValue<float>(); } set { this["ErrorAccumulationSeconds"].SetValue<float>(value); } }
        public float ErrorAccumulationDistanceSq { get { return this["ErrorAccumulationDistanceSq"].GetValue<float>(); } set { this["ErrorAccumulationDistanceSq"].SetValue<float>(value); } }
        public float ErrorAccumulationSimilarity { get { return this["ErrorAccumulationSimilarity"].GetValue<float>(); } set { this["ErrorAccumulationSimilarity"].SetValue<float>(value); } }
    }
    public class RigidBodyContactInfo : UEObject
    {
        public RigidBodyContactInfo(nint addr) : base(addr) { }
        public RigidBodyContactInfo() : base(0) { }
        public Vector ContactPosition { get { return this[nameof(ContactPosition)].As<Vector>(); } set { this["ContactPosition"] = value; } }
        public Vector ContactNormal { get { return this[nameof(ContactNormal)].As<Vector>(); } set { this["ContactNormal"] = value; } }
        public float ContactPenetration { get { return this["ContactPenetration"].GetValue<float>(); } set { this["ContactPenetration"].SetValue<float>(value); } }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
    }
    public class CollisionImpactData : UEObject
    {
        public CollisionImpactData(nint addr) : base(addr) { }
        public CollisionImpactData() : base(0) { }
        public Array<RigidBodyContactInfo> ContactInfos { get { return new Array<RigidBodyContactInfo>(this["ContactInfos"]); } set { this["ContactInfos"] = value; } }
        public Vector TotalNormalImpulse { get { return this[nameof(TotalNormalImpulse)].As<Vector>(); } set { this["TotalNormalImpulse"] = value; } }
        public Vector TotalFrictionImpulse { get { return this[nameof(TotalFrictionImpulse)].As<Vector>(); } set { this["TotalFrictionImpulse"] = value; } }
        public bool bIsVelocityDeltaUnderThreshold { get { return this["bIsVelocityDeltaUnderThreshold"].Flag; } set { this["bIsVelocityDeltaUnderThreshold"].Flag = value; } }
    }
    public class FractureEffect : UEObject
    {
        public FractureEffect(nint addr) : base(addr) { }
        public FractureEffect() : base(0) { }
        public UEObject ParticleSystem { get { return this[nameof(ParticleSystem)]; } set { this["ParticleSystem"] = value; } }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
    }
    public class BasedPosition : UEObject
    {
        public BasedPosition(nint addr) : base(addr) { }
        public BasedPosition() : base(0) { }
        public Actor Base { get { return this[nameof(Base)].As<Actor>(); } set { this["Base"] = value; } }
        public Vector position { get { return this[nameof(position)].As<Vector>(); } set { this["position"] = value; } }
        public Vector CachedBaseLocation { get { return this[nameof(CachedBaseLocation)].As<Vector>(); } set { this["CachedBaseLocation"] = value; } }
        public Rotator CachedBaseRotation { get { return this[nameof(CachedBaseRotation)].As<Rotator>(); } set { this["CachedBaseRotation"] = value; } }
        public Vector CachedTransPosition { get { return this[nameof(CachedTransPosition)].As<Vector>(); } set { this["CachedTransPosition"] = value; } }
    }
    public class LightmassPointLightSettings : LightmassLightSettings
    {
        public LightmassPointLightSettings(nint addr) : base(addr) { }
        public LightmassPointLightSettings() : base(0) { }
    }
    public class LightmassDirectionalLightSettings : LightmassLightSettings
    {
        public LightmassDirectionalLightSettings(nint addr) : base(addr) { }
        public LightmassDirectionalLightSettings() : base(0) { }
        public float LightSourceAngle { get { return this["LightSourceAngle"].GetValue<float>(); } set { this["LightSourceAngle"].SetValue<float>(value); } }
    }
    public class LightmassLightSettings : UEObject
    {
        public LightmassLightSettings(nint addr) : base(addr) { }
        public LightmassLightSettings() : base(0) { }
        public float IndirectLightingSaturation { get { return this["IndirectLightingSaturation"].GetValue<float>(); } set { this["IndirectLightingSaturation"].SetValue<float>(value); } }
        public float ShadowExponent { get { return this["ShadowExponent"].GetValue<float>(); } set { this["ShadowExponent"].SetValue<float>(value); } }
        public bool bUseAreaShadowsForStationaryLight { get { return this["bUseAreaShadowsForStationaryLight"].Flag; } set { this["bUseAreaShadowsForStationaryLight"].Flag = value; } }
    }
    public class LightmassPrimitiveSettings : UEObject
    {
        public LightmassPrimitiveSettings(nint addr) : base(addr) { }
        public LightmassPrimitiveSettings() : base(0) { }
        public bool bUseTwoSidedLighting { get { return this["bUseTwoSidedLighting"].Flag; } set { this["bUseTwoSidedLighting"].Flag = value; } }
        public bool bShadowIndirectOnly { get { return this["bShadowIndirectOnly"].Flag; } set { this["bShadowIndirectOnly"].Flag = value; } }
        public bool bUseEmissiveForStaticLighting { get { return this["bUseEmissiveForStaticLighting"].Flag; } set { this["bUseEmissiveForStaticLighting"].Flag = value; } }
        public bool bUseVertexNormalForHemisphereGather { get { return this["bUseVertexNormalForHemisphereGather"].Flag; } set { this["bUseVertexNormalForHemisphereGather"].Flag = value; } }
        public float EmissiveLightFalloffExponent { get { return this["EmissiveLightFalloffExponent"].GetValue<float>(); } set { this["EmissiveLightFalloffExponent"].SetValue<float>(value); } }
        public float EmissiveLightExplicitInfluenceRadius { get { return this["EmissiveLightExplicitInfluenceRadius"].GetValue<float>(); } set { this["EmissiveLightExplicitInfluenceRadius"].SetValue<float>(value); } }
        public float EmissiveBoost { get { return this["EmissiveBoost"].GetValue<float>(); } set { this["EmissiveBoost"].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this["DiffuseBoost"].GetValue<float>(); } set { this["DiffuseBoost"].SetValue<float>(value); } }
        public float FullyOccludedSamplesFraction { get { return this["FullyOccludedSamplesFraction"].GetValue<float>(); } set { this["FullyOccludedSamplesFraction"].SetValue<float>(value); } }
    }
    public class LightmassDebugOptions : UEObject
    {
        public LightmassDebugOptions(nint addr) : base(addr) { }
        public LightmassDebugOptions() : base(0) { }
        public bool bDebugMode { get { return this["bDebugMode"].Flag; } set { this["bDebugMode"].Flag = value; } }
        public bool bStatsEnabled { get { return this["bStatsEnabled"].Flag; } set { this["bStatsEnabled"].Flag = value; } }
        public bool bGatherBSPSurfacesAcrossComponents { get { return this["bGatherBSPSurfacesAcrossComponents"].Flag; } set { this["bGatherBSPSurfacesAcrossComponents"].Flag = value; } }
        public float CoplanarTolerance { get { return this["CoplanarTolerance"].GetValue<float>(); } set { this["CoplanarTolerance"].SetValue<float>(value); } }
        public bool bUseImmediateImport { get { return this["bUseImmediateImport"].Flag; } set { this["bUseImmediateImport"].Flag = value; } }
        public bool bImmediateProcessMappings { get { return this["bImmediateProcessMappings"].Flag; } set { this["bImmediateProcessMappings"].Flag = value; } }
        public bool bSortMappings { get { return this["bSortMappings"].Flag; } set { this["bSortMappings"].Flag = value; } }
        public bool bDumpBinaryFiles { get { return this["bDumpBinaryFiles"].Flag; } set { this["bDumpBinaryFiles"].Flag = value; } }
        public bool bDebugMaterials { get { return this["bDebugMaterials"].Flag; } set { this["bDebugMaterials"].Flag = value; } }
        public bool bPadMappings { get { return this["bPadMappings"].Flag; } set { this["bPadMappings"].Flag = value; } }
        public bool bDebugPaddings { get { return this["bDebugPaddings"].Flag; } set { this["bDebugPaddings"].Flag = value; } }
        public bool bOnlyCalcDebugTexelMappings { get { return this["bOnlyCalcDebugTexelMappings"].Flag; } set { this["bOnlyCalcDebugTexelMappings"].Flag = value; } }
        public bool bUseRandomColors { get { return this["bUseRandomColors"].Flag; } set { this["bUseRandomColors"].Flag = value; } }
        public bool bColorBordersGreen { get { return this["bColorBordersGreen"].Flag; } set { this["bColorBordersGreen"].Flag = value; } }
        public bool bColorByExecutionTime { get { return this["bColorByExecutionTime"].Flag; } set { this["bColorByExecutionTime"].Flag = value; } }
        public float ExecutionTimeDivisor { get { return this["ExecutionTimeDivisor"].GetValue<float>(); } set { this["ExecutionTimeDivisor"].SetValue<float>(value); } }
    }
    public class SwarmDebugOptions : UEObject
    {
        public SwarmDebugOptions(nint addr) : base(addr) { }
        public SwarmDebugOptions() : base(0) { }
        public bool bDistributionEnabled { get { return this["bDistributionEnabled"].Flag; } set { this["bDistributionEnabled"].Flag = value; } }
        public bool bForceContentExport { get { return this["bForceContentExport"].Flag; } set { this["bForceContentExport"].Flag = value; } }
        public bool bInitialized { get { return this["bInitialized"].Flag; } set { this["bInitialized"].Flag = value; } }
    }
    public class PrimitiveMaterialRef : UEObject
    {
        public PrimitiveMaterialRef(nint addr) : base(addr) { }
        public PrimitiveMaterialRef() : base(0) { }
        public PrimitiveComponent Primitive { get { return this[nameof(Primitive)].As<PrimitiveComponent>(); } set { this["Primitive"] = value; } }
        public DecalComponent Decal { get { return this[nameof(Decal)].As<DecalComponent>(); } set { this["Decal"] = value; } }
        public int ElementIndex { get { return this["ElementIndex"].GetValue<int>(); } set { this["ElementIndex"].SetValue<int>(value); } }
    }
    public class OverlapResult : UEObject
    {
        public OverlapResult(nint addr) : base(addr) { }
        public OverlapResult() : base(0) { }
        public UEObject Actor { get { return this["Actor"]; } set { this["Actor"] = value; } }
        public UEObject Component { get { return this["Component"]; } set { this["Component"] = value; } }
        public bool bBlockingHit { get { return this["bBlockingHit"].Flag; } set { this["bBlockingHit"].Flag = value; } }
    }
    public class MTDResult : UEObject
    {
        public MTDResult(nint addr) : base(addr) { }
        public MTDResult() : base(0) { }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public float Distance { get { return this["Distance"].GetValue<float>(); } set { this["Distance"].SetValue<float>(value); } }
    }
    public class AnimSlotInfo : UEObject
    {
        public AnimSlotInfo(nint addr) : base(addr) { }
        public AnimSlotInfo() : base(0) { }
        public string SlotName { get { return this["SlotName"].ToString(); } set { /* String properties are read-only */ } }
        public List<float> ChannelWeights { get { return this["ChannelWeights"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class AnimSlotDesc : UEObject
    {
        public AnimSlotDesc(nint addr) : base(addr) { }
        public AnimSlotDesc() : base(0) { }
        public string SlotName { get { return this["SlotName"].ToString(); } set { /* String properties are read-only */ } }
        public int NumChannels { get { return this["NumChannels"].GetValue<int>(); } set { this["NumChannels"].SetValue<int>(value); } }
    }
    public class AnimUpdateRateParameters : UEObject
    {
        public AnimUpdateRateParameters(nint addr) : base(addr) { }
        public AnimUpdateRateParameters() : base(0) { }
        public byte InterpolationOverride { get { return this["InterpolationOverride"].GetValue<byte>(); } set { this["InterpolationOverride"].SetValue<byte>(value); } }
        public int TickRateOverride { get { return this["TickRateOverride"].GetValue<int>(); } set { this["TickRateOverride"].SetValue<int>(value); } }
        public EUpdateRateShiftBucket ShiftBucket { get { return (EUpdateRateShiftBucket)this["ShiftBucket"].GetValue<int>(); } set { this["ShiftBucket"].SetValue<int>((int)value); } }
        public bool bInterpolateSkippedFrames { get { return this["bInterpolateSkippedFrames"].Flag; } set { this["bInterpolateSkippedFrames"].Flag = value; } }
        public bool bShouldUseLodMap { get { return this["bShouldUseLodMap"].Flag; } set { this["bShouldUseLodMap"].Flag = value; } }
        public bool bShouldUseMinLod { get { return this["bShouldUseMinLod"].Flag; } set { this["bShouldUseMinLod"].Flag = value; } }
        public bool bSkipUpdate { get { return this["bSkipUpdate"].Flag; } set { this["bSkipUpdate"].Flag = value; } }
        public bool bSkipEvaluation { get { return this["bSkipEvaluation"].Flag; } set { this["bSkipEvaluation"].Flag = value; } }
        public int UpdateRate { get { return this["UpdateRate"].GetValue<int>(); } set { this["UpdateRate"].SetValue<int>(value); } }
        public int EvaluationRate { get { return this["EvaluationRate"].GetValue<int>(); } set { this["EvaluationRate"].SetValue<int>(value); } }
        public float TickedPoseOffestTime { get { return this["TickedPoseOffestTime"].GetValue<float>(); } set { this["TickedPoseOffestTime"].SetValue<float>(value); } }
        public float AdditionalTime { get { return this["AdditionalTime"].GetValue<float>(); } set { this["AdditionalTime"].SetValue<float>(value); } }
        public int BaseNonRenderedUpdateRate { get { return this["BaseNonRenderedUpdateRate"].GetValue<int>(); } set { this["BaseNonRenderedUpdateRate"].SetValue<int>(value); } }
        public int MaxEvalRateForInterpolation { get { return this["MaxEvalRateForInterpolation"].GetValue<int>(); } set { this["MaxEvalRateForInterpolation"].SetValue<int>(value); } }
        public List<float> BaseVisibleDistanceFactorThesholds { get { return this["BaseVisibleDistanceFactorThesholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public UEObject LODToFrameSkipMap { get { return this["LODToFrameSkipMap"]; } set { this["LODToFrameSkipMap"] = value; } }
        public int SkippedUpdateFrames { get { return this["SkippedUpdateFrames"].GetValue<int>(); } set { this["SkippedUpdateFrames"].SetValue<int>(value); } }
        public int SkippedEvalFrames { get { return this["SkippedEvalFrames"].GetValue<int>(); } set { this["SkippedEvalFrames"].SetValue<int>(value); } }
    }
    public class POV : UEObject
    {
        public POV(nint addr) : base(addr) { }
        public POV() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float FOV { get { return this["FOV"].GetValue<float>(); } set { this["FOV"].SetValue<float>(value); } }
    }
    public class MeshBuildSettings : UEObject
    {
        public MeshBuildSettings(nint addr) : base(addr) { }
        public MeshBuildSettings() : base(0) { }
        public bool bUseMikkTSpace { get { return this["bUseMikkTSpace"].Flag; } set { this["bUseMikkTSpace"].Flag = value; } }
        public bool bRecomputeNormals { get { return this["bRecomputeNormals"].Flag; } set { this["bRecomputeNormals"].Flag = value; } }
        public bool bRecomputeTangents { get { return this["bRecomputeTangents"].Flag; } set { this["bRecomputeTangents"].Flag = value; } }
        public bool bComputeWeightedNormals { get { return this["bComputeWeightedNormals"].Flag; } set { this["bComputeWeightedNormals"].Flag = value; } }
        public bool bRemoveDegenerates { get { return this["bRemoveDegenerates"].Flag; } set { this["bRemoveDegenerates"].Flag = value; } }
        public bool bBuildAdjacencyBuffer { get { return this["bBuildAdjacencyBuffer"].Flag; } set { this["bBuildAdjacencyBuffer"].Flag = value; } }
        public bool bBuildReversedIndexBuffer { get { return this["bBuildReversedIndexBuffer"].Flag; } set { this["bBuildReversedIndexBuffer"].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this["bUseHighPrecisionTangentBasis"].Flag; } set { this["bUseHighPrecisionTangentBasis"].Flag = value; } }
        public bool bUseFullPrecisionUVs { get { return this["bUseFullPrecisionUVs"].Flag; } set { this["bUseFullPrecisionUVs"].Flag = value; } }
        public bool bGenerateLightmapUVs { get { return this["bGenerateLightmapUVs"].Flag; } set { this["bGenerateLightmapUVs"].Flag = value; } }
        public bool bGenerateDistanceFieldAsIfTwoSided { get { return this["bGenerateDistanceFieldAsIfTwoSided"].Flag; } set { this["bGenerateDistanceFieldAsIfTwoSided"].Flag = value; } }
        public bool bSupportFaceRemap { get { return this["bSupportFaceRemap"].Flag; } set { this["bSupportFaceRemap"].Flag = value; } }
        public int MinLightmapResolution { get { return this["MinLightmapResolution"].GetValue<int>(); } set { this["MinLightmapResolution"].SetValue<int>(value); } }
        public int SrcLightmapIndex { get { return this["SrcLightmapIndex"].GetValue<int>(); } set { this["SrcLightmapIndex"].SetValue<int>(value); } }
        public int DstLightmapIndex { get { return this["DstLightmapIndex"].GetValue<int>(); } set { this["DstLightmapIndex"].SetValue<int>(value); } }
        public float BuildScale { get { return this["BuildScale"].GetValue<float>(); } set { this["BuildScale"].SetValue<float>(value); } }
        public Vector BuildScale3D { get { return this[nameof(BuildScale3D)].As<Vector>(); } set { this["BuildScale3D"] = value; } }
        public float DistanceFieldResolutionScale { get { return this["DistanceFieldResolutionScale"].GetValue<float>(); } set { this["DistanceFieldResolutionScale"].SetValue<float>(value); } }
        public StaticMesh DistanceFieldReplacementMesh { get { return this[nameof(DistanceFieldReplacementMesh)].As<StaticMesh>(); } set { this["DistanceFieldReplacementMesh"] = value; } }
    }
    public class SkeletalMeshBuildSettings : UEObject
    {
        public SkeletalMeshBuildSettings(nint addr) : base(addr) { }
        public SkeletalMeshBuildSettings() : base(0) { }
        public bool bRecomputeNormals { get { return this["bRecomputeNormals"].Flag; } set { this["bRecomputeNormals"].Flag = value; } }
        public bool bRecomputeTangents { get { return this["bRecomputeTangents"].Flag; } set { this["bRecomputeTangents"].Flag = value; } }
        public bool bUseMikkTSpace { get { return this["bUseMikkTSpace"].Flag; } set { this["bUseMikkTSpace"].Flag = value; } }
        public bool bComputeWeightedNormals { get { return this["bComputeWeightedNormals"].Flag; } set { this["bComputeWeightedNormals"].Flag = value; } }
        public bool bRemoveDegenerates { get { return this["bRemoveDegenerates"].Flag; } set { this["bRemoveDegenerates"].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this["bUseHighPrecisionTangentBasis"].Flag; } set { this["bUseHighPrecisionTangentBasis"].Flag = value; } }
        public bool bUseFullPrecisionUVs { get { return this["bUseFullPrecisionUVs"].Flag; } set { this["bUseFullPrecisionUVs"].Flag = value; } }
        public bool bBuildAdjacencyBuffer { get { return this["bBuildAdjacencyBuffer"].Flag; } set { this["bBuildAdjacencyBuffer"].Flag = value; } }
        public float ThresholdPosition { get { return this["ThresholdPosition"].GetValue<float>(); } set { this["ThresholdPosition"].SetValue<float>(value); } }
        public float ThresholdTangentNormal { get { return this["ThresholdTangentNormal"].GetValue<float>(); } set { this["ThresholdTangentNormal"].SetValue<float>(value); } }
        public float ThresholdUV { get { return this["ThresholdUV"].GetValue<float>(); } set { this["ThresholdUV"].SetValue<float>(value); } }
        public float MorphThresholdPosition { get { return this["MorphThresholdPosition"].GetValue<float>(); } set { this["MorphThresholdPosition"].SetValue<float>(value); } }
    }
    public class PointDamageEvent : DamageEvent
    {
        public PointDamageEvent(nint addr) : base(addr) { }
        public PointDamageEvent() : base(0) { }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public Vector_NetQuantizeNormal ShotDirection { get { return this[nameof(ShotDirection)].As<Vector_NetQuantizeNormal>(); } set { this["ShotDirection"] = value; } }
        public HitResult HitInfo { get { return this[nameof(HitInfo)].As<HitResult>(); } set { this["HitInfo"] = value; } }
    }
    public class RadialDamageParams : UEObject
    {
        public RadialDamageParams(nint addr) : base(addr) { }
        public RadialDamageParams() : base(0) { }
        public float BaseDamage { get { return this["BaseDamage"].GetValue<float>(); } set { this["BaseDamage"].SetValue<float>(value); } }
        public float MinimumDamage { get { return this["MinimumDamage"].GetValue<float>(); } set { this["MinimumDamage"].SetValue<float>(value); } }
        public float InnerRadius { get { return this["InnerRadius"].GetValue<float>(); } set { this["InnerRadius"].SetValue<float>(value); } }
        public float OuterRadius { get { return this["OuterRadius"].GetValue<float>(); } set { this["OuterRadius"].SetValue<float>(value); } }
        public float DamageFalloff { get { return this["DamageFalloff"].GetValue<float>(); } set { this["DamageFalloff"].SetValue<float>(value); } }
    }
    public class RadialDamageEvent : DamageEvent
    {
        public RadialDamageEvent(nint addr) : base(addr) { }
        public RadialDamageEvent() : base(0) { }
        public RadialDamageParams Params { get { return this[nameof(Params)].As<RadialDamageParams>(); } set { this["Params"] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public Array<HitResult> ComponentHits { get { return new Array<HitResult>(this["ComponentHits"]); } set { this["ComponentHits"] = value; } }
    }
    public class DamageEvent : UEObject
    {
        public DamageEvent(nint addr) : base(addr) { }
        public DamageEvent() : base(0) { }
        public UEObject DamageTypeClass { get { return this["DamageTypeClass"]; } set { this["DamageTypeClass"] = value; } }
    }
    public class ConstrainComponentPropName : UEObject
    {
        public ConstrainComponentPropName(nint addr) : base(addr) { }
        public ConstrainComponentPropName() : base(0) { }
        public string ComponentName { get { return this["ComponentName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CollectionReference : UEObject
    {
        public CollectionReference(nint addr) : base(addr) { }
        public CollectionReference() : base(0) { }
        public string CollectionName { get { return this["CollectionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class Redirector : UEObject
    {
        public Redirector(nint addr) : base(addr) { }
        public Redirector() : base(0) { }
        public string OldName { get { return this["OldName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewName { get { return this["NewName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DepthFieldGlowInfo : UEObject
    {
        public DepthFieldGlowInfo(nint addr) : base(addr) { }
        public DepthFieldGlowInfo() : base(0) { }
        public bool bEnableGlow { get { return this["bEnableGlow"].Flag; } set { this["bEnableGlow"].Flag = value; } }
        public LinearColor GlowColor { get { return this[nameof(GlowColor)].As<LinearColor>(); } set { this["GlowColor"] = value; } }
        public Vector2D GlowOuterRadius { get { return this[nameof(GlowOuterRadius)].As<Vector2D>(); } set { this["GlowOuterRadius"] = value; } }
        public Vector2D GlowInnerRadius { get { return this[nameof(GlowInnerRadius)].As<Vector2D>(); } set { this["GlowInnerRadius"] = value; } }
    }
    public class FontRenderInfo : UEObject
    {
        public FontRenderInfo(nint addr) : base(addr) { }
        public FontRenderInfo() : base(0) { }
        public bool bClipText { get { return this["bClipText"].Flag; } set { this["bClipText"].Flag = value; } }
        public bool bEnableShadow { get { return this["bEnableShadow"].Flag; } set { this["bEnableShadow"].Flag = value; } }
        public DepthFieldGlowInfo GlowInfo { get { return this[nameof(GlowInfo)].As<DepthFieldGlowInfo>(); } set { this["GlowInfo"] = value; } }
    }
    public class CanvasUVTri : UEObject
    {
        public CanvasUVTri(nint addr) : base(addr) { }
        public CanvasUVTri() : base(0) { }
        public Vector2D V0_Pos { get { return this[nameof(V0_Pos)].As<Vector2D>(); } set { this["V0_Pos"] = value; } }
        public Vector2D V0_UV { get { return this[nameof(V0_UV)].As<Vector2D>(); } set { this["V0_UV"] = value; } }
        public LinearColor V0_Color { get { return this[nameof(V0_Color)].As<LinearColor>(); } set { this["V0_Color"] = value; } }
        public Vector2D V1_Pos { get { return this[nameof(V1_Pos)].As<Vector2D>(); } set { this["V1_Pos"] = value; } }
        public Vector2D V1_UV { get { return this[nameof(V1_UV)].As<Vector2D>(); } set { this["V1_UV"] = value; } }
        public LinearColor V1_Color { get { return this[nameof(V1_Color)].As<LinearColor>(); } set { this["V1_Color"] = value; } }
        public Vector2D V2_Pos { get { return this[nameof(V2_Pos)].As<Vector2D>(); } set { this["V2_Pos"] = value; } }
        public Vector2D V2_UV { get { return this[nameof(V2_UV)].As<Vector2D>(); } set { this["V2_UV"] = value; } }
        public LinearColor V2_Color { get { return this[nameof(V2_Color)].As<LinearColor>(); } set { this["V2_Color"] = value; } }
    }
    public class TickPrerequisite : UEObject
    {
        public TickPrerequisite(nint addr) : base(addr) { }
        public TickPrerequisite() : base(0) { }
    }
    public class ExposureSettings : UEObject
    {
        public ExposureSettings(nint addr) : base(addr) { }
        public ExposureSettings() : base(0) { }
        public float FixedEV100 { get { return this["FixedEV100"].GetValue<float>(); } set { this["FixedEV100"].SetValue<float>(value); } }
        public bool bFixed { get { return this["bFixed"].Flag; } set { this["bFixed"].Flag = value; } }
    }
    public class NetDriverDefinition : UEObject
    {
        public NetDriverDefinition(nint addr) : base(addr) { }
        public NetDriverDefinition() : base(0) { }
        public string DefName { get { return this["DefName"].ToString(); } set { /* String properties are read-only */ } }
        public string DriverClassName { get { return this["DriverClassName"].ToString(); } set { /* String properties are read-only */ } }
        public string DriverClassNameFallback { get { return this["DriverClassNameFallback"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class URL : UEObject
    {
        public URL(nint addr) : base(addr) { }
        public URL() : base(0) { }
        public string Protocol { get { return this["Protocol"].ToString(); } set { /* String properties are read-only */ } }
        public string Host { get { return this["Host"].ToString(); } set { /* String properties are read-only */ } }
        public int Port { get { return this["Port"].GetValue<int>(); } set { this["Port"].SetValue<int>(value); } }
        public int Valid { get { return this["Valid"].GetValue<int>(); } set { this["Valid"].SetValue<int>(value); } }
        public string Map { get { return this["Map"].ToString(); } set { /* String properties are read-only */ } }
        public string RedirectURL { get { return this["RedirectURL"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> Op { get { return this["Op"].GetStringList(); } set { /* Arrays are read-only */ } }
        public string Portal { get { return this["Portal"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class FullyLoadedPackagesInfo : UEObject
    {
        public FullyLoadedPackagesInfo(nint addr) : base(addr) { }
        public FullyLoadedPackagesInfo() : base(0) { }
        public byte FullyLoadType { get { return this["FullyLoadType"].GetValue<byte>(); } set { this["FullyLoadType"].SetValue<byte>(value); } }
        public string Tag { get { return this["Tag"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> PackagesToLoad { get { return this["PackagesToLoad"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<UEObject> LoadedObjects { get { return new Array<UEObject>(this["LoadedObjects"]); } set { this["LoadedObjects"] = value; } }
    }
    public class LevelStreamingStatus : UEObject
    {
        public LevelStreamingStatus(nint addr) : base(addr) { }
        public LevelStreamingStatus() : base(0) { }
        public string PackageName { get { return this["PackageName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bShouldBeLoaded { get { return this["bShouldBeLoaded"].Flag; } set { this["bShouldBeLoaded"].Flag = value; } }
        public bool bShouldBeVisible { get { return this["bShouldBeVisible"].Flag; } set { this["bShouldBeVisible"].Flag = value; } }
        public uint LODIndex { get { return this["LODIndex"].GetValue<uint>(); } set { this["LODIndex"].SetValue<uint>(value); } }
    }
    public class NamedNetDriver : UEObject
    {
        public NamedNetDriver(nint addr) : base(addr) { }
        public NamedNetDriver() : base(0) { }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
    }
    public class WorldContext : UEObject
    {
        public WorldContext(nint addr) : base(addr) { }
        public WorldContext() : base(0) { }
        public URL LastURL { get { return this[nameof(LastURL)].As<URL>(); } set { this["LastURL"] = value; } }
        public URL LastRemoteURL { get { return this[nameof(LastRemoteURL)].As<URL>(); } set { this["LastRemoteURL"] = value; } }
        public PendingNetGame PendingNetGame { get { return this[nameof(PendingNetGame)].As<PendingNetGame>(); } set { this["PendingNetGame"] = value; } }
        public Array<FullyLoadedPackagesInfo> PackagesToFullyLoad { get { return new Array<FullyLoadedPackagesInfo>(this["PackagesToFullyLoad"]); } set { this["PackagesToFullyLoad"] = value; } }
        public Array<Level> LoadedLevelsForPendingMapChange { get { return new Array<Level>(this["LoadedLevelsForPendingMapChange"]); } set { this["LoadedLevelsForPendingMapChange"] = value; } }
        public Array<ObjectReferencer> ObjectReferencers { get { return new Array<ObjectReferencer>(this["ObjectReferencers"]); } set { this["ObjectReferencers"] = value; } }
        public Array<LevelStreamingStatus> PendingLevelStreamingStatusUpdates { get { return new Array<LevelStreamingStatus>(this["PendingLevelStreamingStatusUpdates"]); } set { this["PendingLevelStreamingStatusUpdates"] = value; } }
        public GameViewportClient GameViewport { get { return this[nameof(GameViewport)].As<GameViewportClient>(); } set { this["GameViewport"] = value; } }
        public GameInstance OwningGameInstance { get { return this[nameof(OwningGameInstance)].As<GameInstance>(); } set { this["OwningGameInstance"] = value; } }
        public Array<NamedNetDriver> ActiveNetDrivers { get { return new Array<NamedNetDriver>(this["ActiveNetDrivers"]); } set { this["ActiveNetDrivers"] = value; } }
    }
    public class StatColorMapEntry : UEObject
    {
        public StatColorMapEntry(nint addr) : base(addr) { }
        public StatColorMapEntry() : base(0) { }
        public float In { get { return this["In"].GetValue<float>(); } set { this["In"].SetValue<float>(value); } }
        public Color Out { get { return this[nameof(Out)].As<Color>(); } set { this["Out"] = value; } }
    }
    public class StatColorMapping : UEObject
    {
        public StatColorMapping(nint addr) : base(addr) { }
        public StatColorMapping() : base(0) { }
        public string StatName { get { return this["StatName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<StatColorMapEntry> ColorMap { get { return new Array<StatColorMapEntry>(this["ColorMap"]); } set { this["ColorMap"] = value; } }
        public bool DisableBlend { get { return this["DisableBlend"].Flag; } set { this["DisableBlend"].Flag = value; } }
    }
    public class DropNoteInfo : UEObject
    {
        public DropNoteInfo(nint addr) : base(addr) { }
        public DropNoteInfo() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public string Comment { get { return this["Comment"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ScreenMessageString : UEObject
    {
        public ScreenMessageString(nint addr) : base(addr) { }
        public ScreenMessageString() : base(0) { }
        public ulong Key { get { return this["Key"].GetValue<ulong>(); } set { this["Key"].SetValue<ulong>(value); } }
        public string ScreenMessage { get { return this["ScreenMessage"].ToString(); } set { /* String properties are read-only */ } }
        public Color DisplayColor { get { return this[nameof(DisplayColor)].As<Color>(); } set { this["DisplayColor"] = value; } }
        public float TimeToDisplay { get { return this["TimeToDisplay"].GetValue<float>(); } set { this["TimeToDisplay"].SetValue<float>(value); } }
        public float CurrentTimeDisplayed { get { return this["CurrentTimeDisplayed"].GetValue<float>(); } set { this["CurrentTimeDisplayed"].SetValue<float>(value); } }
        public Vector2D TextScale { get { return this[nameof(TextScale)].As<Vector2D>(); } set { this["TextScale"] = value; } }
    }
    public class GameNameRedirect : UEObject
    {
        public GameNameRedirect(nint addr) : base(addr) { }
        public GameNameRedirect() : base(0) { }
        public string OldGameName { get { return this["OldGameName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewGameName { get { return this["NewGameName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ClassRedirect : UEObject
    {
        public ClassRedirect(nint addr) : base(addr) { }
        public ClassRedirect() : base(0) { }
        public string ObjectName { get { return this["ObjectName"].ToString(); } set { /* String properties are read-only */ } }
        public string OldClassName { get { return this["OldClassName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewClassName { get { return this["NewClassName"].ToString(); } set { /* String properties are read-only */ } }
        public string OldSubobjName { get { return this["OldSubobjName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewSubobjName { get { return this["NewSubobjName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewClassClass { get { return this["NewClassClass"].ToString(); } set { /* String properties are read-only */ } }
        public string NewClassPackage { get { return this["NewClassPackage"].ToString(); } set { /* String properties are read-only */ } }
        public bool InstanceOnly { get { return this["InstanceOnly"].Flag; } set { this["InstanceOnly"].Flag = value; } }
    }
    public class StructRedirect : UEObject
    {
        public StructRedirect(nint addr) : base(addr) { }
        public StructRedirect() : base(0) { }
        public string OldStructName { get { return this["OldStructName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewStructName { get { return this["NewStructName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PluginRedirect : UEObject
    {
        public PluginRedirect(nint addr) : base(addr) { }
        public PluginRedirect() : base(0) { }
        public string OldPluginName { get { return this["OldPluginName"].ToString(); } set { /* String properties are read-only */ } }
        public string NewPluginName { get { return this["NewPluginName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class EdGraphSchemaAction_NewNode : EdGraphSchemaAction
    {
        public EdGraphSchemaAction_NewNode(nint addr) : base(addr) { }
        public EdGraphSchemaAction_NewNode() : base(0) { }
        public EdGraphNode NodeTemplate { get { return this[nameof(NodeTemplate)].As<EdGraphNode>(); } set { this["NodeTemplate"] = value; } }
    }
    public class EdGraphSchemaAction : UEObject
    {
        public EdGraphSchemaAction(nint addr) : base(addr) { }
        public EdGraphSchemaAction() : base(0) { }
        public string MenuDescription { get { return this["MenuDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string TooltipDescription { get { return this["TooltipDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string Category { get { return this["Category"].ToString(); } set { /* String properties are read-only */ } }
        public string Keywords { get { return this["Keywords"].ToString(); } set { /* String properties are read-only */ } }
        public int Grouping { get { return this["Grouping"].GetValue<int>(); } set { this["Grouping"].SetValue<int>(value); } }
        public int SectionID { get { return this["SectionID"].GetValue<int>(); } set { this["SectionID"].SetValue<int>(value); } }
        public List<string> MenuDescriptionArray { get { return this["MenuDescriptionArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> FullSearchTitlesArray { get { return this["FullSearchTitlesArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> FullSearchKeywordsArray { get { return this["FullSearchKeywordsArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> FullSearchCategoryArray { get { return this["FullSearchCategoryArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> LocalizedMenuDescriptionArray { get { return this["LocalizedMenuDescriptionArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> LocalizedFullSearchTitlesArray { get { return this["LocalizedFullSearchTitlesArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> LocalizedFullSearchKeywordsArray { get { return this["LocalizedFullSearchKeywordsArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> LocalizedFullSearchCategoryArray { get { return this["LocalizedFullSearchCategoryArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public string SearchText { get { return this["SearchText"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class EdGraphPinReference : UEObject
    {
        public EdGraphPinReference(nint addr) : base(addr) { }
        public EdGraphPinReference() : base(0) { }
        public UEObject OwningNode { get { return this["OwningNode"]; } set { this["OwningNode"] = value; } }
        public SDK.Script.CoreUObject.Guid PinId { get { return this[nameof(PinId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["PinId"] = value; } }
    }
    public class GraphReference : UEObject
    {
        public GraphReference(nint addr) : base(addr) { }
        public GraphReference() : base(0) { }
        public EdGraph MacroGraph { get { return this[nameof(MacroGraph)].As<EdGraph>(); } set { this["MacroGraph"] = value; } }
        public Blueprint GraphBlueprint { get { return this[nameof(GraphBlueprint)].As<Blueprint>(); } set { this["GraphBlueprint"] = value; } }
        public SDK.Script.CoreUObject.Guid GraphGuid { get { return this[nameof(GraphGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["GraphGuid"] = value; } }
    }
    public class RawDistributionVector : RawDistribution
    {
        public RawDistributionVector(nint addr) : base(addr) { }
        public RawDistributionVector() : base(0) { }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public Vector MinValueVec { get { return this[nameof(MinValueVec)].As<Vector>(); } set { this["MinValueVec"] = value; } }
        public Vector MaxValueVec { get { return this[nameof(MaxValueVec)].As<Vector>(); } set { this["MaxValueVec"] = value; } }
        public DistributionVector Distribution { get { return this[nameof(Distribution)].As<DistributionVector>(); } set { this["Distribution"] = value; } }
    }
    public class RawDistributionFloat : RawDistribution
    {
        public RawDistributionFloat(nint addr) : base(addr) { }
        public RawDistributionFloat() : base(0) { }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public DistributionFloat Distribution { get { return this[nameof(Distribution)].As<DistributionFloat>(); } set { this["Distribution"] = value; } }
    }
    public class DialogueContextMapping : UEObject
    {
        public DialogueContextMapping(nint addr) : base(addr) { }
        public DialogueContextMapping() : base(0) { }
        public DialogueContext Context { get { return this[nameof(Context)].As<DialogueContext>(); } set { this["Context"] = value; } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
        public string LocalizationKeyFormat { get { return this["LocalizationKeyFormat"].ToString(); } set { /* String properties are read-only */ } }
        public DialogueSoundWaveProxy Proxy { get { return this[nameof(Proxy)].As<DialogueSoundWaveProxy>(); } set { this["Proxy"] = value; } }
    }
    public class DialogueContext : UEObject
    {
        public DialogueContext(nint addr) : base(addr) { }
        public DialogueContext() : base(0) { }
        public DialogueVoice Speaker { get { return this[nameof(Speaker)].As<DialogueVoice>(); } set { this["Speaker"] = value; } }
        public Array<DialogueVoice> Targets { get { return new Array<DialogueVoice>(this["Targets"]); } set { this["Targets"] = value; } }
    }
    public class DialogueWaveParameter : UEObject
    {
        public DialogueWaveParameter(nint addr) : base(addr) { }
        public DialogueWaveParameter() : base(0) { }
        public DialogueWave DialogueWave { get { return this[nameof(DialogueWave)].As<DialogueWave>(); } set { this["DialogueWave"] = value; } }
        public DialogueContext Context { get { return this[nameof(Context)].As<DialogueContext>(); } set { this["Context"] = value; } }
    }
    public class RollbackNetStartupActorInfo : UEObject
    {
        public RollbackNetStartupActorInfo(nint addr) : base(addr) { }
        public RollbackNetStartupActorInfo() : base(0) { }
        public UEObject Archetype { get { return this[nameof(Archetype)]; } set { this["Archetype"] = value; } }
        public Level Level { get { return this[nameof(Level)].As<Level>(); } set { this["Level"] = value; } }
        public Array<UEObject> ObjReferences { get { return new Array<UEObject>(this["ObjReferences"]); } set { this["ObjReferences"] = value; } }
    }
    public class MulticastRecordOptions : UEObject
    {
        public MulticastRecordOptions(nint addr) : base(addr) { }
        public MulticastRecordOptions() : base(0) { }
        public string FuncPathName { get { return this["FuncPathName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bServerSkip { get { return this["bServerSkip"].Flag; } set { this["bServerSkip"].Flag = value; } }
        public bool bClientSkip { get { return this["bClientSkip"].Flag; } set { this["bClientSkip"].Flag = value; } }
    }
    public class DebugTextInfo : UEObject
    {
        public DebugTextInfo(nint addr) : base(addr) { }
        public DebugTextInfo() : base(0) { }
        public Actor SrcActor { get { return this[nameof(SrcActor)].As<Actor>(); } set { this["SrcActor"] = value; } }
        public Vector SrcActorOffset { get { return this[nameof(SrcActorOffset)].As<Vector>(); } set { this["SrcActorOffset"] = value; } }
        public Vector SrcActorDesiredOffset { get { return this[nameof(SrcActorDesiredOffset)].As<Vector>(); } set { this["SrcActorDesiredOffset"] = value; } }
        public string DebugText { get { return this["DebugText"].ToString(); } set { /* String properties are read-only */ } }
        public float TimeRemaining { get { return this["TimeRemaining"].GetValue<float>(); } set { this["TimeRemaining"].SetValue<float>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public Color TextColor { get { return this[nameof(TextColor)].As<Color>(); } set { this["TextColor"] = value; } }
        public bool bAbsoluteLocation { get { return this["bAbsoluteLocation"].Flag; } set { this["bAbsoluteLocation"].Flag = value; } }
        public bool bKeepAttachedToActor { get { return this["bKeepAttachedToActor"].Flag; } set { this["bKeepAttachedToActor"].Flag = value; } }
        public bool bDrawShadow { get { return this["bDrawShadow"].Flag; } set { this["bDrawShadow"].Flag = value; } }
        public Vector OrigActorLocation { get { return this[nameof(OrigActorLocation)].As<Vector>(); } set { this["OrigActorLocation"] = value; } }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public float FontScale { get { return this["FontScale"].GetValue<float>(); } set { this["FontScale"].SetValue<float>(value); } }
    }
    public class DebugDisplayProperty : UEObject
    {
        public DebugDisplayProperty(nint addr) : base(addr) { }
        public DebugDisplayProperty() : base(0) { }
        public UEObject Obj { get { return this[nameof(Obj)]; } set { this["Obj"] = value; } }
        public UEObject WithinClass { get { return this["WithinClass"]; } set { this["WithinClass"] = value; } }
    }
    public class DebugCameraControllerSettingsViewModeIndex : UEObject
    {
        public DebugCameraControllerSettingsViewModeIndex(nint addr) : base(addr) { }
        public DebugCameraControllerSettingsViewModeIndex() : base(0) { }
        public byte ViewModeIndex { get { return this["ViewModeIndex"].GetValue<byte>(); } set { this["ViewModeIndex"].SetValue<byte>(value); } }
    }
    public class DataTableCategoryHandle : UEObject
    {
        public DataTableCategoryHandle(nint addr) : base(addr) { }
        public DataTableCategoryHandle() : base(0) { }
        public DataTable DataTable { get { return this[nameof(DataTable)].As<DataTable>(); } set { this["DataTable"] = value; } }
        public string ColumnName { get { return this["ColumnName"].ToString(); } set { /* String properties are read-only */ } }
        public string RowContents { get { return this["RowContents"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DataDrivenConsoleVariable : UEObject
    {
        public DataDrivenConsoleVariable(nint addr) : base(addr) { }
        public DataDrivenConsoleVariable() : base(0) { }
        public FDataDrivenCVarType Type { get { return (FDataDrivenCVarType)this["Type"].GetValue<int>(); } set { this["Type"].SetValue<int>((int)value); } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string ToolTip { get { return this["ToolTip"].ToString(); } set { /* String properties are read-only */ } }
        public float DefaultValueFloat { get { return this["DefaultValueFloat"].GetValue<float>(); } set { this["DefaultValueFloat"].SetValue<float>(value); } }
        public int DefaultValueInt { get { return this["DefaultValueInt"].GetValue<int>(); } set { this["DefaultValueInt"].SetValue<int>(value); } }
        public bool DefaultValueBool { get { return this["DefaultValueBool"].Flag; } set { this["DefaultValueBool"].Flag = value; } }
    }
    public class CustomAttributeSetting : UEObject
    {
        public CustomAttributeSetting(nint addr) : base(addr) { }
        public CustomAttributeSetting() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Meaning { get { return this["Meaning"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CustomAttribute : UEObject
    {
        public CustomAttribute(nint addr) : base(addr) { }
        public CustomAttribute() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public int VariantType { get { return this["VariantType"].GetValue<int>(); } set { this["VariantType"].SetValue<int>(value); } }
        public List<float> Times { get { return this["Times"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class CustomAttributePerBoneData : UEObject
    {
        public CustomAttributePerBoneData(nint addr) : base(addr) { }
        public CustomAttributePerBoneData() : base(0) { }
        public int BoneTreeIndex { get { return this["BoneTreeIndex"].GetValue<int>(); } set { this["BoneTreeIndex"].SetValue<int>(value); } }
        public Array<CustomAttribute> Attributes { get { return new Array<CustomAttribute>(this["Attributes"]); } set { this["Attributes"] = value; } }
    }
    public class StringCurveKey : UEObject
    {
        public StringCurveKey(nint addr) : base(addr) { }
        public StringCurveKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public string Value { get { return this["Value"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class StringCurve : IndexedCurve
    {
        public StringCurve(nint addr) : base(addr) { }
        public StringCurve() : base(0) { }
        public string DefaultValue { get { return this["DefaultValue"].ToString(); } set { /* String properties are read-only */ } }
        public Array<StringCurveKey> Keys { get { return new Array<StringCurveKey>(this["Keys"]); } set { this["Keys"] = value; } }
    }
    public class BakedStringCustomAttribute : UEObject
    {
        public BakedStringCustomAttribute(nint addr) : base(addr) { }
        public BakedStringCustomAttribute() : base(0) { }
        public string AttributeName { get { return this["AttributeName"].ToString(); } set { /* String properties are read-only */ } }
        public StringCurve StringCurve { get { return this[nameof(StringCurve)].As<StringCurve>(); } set { this["StringCurve"] = value; } }
    }
    public class IntegralKey : UEObject
    {
        public IntegralKey(nint addr) : base(addr) { }
        public IntegralKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public int Value { get { return this["Value"].GetValue<int>(); } set { this["Value"].SetValue<int>(value); } }
    }
    public class IntegralCurve : IndexedCurve
    {
        public IntegralCurve(nint addr) : base(addr) { }
        public IntegralCurve() : base(0) { }
        public Array<IntegralKey> Keys { get { return new Array<IntegralKey>(this["Keys"]); } set { this["Keys"] = value; } }
        public int DefaultValue { get { return this["DefaultValue"].GetValue<int>(); } set { this["DefaultValue"].SetValue<int>(value); } }
        public bool bUseDefaultValueBeforeFirstKey { get { return this["bUseDefaultValueBeforeFirstKey"].Flag; } set { this["bUseDefaultValueBeforeFirstKey"].Flag = value; } }
    }
    public class BakedIntegerCustomAttribute : UEObject
    {
        public BakedIntegerCustomAttribute(nint addr) : base(addr) { }
        public BakedIntegerCustomAttribute() : base(0) { }
        public string AttributeName { get { return this["AttributeName"].ToString(); } set { /* String properties are read-only */ } }
        public IntegralCurve IntCurve { get { return this[nameof(IntCurve)].As<IntegralCurve>(); } set { this["IntCurve"] = value; } }
    }
    public class SimpleCurveKey : UEObject
    {
        public SimpleCurveKey(nint addr) : base(addr) { }
        public SimpleCurveKey() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class SimpleCurve : RealCurve
    {
        public SimpleCurve(nint addr) : base(addr) { }
        public SimpleCurve() : base(0) { }
        public byte InterpMode { get { return this["InterpMode"].GetValue<byte>(); } set { this["InterpMode"].SetValue<byte>(value); } }
        public Array<SimpleCurveKey> Keys { get { return new Array<SimpleCurveKey>(this["Keys"]); } set { this["Keys"] = value; } }
    }
    public class BakedFloatCustomAttribute : UEObject
    {
        public BakedFloatCustomAttribute(nint addr) : base(addr) { }
        public BakedFloatCustomAttribute() : base(0) { }
        public string AttributeName { get { return this["AttributeName"].ToString(); } set { /* String properties are read-only */ } }
        public SimpleCurve FloatCurve { get { return this[nameof(FloatCurve)].As<SimpleCurve>(); } set { this["FloatCurve"] = value; } }
    }
    public class BakedCustomAttributePerBoneData : UEObject
    {
        public BakedCustomAttributePerBoneData(nint addr) : base(addr) { }
        public BakedCustomAttributePerBoneData() : base(0) { }
        public int BoneTreeIndex { get { return this["BoneTreeIndex"].GetValue<int>(); } set { this["BoneTreeIndex"].SetValue<int>(value); } }
        public Array<BakedStringCustomAttribute> StringAttributes { get { return new Array<BakedStringCustomAttribute>(this["StringAttributes"]); } set { this["StringAttributes"] = value; } }
        public Array<BakedIntegerCustomAttribute> IntAttributes { get { return new Array<BakedIntegerCustomAttribute>(this["IntAttributes"]); } set { this["IntAttributes"] = value; } }
        public Array<BakedFloatCustomAttribute> FloatAttributes { get { return new Array<BakedFloatCustomAttribute>(this["FloatAttributes"]); } set { this["FloatAttributes"] = value; } }
    }
    public class NamedCurveValue : UEObject
    {
        public NamedCurveValue(nint addr) : base(addr) { }
        public NamedCurveValue() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class CurveAtlasColorAdjustments : UEObject
    {
        public CurveAtlasColorAdjustments(nint addr) : base(addr) { }
        public CurveAtlasColorAdjustments() : base(0) { }
        public bool bChromaKeyTexture { get { return this["bChromaKeyTexture"].Flag; } set { this["bChromaKeyTexture"].Flag = value; } }
        public float AdjustBrightness { get { return this["AdjustBrightness"].GetValue<float>(); } set { this["AdjustBrightness"].SetValue<float>(value); } }
        public float AdjustBrightnessCurve { get { return this["AdjustBrightnessCurve"].GetValue<float>(); } set { this["AdjustBrightnessCurve"].SetValue<float>(value); } }
        public float AdjustVibrance { get { return this["AdjustVibrance"].GetValue<float>(); } set { this["AdjustVibrance"].SetValue<float>(value); } }
        public float AdjustSaturation { get { return this["AdjustSaturation"].GetValue<float>(); } set { this["AdjustSaturation"].SetValue<float>(value); } }
        public float AdjustRGBCurve { get { return this["AdjustRGBCurve"].GetValue<float>(); } set { this["AdjustRGBCurve"].SetValue<float>(value); } }
        public float AdjustHue { get { return this["AdjustHue"].GetValue<float>(); } set { this["AdjustHue"].SetValue<float>(value); } }
        public float AdjustMinAlpha { get { return this["AdjustMinAlpha"].GetValue<float>(); } set { this["AdjustMinAlpha"].SetValue<float>(value); } }
        public float AdjustMaxAlpha { get { return this["AdjustMaxAlpha"].GetValue<float>(); } set { this["AdjustMaxAlpha"].SetValue<float>(value); } }
    }
    public class RuntimeCurveLinearColor : UEObject
    {
        public RuntimeCurveLinearColor(nint addr) : base(addr) { }
        public RuntimeCurveLinearColor() : base(0) { }
        public RichCurve ColorCurves { get { return this[nameof(ColorCurves)].As<RichCurve>(); } set { this["ColorCurves"] = value; } }
        public CurveLinearColor ExternalCurve { get { return this[nameof(ExternalCurve)].As<CurveLinearColor>(); } set { this["ExternalCurve"] = value; } }
    }
    public class CullDistanceSizePair : UEObject
    {
        public CullDistanceSizePair(nint addr) : base(addr) { }
        public CullDistanceSizePair() : base(0) { }
        public float Size { get { return this["Size"].GetValue<float>(); } set { this["Size"].SetValue<float>(value); } }
        public float CullDistance { get { return this["CullDistance"].GetValue<float>(); } set { this["CullDistance"].SetValue<float>(value); } }
    }
    public class LinearConstraint : ConstraintBaseParams
    {
        public LinearConstraint(nint addr) : base(addr) { }
        public LinearConstraint() : base(0) { }
        public float Limit { get { return this["Limit"].GetValue<float>(); } set { this["Limit"].SetValue<float>(value); } }
        public byte XMotion { get { return this["XMotion"].GetValue<byte>(); } set { this["XMotion"].SetValue<byte>(value); } }
        public byte YMotion { get { return this["YMotion"].GetValue<byte>(); } set { this["YMotion"].SetValue<byte>(value); } }
        public byte ZMotion { get { return this["ZMotion"].GetValue<byte>(); } set { this["ZMotion"].SetValue<byte>(value); } }
    }
    public class ConeConstraint : ConstraintBaseParams
    {
        public ConeConstraint(nint addr) : base(addr) { }
        public ConeConstraint() : base(0) { }
        public float Swing1LimitDegrees { get { return this["Swing1LimitDegrees"].GetValue<float>(); } set { this["Swing1LimitDegrees"].SetValue<float>(value); } }
        public float Swing2LimitDegrees { get { return this["Swing2LimitDegrees"].GetValue<float>(); } set { this["Swing2LimitDegrees"].SetValue<float>(value); } }
        public byte Swing1Motion { get { return this["Swing1Motion"].GetValue<byte>(); } set { this["Swing1Motion"].SetValue<byte>(value); } }
        public byte Swing2Motion { get { return this["Swing2Motion"].GetValue<byte>(); } set { this["Swing2Motion"].SetValue<byte>(value); } }
    }
    public class TwistConstraint : ConstraintBaseParams
    {
        public TwistConstraint(nint addr) : base(addr) { }
        public TwistConstraint() : base(0) { }
        public float TwistLimitDegrees { get { return this["TwistLimitDegrees"].GetValue<float>(); } set { this["TwistLimitDegrees"].SetValue<float>(value); } }
        public byte TwistMotion { get { return this["TwistMotion"].GetValue<byte>(); } set { this["TwistMotion"].SetValue<byte>(value); } }
    }
    public class ConstraintBaseParams : UEObject
    {
        public ConstraintBaseParams(nint addr) : base(addr) { }
        public ConstraintBaseParams() : base(0) { }
        public float Stiffness { get { return this["Stiffness"].GetValue<float>(); } set { this["Stiffness"].SetValue<float>(value); } }
        public float Damping { get { return this["Damping"].GetValue<float>(); } set { this["Damping"].SetValue<float>(value); } }
        public float Restitution { get { return this["Restitution"].GetValue<float>(); } set { this["Restitution"].SetValue<float>(value); } }
        public float ContactDistance { get { return this["ContactDistance"].GetValue<float>(); } set { this["ContactDistance"].SetValue<float>(value); } }
        public bool bSoftConstraint { get { return this["bSoftConstraint"].Flag; } set { this["bSoftConstraint"].Flag = value; } }
    }
    public class ConstraintProfileProperties : UEObject
    {
        public ConstraintProfileProperties(nint addr) : base(addr) { }
        public ConstraintProfileProperties() : base(0) { }
        public float ProjectionLinearTolerance { get { return this["ProjectionLinearTolerance"].GetValue<float>(); } set { this["ProjectionLinearTolerance"].SetValue<float>(value); } }
        public float ProjectionAngularTolerance { get { return this["ProjectionAngularTolerance"].GetValue<float>(); } set { this["ProjectionAngularTolerance"].SetValue<float>(value); } }
        public float ProjectionLinearAlpha { get { return this["ProjectionLinearAlpha"].GetValue<float>(); } set { this["ProjectionLinearAlpha"].SetValue<float>(value); } }
        public float ProjectionAngularAlpha { get { return this["ProjectionAngularAlpha"].GetValue<float>(); } set { this["ProjectionAngularAlpha"].SetValue<float>(value); } }
        public float LinearBreakThreshold { get { return this["LinearBreakThreshold"].GetValue<float>(); } set { this["LinearBreakThreshold"].SetValue<float>(value); } }
        public float LinearPlasticityThreshold { get { return this["LinearPlasticityThreshold"].GetValue<float>(); } set { this["LinearPlasticityThreshold"].SetValue<float>(value); } }
        public float AngularBreakThreshold { get { return this["AngularBreakThreshold"].GetValue<float>(); } set { this["AngularBreakThreshold"].SetValue<float>(value); } }
        public float AngularPlasticityThreshold { get { return this["AngularPlasticityThreshold"].GetValue<float>(); } set { this["AngularPlasticityThreshold"].SetValue<float>(value); } }
        public LinearConstraint LinearLimit { get { return this[nameof(LinearLimit)].As<LinearConstraint>(); } set { this["LinearLimit"] = value; } }
        public ConeConstraint ConeLimit { get { return this[nameof(ConeLimit)].As<ConeConstraint>(); } set { this["ConeLimit"] = value; } }
        public TwistConstraint TwistLimit { get { return this[nameof(TwistLimit)].As<TwistConstraint>(); } set { this["TwistLimit"] = value; } }
        public LinearDriveConstraint LinearDrive { get { return this[nameof(LinearDrive)].As<LinearDriveConstraint>(); } set { this["LinearDrive"] = value; } }
        public AngularDriveConstraint AngularDrive { get { return this[nameof(AngularDrive)].As<AngularDriveConstraint>(); } set { this["AngularDrive"] = value; } }
        public bool bDisableCollision { get { return this["bDisableCollision"].Flag; } set { this["bDisableCollision"].Flag = value; } }
        public bool bParentDominates { get { return this["bParentDominates"].Flag; } set { this["bParentDominates"].Flag = value; } }
        public bool bEnableProjection { get { return this["bEnableProjection"].Flag; } set { this["bEnableProjection"].Flag = value; } }
        public bool bEnableSoftProjection { get { return this["bEnableSoftProjection"].Flag; } set { this["bEnableSoftProjection"].Flag = value; } }
        public bool bAngularBreakable { get { return this["bAngularBreakable"].Flag; } set { this["bAngularBreakable"].Flag = value; } }
        public bool bAngularPlasticity { get { return this["bAngularPlasticity"].Flag; } set { this["bAngularPlasticity"].Flag = value; } }
        public bool bLinearBreakable { get { return this["bLinearBreakable"].Flag; } set { this["bLinearBreakable"].Flag = value; } }
        public bool bLinearPlasticity { get { return this["bLinearPlasticity"].Flag; } set { this["bLinearPlasticity"].Flag = value; } }
    }
    public class ConstraintInstance : ConstraintInstanceBase
    {
        public ConstraintInstance(nint addr) : base(addr) { }
        public ConstraintInstance() : base(0) { }
        public string JointName { get { return this["JointName"].ToString(); } set { /* String properties are read-only */ } }
        public string ConstraintBone1 { get { return this["ConstraintBone1"].ToString(); } set { /* String properties are read-only */ } }
        public string ConstraintBone2 { get { return this["ConstraintBone2"].ToString(); } set { /* String properties are read-only */ } }
        public Vector Pos1 { get { return this[nameof(Pos1)].As<Vector>(); } set { this["Pos1"] = value; } }
        public Vector PriAxis1 { get { return this[nameof(PriAxis1)].As<Vector>(); } set { this["PriAxis1"] = value; } }
        public Vector SecAxis1 { get { return this[nameof(SecAxis1)].As<Vector>(); } set { this["SecAxis1"] = value; } }
        public Vector Pos2 { get { return this[nameof(Pos2)].As<Vector>(); } set { this["Pos2"] = value; } }
        public Vector PriAxis2 { get { return this[nameof(PriAxis2)].As<Vector>(); } set { this["PriAxis2"] = value; } }
        public Vector SecAxis2 { get { return this[nameof(SecAxis2)].As<Vector>(); } set { this["SecAxis2"] = value; } }
        public Rotator AngularRotationOffset { get { return this[nameof(AngularRotationOffset)].As<Rotator>(); } set { this["AngularRotationOffset"] = value; } }
        public bool bScaleLinearLimits { get { return this["bScaleLinearLimits"].Flag; } set { this["bScaleLinearLimits"].Flag = value; } }
        public ConstraintProfileProperties ProfileInstance { get { return this[nameof(ProfileInstance)].As<ConstraintProfileProperties>(); } set { this["ProfileInstance"] = value; } }
    }
    public class ConstraintInstanceBase : UEObject
    {
        public ConstraintInstanceBase(nint addr) : base(addr) { }
        public ConstraintInstanceBase() : base(0) { }
    }
    public class LinearDriveConstraint : UEObject
    {
        public LinearDriveConstraint(nint addr) : base(addr) { }
        public LinearDriveConstraint() : base(0) { }
        public Vector PositionTarget { get { return this[nameof(PositionTarget)].As<Vector>(); } set { this["PositionTarget"] = value; } }
        public Vector VelocityTarget { get { return this[nameof(VelocityTarget)].As<Vector>(); } set { this["VelocityTarget"] = value; } }
        public ConstraintDrive XDrive { get { return this[nameof(XDrive)].As<ConstraintDrive>(); } set { this["XDrive"] = value; } }
        public ConstraintDrive YDrive { get { return this[nameof(YDrive)].As<ConstraintDrive>(); } set { this["YDrive"] = value; } }
        public ConstraintDrive ZDrive { get { return this[nameof(ZDrive)].As<ConstraintDrive>(); } set { this["ZDrive"] = value; } }
        public bool bEnablePositionDrive { get { return this["bEnablePositionDrive"].Flag; } set { this["bEnablePositionDrive"].Flag = value; } }
    }
    public class ConstraintDrive : UEObject
    {
        public ConstraintDrive(nint addr) : base(addr) { }
        public ConstraintDrive() : base(0) { }
        public float Stiffness { get { return this["Stiffness"].GetValue<float>(); } set { this["Stiffness"].SetValue<float>(value); } }
        public float Damping { get { return this["Damping"].GetValue<float>(); } set { this["Damping"].SetValue<float>(value); } }
        public float MaxForce { get { return this["MaxForce"].GetValue<float>(); } set { this["MaxForce"].SetValue<float>(value); } }
        public bool bEnablePositionDrive { get { return this["bEnablePositionDrive"].Flag; } set { this["bEnablePositionDrive"].Flag = value; } }
        public bool bEnableVelocityDrive { get { return this["bEnableVelocityDrive"].Flag; } set { this["bEnableVelocityDrive"].Flag = value; } }
    }
    public class AngularDriveConstraint : UEObject
    {
        public AngularDriveConstraint(nint addr) : base(addr) { }
        public AngularDriveConstraint() : base(0) { }
        public ConstraintDrive TwistDrive { get { return this[nameof(TwistDrive)].As<ConstraintDrive>(); } set { this["TwistDrive"] = value; } }
        public ConstraintDrive SwingDrive { get { return this[nameof(SwingDrive)].As<ConstraintDrive>(); } set { this["SwingDrive"] = value; } }
        public ConstraintDrive SlerpDrive { get { return this[nameof(SlerpDrive)].As<ConstraintDrive>(); } set { this["SlerpDrive"] = value; } }
        public Rotator OrientationTarget { get { return this[nameof(OrientationTarget)].As<Rotator>(); } set { this["OrientationTarget"] = value; } }
        public Vector AngularVelocityTarget { get { return this[nameof(AngularVelocityTarget)].As<Vector>(); } set { this["AngularVelocityTarget"] = value; } }
        public byte AngularDriveMode { get { return this["AngularDriveMode"].GetValue<byte>(); } set { this["AngularDriveMode"].SetValue<byte>(value); } }
    }
    public class AutoCompleteNode : UEObject
    {
        public AutoCompleteNode(nint addr) : base(addr) { }
        public AutoCompleteNode() : base(0) { }
        public int IndexChar { get { return this["IndexChar"].GetValue<int>(); } set { this["IndexChar"].SetValue<int>(value); } }
        public List<int> AutoCompleteListIndices { get { return this["AutoCompleteListIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class MeshUVChannelInfo : UEObject
    {
        public MeshUVChannelInfo(nint addr) : base(addr) { }
        public MeshUVChannelInfo() : base(0) { }
        public bool bInitialized { get { return this["bInitialized"].Flag; } set { this["bInitialized"].Flag = value; } }
        public bool bOverrideDensities { get { return this["bOverrideDensities"].Flag; } set { this["bOverrideDensities"].Flag = value; } }
        public float LocalUVDensities { get { return this["LocalUVDensities"].GetValue<float>(); } set { this["LocalUVDensities"].SetValue<float>(value); } }
    }
    public class BlueprintComponentDelegateBinding : UEObject
    {
        public BlueprintComponentDelegateBinding(nint addr) : base(addr) { }
        public BlueprintComponentDelegateBinding() : base(0) { }
        public string ComponentPropertyName { get { return this["ComponentPropertyName"].ToString(); } set { /* String properties are read-only */ } }
        public string DelegatePropertyName { get { return this["DelegatePropertyName"].ToString(); } set { /* String properties are read-only */ } }
        public string FunctionNameToBind { get { return this["FunctionNameToBind"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CollisionResponseTemplate : UEObject
    {
        public CollisionResponseTemplate(nint addr) : base(addr) { }
        public CollisionResponseTemplate() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public byte CollisionEnabled { get { return this["CollisionEnabled"].GetValue<byte>(); } set { this["CollisionEnabled"].SetValue<byte>(value); } }
        public bool bCanModify { get { return this["bCanModify"].Flag; } set { this["bCanModify"].Flag = value; } }
        public string ObjectTypeName { get { return this["ObjectTypeName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ResponseChannel> CustomResponses { get { return new Array<ResponseChannel>(this["CustomResponses"]); } set { this["CustomResponses"] = value; } }
    }
    public class CustomChannelSetup : UEObject
    {
        public CustomChannelSetup(nint addr) : base(addr) { }
        public CustomChannelSetup() : base(0) { }
        public byte Channel { get { return this["Channel"].GetValue<byte>(); } set { this["Channel"].SetValue<byte>(value); } }
        public byte DefaultResponse { get { return this["DefaultResponse"].GetValue<byte>(); } set { this["DefaultResponse"].SetValue<byte>(value); } }
        public bool bTraceType { get { return this["bTraceType"].Flag; } set { this["bTraceType"].Flag = value; } }
        public bool bStaticObject { get { return this["bStaticObject"].Flag; } set { this["bStaticObject"].Flag = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CustomProfile : UEObject
    {
        public CustomProfile(nint addr) : base(addr) { }
        public CustomProfile() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ResponseChannel> CustomResponses { get { return new Array<ResponseChannel>(this["CustomResponses"]); } set { this["CustomResponses"] = value; } }
    }
    public class ChildActorAttachedActorInfo : UEObject
    {
        public ChildActorAttachedActorInfo(nint addr) : base(addr) { }
        public ChildActorAttachedActorInfo() : base(0) { }
        public UEObject Actor { get { return this["Actor"]; } set { this["Actor"] = value; } }
        public string SocketName { get { return this["SocketName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Transform RelativeTransform { get { return this[nameof(RelativeTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["RelativeTransform"] = value; } }
    }
    public class ChildActorComponentInstanceData : SceneComponentInstanceData
    {
        public ChildActorComponentInstanceData(nint addr) : base(addr) { }
        public ChildActorComponentInstanceData() : base(0) { }
        public UEObject ChildActorClass { get { return this["ChildActorClass"]; } set { this["ChildActorClass"] = value; } }
        public string ChildActorName { get { return this["ChildActorName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ChildActorAttachedActorInfo> AttachedActors { get { return new Array<ChildActorAttachedActorInfo>(this["AttachedActors"]); } set { this["AttachedActors"] = value; } }
    }
    public class CharacterServerMovePackedBits : CharacterNetworkSerializationPackedBits
    {
        public CharacterServerMovePackedBits(nint addr) : base(addr) { }
        public CharacterServerMovePackedBits() : base(0) { }
    }
    public class CharacterMoveResponsePackedBits : CharacterNetworkSerializationPackedBits
    {
        public CharacterMoveResponsePackedBits(nint addr) : base(addr) { }
        public CharacterMoveResponsePackedBits() : base(0) { }
    }
    public class CharacterNetworkSerializationPackedBits : UEObject
    {
        public CharacterNetworkSerializationPackedBits(nint addr) : base(addr) { }
        public CharacterNetworkSerializationPackedBits() : base(0) { }
    }
    public class FindFloorResult : UEObject
    {
        public FindFloorResult(nint addr) : base(addr) { }
        public FindFloorResult() : base(0) { }
        public bool bBlockingHit { get { return this["bBlockingHit"].Flag; } set { this["bBlockingHit"].Flag = value; } }
        public bool bWalkableFloor { get { return this["bWalkableFloor"].Flag; } set { this["bWalkableFloor"].Flag = value; } }
        public bool bLineTrace { get { return this["bLineTrace"].Flag; } set { this["bLineTrace"].Flag = value; } }
        public float FloorDist { get { return this["FloorDist"].GetValue<float>(); } set { this["FloorDist"].SetValue<float>(value); } }
        public float LineDist { get { return this["LineDist"].GetValue<float>(); } set { this["LineDist"].SetValue<float>(value); } }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
    }
    public class CharacterMovementComponentPostPhysicsTickFunction : TickFunction
    {
        public CharacterMovementComponentPostPhysicsTickFunction(nint addr) : base(addr) { }
        public CharacterMovementComponentPostPhysicsTickFunction() : base(0) { }
    }
    public class RootMotionSourceGroup : UEObject
    {
        public RootMotionSourceGroup(nint addr) : base(addr) { }
        public RootMotionSourceGroup() : base(0) { }
        public bool bHasAdditiveSources { get { return this["bHasAdditiveSources"].Flag; } set { this["bHasAdditiveSources"].Flag = value; } }
        public bool bHasOverrideSources { get { return this["bHasOverrideSources"].Flag; } set { this["bHasOverrideSources"].Flag = value; } }
        public bool bHasOverrideSourcesWithIgnoreZAccumulate { get { return this["bHasOverrideSourcesWithIgnoreZAccumulate"].Flag; } set { this["bHasOverrideSourcesWithIgnoreZAccumulate"].Flag = value; } }
        public bool bIsAdditiveVelocityApplied { get { return this["bIsAdditiveVelocityApplied"].Flag; } set { this["bIsAdditiveVelocityApplied"].Flag = value; } }
        public RootMotionSourceSettings LastAccumulatedSettings { get { return this[nameof(LastAccumulatedSettings)].As<RootMotionSourceSettings>(); } set { this["LastAccumulatedSettings"] = value; } }
        public Vector_NetQuantize10 LastPreAdditiveVelocity { get { return this[nameof(LastPreAdditiveVelocity)].As<Vector_NetQuantize10>(); } set { this["LastPreAdditiveVelocity"] = value; } }
    }
    public class RepRootMotionMontage : UEObject
    {
        public RepRootMotionMontage(nint addr) : base(addr) { }
        public RepRootMotionMontage() : base(0) { }
        public bool bIsActive { get { return this["bIsActive"].Flag; } set { this["bIsActive"].Flag = value; } }
        public AnimMontage AnimMontage { get { return this[nameof(AnimMontage)].As<AnimMontage>(); } set { this["AnimMontage"] = value; } }
        public float position { get { return this["position"].GetValue<float>(); } set { this["position"].SetValue<float>(value); } }
        public Vector_NetQuantize100 Location { get { return this[nameof(Location)].As<Vector_NetQuantize100>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public PrimitiveComponent MovementBase { get { return this[nameof(MovementBase)].As<PrimitiveComponent>(); } set { this["MovementBase"] = value; } }
        public string MovementBaseBoneName { get { return this["MovementBaseBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bRelativePosition { get { return this["bRelativePosition"].Flag; } set { this["bRelativePosition"].Flag = value; } }
        public bool bRelativeRotation { get { return this["bRelativeRotation"].Flag; } set { this["bRelativeRotation"].Flag = value; } }
        public RootMotionSourceGroup AuthoritativeRootMotion { get { return this[nameof(AuthoritativeRootMotion)].As<RootMotionSourceGroup>(); } set { this["AuthoritativeRootMotion"] = value; } }
        public Vector_NetQuantize10 Acceleration { get { return this[nameof(Acceleration)].As<Vector_NetQuantize10>(); } set { this["Acceleration"] = value; } }
        public Vector_NetQuantize10 LinearVelocity { get { return this[nameof(LinearVelocity)].As<Vector_NetQuantize10>(); } set { this["LinearVelocity"] = value; } }
    }
    public class SimulatedRootMotionReplicatedMove : UEObject
    {
        public SimulatedRootMotionReplicatedMove(nint addr) : base(addr) { }
        public SimulatedRootMotionReplicatedMove() : base(0) { }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public RepRootMotionMontage RootMotion { get { return this[nameof(RootMotion)].As<RepRootMotionMontage>(); } set { this["RootMotion"] = value; } }
    }
    public class BasedMovementInfo : UEObject
    {
        public BasedMovementInfo(nint addr) : base(addr) { }
        public BasedMovementInfo() : base(0) { }
        public PrimitiveComponent MovementBase { get { return this[nameof(MovementBase)].As<PrimitiveComponent>(); } set { this["MovementBase"] = value; } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector_NetQuantize100 Location { get { return this[nameof(Location)].As<Vector_NetQuantize100>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public bool bServerHasBaseComponent { get { return this["bServerHasBaseComponent"].Flag; } set { this["bServerHasBaseComponent"].Flag = value; } }
        public bool bRelativeRotation { get { return this["bRelativeRotation"].Flag; } set { this["bRelativeRotation"].Flag = value; } }
        public bool bServerHasVelocity { get { return this["bServerHasVelocity"].Flag; } set { this["bServerHasVelocity"].Flag = value; } }
    }
    public class TextSizingParameters : UEObject
    {
        public TextSizingParameters(nint addr) : base(addr) { }
        public TextSizingParameters() : base(0) { }
        public float DrawX { get { return this["DrawX"].GetValue<float>(); } set { this["DrawX"].SetValue<float>(value); } }
        public float DrawY { get { return this["DrawY"].GetValue<float>(); } set { this["DrawY"].SetValue<float>(value); } }
        public float DrawXL { get { return this["DrawXL"].GetValue<float>(); } set { this["DrawXL"].SetValue<float>(value); } }
        public float DrawYL { get { return this["DrawYL"].GetValue<float>(); } set { this["DrawYL"].SetValue<float>(value); } }
        public Vector2D Scaling { get { return this[nameof(Scaling)].As<Vector2D>(); } set { this["Scaling"] = value; } }
        public Font DrawFont { get { return this[nameof(DrawFont)].As<Font>(); } set { this["DrawFont"] = value; } }
        public Vector2D SpacingAdjust { get { return this[nameof(SpacingAdjust)].As<Vector2D>(); } set { this["SpacingAdjust"] = value; } }
    }
    public class WrappedStringElement : UEObject
    {
        public WrappedStringElement(nint addr) : base(addr) { }
        public WrappedStringElement() : base(0) { }
        public string Value { get { return this["Value"].ToString(); } set { /* String properties are read-only */ } }
        public Vector2D LineExtent { get { return this[nameof(LineExtent)].As<Vector2D>(); } set { this["LineExtent"] = value; } }
    }
    public class CanvasIcon : UEObject
    {
        public CanvasIcon(nint addr) : base(addr) { }
        public CanvasIcon() : base(0) { }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
        public float U { get { return this["U"].GetValue<float>(); } set { this["U"].SetValue<float>(value); } }
        public float V { get { return this["V"].GetValue<float>(); } set { this["V"].SetValue<float>(value); } }
        public float UL { get { return this["UL"].GetValue<float>(); } set { this["UL"].SetValue<float>(value); } }
        public float VL { get { return this["VL"].GetValue<float>(); } set { this["VL"].SetValue<float>(value); } }
    }
    public class DummySpacerCameraTypes : UEObject
    {
        public DummySpacerCameraTypes(nint addr) : base(addr) { }
        public DummySpacerCameraTypes() : base(0) { }
    }
    public class CameraShakeStartParams : UEObject
    {
        public CameraShakeStartParams(nint addr) : base(addr) { }
        public CameraShakeStartParams() : base(0) { }
        public bool bIsRestarting { get { return this["bIsRestarting"].Flag; } set { this["bIsRestarting"].Flag = value; } }
    }
    public class CameraShakeUpdateParams : UEObject
    {
        public CameraShakeUpdateParams(nint addr) : base(addr) { }
        public CameraShakeUpdateParams() : base(0) { }
        public float DeltaTime { get { return this["DeltaTime"].GetValue<float>(); } set { this["DeltaTime"].SetValue<float>(value); } }
        public float ShakeScale { get { return this["ShakeScale"].GetValue<float>(); } set { this["ShakeScale"].SetValue<float>(value); } }
        public float DynamicScale { get { return this["DynamicScale"].GetValue<float>(); } set { this["DynamicScale"].SetValue<float>(value); } }
        public float BlendingWeight { get { return this["BlendingWeight"].GetValue<float>(); } set { this["BlendingWeight"].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class MinimalViewInfo : UEObject
    {
        public MinimalViewInfo(nint addr) : base(addr) { }
        public MinimalViewInfo() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float FOV { get { return this["FOV"].GetValue<float>(); } set { this["FOV"].SetValue<float>(value); } }
        public float DesiredFOV { get { return this["DesiredFOV"].GetValue<float>(); } set { this["DesiredFOV"].SetValue<float>(value); } }
        public float OrthoWidth { get { return this["OrthoWidth"].GetValue<float>(); } set { this["OrthoWidth"].SetValue<float>(value); } }
        public float OrthoNearClipPlane { get { return this["OrthoNearClipPlane"].GetValue<float>(); } set { this["OrthoNearClipPlane"].SetValue<float>(value); } }
        public float OrthoFarClipPlane { get { return this["OrthoFarClipPlane"].GetValue<float>(); } set { this["OrthoFarClipPlane"].SetValue<float>(value); } }
        public float AspectRatio { get { return this["AspectRatio"].GetValue<float>(); } set { this["AspectRatio"].SetValue<float>(value); } }
        public bool bConstrainAspectRatio { get { return this["bConstrainAspectRatio"].Flag; } set { this["bConstrainAspectRatio"].Flag = value; } }
        public bool bUseFieldOfViewForLOD { get { return this["bUseFieldOfViewForLOD"].Flag; } set { this["bUseFieldOfViewForLOD"].Flag = value; } }
        public byte ProjectionMode { get { return this["ProjectionMode"].GetValue<byte>(); } set { this["ProjectionMode"].SetValue<byte>(value); } }
        public float PostProcessBlendWeight { get { return this["PostProcessBlendWeight"].GetValue<float>(); } set { this["PostProcessBlendWeight"].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public Vector2D OffCenterProjectionOffset { get { return this[nameof(OffCenterProjectionOffset)].As<Vector2D>(); } set { this["OffCenterProjectionOffset"] = value; } }
    }
    public class CameraShakeScrubParams : UEObject
    {
        public CameraShakeScrubParams(nint addr) : base(addr) { }
        public CameraShakeScrubParams() : base(0) { }
        public float AbsoluteTime { get { return this["AbsoluteTime"].GetValue<float>(); } set { this["AbsoluteTime"].SetValue<float>(value); } }
        public float ShakeScale { get { return this["ShakeScale"].GetValue<float>(); } set { this["ShakeScale"].SetValue<float>(value); } }
        public float DynamicScale { get { return this["DynamicScale"].GetValue<float>(); } set { this["DynamicScale"].SetValue<float>(value); } }
        public float BlendingWeight { get { return this["BlendingWeight"].GetValue<float>(); } set { this["BlendingWeight"].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class CameraShakeUpdateResult : UEObject
    {
        public CameraShakeUpdateResult(nint addr) : base(addr) { }
        public CameraShakeUpdateResult() : base(0) { }
    }
    public class CameraShakeStopParams : UEObject
    {
        public CameraShakeStopParams(nint addr) : base(addr) { }
        public CameraShakeStopParams() : base(0) { }
        public bool bImmediately { get { return this["bImmediately"].Flag; } set { this["bImmediately"].Flag = value; } }
    }
    public class CameraShakeDuration : UEObject
    {
        public CameraShakeDuration(nint addr) : base(addr) { }
        public CameraShakeDuration() : base(0) { }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public ECameraShakeDurationType Type { get { return (ECameraShakeDurationType)this["Type"].GetValue<int>(); } set { this["Type"].SetValue<int>((int)value); } }
    }
    public class CameraShakeInfo : UEObject
    {
        public CameraShakeInfo(nint addr) : base(addr) { }
        public CameraShakeInfo() : base(0) { }
        public CameraShakeDuration Duration { get { return this[nameof(Duration)].As<CameraShakeDuration>(); } set { this["Duration"] = value; } }
        public float BlendIn { get { return this["BlendIn"].GetValue<float>(); } set { this["BlendIn"].SetValue<float>(value); } }
        public float BlendOut { get { return this["BlendOut"].GetValue<float>(); } set { this["BlendOut"].SetValue<float>(value); } }
    }
    public class PooledCameraShakes : UEObject
    {
        public PooledCameraShakes(nint addr) : base(addr) { }
        public PooledCameraShakes() : base(0) { }
        public Array<CameraShakeBase> PooledShakes { get { return new Array<CameraShakeBase>(this["PooledShakes"]); } set { this["PooledShakes"] = value; } }
    }
    public class ActiveCameraShakeInfo : UEObject
    {
        public ActiveCameraShakeInfo(nint addr) : base(addr) { }
        public ActiveCameraShakeInfo() : base(0) { }
        public CameraShakeBase ShakeInstance { get { return this[nameof(ShakeInstance)].As<CameraShakeBase>(); } set { this["ShakeInstance"] = value; } }
        public UEObject ShakeSource { get { return this["ShakeSource"]; } set { this["ShakeSource"] = value; } }
        public bool bIsCustomInitialized { get { return this["bIsCustomInitialized"].Flag; } set { this["bIsCustomInitialized"].Flag = value; } }
    }
    public class CachedAnimStateData : UEObject
    {
        public CachedAnimStateData(nint addr) : base(addr) { }
        public CachedAnimStateData() : base(0) { }
        public string StateMachineName { get { return this["StateMachineName"].ToString(); } set { /* String properties are read-only */ } }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CachedAnimStateArray : UEObject
    {
        public CachedAnimStateArray(nint addr) : base(addr) { }
        public CachedAnimStateArray() : base(0) { }
        public Array<CachedAnimStateData> States { get { return new Array<CachedAnimStateData>(this["States"]); } set { this["States"] = value; } }
    }
    public class CachedAnimAssetPlayerData : UEObject
    {
        public CachedAnimAssetPlayerData(nint addr) : base(addr) { }
        public CachedAnimAssetPlayerData() : base(0) { }
        public string StateMachineName { get { return this["StateMachineName"].ToString(); } set { /* String properties are read-only */ } }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CachedAnimRelevancyData : UEObject
    {
        public CachedAnimRelevancyData(nint addr) : base(addr) { }
        public CachedAnimRelevancyData() : base(0) { }
        public string StateMachineName { get { return this["StateMachineName"].ToString(); } set { /* String properties are read-only */ } }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CachedAnimTransitionData : UEObject
    {
        public CachedAnimTransitionData(nint addr) : base(addr) { }
        public CachedAnimTransitionData() : base(0) { }
        public string StateMachineName { get { return this["StateMachineName"].ToString(); } set { /* String properties are read-only */ } }
        public string FromStateName { get { return this["FromStateName"].ToString(); } set { /* String properties are read-only */ } }
        public string ToStateName { get { return this["ToStateName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BuilderPoly : UEObject
    {
        public BuilderPoly(nint addr) : base(addr) { }
        public BuilderPoly() : base(0) { }
        public List<int> VertexIndices { get { return this["VertexIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public int Direction { get { return this["Direction"].GetValue<int>(); } set { this["Direction"].SetValue<int>(value); } }
        public string ItemName { get { return this["ItemName"].ToString(); } set { /* String properties are read-only */ } }
        public int PolyFlags { get { return this["PolyFlags"].GetValue<int>(); } set { this["PolyFlags"].SetValue<int>(value); } }
    }
    public class GeomSelection : UEObject
    {
        public GeomSelection(nint addr) : base(addr) { }
        public GeomSelection() : base(0) { }
        public int Type { get { return this["Type"].GetValue<int>(); } set { this["Type"].SetValue<int>(value); } }
        public int Index { get { return this["Index"].GetValue<int>(); } set { this["Index"].SetValue<int>(value); } }
        public int SelectionIndex { get { return this["SelectionIndex"].GetValue<int>(); } set { this["SelectionIndex"].SetValue<int>(value); } }
    }
    public class Bookmark2DJumpToSettings : UEObject
    {
        public Bookmark2DJumpToSettings(nint addr) : base(addr) { }
        public Bookmark2DJumpToSettings() : base(0) { }
    }
    public class BookmarkJumpToSettings : BookmarkBaseJumpToSettings
    {
        public BookmarkJumpToSettings(nint addr) : base(addr) { }
        public BookmarkJumpToSettings() : base(0) { }
    }
    public class BookmarkBaseJumpToSettings : UEObject
    {
        public BookmarkBaseJumpToSettings(nint addr) : base(addr) { }
        public BookmarkBaseJumpToSettings() : base(0) { }
    }
    public class AnimCurveType : UEObject
    {
        public AnimCurveType(nint addr) : base(addr) { }
        public AnimCurveType() : base(0) { }
    }
    public class NodeToCodeAssociation : UEObject
    {
        public NodeToCodeAssociation(nint addr) : base(addr) { }
        public NodeToCodeAssociation() : base(0) { }
    }
    public class DebuggingInfoForSingleFunction : UEObject
    {
        public DebuggingInfoForSingleFunction(nint addr) : base(addr) { }
        public DebuggingInfoForSingleFunction() : base(0) { }
    }
    public class PointerToUberGraphFrame : UEObject
    {
        public PointerToUberGraphFrame(nint addr) : base(addr) { }
        public PointerToUberGraphFrame() : base(0) { }
    }
    public class BlueprintDebugData : UEObject
    {
        public BlueprintDebugData(nint addr) : base(addr) { }
        public BlueprintDebugData() : base(0) { }
    }
    public class EventGraphFastCallPair : UEObject
    {
        public EventGraphFastCallPair(nint addr) : base(addr) { }
        public EventGraphFastCallPair() : base(0) { }
        public Function FunctionToPatch { get { return this[nameof(FunctionToPatch)].As<Function>(); } set { this["FunctionToPatch"] = value; } }
        public int EventGraphCallOffset { get { return this["EventGraphCallOffset"].GetValue<int>(); } set { this["EventGraphCallOffset"].SetValue<int>(value); } }
    }
    public class BlueprintComponentChangedPropertyInfo : UEObject
    {
        public BlueprintComponentChangedPropertyInfo(nint addr) : base(addr) { }
        public BlueprintComponentChangedPropertyInfo() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
        public int ArrayIndex { get { return this["ArrayIndex"].GetValue<int>(); } set { this["ArrayIndex"].SetValue<int>(value); } }
        public Struct PropertyScope { get { return this[nameof(PropertyScope)].As<Struct>(); } set { this["PropertyScope"] = value; } }
    }
    public class BlueprintCookedComponentInstancingData : UEObject
    {
        public BlueprintCookedComponentInstancingData(nint addr) : base(addr) { }
        public BlueprintCookedComponentInstancingData() : base(0) { }
        public Array<BlueprintComponentChangedPropertyInfo> ChangedPropertyList { get { return new Array<BlueprintComponentChangedPropertyInfo>(this["ChangedPropertyList"]); } set { this["ChangedPropertyList"] = value; } }
        public bool bHasValidCookedData { get { return this["bHasValidCookedData"].Flag; } set { this["bHasValidCookedData"].Flag = value; } }
    }
    public class BPComponentClassOverride : UEObject
    {
        public BPComponentClassOverride(nint addr) : base(addr) { }
        public BPComponentClassOverride() : base(0) { }
        public string ComponentName { get { return this["ComponentName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject ComponentClass { get { return this["ComponentClass"]; } set { this["ComponentClass"] = value; } }
    }
    public class CompilerNativizationOptions : UEObject
    {
        public CompilerNativizationOptions(nint addr) : base(addr) { }
        public CompilerNativizationOptions() : base(0) { }
        public string PlatformName { get { return this["PlatformName"].ToString(); } set { /* String properties are read-only */ } }
        public bool ServerOnlyPlatform { get { return this["ServerOnlyPlatform"].Flag; } set { this["ServerOnlyPlatform"].Flag = value; } }
        public bool ClientOnlyPlatform { get { return this["ClientOnlyPlatform"].Flag; } set { this["ClientOnlyPlatform"].Flag = value; } }
        public bool bExcludeMonolithicHeaders { get { return this["bExcludeMonolithicHeaders"].Flag; } set { this["bExcludeMonolithicHeaders"].Flag = value; } }
        public List<string> ExcludedModules { get { return this["ExcludedModules"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject ExcludedAssets { get { return this["ExcludedAssets"]; } set { this["ExcludedAssets"] = value; } }
        public List<string> ExcludedFolderPaths { get { return this["ExcludedFolderPaths"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class BlueprintMacroCosmeticInfo : UEObject
    {
        public BlueprintMacroCosmeticInfo(nint addr) : base(addr) { }
        public BlueprintMacroCosmeticInfo() : base(0) { }
    }
    public class EdGraphTerminalType : UEObject
    {
        public EdGraphTerminalType(nint addr) : base(addr) { }
        public EdGraphTerminalType() : base(0) { }
        public string TerminalCategory { get { return this["TerminalCategory"].ToString(); } set { /* String properties are read-only */ } }
        public string TerminalSubCategory { get { return this["TerminalSubCategory"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject TerminalSubCategoryObject { get { return this["TerminalSubCategoryObject"]; } set { this["TerminalSubCategoryObject"] = value; } }
        public bool bTerminalIsConst { get { return this["bTerminalIsConst"].Flag; } set { this["bTerminalIsConst"].Flag = value; } }
        public bool bTerminalIsWeakPointer { get { return this["bTerminalIsWeakPointer"].Flag; } set { this["bTerminalIsWeakPointer"].Flag = value; } }
        public bool bTerminalIsUObjectWrapper { get { return this["bTerminalIsUObjectWrapper"].Flag; } set { this["bTerminalIsUObjectWrapper"].Flag = value; } }
    }
    public class EdGraphPinType : UEObject
    {
        public EdGraphPinType(nint addr) : base(addr) { }
        public EdGraphPinType() : base(0) { }
        public string PinCategory { get { return this["PinCategory"].ToString(); } set { /* String properties are read-only */ } }
        public string PinSubCategory { get { return this["PinSubCategory"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject PinSubCategoryObject { get { return this["PinSubCategoryObject"]; } set { this["PinSubCategoryObject"] = value; } }
        public SimpleMemberReference PinSubCategoryMemberReference { get { return this[nameof(PinSubCategoryMemberReference)].As<SimpleMemberReference>(); } set { this["PinSubCategoryMemberReference"] = value; } }
        public EdGraphTerminalType PinValueType { get { return this[nameof(PinValueType)].As<EdGraphTerminalType>(); } set { this["PinValueType"] = value; } }
        public EPinContainerType ContainerType { get { return (EPinContainerType)this["ContainerType"].GetValue<int>(); } set { this["ContainerType"].SetValue<int>((int)value); } }
        public bool bIsArray { get { return this["bIsArray"].Flag; } set { this["bIsArray"].Flag = value; } }
        public bool bIsReference { get { return this["bIsReference"].Flag; } set { this["bIsReference"].Flag = value; } }
        public bool bIsConst { get { return this["bIsConst"].Flag; } set { this["bIsConst"].Flag = value; } }
        public bool bIsWeakPointer { get { return this["bIsWeakPointer"].Flag; } set { this["bIsWeakPointer"].Flag = value; } }
        public bool bIsUObjectWrapper { get { return this["bIsUObjectWrapper"].Flag; } set { this["bIsUObjectWrapper"].Flag = value; } }
    }
    public class BPVariableMetaDataEntry : UEObject
    {
        public BPVariableMetaDataEntry(nint addr) : base(addr) { }
        public BPVariableMetaDataEntry() : base(0) { }
        public string DataKey { get { return this["DataKey"].ToString(); } set { /* String properties are read-only */ } }
        public string DataValue { get { return this["DataValue"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BPVariableDescription : UEObject
    {
        public BPVariableDescription(nint addr) : base(addr) { }
        public BPVariableDescription() : base(0) { }
        public string VarName { get { return this["VarName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid VarGuid { get { return this[nameof(VarGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["VarGuid"] = value; } }
        public EdGraphPinType VarType { get { return this[nameof(VarType)].As<EdGraphPinType>(); } set { this["VarType"] = value; } }
        public string FriendlyName { get { return this["FriendlyName"].ToString(); } set { /* String properties are read-only */ } }
        public string Category { get { return this["Category"].ToString(); } set { /* String properties are read-only */ } }
        public ulong PropertyFlags { get { return this["PropertyFlags"].GetValue<ulong>(); } set { this["PropertyFlags"].SetValue<ulong>(value); } }
        public string RepNotifyFunc { get { return this["RepNotifyFunc"].ToString(); } set { /* String properties are read-only */ } }
        public byte ReplicationCondition { get { return this["ReplicationCondition"].GetValue<byte>(); } set { this["ReplicationCondition"].SetValue<byte>(value); } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this["MetaDataArray"]); } set { this["MetaDataArray"] = value; } }
        public string DefaultValue { get { return this["DefaultValue"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BPInterfaceDescription : UEObject
    {
        public BPInterfaceDescription(nint addr) : base(addr) { }
        public BPInterfaceDescription() : base(0) { }
        public UEObject Interface { get { return this["Interface"]; } set { this["Interface"] = value; } }
        public Array<EdGraph> Graphs { get { return new Array<EdGraph>(this["Graphs"]); } set { this["Graphs"] = value; } }
    }
    public class EditedDocumentInfo : UEObject
    {
        public EditedDocumentInfo(nint addr) : base(addr) { }
        public EditedDocumentInfo() : base(0) { }
        public SoftObjectPath EditedObjectPath { get { return this[nameof(EditedObjectPath)].As<SoftObjectPath>(); } set { this["EditedObjectPath"] = value; } }
        public Vector2D SavedViewOffset { get { return this[nameof(SavedViewOffset)].As<Vector2D>(); } set { this["SavedViewOffset"] = value; } }
        public float SavedZoomAmount { get { return this["SavedZoomAmount"].GetValue<float>(); } set { this["SavedZoomAmount"].SetValue<float>(value); } }
        public UEObject EditedObject { get { return this[nameof(EditedObject)]; } set { this["EditedObject"] = value; } }
    }
    public class BPEditorBookmarkNode : UEObject
    {
        public BPEditorBookmarkNode(nint addr) : base(addr) { }
        public BPEditorBookmarkNode() : base(0) { }
        public SDK.Script.CoreUObject.Guid NodeGuid { get { return this[nameof(NodeGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["NodeGuid"] = value; } }
        public SDK.Script.CoreUObject.Guid ParentGuid { get { return this[nameof(ParentGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ParentGuid"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpolationParameter : UEObject
    {
        public InterpolationParameter(nint addr) : base(addr) { }
        public InterpolationParameter() : base(0) { }
        public float InterpolationTime { get { return this["InterpolationTime"].GetValue<float>(); } set { this["InterpolationTime"].SetValue<float>(value); } }
        public byte InterpolationType { get { return this["InterpolationType"].GetValue<byte>(); } set { this["InterpolationType"].SetValue<byte>(value); } }
    }
    public class BlendParameter : UEObject
    {
        public BlendParameter(nint addr) : base(addr) { }
        public BlendParameter() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public float Min { get { return this["Min"].GetValue<float>(); } set { this["Min"].SetValue<float>(value); } }
        public float Max { get { return this["Max"].GetValue<float>(); } set { this["Max"].SetValue<float>(value); } }
        public int GridNum { get { return this["GridNum"].GetValue<int>(); } set { this["GridNum"].SetValue<int>(value); } }
    }
    public class BlendSample : UEObject
    {
        public BlendSample(nint addr) : base(addr) { }
        public BlendSample() : base(0) { }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public Vector SampleValue { get { return this[nameof(SampleValue)].As<Vector>(); } set { this["SampleValue"] = value; } }
        public float RateScale { get { return this["RateScale"].GetValue<float>(); } set { this["RateScale"].SetValue<float>(value); } }
    }
    public class EditorElement : UEObject
    {
        public EditorElement(nint addr) : base(addr) { }
        public EditorElement() : base(0) { }
        public int Indices { get { return this["Indices"].GetValue<int>(); } set { this["Indices"].SetValue<int>(value); } }
        public float Weights { get { return this["Weights"].GetValue<float>(); } set { this["Weights"].SetValue<float>(value); } }
    }
    public class GridBlendSample : UEObject
    {
        public GridBlendSample(nint addr) : base(addr) { }
        public GridBlendSample() : base(0) { }
        public EditorElement GridElement { get { return this[nameof(GridElement)].As<EditorElement>(); } set { this["GridElement"] = value; } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
    }
    public class PerBoneInterpolation : UEObject
    {
        public PerBoneInterpolation(nint addr) : base(addr) { }
        public PerBoneInterpolation() : base(0) { }
        public BoneReference BoneReference { get { return this[nameof(BoneReference)].As<BoneReference>(); } set { this["BoneReference"] = value; } }
        public float InterpolationSpeedPerSec { get { return this["InterpolationSpeedPerSec"].GetValue<float>(); } set { this["InterpolationSpeedPerSec"].SetValue<float>(value); } }
    }
    public class BlendProfileBoneEntry : UEObject
    {
        public BlendProfileBoneEntry(nint addr) : base(addr) { }
        public BlendProfileBoneEntry() : base(0) { }
        public BoneReference BoneReference { get { return this[nameof(BoneReference)].As<BoneReference>(); } set { this["BoneReference"] = value; } }
        public float BlendScale { get { return this["BlendScale"].GetValue<float>(); } set { this["BlendScale"].SetValue<float>(value); } }
    }
    public class BandwidthTestItem : UEObject
    {
        public BandwidthTestItem(nint addr) : base(addr) { }
        public BandwidthTestItem() : base(0) { }
        public List<byte> Kilobyte { get { return this["Kilobyte"].GetList<byte>(); } set { /* Arrays are read-only */ } }
    }
    public class BandwidthTestGenerator : UEObject
    {
        public BandwidthTestGenerator(nint addr) : base(addr) { }
        public BandwidthTestGenerator() : base(0) { }
        public Array<BandwidthTestItem> ReplicatedBuffers { get { return new Array<BandwidthTestItem>(this["ReplicatedBuffers"]); } set { this["ReplicatedBuffers"] = value; } }
    }
    public class NavAvoidanceData : UEObject
    {
        public NavAvoidanceData(nint addr) : base(addr) { }
        public NavAvoidanceData() : base(0) { }
    }
    public class ExternalToolDefinition : UEObject
    {
        public ExternalToolDefinition(nint addr) : base(addr) { }
        public ExternalToolDefinition() : base(0) { }
        public string ToolName { get { return this["ToolName"].ToString(); } set { /* String properties are read-only */ } }
        public FilePath ExecutablePath { get { return this[nameof(ExecutablePath)].As<FilePath>(); } set { this["ExecutablePath"] = value; } }
        public string CommandLineOptions { get { return this["CommandLineOptions"].ToString(); } set { /* String properties are read-only */ } }
        public DirectoryPath WorkingDirectory { get { return this[nameof(WorkingDirectory)].As<DirectoryPath>(); } set { this["WorkingDirectory"] = value; } }
        public string ScriptExtension { get { return this["ScriptExtension"].ToString(); } set { /* String properties are read-only */ } }
        public DirectoryPath ScriptDirectory { get { return this[nameof(ScriptDirectory)].As<DirectoryPath>(); } set { this["ScriptDirectory"] = value; } }
    }
    public class EditorImportExportTestDefinition : UEObject
    {
        public EditorImportExportTestDefinition(nint addr) : base(addr) { }
        public EditorImportExportTestDefinition() : base(0) { }
        public FilePath ImportFilePath { get { return this[nameof(ImportFilePath)].As<FilePath>(); } set { this["ImportFilePath"] = value; } }
        public string ExportFileExtension { get { return this["ExportFileExtension"].ToString(); } set { /* String properties are read-only */ } }
        public bool bSkipExport { get { return this["bSkipExport"].Flag; } set { this["bSkipExport"].Flag = value; } }
        public Array<ImportFactorySettingValues> FactorySettings { get { return new Array<ImportFactorySettingValues>(this["FactorySettings"]); } set { this["FactorySettings"] = value; } }
    }
    public class MaterialEditorPromotionSettings : UEObject
    {
        public MaterialEditorPromotionSettings(nint addr) : base(addr) { }
        public MaterialEditorPromotionSettings() : base(0) { }
        public FilePath DefaultMaterialAsset { get { return this[nameof(DefaultMaterialAsset)].As<FilePath>(); } set { this["DefaultMaterialAsset"] = value; } }
        public FilePath DefaultDiffuseTexture { get { return this[nameof(DefaultDiffuseTexture)].As<FilePath>(); } set { this["DefaultDiffuseTexture"] = value; } }
        public FilePath DefaultNormalTexture { get { return this[nameof(DefaultNormalTexture)].As<FilePath>(); } set { this["DefaultNormalTexture"] = value; } }
    }
    public class ParticleEditorPromotionSettings : UEObject
    {
        public ParticleEditorPromotionSettings(nint addr) : base(addr) { }
        public ParticleEditorPromotionSettings() : base(0) { }
        public FilePath DefaultParticleAsset { get { return this[nameof(DefaultParticleAsset)].As<FilePath>(); } set { this["DefaultParticleAsset"] = value; } }
    }
    public class BlueprintEditorPromotionSettings : UEObject
    {
        public BlueprintEditorPromotionSettings(nint addr) : base(addr) { }
        public BlueprintEditorPromotionSettings() : base(0) { }
        public FilePath FirstMeshPath { get { return this[nameof(FirstMeshPath)].As<FilePath>(); } set { this["FirstMeshPath"] = value; } }
        public FilePath SecondMeshPath { get { return this[nameof(SecondMeshPath)].As<FilePath>(); } set { this["SecondMeshPath"] = value; } }
        public FilePath DefaultParticleAsset { get { return this[nameof(DefaultParticleAsset)].As<FilePath>(); } set { this["DefaultParticleAsset"] = value; } }
    }
    public class ImportFactorySettingValues : UEObject
    {
        public ImportFactorySettingValues(nint addr) : base(addr) { }
        public ImportFactorySettingValues() : base(0) { }
        public string SettingName { get { return this["SettingName"].ToString(); } set { /* String properties are read-only */ } }
        public string Value { get { return this["Value"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class EditorImportWorkflowDefinition : UEObject
    {
        public EditorImportWorkflowDefinition(nint addr) : base(addr) { }
        public EditorImportWorkflowDefinition() : base(0) { }
        public FilePath ImportFilePath { get { return this[nameof(ImportFilePath)].As<FilePath>(); } set { this["ImportFilePath"] = value; } }
        public Array<ImportFactorySettingValues> FactorySettings { get { return new Array<ImportFactorySettingValues>(this["FactorySettings"]); } set { this["FactorySettings"] = value; } }
    }
    public class BuildPromotionImportWorkflowSettings : UEObject
    {
        public BuildPromotionImportWorkflowSettings(nint addr) : base(addr) { }
        public BuildPromotionImportWorkflowSettings() : base(0) { }
        public EditorImportWorkflowDefinition Diffuse { get { return this[nameof(Diffuse)].As<EditorImportWorkflowDefinition>(); } set { this["Diffuse"] = value; } }
        public EditorImportWorkflowDefinition Normal { get { return this[nameof(Normal)].As<EditorImportWorkflowDefinition>(); } set { this["Normal"] = value; } }
        public EditorImportWorkflowDefinition StaticMesh { get { return this[nameof(StaticMesh)].As<EditorImportWorkflowDefinition>(); } set { this["StaticMesh"] = value; } }
        public EditorImportWorkflowDefinition ReimportStaticMesh { get { return this[nameof(ReimportStaticMesh)].As<EditorImportWorkflowDefinition>(); } set { this["ReimportStaticMesh"] = value; } }
        public EditorImportWorkflowDefinition BlendShapeMesh { get { return this[nameof(BlendShapeMesh)].As<EditorImportWorkflowDefinition>(); } set { this["BlendShapeMesh"] = value; } }
        public EditorImportWorkflowDefinition MorphMesh { get { return this[nameof(MorphMesh)].As<EditorImportWorkflowDefinition>(); } set { this["MorphMesh"] = value; } }
        public EditorImportWorkflowDefinition SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<EditorImportWorkflowDefinition>(); } set { this["SkeletalMesh"] = value; } }
        public EditorImportWorkflowDefinition Animation { get { return this[nameof(Animation)].As<EditorImportWorkflowDefinition>(); } set { this["Animation"] = value; } }
        public EditorImportWorkflowDefinition Sound { get { return this[nameof(Sound)].As<EditorImportWorkflowDefinition>(); } set { this["Sound"] = value; } }
        public EditorImportWorkflowDefinition SurroundSound { get { return this[nameof(SurroundSound)].As<EditorImportWorkflowDefinition>(); } set { this["SurroundSound"] = value; } }
        public Array<EditorImportWorkflowDefinition> OtherAssetsToImport { get { return new Array<EditorImportWorkflowDefinition>(this["OtherAssetsToImport"]); } set { this["OtherAssetsToImport"] = value; } }
    }
    public class BuildPromotionOpenAssetSettings : UEObject
    {
        public BuildPromotionOpenAssetSettings(nint addr) : base(addr) { }
        public BuildPromotionOpenAssetSettings() : base(0) { }
        public FilePath BlueprintAsset { get { return this[nameof(BlueprintAsset)].As<FilePath>(); } set { this["BlueprintAsset"] = value; } }
        public FilePath MaterialAsset { get { return this[nameof(MaterialAsset)].As<FilePath>(); } set { this["MaterialAsset"] = value; } }
        public FilePath ParticleSystemAsset { get { return this[nameof(ParticleSystemAsset)].As<FilePath>(); } set { this["ParticleSystemAsset"] = value; } }
        public FilePath SkeletalMeshAsset { get { return this[nameof(SkeletalMeshAsset)].As<FilePath>(); } set { this["SkeletalMeshAsset"] = value; } }
        public FilePath StaticMeshAsset { get { return this[nameof(StaticMeshAsset)].As<FilePath>(); } set { this["StaticMeshAsset"] = value; } }
        public FilePath TextureAsset { get { return this[nameof(TextureAsset)].As<FilePath>(); } set { this["TextureAsset"] = value; } }
    }
    public class BuildPromotionNewProjectSettings : UEObject
    {
        public BuildPromotionNewProjectSettings(nint addr) : base(addr) { }
        public BuildPromotionNewProjectSettings() : base(0) { }
        public DirectoryPath NewProjectFolderOverride { get { return this[nameof(NewProjectFolderOverride)].As<DirectoryPath>(); } set { this["NewProjectFolderOverride"] = value; } }
        public string NewProjectNameOverride { get { return this["NewProjectNameOverride"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BuildPromotionTestSettings : UEObject
    {
        public BuildPromotionTestSettings(nint addr) : base(addr) { }
        public BuildPromotionTestSettings() : base(0) { }
        public FilePath DefaultStaticMeshAsset { get { return this[nameof(DefaultStaticMeshAsset)].As<FilePath>(); } set { this["DefaultStaticMeshAsset"] = value; } }
        public BuildPromotionImportWorkflowSettings ImportWorkflow { get { return this[nameof(ImportWorkflow)].As<BuildPromotionImportWorkflowSettings>(); } set { this["ImportWorkflow"] = value; } }
        public BuildPromotionOpenAssetSettings OpenAssets { get { return this[nameof(OpenAssets)].As<BuildPromotionOpenAssetSettings>(); } set { this["OpenAssets"] = value; } }
        public BuildPromotionNewProjectSettings NewProjectSettings { get { return this[nameof(NewProjectSettings)].As<BuildPromotionNewProjectSettings>(); } set { this["NewProjectSettings"] = value; } }
        public FilePath SourceControlMaterial { get { return this[nameof(SourceControlMaterial)].As<FilePath>(); } set { this["SourceControlMaterial"] = value; } }
    }
    public class EditorMapPerformanceTestDefinition : UEObject
    {
        public EditorMapPerformanceTestDefinition(nint addr) : base(addr) { }
        public EditorMapPerformanceTestDefinition() : base(0) { }
        public SoftObjectPath PerformanceTestmap { get { return this[nameof(PerformanceTestmap)].As<SoftObjectPath>(); } set { this["PerformanceTestmap"] = value; } }
        public int TestTimer { get { return this["TestTimer"].GetValue<int>(); } set { this["TestTimer"].SetValue<int>(value); } }
    }
    public class FilePath : UEObject
    {
        public FilePath(nint addr) : base(addr) { }
        public FilePath() : base(0) { }
        public string FilePath_Property { get { return this["FilePath"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class LaunchOnTestSettings : UEObject
    {
        public LaunchOnTestSettings(nint addr) : base(addr) { }
        public LaunchOnTestSettings() : base(0) { }
        public FilePath LaunchOnTestmap { get { return this[nameof(LaunchOnTestmap)].As<FilePath>(); } set { this["LaunchOnTestmap"] = value; } }
        public string DeviceID { get { return this["DeviceID"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SoundSubmixSendInfo : UEObject
    {
        public SoundSubmixSendInfo(nint addr) : base(addr) { }
        public SoundSubmixSendInfo() : base(0) { }
        public ESendLevelControlMethod SendLevelControlMethod { get { return (ESendLevelControlMethod)this["SendLevelControlMethod"].GetValue<int>(); } set { this["SendLevelControlMethod"].SetValue<int>((int)value); } }
        public ESubmixSendStage SendStage { get { return (ESubmixSendStage)this["SendStage"].GetValue<int>(); } set { this["SendStage"].SetValue<int>((int)value); } }
        public SoundSubmixBase SoundSubmix { get { return this[nameof(SoundSubmix)].As<SoundSubmixBase>(); } set { this["SoundSubmix"] = value; } }
        public float SendLevel { get { return this["SendLevel"].GetValue<float>(); } set { this["SendLevel"].SetValue<float>(value); } }
        public float MinSendLevel { get { return this["MinSendLevel"].GetValue<float>(); } set { this["MinSendLevel"].SetValue<float>(value); } }
        public float MaxSendLevel { get { return this["MaxSendLevel"].GetValue<float>(); } set { this["MaxSendLevel"].SetValue<float>(value); } }
        public float MinSendDistance { get { return this["MinSendDistance"].GetValue<float>(); } set { this["MinSendDistance"].SetValue<float>(value); } }
        public float MaxSendDistance { get { return this["MaxSendDistance"].GetValue<float>(); } set { this["MaxSendDistance"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSendLevelCurve { get { return this[nameof(CustomSendLevelCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSendLevelCurve"] = value; } }
    }
    public class AudioVolumeSubmixSendSettings : UEObject
    {
        public AudioVolumeSubmixSendSettings(nint addr) : base(addr) { }
        public AudioVolumeSubmixSendSettings() : base(0) { }
        public EAudioVolumeLocationState ListenerLocationState { get { return (EAudioVolumeLocationState)this["ListenerLocationState"].GetValue<int>(); } set { this["ListenerLocationState"].SetValue<int>((int)value); } }
        public EAudioVolumeLocationState SourceLocationState { get { return (EAudioVolumeLocationState)this["SourceLocationState"].GetValue<int>(); } set { this["SourceLocationState"].SetValue<int>((int)value); } }
        public Array<SoundSubmixSendInfo> SubmixSends { get { return new Array<SoundSubmixSendInfo>(this["SubmixSends"]); } set { this["SubmixSends"] = value; } }
    }
    public class AudioVolumeSubmixOverrideSettings : UEObject
    {
        public AudioVolumeSubmixOverrideSettings(nint addr) : base(addr) { }
        public AudioVolumeSubmixOverrideSettings() : base(0) { }
        public SoundSubmix Submix { get { return this[nameof(Submix)].As<SoundSubmix>(); } set { this["Submix"] = value; } }
        public Array<SoundEffectSubmixPreset> SubmixEffectChain { get { return new Array<SoundEffectSubmixPreset>(this["SubmixEffectChain"]); } set { this["SubmixEffectChain"] = value; } }
        public float CrossfadeTime { get { return this["CrossfadeTime"].GetValue<float>(); } set { this["CrossfadeTime"].SetValue<float>(value); } }
    }
    public class InteriorSettings : UEObject
    {
        public InteriorSettings(nint addr) : base(addr) { }
        public InteriorSettings() : base(0) { }
        public bool bIsWorldSettings { get { return this["bIsWorldSettings"].Flag; } set { this["bIsWorldSettings"].Flag = value; } }
        public float ExteriorVolume { get { return this["ExteriorVolume"].GetValue<float>(); } set { this["ExteriorVolume"].SetValue<float>(value); } }
        public float ExteriorTime { get { return this["ExteriorTime"].GetValue<float>(); } set { this["ExteriorTime"].SetValue<float>(value); } }
        public float ExteriorLPF { get { return this["ExteriorLPF"].GetValue<float>(); } set { this["ExteriorLPF"].SetValue<float>(value); } }
        public float ExteriorLPFTime { get { return this["ExteriorLPFTime"].GetValue<float>(); } set { this["ExteriorLPFTime"].SetValue<float>(value); } }
        public float InteriorVolume { get { return this["InteriorVolume"].GetValue<float>(); } set { this["InteriorVolume"].SetValue<float>(value); } }
        public float InteriorTime { get { return this["InteriorTime"].GetValue<float>(); } set { this["InteriorTime"].SetValue<float>(value); } }
        public float InteriorLPF { get { return this["InteriorLPF"].GetValue<float>(); } set { this["InteriorLPF"].SetValue<float>(value); } }
        public float InteriorLPFTime { get { return this["InteriorLPFTime"].GetValue<float>(); } set { this["InteriorLPFTime"].SetValue<float>(value); } }
    }
    public class AudioQualitySettings : UEObject
    {
        public AudioQualitySettings(nint addr) : base(addr) { }
        public AudioQualitySettings() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public int MaxChannels { get { return this["MaxChannels"].GetValue<int>(); } set { this["MaxChannels"].SetValue<int>(value); } }
    }
    public class SoundDebugEntry : UEObject
    {
        public SoundDebugEntry(nint addr) : base(addr) { }
        public SoundDebugEntry() : base(0) { }
        public string DebugName { get { return this["DebugName"].ToString(); } set { /* String properties are read-only */ } }
        public SoftObjectPath Sound { get { return this[nameof(Sound)].As<SoftObjectPath>(); } set { this["Sound"] = value; } }
    }
    public class DefaultAudioBusSettings : UEObject
    {
        public DefaultAudioBusSettings(nint addr) : base(addr) { }
        public DefaultAudioBusSettings() : base(0) { }
        public SoftObjectPath AudioBus { get { return this[nameof(AudioBus)].As<SoftObjectPath>(); } set { this["AudioBus"] = value; } }
    }
    public class AudioReverbEffect : AudioEffectParameters
    {
        public AudioReverbEffect(nint addr) : base(addr) { }
        public AudioReverbEffect() : base(0) { }
    }
    public class AudioEffectParameters : UEObject
    {
        public AudioEffectParameters(nint addr) : base(addr) { }
        public AudioEffectParameters() : base(0) { }
    }
    public class AudioComponentParam : UEObject
    {
        public AudioComponentParam(nint addr) : base(addr) { }
        public AudioComponentParam() : base(0) { }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
        public float FloatParam { get { return this["FloatParam"].GetValue<float>(); } set { this["FloatParam"].SetValue<float>(value); } }
        public bool BoolParam { get { return this["BoolParam"].Flag; } set { this["BoolParam"].Flag = value; } }
        public int IntParam { get { return this["IntParam"].GetValue<int>(); } set { this["IntParam"].SetValue<int>(value); } }
        public SoundWave SoundWaveParam { get { return this[nameof(SoundWaveParam)].As<SoundWave>(); } set { this["SoundWaveParam"] = value; } }
    }
    public class BaseAttenuationSettings : UEObject
    {
        public BaseAttenuationSettings(nint addr) : base(addr) { }
        public BaseAttenuationSettings() : base(0) { }
        public EAttenuationDistanceModel DistanceAlgorithm { get { return (EAttenuationDistanceModel)this["DistanceAlgorithm"].GetValue<int>(); } set { this["DistanceAlgorithm"].SetValue<int>((int)value); } }
        public byte AttenuationShape { get { return this["AttenuationShape"].GetValue<byte>(); } set { this["AttenuationShape"].SetValue<byte>(value); } }
        public float dBAttenuationAtMax { get { return this["dBAttenuationAtMax"].GetValue<float>(); } set { this["dBAttenuationAtMax"].SetValue<float>(value); } }
        public ENaturalSoundFalloffMode FalloffMode { get { return (ENaturalSoundFalloffMode)this["FalloffMode"].GetValue<int>(); } set { this["FalloffMode"].SetValue<int>((int)value); } }
        public Vector AttenuationShapeExtents { get { return this[nameof(AttenuationShapeExtents)].As<Vector>(); } set { this["AttenuationShapeExtents"] = value; } }
        public float ConeOffset { get { return this["ConeOffset"].GetValue<float>(); } set { this["ConeOffset"].SetValue<float>(value); } }
        public float FalloffDistance { get { return this["FalloffDistance"].GetValue<float>(); } set { this["FalloffDistance"].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomAttenuationCurve { get { return this[nameof(CustomAttenuationCurve)].As<RuntimeFloatCurve>(); } set { this["CustomAttenuationCurve"] = value; } }
    }
    public class AtmospherePrecomputeParameters : UEObject
    {
        public AtmospherePrecomputeParameters(nint addr) : base(addr) { }
        public AtmospherePrecomputeParameters() : base(0) { }
        public float DensityHeight { get { return this["DensityHeight"].GetValue<float>(); } set { this["DensityHeight"].SetValue<float>(value); } }
        public float DecayHeight { get { return this["DecayHeight"].GetValue<float>(); } set { this["DecayHeight"].SetValue<float>(value); } }
        public int MaxScatteringOrder { get { return this["MaxScatteringOrder"].GetValue<int>(); } set { this["MaxScatteringOrder"].SetValue<int>(value); } }
        public int TransmittanceTexWidth { get { return this["TransmittanceTexWidth"].GetValue<int>(); } set { this["TransmittanceTexWidth"].SetValue<int>(value); } }
        public int TransmittanceTexHeight { get { return this["TransmittanceTexHeight"].GetValue<int>(); } set { this["TransmittanceTexHeight"].SetValue<int>(value); } }
        public int IrradianceTexWidth { get { return this["IrradianceTexWidth"].GetValue<int>(); } set { this["IrradianceTexWidth"].SetValue<int>(value); } }
        public int IrradianceTexHeight { get { return this["IrradianceTexHeight"].GetValue<int>(); } set { this["IrradianceTexHeight"].SetValue<int>(value); } }
        public int InscatterAltitudeSampleNum { get { return this["InscatterAltitudeSampleNum"].GetValue<int>(); } set { this["InscatterAltitudeSampleNum"].SetValue<int>(value); } }
        public int InscatterMuNum { get { return this["InscatterMuNum"].GetValue<int>(); } set { this["InscatterMuNum"].SetValue<int>(value); } }
        public int InscatterMuSNum { get { return this["InscatterMuSNum"].GetValue<int>(); } set { this["InscatterMuSNum"].SetValue<int>(value); } }
        public int InscatterNuNum { get { return this["InscatterNuNum"].GetValue<int>(); } set { this["InscatterNuNum"].SetValue<int>(value); } }
    }
    public class AtmospherePrecomputeInstanceData : SceneComponentInstanceData
    {
        public AtmospherePrecomputeInstanceData(nint addr) : base(addr) { }
        public AtmospherePrecomputeInstanceData() : base(0) { }
    }
    public class AssetMapping : UEObject
    {
        public AssetMapping(nint addr) : base(addr) { }
        public AssetMapping() : base(0) { }
        public AnimationAsset SourceAsset { get { return this[nameof(SourceAsset)].As<AnimationAsset>(); } set { this["SourceAsset"] = value; } }
        public AnimationAsset TargetAsset { get { return this[nameof(TargetAsset)].As<AnimationAsset>(); } set { this["TargetAsset"] = value; } }
    }
    public class PrimaryAssetTypeInfo : UEObject
    {
        public PrimaryAssetTypeInfo(nint addr) : base(addr) { }
        public PrimaryAssetTypeInfo() : base(0) { }
        public string PrimaryAssetType { get { return this["PrimaryAssetType"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject AssetBaseClass { get { return this["AssetBaseClass"]; } set { this["AssetBaseClass"] = value; } }
        public UEObject AssetBaseClassLoaded { get { return this["AssetBaseClassLoaded"]; } set { this["AssetBaseClassLoaded"] = value; } }
        public bool bHasBlueprintClasses { get { return this["bHasBlueprintClasses"].Flag; } set { this["bHasBlueprintClasses"].Flag = value; } }
        public bool bIsEditorOnly { get { return this["bIsEditorOnly"].Flag; } set { this["bIsEditorOnly"].Flag = value; } }
        public Array<DirectoryPath> Directories { get { return new Array<DirectoryPath>(this["Directories"]); } set { this["Directories"] = value; } }
        public Array<SoftObjectPath> SpecificAssets { get { return new Array<SoftObjectPath>(this["SpecificAssets"]); } set { this["SpecificAssets"] = value; } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
        public List<string> AssetScanPaths { get { return this["AssetScanPaths"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bIsDynamicAsset { get { return this["bIsDynamicAsset"].Flag; } set { this["bIsDynamicAsset"].Flag = value; } }
        public int NumberOfAssets { get { return this["NumberOfAssets"].GetValue<int>(); } set { this["NumberOfAssets"].SetValue<int>(value); } }
    }
    public class AssetManagerSearchRules : UEObject
    {
        public AssetManagerSearchRules(nint addr) : base(addr) { }
        public AssetManagerSearchRules() : base(0) { }
        public List<string> AssetScanPaths { get { return this["AssetScanPaths"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> IncludePatterns { get { return this["IncludePatterns"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ExcludePatterns { get { return this["ExcludePatterns"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject AssetBaseClass { get { return this["AssetBaseClass"]; } set { this["AssetBaseClass"] = value; } }
        public bool bHasBlueprintClasses { get { return this["bHasBlueprintClasses"].Flag; } set { this["bHasBlueprintClasses"].Flag = value; } }
        public bool bForceSynchronousScan { get { return this["bForceSynchronousScan"].Flag; } set { this["bForceSynchronousScan"].Flag = value; } }
        public bool bSkipVirtualPathExpansion { get { return this["bSkipVirtualPathExpansion"].Flag; } set { this["bSkipVirtualPathExpansion"].Flag = value; } }
        public bool bSkipManagerIncludeCheck { get { return this["bSkipManagerIncludeCheck"].Flag; } set { this["bSkipManagerIncludeCheck"].Flag = value; } }
    }
    public class AssetManagerRedirect : UEObject
    {
        public AssetManagerRedirect(nint addr) : base(addr) { }
        public AssetManagerRedirect() : base(0) { }
        public string Old { get { return this["Old"].ToString(); } set { /* String properties are read-only */ } }
        public string New { get { return this["New"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PrimaryAssetRulesOverride : UEObject
    {
        public PrimaryAssetRulesOverride(nint addr) : base(addr) { }
        public PrimaryAssetRulesOverride() : base(0) { }
        public PrimaryAssetId PrimaryAssetId { get { return this[nameof(PrimaryAssetId)].As<PrimaryAssetId>(); } set { this["PrimaryAssetId"] = value; } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
    }
    public class PrimaryAssetRules : UEObject
    {
        public PrimaryAssetRules(nint addr) : base(addr) { }
        public PrimaryAssetRules() : base(0) { }
        public int Priority { get { return this["Priority"].GetValue<int>(); } set { this["Priority"].SetValue<int>(value); } }
        public int ChunkId { get { return this["ChunkId"].GetValue<int>(); } set { this["ChunkId"].SetValue<int>(value); } }
        public bool bApplyRecursively { get { return this["bApplyRecursively"].Flag; } set { this["bApplyRecursively"].Flag = value; } }
        public EPrimaryAssetCookRule CookRule { get { return (EPrimaryAssetCookRule)this["CookRule"].GetValue<int>(); } set { this["CookRule"].SetValue<int>((int)value); } }
    }
    public class PrimaryAssetRulesCustomOverride : UEObject
    {
        public PrimaryAssetRulesCustomOverride(nint addr) : base(addr) { }
        public PrimaryAssetRulesCustomOverride() : base(0) { }
        public PrimaryAssetType PrimaryAssetType { get { return this[nameof(PrimaryAssetType)].As<PrimaryAssetType>(); } set { this["PrimaryAssetType"] = value; } }
        public DirectoryPath FilterDirectory { get { return this[nameof(FilterDirectory)].As<DirectoryPath>(); } set { this["FilterDirectory"] = value; } }
        public string FilterString { get { return this["FilterString"].ToString(); } set { /* String properties are read-only */ } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
    }
    public class AssetImportInfo : UEObject
    {
        public AssetImportInfo(nint addr) : base(addr) { }
        public AssetImportInfo() : base(0) { }
    }
    public class PerBoneBlendWeights : UEObject
    {
        public PerBoneBlendWeights(nint addr) : base(addr) { }
        public PerBoneBlendWeights() : base(0) { }
        public Array<PerBoneBlendWeight> BoneBlendWeights { get { return new Array<PerBoneBlendWeight>(this["BoneBlendWeights"]); } set { this["BoneBlendWeights"] = value; } }
    }
    public class AnimNotifyTrack : UEObject
    {
        public AnimNotifyTrack(nint addr) : base(addr) { }
        public AnimNotifyTrack() : base(0) { }
        public string TrackName { get { return this["TrackName"].ToString(); } set { /* String properties are read-only */ } }
        public LinearColor TrackColor { get { return this[nameof(TrackColor)].As<LinearColor>(); } set { this["TrackColor"] = value; } }
    }
    public class AnimSyncMarker : UEObject
    {
        public AnimSyncMarker(nint addr) : base(addr) { }
        public AnimSyncMarker() : base(0) { }
        public string MarkerName { get { return this["MarkerName"].ToString(); } set { /* String properties are read-only */ } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
    }
    public class MarkerSyncData : UEObject
    {
        public MarkerSyncData(nint addr) : base(addr) { }
        public MarkerSyncData() : base(0) { }
        public Array<AnimSyncMarker> AuthoredSyncMarkers { get { return new Array<AnimSyncMarker>(this["AuthoredSyncMarkers"]); } set { this["AuthoredSyncMarkers"] = value; } }
    }
    public class TrackToSkeletonMap : UEObject
    {
        public TrackToSkeletonMap(nint addr) : base(addr) { }
        public TrackToSkeletonMap() : base(0) { }
        public int BoneTreeIndex { get { return this["BoneTreeIndex"].GetValue<int>(); } set { this["BoneTreeIndex"].SetValue<int>(value); } }
    }
    public class AnimationTransitionRule : UEObject
    {
        public AnimationTransitionRule(nint addr) : base(addr) { }
        public AnimationTransitionRule() : base(0) { }
        public string RuleToExecute { get { return this["RuleToExecute"].ToString(); } set { /* String properties are read-only */ } }
        public bool TransitionReturnVal { get { return this["TransitionReturnVal"].Flag; } set { this["TransitionReturnVal"].Flag = value; } }
        public int TransitionIndex { get { return this["TransitionIndex"].GetValue<int>(); } set { this["TransitionIndex"].SetValue<int>(value); } }
    }
    public class AnimationState : AnimationStateBase
    {
        public AnimationState(nint addr) : base(addr) { }
        public AnimationState() : base(0) { }
        public Array<AnimationTransitionRule> Transitions { get { return new Array<AnimationTransitionRule>(this["Transitions"]); } set { this["Transitions"] = value; } }
        public int StateRootNodeIndex { get { return this["StateRootNodeIndex"].GetValue<int>(); } set { this["StateRootNodeIndex"].SetValue<int>(value); } }
        public int StartNotify { get { return this["StartNotify"].GetValue<int>(); } set { this["StartNotify"].SetValue<int>(value); } }
        public int EndNotify { get { return this["EndNotify"].GetValue<int>(); } set { this["EndNotify"].SetValue<int>(value); } }
        public int FullyBlendedNotify { get { return this["FullyBlendedNotify"].GetValue<int>(); } set { this["FullyBlendedNotify"].SetValue<int>(value); } }
    }
    public class BakedStateExitTransition : UEObject
    {
        public BakedStateExitTransition(nint addr) : base(addr) { }
        public BakedStateExitTransition() : base(0) { }
        public int CanTakeDelegateIndex { get { return this["CanTakeDelegateIndex"].GetValue<int>(); } set { this["CanTakeDelegateIndex"].SetValue<int>(value); } }
        public int CustomResultNodeIndex { get { return this["CustomResultNodeIndex"].GetValue<int>(); } set { this["CustomResultNodeIndex"].SetValue<int>(value); } }
        public int TransitionIndex { get { return this["TransitionIndex"].GetValue<int>(); } set { this["TransitionIndex"].SetValue<int>(value); } }
        public bool bDesiredTransitionReturnValue { get { return this["bDesiredTransitionReturnValue"].Flag; } set { this["bDesiredTransitionReturnValue"].Flag = value; } }
        public bool bAutomaticRemainingTimeRule { get { return this["bAutomaticRemainingTimeRule"].Flag; } set { this["bAutomaticRemainingTimeRule"].Flag = value; } }
        public List<int> PoseEvaluatorLinks { get { return this["PoseEvaluatorLinks"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class BakedAnimationState : UEObject
    {
        public BakedAnimationState(nint addr) : base(addr) { }
        public BakedAnimationState() : base(0) { }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<BakedStateExitTransition> Transitions { get { return new Array<BakedStateExitTransition>(this["Transitions"]); } set { this["Transitions"] = value; } }
        public int StateRootNodeIndex { get { return this["StateRootNodeIndex"].GetValue<int>(); } set { this["StateRootNodeIndex"].SetValue<int>(value); } }
        public int StartNotify { get { return this["StartNotify"].GetValue<int>(); } set { this["StartNotify"].SetValue<int>(value); } }
        public int EndNotify { get { return this["EndNotify"].GetValue<int>(); } set { this["EndNotify"].SetValue<int>(value); } }
        public int FullyBlendedNotify { get { return this["FullyBlendedNotify"].GetValue<int>(); } set { this["FullyBlendedNotify"].SetValue<int>(value); } }
        public bool bIsAConduit { get { return this["bIsAConduit"].Flag; } set { this["bIsAConduit"].Flag = value; } }
        public int EntryRuleNodeIndex { get { return this["EntryRuleNodeIndex"].GetValue<int>(); } set { this["EntryRuleNodeIndex"].SetValue<int>(value); } }
        public List<int> PlayerNodeIndices { get { return this["PlayerNodeIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<int> LayerNodeIndices { get { return this["LayerNodeIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bAlwaysResetOnEntry { get { return this["bAlwaysResetOnEntry"].Flag; } set { this["bAlwaysResetOnEntry"].Flag = value; } }
    }
    public class AnimationTransitionBetweenStates : AnimationStateBase
    {
        public AnimationTransitionBetweenStates(nint addr) : base(addr) { }
        public AnimationTransitionBetweenStates() : base(0) { }
        public int PreviousState { get { return this["PreviousState"].GetValue<int>(); } set { this["PreviousState"].SetValue<int>(value); } }
        public int NextState { get { return this["NextState"].GetValue<int>(); } set { this["NextState"].SetValue<int>(value); } }
        public float CrossfadeDuration { get { return this["CrossfadeDuration"].GetValue<float>(); } set { this["CrossfadeDuration"].SetValue<float>(value); } }
        public int StartNotify { get { return this["StartNotify"].GetValue<int>(); } set { this["StartNotify"].SetValue<int>(value); } }
        public int EndNotify { get { return this["EndNotify"].GetValue<int>(); } set { this["EndNotify"].SetValue<int>(value); } }
        public int InterruptNotify { get { return this["InterruptNotify"].GetValue<int>(); } set { this["InterruptNotify"].SetValue<int>(value); } }
        public EAlphaBlendOption BlendMode { get { return (EAlphaBlendOption)this["BlendMode"].GetValue<int>(); } set { this["BlendMode"].SetValue<int>((int)value); } }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
        public byte LogicType { get { return this["LogicType"].GetValue<byte>(); } set { this["LogicType"].SetValue<byte>(value); } }
    }
    public class AnimationStateBase : UEObject
    {
        public AnimationStateBase(nint addr) : base(addr) { }
        public AnimationStateBase() : base(0) { }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class BakedAnimationStateMachine : UEObject
    {
        public BakedAnimationStateMachine(nint addr) : base(addr) { }
        public BakedAnimationStateMachine() : base(0) { }
        public string MachineName { get { return this["MachineName"].ToString(); } set { /* String properties are read-only */ } }
        public int InitialState { get { return this["InitialState"].GetValue<int>(); } set { this["InitialState"].SetValue<int>(value); } }
        public Array<BakedAnimationState> States { get { return new Array<BakedAnimationState>(this["States"]); } set { this["States"] = value; } }
        public Array<AnimationTransitionBetweenStates> Transitions { get { return new Array<AnimationTransitionBetweenStates>(this["Transitions"]); } set { this["Transitions"] = value; } }
    }
    public class AnimNode_SingleNode : AnimNode_Base
    {
        public AnimNode_SingleNode(nint addr) : base(addr) { }
        public AnimNode_SingleNode() : base(0) { }
        public PoseLink SourcePose { get { return this[nameof(SourcePose)].As<PoseLink>(); } set { this["SourcePose"] = value; } }
    }
    public class AnimSingleNodeInstanceProxy : AnimInstanceProxy
    {
        public AnimSingleNodeInstanceProxy(nint addr) : base(addr) { }
        public AnimSingleNodeInstanceProxy() : base(0) { }
    }
    public class AnimSetMeshLinkup : UEObject
    {
        public AnimSetMeshLinkup(nint addr) : base(addr) { }
        public AnimSetMeshLinkup() : base(0) { }
        public List<int> BoneToTrackTable { get { return this["BoneToTrackTable"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class RawAnimSequenceTrack : UEObject
    {
        public RawAnimSequenceTrack(nint addr) : base(addr) { }
        public RawAnimSequenceTrack() : base(0) { }
        public Array<Vector> PosKeys { get { return new Array<Vector>(this["PosKeys"]); } set { this["PosKeys"] = value; } }
        public Array<Quat> RotKeys { get { return new Array<Quat>(this["RotKeys"]); } set { this["RotKeys"] = value; } }
        public Array<Vector> ScaleKeys { get { return new Array<Vector>(this["ScaleKeys"]); } set { this["ScaleKeys"] = value; } }
    }
    public class AnimSequenceTrackContainer : UEObject
    {
        public AnimSequenceTrackContainer(nint addr) : base(addr) { }
        public AnimSequenceTrackContainer() : base(0) { }
        public Array<RawAnimSequenceTrack> AnimationTracks { get { return new Array<RawAnimSequenceTrack>(this["AnimationTracks"]); } set { this["AnimationTracks"] = value; } }
        public List<string> TrackNames { get { return this["TrackNames"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class TranslationTrack : UEObject
    {
        public TranslationTrack(nint addr) : base(addr) { }
        public TranslationTrack() : base(0) { }
        public Array<Vector> PosKeys { get { return new Array<Vector>(this["PosKeys"]); } set { this["PosKeys"] = value; } }
        public List<float> Times { get { return this["Times"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class RotationTrack : UEObject
    {
        public RotationTrack(nint addr) : base(addr) { }
        public RotationTrack() : base(0) { }
        public Array<Quat> RotKeys { get { return new Array<Quat>(this["RotKeys"]); } set { this["RotKeys"] = value; } }
        public List<float> Times { get { return this["Times"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class ScaleTrack : UEObject
    {
        public ScaleTrack(nint addr) : base(addr) { }
        public ScaleTrack() : base(0) { }
        public Array<Vector> ScaleKeys { get { return new Array<Vector>(this["ScaleKeys"]); } set { this["ScaleKeys"] = value; } }
        public List<float> Times { get { return this["Times"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class CurveTrack : UEObject
    {
        public CurveTrack(nint addr) : base(addr) { }
        public CurveTrack() : base(0) { }
        public string CurveName { get { return this["CurveName"].ToString(); } set { /* String properties are read-only */ } }
        public List<float> CurveWeights { get { return this["CurveWeights"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class CompressedTrack : UEObject
    {
        public CompressedTrack(nint addr) : base(addr) { }
        public CompressedTrack() : base(0) { }
        public List<byte> ByteStream { get { return this["ByteStream"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<float> Times { get { return this["Times"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float Mins { get { return this["Mins"].GetValue<float>(); } set { this["Mins"].SetValue<float>(value); } }
        public float Ranges { get { return this["Ranges"].GetValue<float>(); } set { this["Ranges"].SetValue<float>(value); } }
    }
    public class AnimNotifyEventReference : UEObject
    {
        public AnimNotifyEventReference(nint addr) : base(addr) { }
        public AnimNotifyEventReference() : base(0) { }
        public UEObject NotifySource { get { return this[nameof(NotifySource)]; } set { this["NotifySource"] = value; } }
    }
    public class AnimNotifyArray : UEObject
    {
        public AnimNotifyArray(nint addr) : base(addr) { }
        public AnimNotifyArray() : base(0) { }
        public Array<AnimNotifyEventReference> Notifies { get { return new Array<AnimNotifyEventReference>(this["Notifies"]); } set { this["Notifies"] = value; } }
    }
    public class AnimNotifyQueue : UEObject
    {
        public AnimNotifyQueue(nint addr) : base(addr) { }
        public AnimNotifyQueue() : base(0) { }
        public Array<AnimNotifyEventReference> AnimNotifies { get { return new Array<AnimNotifyEventReference>(this["AnimNotifies"]); } set { this["AnimNotifies"] = value; } }
        public UEObject UnfilteredMontageAnimNotifies { get { return this["UnfilteredMontageAnimNotifies"]; } set { this["UnfilteredMontageAnimNotifies"] = value; } }
    }
    public class AnimNode_ConvertComponentToLocalSpace : AnimNode_Base
    {
        public AnimNode_ConvertComponentToLocalSpace(nint addr) : base(addr) { }
        public AnimNode_ConvertComponentToLocalSpace() : base(0) { }
        public ComponentSpacePoseLink ComponentPose { get { return this[nameof(ComponentPose)].As<ComponentSpacePoseLink>(); } set { this["ComponentPose"] = value; } }
    }
    public class AnimNode_ConvertLocalToComponentSpace : AnimNode_Base
    {
        public AnimNode_ConvertLocalToComponentSpace(nint addr) : base(addr) { }
        public AnimNode_ConvertLocalToComponentSpace() : base(0) { }
        public PoseLink LocalPose { get { return this[nameof(LocalPose)].As<PoseLink>(); } set { this["LocalPose"] = value; } }
    }
    public class ExposedValueCopyRecord : UEObject
    {
        public ExposedValueCopyRecord(nint addr) : base(addr) { }
        public ExposedValueCopyRecord() : base(0) { }
        public int CopyIndex { get { return this["CopyIndex"].GetValue<int>(); } set { this["CopyIndex"].SetValue<int>(value); } }
        public EPostCopyOperation PostCopyOperation { get { return (EPostCopyOperation)this["PostCopyOperation"].GetValue<int>(); } set { this["PostCopyOperation"].SetValue<int>((int)value); } }
    }
    public class ExposedValueHandler : UEObject
    {
        public ExposedValueHandler(nint addr) : base(addr) { }
        public ExposedValueHandler() : base(0) { }
        public string BoundFunction { get { return this["BoundFunction"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ExposedValueCopyRecord> CopyRecords { get { return new Array<ExposedValueCopyRecord>(this["CopyRecords"]); } set { this["CopyRecords"] = value; } }
        public Function Function { get { return this[nameof(Function)].As<Function>(); } set { this["Function"] = value; } }
        public UEObject ValueHandlerNodeProperty { get { return this["ValueHandlerNodeProperty"]; } set { this["ValueHandlerNodeProperty"] = value; } }
    }
    public class AnimNode_UseCachedPose : AnimNode_Base
    {
        public AnimNode_UseCachedPose(nint addr) : base(addr) { }
        public AnimNode_UseCachedPose() : base(0) { }
        public PoseLink LinkToCachingNode { get { return this[nameof(LinkToCachingNode)].As<PoseLink>(); } set { this["LinkToCachingNode"] = value; } }
        public string CachePoseName { get { return this["CachePoseName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_TransitionResult : AnimNode_Base
    {
        public AnimNode_TransitionResult(nint addr) : base(addr) { }
        public AnimNode_TransitionResult() : base(0) { }
        public bool bCanEnterTransition { get { return this["bCanEnterTransition"].Flag; } set { this["bCanEnterTransition"].Flag = value; } }
    }
    public class AnimNode_TransitionPoseEvaluator : AnimNode_Base
    {
        public AnimNode_TransitionPoseEvaluator(nint addr) : base(addr) { }
        public AnimNode_TransitionPoseEvaluator() : base(0) { }
        public int FramesToCachePose { get { return this["FramesToCachePose"].GetValue<int>(); } set { this["FramesToCachePose"].SetValue<int>(value); } }
        public byte DataSource { get { return this["DataSource"].GetValue<byte>(); } set { this["DataSource"].SetValue<byte>(value); } }
        public byte EvaluatorMode { get { return this["EvaluatorMode"].GetValue<byte>(); } set { this["EvaluatorMode"].SetValue<byte>(value); } }
    }
    public class AnimationActiveTransitionEntry : UEObject
    {
        public AnimationActiveTransitionEntry(nint addr) : base(addr) { }
        public AnimationActiveTransitionEntry() : base(0) { }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
    }
    public class AnimationPotentialTransition : UEObject
    {
        public AnimationPotentialTransition(nint addr) : base(addr) { }
        public AnimationPotentialTransition() : base(0) { }
    }
    public class AnimNode_StateMachine : AnimNode_Base
    {
        public AnimNode_StateMachine(nint addr) : base(addr) { }
        public AnimNode_StateMachine() : base(0) { }
        public int StateMachineIndexInClass { get { return this["StateMachineIndexInClass"].GetValue<int>(); } set { this["StateMachineIndexInClass"].SetValue<int>(value); } }
        public int MaxTransitionsPerFrame { get { return this["MaxTransitionsPerFrame"].GetValue<int>(); } set { this["MaxTransitionsPerFrame"].SetValue<int>(value); } }
        public bool bSkipFirstUpdateTransition { get { return this["bSkipFirstUpdateTransition"].Flag; } set { this["bSkipFirstUpdateTransition"].Flag = value; } }
        public bool bReinitializeOnBecomingRelevant { get { return this["bReinitializeOnBecomingRelevant"].Flag; } set { this["bReinitializeOnBecomingRelevant"].Flag = value; } }
    }
    public class AnimNode_SequencePlayer : AnimNode_AssetPlayerBase
    {
        public AnimNode_SequencePlayer(nint addr) : base(addr) { }
        public AnimNode_SequencePlayer() : base(0) { }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
        public float PlayRateBasis { get { return this["PlayRateBasis"].GetValue<float>(); } set { this["PlayRateBasis"].SetValue<float>(value); } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public InputScaleBiasClamp PlayRateScaleBiasClamp { get { return this[nameof(PlayRateScaleBiasClamp)].As<InputScaleBiasClamp>(); } set { this["PlayRateScaleBiasClamp"] = value; } }
        public float StartPosition { get { return this["StartPosition"].GetValue<float>(); } set { this["StartPosition"].SetValue<float>(value); } }
        public bool bLoopAnimation { get { return this["bLoopAnimation"].Flag; } set { this["bLoopAnimation"].Flag = value; } }
    }
    public class AnimNode_SaveCachedPose : AnimNode_Base
    {
        public AnimNode_SaveCachedPose(nint addr) : base(addr) { }
        public AnimNode_SaveCachedPose() : base(0) { }
        public PoseLink Pose { get { return this[nameof(Pose)].As<PoseLink>(); } set { this["Pose"] = value; } }
        public string CachePoseName { get { return this["CachePoseName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_LinkedInputPose : AnimNode_Base
    {
        public AnimNode_LinkedInputPose(nint addr) : base(addr) { }
        public AnimNode_LinkedInputPose() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Graph { get { return this["Graph"].ToString(); } set { /* String properties are read-only */ } }
        public PoseLink InputPose { get { return this[nameof(InputPose)].As<PoseLink>(); } set { this["InputPose"] = value; } }
    }
    public class AnimNode_LinkedAnimLayer : AnimNode_LinkedAnimGraph
    {
        public AnimNode_LinkedAnimLayer(nint addr) : base(addr) { }
        public AnimNode_LinkedAnimLayer() : base(0) { }
        public UEObject Interface { get { return this["Interface"]; } set { this["Interface"] = value; } }
        public string Layer { get { return this["Layer"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_LinkedAnimGraph : AnimNode_CustomProperty
    {
        public AnimNode_LinkedAnimGraph(nint addr) : base(addr) { }
        public AnimNode_LinkedAnimGraph() : base(0) { }
        public Array<PoseLink> InputPoses { get { return new Array<PoseLink>(this["InputPoses"]); } set { this["InputPoses"] = value; } }
        public List<string> InputPoseNames { get { return this["InputPoseNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject InstanceClass { get { return this["InstanceClass"]; } set { this["InstanceClass"] = value; } }
        public string Tag { get { return this["Tag"].ToString(); } set { /* String properties are read-only */ } }
        public bool bReceiveNotifiesFromLinkedInstances { get { return this["bReceiveNotifiesFromLinkedInstances"].Flag; } set { this["bReceiveNotifiesFromLinkedInstances"].Flag = value; } }
        public bool bPropagateNotifiesToLinkedInstances { get { return this["bPropagateNotifiesToLinkedInstances"].Flag; } set { this["bPropagateNotifiesToLinkedInstances"].Flag = value; } }
    }
    public class InertializationPose : UEObject
    {
        public InertializationPose(nint addr) : base(addr) { }
        public InertializationPose() : base(0) { }
    }
    public class InertializationBoneDiff : UEObject
    {
        public InertializationBoneDiff(nint addr) : base(addr) { }
        public InertializationBoneDiff() : base(0) { }
    }
    public class InertializationCurveDiff : UEObject
    {
        public InertializationCurveDiff(nint addr) : base(addr) { }
        public InertializationCurveDiff() : base(0) { }
    }
    public class InertializationPoseDiff : UEObject
    {
        public InertializationPoseDiff(nint addr) : base(addr) { }
        public InertializationPoseDiff() : base(0) { }
    }
    public class AnimNode_Inertialization : AnimNode_Base
    {
        public AnimNode_Inertialization(nint addr) : base(addr) { }
        public AnimNode_Inertialization() : base(0) { }
        public PoseLink Source { get { return this[nameof(Source)].As<PoseLink>(); } set { this["Source"] = value; } }
    }
    public class AnimNode_ApplyMeshSpaceAdditive : AnimNode_Base
    {
        public AnimNode_ApplyMeshSpaceAdditive(nint addr) : base(addr) { }
        public AnimNode_ApplyMeshSpaceAdditive() : base(0) { }
        public PoseLink Base { get { return this[nameof(Base)].As<PoseLink>(); } set { this["Base"] = value; } }
        public PoseLink Additive { get { return this[nameof(Additive)].As<PoseLink>(); } set { this["Additive"] = value; } }
        public EAnimAlphaInputType AlphaInputType { get { return (EAnimAlphaInputType)this["AlphaInputType"].GetValue<int>(); } set { this["AlphaInputType"].SetValue<int>((int)value); } }
        public float alpha { get { return this["alpha"].GetValue<float>(); } set { this["alpha"].SetValue<float>(value); } }
        public bool bAlphaBoolEnabled { get { return this["bAlphaBoolEnabled"].Flag; } set { this["bAlphaBoolEnabled"].Flag = value; } }
        public InputAlphaBoolBlend AlphaBoolBlend { get { return this[nameof(AlphaBoolBlend)].As<InputAlphaBoolBlend>(); } set { this["AlphaBoolBlend"] = value; } }
        public string AlphaCurveName { get { return this["AlphaCurveName"].ToString(); } set { /* String properties are read-only */ } }
        public InputScaleBias AlphaScaleBias { get { return this[nameof(AlphaScaleBias)].As<InputScaleBias>(); } set { this["AlphaScaleBias"] = value; } }
        public InputScaleBiasClamp AlphaScaleBiasClamp { get { return this[nameof(AlphaScaleBiasClamp)].As<InputScaleBiasClamp>(); } set { this["AlphaScaleBiasClamp"] = value; } }
        public int LODThreshold { get { return this["LODThreshold"].GetValue<int>(); } set { this["LODThreshold"].SetValue<int>(value); } }
    }
    public class CompositeSection : AnimLinkableElement
    {
        public CompositeSection(nint addr) : base(addr) { }
        public CompositeSection() : base(0) { }
        public string SectionName { get { return this["SectionName"].ToString(); } set { /* String properties are read-only */ } }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
        public string NextSectionName { get { return this["NextSectionName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<AnimMetaData> MetaData { get { return new Array<AnimMetaData>(this["MetaData"]); } set { this["MetaData"] = value; } }
    }
    public class SlotAnimationTrack : UEObject
    {
        public SlotAnimationTrack(nint addr) : base(addr) { }
        public SlotAnimationTrack() : base(0) { }
        public string SlotName { get { return this["SlotName"].ToString(); } set { /* String properties are read-only */ } }
        public AnimTrack AnimTrack { get { return this[nameof(AnimTrack)].As<AnimTrack>(); } set { this["AnimTrack"] = value; } }
    }
    public class BranchingPoint : AnimLinkableElement
    {
        public BranchingPoint(nint addr) : base(addr) { }
        public BranchingPoint() : base(0) { }
        public string EventName { get { return this["EventName"].ToString(); } set { /* String properties are read-only */ } }
        public float DisplayTime { get { return this["DisplayTime"].GetValue<float>(); } set { this["DisplayTime"].SetValue<float>(value); } }
        public float TriggerTimeOffset { get { return this["TriggerTimeOffset"].GetValue<float>(); } set { this["TriggerTimeOffset"].SetValue<float>(value); } }
    }
    public class BranchingPointMarker : UEObject
    {
        public BranchingPointMarker(nint addr) : base(addr) { }
        public BranchingPointMarker() : base(0) { }
        public int NotifyIndex { get { return this["NotifyIndex"].GetValue<int>(); } set { this["NotifyIndex"].SetValue<int>(value); } }
        public float TriggerTime { get { return this["TriggerTime"].GetValue<float>(); } set { this["TriggerTime"].SetValue<float>(value); } }
        public byte NotifyEventType { get { return this["NotifyEventType"].GetValue<byte>(); } set { this["NotifyEventType"].SetValue<byte>(value); } }
    }
    public class AnimMontageInstance : UEObject
    {
        public AnimMontageInstance(nint addr) : base(addr) { }
        public AnimMontageInstance() : base(0) { }
        public AnimMontage Montage { get { return this[nameof(Montage)].As<AnimMontage>(); } set { this["Montage"] = value; } }
        public bool bPlaying { get { return this["bPlaying"].Flag; } set { this["bPlaying"].Flag = value; } }
        public float DefaultBlendTimeMultiplier { get { return this["DefaultBlendTimeMultiplier"].GetValue<float>(); } set { this["DefaultBlendTimeMultiplier"].SetValue<float>(value); } }
        public List<int> NextSections { get { return this["NextSections"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<int> PrevSections { get { return this["PrevSections"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<AnimNotifyEvent> ActiveStateBranchingPoints { get { return new Array<AnimNotifyEvent>(this["ActiveStateBranchingPoints"]); } set { this["ActiveStateBranchingPoints"] = value; } }
        public float position { get { return this["position"].GetValue<float>(); } set { this["position"].SetValue<float>(value); } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public AlphaBlend Blend { get { return this[nameof(Blend)].As<AlphaBlend>(); } set { this["Blend"] = value; } }
        public int DisableRootMotionCount { get { return this["DisableRootMotionCount"].GetValue<int>(); } set { this["DisableRootMotionCount"].SetValue<int>(value); } }
    }
    public class AnimInstanceSubsystemData : UEObject
    {
        public AnimInstanceSubsystemData(nint addr) : base(addr) { }
        public AnimInstanceSubsystemData() : base(0) { }
    }
    public class QueuedDrawDebugItem : UEObject
    {
        public QueuedDrawDebugItem(nint addr) : base(addr) { }
        public QueuedDrawDebugItem() : base(0) { }
        public byte ItemType { get { return this["ItemType"].GetValue<byte>(); } set { this["ItemType"].SetValue<byte>(value); } }
        public Vector StartLoc { get { return this[nameof(StartLoc)].As<Vector>(); } set { this["StartLoc"] = value; } }
        public Vector EndLoc { get { return this[nameof(EndLoc)].As<Vector>(); } set { this["EndLoc"] = value; } }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public float Size { get { return this["Size"].GetValue<float>(); } set { this["Size"].SetValue<float>(value); } }
        public int Segments { get { return this["Segments"].GetValue<int>(); } set { this["Segments"].SetValue<int>(value); } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public bool bPersistentLines { get { return this["bPersistentLines"].Flag; } set { this["bPersistentLines"].Flag = value; } }
        public float LifeTime { get { return this["LifeTime"].GetValue<float>(); } set { this["LifeTime"].SetValue<float>(value); } }
        public float Thickness { get { return this["Thickness"].GetValue<float>(); } set { this["Thickness"].SetValue<float>(value); } }
        public string Message { get { return this["Message"].ToString(); } set { /* String properties are read-only */ } }
        public Vector2D TextScale { get { return this[nameof(TextScale)].As<Vector2D>(); } set { this["TextScale"] = value; } }
    }
    public class A2CSPose : A2Pose
    {
        public A2CSPose(nint addr) : base(addr) { }
        public A2CSPose() : base(0) { }
        public List<byte> ComponentSpaceFlags { get { return this["ComponentSpaceFlags"].GetList<byte>(); } set { /* Arrays are read-only */ } }
    }
    public class A2Pose : UEObject
    {
        public A2Pose(nint addr) : base(addr) { }
        public A2Pose() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> Bones { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Bones"]); } set { this["Bones"] = value; } }
    }
    public class SlotEvaluationPose : UEObject
    {
        public SlotEvaluationPose(nint addr) : base(addr) { }
        public SlotEvaluationPose() : base(0) { }
        public byte AdditiveType { get { return this["AdditiveType"].GetValue<byte>(); } set { this["AdditiveType"].SetValue<byte>(value); } }
        public float Weight { get { return this["Weight"].GetValue<float>(); } set { this["Weight"].SetValue<float>(value); } }
    }
    public class VectorCurve : AnimCurveBase
    {
        public VectorCurve(nint addr) : base(addr) { }
        public VectorCurve() : base(0) { }
        public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
    }
    public class TransformCurve : AnimCurveBase
    {
        public TransformCurve(nint addr) : base(addr) { }
        public TransformCurve() : base(0) { }
        public VectorCurve TranslationCurve { get { return this[nameof(TranslationCurve)].As<VectorCurve>(); } set { this["TranslationCurve"] = value; } }
        public VectorCurve RotationCurve { get { return this[nameof(RotationCurve)].As<VectorCurve>(); } set { this["RotationCurve"] = value; } }
        public VectorCurve ScaleCurve { get { return this[nameof(ScaleCurve)].As<VectorCurve>(); } set { this["ScaleCurve"] = value; } }
    }
    public class FloatCurve : AnimCurveBase
    {
        public FloatCurve(nint addr) : base(addr) { }
        public FloatCurve() : base(0) { }
        public RichCurve FloatCurve_Property { get { return this[nameof(FloatCurve)].As<RichCurve>(); } set { this["FloatCurve"] = value; } }
    }
    public class SmartName : UEObject
    {
        public SmartName(nint addr) : base(addr) { }
        public SmartName() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimCurveBase : UEObject
    {
        public AnimCurveBase(nint addr) : base(addr) { }
        public AnimCurveBase() : base(0) { }
        public string LastObservedName { get { return this["LastObservedName"].ToString(); } set { /* String properties are read-only */ } }
        public SmartName Name { get { return this[nameof(Name)].As<SmartName>(); } set { this["Name"] = value; } }
        public int CurveTypeFlags { get { return this["CurveTypeFlags"].GetValue<int>(); } set { this["CurveTypeFlags"].SetValue<int>(value); } }
    }
    public class RawCurveTracks : UEObject
    {
        public RawCurveTracks(nint addr) : base(addr) { }
        public RawCurveTracks() : base(0) { }
        public Array<FloatCurve> FloatCurves { get { return new Array<FloatCurve>(this["FloatCurves"]); } set { this["FloatCurves"] = value; } }
    }
    public class AnimationErrorStats : UEObject
    {
        public AnimationErrorStats(nint addr) : base(addr) { }
        public AnimationErrorStats() : base(0) { }
    }
    public class RootMotionExtractionStep : UEObject
    {
        public RootMotionExtractionStep(nint addr) : base(addr) { }
        public RootMotionExtractionStep() : base(0) { }
        public AnimSequence AnimSequence { get { return this[nameof(AnimSequence)].As<AnimSequence>(); } set { this["AnimSequence"] = value; } }
        public float StartPosition { get { return this["StartPosition"].GetValue<float>(); } set { this["StartPosition"].SetValue<float>(value); } }
        public float EndPosition { get { return this["EndPosition"].GetValue<float>(); } set { this["EndPosition"].SetValue<float>(value); } }
    }
    public class AnimSegment : UEObject
    {
        public AnimSegment(nint addr) : base(addr) { }
        public AnimSegment() : base(0) { }
        public AnimSequenceBase AnimReference { get { return this[nameof(AnimReference)].As<AnimSequenceBase>(); } set { this["AnimReference"] = value; } }
        public float StartPos { get { return this["StartPos"].GetValue<float>(); } set { this["StartPos"].SetValue<float>(value); } }
        public float AnimStartTime { get { return this["AnimStartTime"].GetValue<float>(); } set { this["AnimStartTime"].SetValue<float>(value); } }
        public float AnimEndTime { get { return this["AnimEndTime"].GetValue<float>(); } set { this["AnimEndTime"].SetValue<float>(value); } }
        public float AnimPlayRate { get { return this["AnimPlayRate"].GetValue<float>(); } set { this["AnimPlayRate"].SetValue<float>(value); } }
        public int LoopingCount { get { return this["LoopingCount"].GetValue<int>(); } set { this["LoopingCount"].SetValue<int>(value); } }
    }
    public class AnimTrack : UEObject
    {
        public AnimTrack(nint addr) : base(addr) { }
        public AnimTrack() : base(0) { }
        public Array<AnimSegment> AnimSegments { get { return new Array<AnimSegment>(this["AnimSegments"]); } set { this["AnimSegments"] = value; } }
    }
    public class AnimBlueprintFunction : UEObject
    {
        public AnimBlueprintFunction(nint addr) : base(addr) { }
        public AnimBlueprintFunction() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Group { get { return this["Group"].ToString(); } set { /* String properties are read-only */ } }
        public int OutputPoseNodeIndex { get { return this["OutputPoseNodeIndex"].GetValue<int>(); } set { this["OutputPoseNodeIndex"].SetValue<int>(value); } }
        public List<string> InputPoseNames { get { return this["InputPoseNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<int> InputPoseNodeIndices { get { return this["InputPoseNodeIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bImplemented { get { return this["bImplemented"].Flag; } set { this["bImplemented"].Flag = value; } }
    }
    public class CachedPoseIndices : UEObject
    {
        public CachedPoseIndices(nint addr) : base(addr) { }
        public CachedPoseIndices() : base(0) { }
        public List<int> OrderedSavedPoseNodeIndices { get { return this["OrderedSavedPoseNodeIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class GraphAssetPlayerInformation : UEObject
    {
        public GraphAssetPlayerInformation(nint addr) : base(addr) { }
        public GraphAssetPlayerInformation() : base(0) { }
        public List<int> PlayerNodeIndices { get { return this["PlayerNodeIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class AnimGraphBlendOptions : UEObject
    {
        public AnimGraphBlendOptions(nint addr) : base(addr) { }
        public AnimGraphBlendOptions() : base(0) { }
        public float BlendInTime { get { return this["BlendInTime"].GetValue<float>(); } set { this["BlendInTime"].SetValue<float>(value); } }
        public float BlendOutTime { get { return this["BlendOutTime"].GetValue<float>(); } set { this["BlendOutTime"].SetValue<float>(value); } }
    }
    public class AnimBlueprintFunctionData : UEObject
    {
        public AnimBlueprintFunctionData(nint addr) : base(addr) { }
        public AnimBlueprintFunctionData() : base(0) { }
        public UEObject OutputPoseNodeProperty { get { return this["OutputPoseNodeProperty"]; } set { this["OutputPoseNodeProperty"] = value; } }
        public Array<UEObject> InputPoseNodeProperties { get { return new Array<UEObject>(this["InputPoseNodeProperties"]); } set { this["InputPoseNodeProperties"] = value; } }
        public Array<UEObject> InputProperties { get { return new Array<UEObject>(this["InputProperties"]); } set { this["InputProperties"] = value; } }
    }
    public class StateMachineStateDebugData : UEObject
    {
        public StateMachineStateDebugData(nint addr) : base(addr) { }
        public StateMachineStateDebugData() : base(0) { }
    }
    public class StateMachineDebugData : UEObject
    {
        public StateMachineDebugData(nint addr) : base(addr) { }
        public StateMachineDebugData() : base(0) { }
    }
    public class AnimationFrameSnapshot : UEObject
    {
        public AnimationFrameSnapshot(nint addr) : base(addr) { }
        public AnimationFrameSnapshot() : base(0) { }
    }
    public class AnimBlueprintDebugData : UEObject
    {
        public AnimBlueprintDebugData(nint addr) : base(addr) { }
        public AnimBlueprintDebugData() : base(0) { }
    }
    public class AnimGroupInfo : UEObject
    {
        public AnimGroupInfo(nint addr) : base(addr) { }
        public AnimGroupInfo() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
    }
    public class AnimParentNodeAssetOverride : UEObject
    {
        public AnimParentNodeAssetOverride(nint addr) : base(addr) { }
        public AnimParentNodeAssetOverride() : base(0) { }
        public AnimationAsset NewAsset { get { return this[nameof(NewAsset)].As<AnimationAsset>(); } set { this["NewAsset"] = value; } }
        public SDK.Script.CoreUObject.Guid ParentNodeGuid { get { return this[nameof(ParentNodeGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ParentNodeGuid"] = value; } }
    }
    public class NamedFloat : UEObject
    {
        public NamedFloat(nint addr) : base(addr) { }
        public NamedFloat() : base(0) { }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class NamedVector : UEObject
    {
        public NamedVector(nint addr) : base(addr) { }
        public NamedVector() : base(0) { }
        public Vector Value { get { return this[nameof(Value)].As<Vector>(); } set { this["Value"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class NamedColor : UEObject
    {
        public NamedColor(nint addr) : base(addr) { }
        public NamedColor() : base(0) { }
        public Color Value { get { return this[nameof(Value)].As<Color>(); } set { this["Value"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class NamedTransform : UEObject
    {
        public NamedTransform(nint addr) : base(addr) { }
        public NamedTransform() : base(0) { }
        public SDK.Script.CoreUObject.Transform Value { get { return this[nameof(Value)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Value"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class LocalSpacePose : UEObject
    {
        public LocalSpacePose(nint addr) : base(addr) { }
        public LocalSpacePose() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> Transforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Transforms"]); } set { this["Transforms"] = value; } }
        public List<string> Names { get { return this["Names"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class ComponentSpacePose : UEObject
    {
        public ComponentSpacePose(nint addr) : base(addr) { }
        public ComponentSpacePose() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> Transforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Transforms"]); } set { this["Transforms"] = value; } }
        public List<string> Names { get { return this["Names"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class AnimationRecordingSettings : UEObject
    {
        public AnimationRecordingSettings(nint addr) : base(addr) { }
        public AnimationRecordingSettings() : base(0) { }
        public bool bRecordInWorldSpace { get { return this["bRecordInWorldSpace"].Flag; } set { this["bRecordInWorldSpace"].Flag = value; } }
        public bool bRemoveRootAnimation { get { return this["bRemoveRootAnimation"].Flag; } set { this["bRemoveRootAnimation"].Flag = value; } }
        public bool bAutoSaveAsset { get { return this["bAutoSaveAsset"].Flag; } set { this["bAutoSaveAsset"].Flag = value; } }
        public float SampleRate { get { return this["SampleRate"].GetValue<float>(); } set { this["SampleRate"].SetValue<float>(value); } }
        public float Length { get { return this["Length"].GetValue<float>(); } set { this["Length"].SetValue<float>(value); } }
        public byte InterpMode { get { return this["InterpMode"].GetValue<byte>(); } set { this["InterpMode"].SetValue<byte>(value); } }
        public byte TangentMode { get { return this["TangentMode"].GetValue<byte>(); } set { this["TangentMode"].SetValue<byte>(value); } }
        public bool bRecordTransforms { get { return this["bRecordTransforms"].Flag; } set { this["bRecordTransforms"].Flag = value; } }
        public bool bRecordCurves { get { return this["bRecordCurves"].Flag; } set { this["bRecordCurves"].Flag = value; } }
    }
    public class BlendSampleData : UEObject
    {
        public BlendSampleData(nint addr) : base(addr) { }
        public BlendSampleData() : base(0) { }
        public int SampleDataIndex { get { return this["SampleDataIndex"].GetValue<int>(); } set { this["SampleDataIndex"].SetValue<int>(value); } }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public float TotalWeight { get { return this["TotalWeight"].GetValue<float>(); } set { this["TotalWeight"].SetValue<float>(value); } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float PreviousTime { get { return this["PreviousTime"].GetValue<float>(); } set { this["PreviousTime"].SetValue<float>(value); } }
        public float SamplePlayRate { get { return this["SamplePlayRate"].GetValue<float>(); } set { this["SamplePlayRate"].SetValue<float>(value); } }
    }
    public class BlendFilter : UEObject
    {
        public BlendFilter(nint addr) : base(addr) { }
        public BlendFilter() : base(0) { }
    }
    public class MarkerSyncAnimPosition : UEObject
    {
        public MarkerSyncAnimPosition(nint addr) : base(addr) { }
        public MarkerSyncAnimPosition() : base(0) { }
        public string PreviousMarkerName { get { return this["PreviousMarkerName"].ToString(); } set { /* String properties are read-only */ } }
        public string NextMarkerName { get { return this["NextMarkerName"].ToString(); } set { /* String properties are read-only */ } }
        public float PositionBetweenMarkers { get { return this["PositionBetweenMarkers"].GetValue<float>(); } set { this["PositionBetweenMarkers"].SetValue<float>(value); } }
    }
    public class AnimTickRecord : UEObject
    {
        public AnimTickRecord(nint addr) : base(addr) { }
        public AnimTickRecord() : base(0) { }
        public AnimationAsset SourceAsset { get { return this[nameof(SourceAsset)].As<AnimationAsset>(); } set { this["SourceAsset"] = value; } }
    }
    public class AnimGroupInstance : UEObject
    {
        public AnimGroupInstance(nint addr) : base(addr) { }
        public AnimGroupInstance() : base(0) { }
    }
    public class AnimationGroupReference : UEObject
    {
        public AnimationGroupReference(nint addr) : base(addr) { }
        public AnimationGroupReference() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public byte GroupRole { get { return this["GroupRole"].GetValue<byte>(); } set { this["GroupRole"].SetValue<byte>(value); } }
        public EAnimSyncGroupScope GroupScope { get { return (EAnimSyncGroupScope)this["GroupScope"].GetValue<int>(); } set { this["GroupScope"].SetValue<int>((int)value); } }
    }
    public class KSphereElem : KShapeElem
    {
        public KSphereElem(nint addr) : base(addr) { }
        public KSphereElem() : base(0) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
    }
    public class KBoxElem : KShapeElem
    {
        public KBoxElem(nint addr) : base(addr) { }
        public KBoxElem() : base(0) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float X { get { return this["X"].GetValue<float>(); } set { this["X"].SetValue<float>(value); } }
        public float Y { get { return this["Y"].GetValue<float>(); } set { this["Y"].SetValue<float>(value); } }
        public float Z { get { return this["Z"].GetValue<float>(); } set { this["Z"].SetValue<float>(value); } }
    }
    public class KSphylElem : KShapeElem
    {
        public KSphylElem(nint addr) : base(addr) { }
        public KSphylElem() : base(0) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public float Length { get { return this["Length"].GetValue<float>(); } set { this["Length"].SetValue<float>(value); } }
    }
    public class KConvexElem : KShapeElem
    {
        public KConvexElem(nint addr) : base(addr) { }
        public KConvexElem() : base(0) { }
        public Array<Vector> VertexData { get { return new Array<Vector>(this["VertexData"]); } set { this["VertexData"] = value; } }
        public List<int> IndexData { get { return this["IndexData"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Box ElemBox { get { return this[nameof(ElemBox)].As<Box>(); } set { this["ElemBox"] = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
    }
    public class KTaperedCapsuleElem : KShapeElem
    {
        public KTaperedCapsuleElem(nint addr) : base(addr) { }
        public KTaperedCapsuleElem() : base(0) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Radius0 { get { return this["Radius0"].GetValue<float>(); } set { this["Radius0"].SetValue<float>(value); } }
        public float Radius1 { get { return this["Radius1"].GetValue<float>(); } set { this["Radius1"].SetValue<float>(value); } }
        public float Length { get { return this["Length"].GetValue<float>(); } set { this["Length"].SetValue<float>(value); } }
    }
    public class KAggregateGeom : UEObject
    {
        public KAggregateGeom(nint addr) : base(addr) { }
        public KAggregateGeom() : base(0) { }
        public Array<KSphereElem> SphereElems { get { return new Array<KSphereElem>(this["SphereElems"]); } set { this["SphereElems"] = value; } }
        public Array<KBoxElem> BoxElems { get { return new Array<KBoxElem>(this["BoxElems"]); } set { this["BoxElems"] = value; } }
        public Array<KSphylElem> SphylElems { get { return new Array<KSphylElem>(this["SphylElems"]); } set { this["SphylElems"] = value; } }
        public Array<KConvexElem> ConvexElems { get { return new Array<KConvexElem>(this["ConvexElems"]); } set { this["ConvexElems"] = value; } }
        public Array<KTaperedCapsuleElem> TaperedCapsuleElems { get { return new Array<KTaperedCapsuleElem>(this["TaperedCapsuleElems"]); } set { this["TaperedCapsuleElems"] = value; } }
    }
    public class DirectoryPath : UEObject
    {
        public DirectoryPath(nint addr) : base(addr) { }
        public DirectoryPath() : base(0) { }
        public string Path { get { return this["Path"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SceneComponentInstanceData : ActorComponentInstanceData
    {
        public SceneComponentInstanceData(nint addr) : base(addr) { }
        public SceneComponentInstanceData() : base(0) { }
        public UEObject AttachedInstanceComponents { get { return this["AttachedInstanceComponents"]; } set { this["AttachedInstanceComponents"] = value; } }
    }
    public class ActorComponentDuplicatedObjectData : UEObject
    {
        public ActorComponentDuplicatedObjectData(nint addr) : base(addr) { }
        public ActorComponentDuplicatedObjectData() : base(0) { }
    }
    public class ActorComponentInstanceData : UEObject
    {
        public ActorComponentInstanceData(nint addr) : base(addr) { }
        public ActorComponentInstanceData() : base(0) { }
        public UEObject SourceComponentTemplate { get { return this[nameof(SourceComponentTemplate)]; } set { this["SourceComponentTemplate"] = value; } }
        public EComponentCreationMethod SourceComponentCreationMethod { get { return (EComponentCreationMethod)this["SourceComponentCreationMethod"].GetValue<int>(); } set { this["SourceComponentCreationMethod"].SetValue<int>((int)value); } }
        public int SourceComponentTypeSerializedIndex { get { return this["SourceComponentTypeSerializedIndex"].GetValue<int>(); } set { this["SourceComponentTypeSerializedIndex"].SetValue<int>(value); } }
        public List<byte> SavedProperties { get { return this["SavedProperties"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public ActorComponentDuplicatedObjectData UniqueTransientPackage { get { return this[nameof(UniqueTransientPackage)].As<ActorComponentDuplicatedObjectData>(); } set { this["UniqueTransientPackage"] = value; } }
        public Array<ActorComponentDuplicatedObjectData> DuplicatedObjects { get { return new Array<ActorComponentDuplicatedObjectData>(this["DuplicatedObjects"]); } set { this["DuplicatedObjects"] = value; } }
        public Array<UEObject> ReferencedObjects { get { return new Array<UEObject>(this["ReferencedObjects"]); } set { this["ReferencedObjects"] = value; } }
        public List<string> ReferencedNames { get { return this["ReferencedNames"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class AnimCurveParam : UEObject
    {
        public AnimCurveParam(nint addr) : base(addr) { }
        public AnimCurveParam() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_Root : AnimNode_Base
    {
        public AnimNode_Root(nint addr) : base(addr) { }
        public AnimNode_Root() : base(0) { }
        public PoseLink Result { get { return this[nameof(Result)].As<PoseLink>(); } set { this["Result"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Group { get { return this["Group"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PoseSnapshot : UEObject
    {
        public PoseSnapshot(nint addr) : base(addr) { }
        public PoseSnapshot() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> LocalTransforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["LocalTransforms"]); } set { this["LocalTransforms"] = value; } }
        public List<string> BoneNames { get { return this["BoneNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public string SkeletalMeshName { get { return this["SkeletalMeshName"].ToString(); } set { /* String properties are read-only */ } }
        public string SnapshotName { get { return this["SnapshotName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsValid { get { return this["bIsValid"].Flag; } set { this["bIsValid"].Flag = value; } }
    }
    public class PerBoneBlendWeight : UEObject
    {
        public PerBoneBlendWeight(nint addr) : base(addr) { }
        public PerBoneBlendWeight() : base(0) { }
        public int SourceIndex { get { return this["SourceIndex"].GetValue<int>(); } set { this["SourceIndex"].SetValue<int>(value); } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
    }
    public class AnimNode_AssetPlayerBase : AnimNode_Base
    {
        public AnimNode_AssetPlayerBase(nint addr) : base(addr) { }
        public AnimNode_AssetPlayerBase() : base(0) { }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public byte GroupRole { get { return this["GroupRole"].GetValue<byte>(); } set { this["GroupRole"].SetValue<byte>(value); } }
        public EAnimSyncGroupScope GroupScope { get { return (EAnimSyncGroupScope)this["GroupScope"].GetValue<int>(); } set { this["GroupScope"].SetValue<int>((int)value); } }
        public bool bIgnoreForRelevancyTest { get { return this["bIgnoreForRelevancyTest"].Flag; } set { this["bIgnoreForRelevancyTest"].Flag = value; } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
        public float InternalTimeAccumulator { get { return this["InternalTimeAccumulator"].GetValue<float>(); } set { this["InternalTimeAccumulator"].SetValue<float>(value); } }
    }
    public class RootMotionSourceStatus : UEObject
    {
        public RootMotionSourceStatus(nint addr) : base(addr) { }
        public RootMotionSourceStatus() : base(0) { }
        public byte Flags { get { return this["Flags"].GetValue<byte>(); } set { this["Flags"].SetValue<byte>(value); } }
    }
    public class RootMotionSourceSettings : UEObject
    {
        public RootMotionSourceSettings(nint addr) : base(addr) { }
        public RootMotionSourceSettings() : base(0) { }
        public byte Flags { get { return this["Flags"].GetValue<byte>(); } set { this["Flags"].SetValue<byte>(value); } }
    }
    public class RootMotionMovementParams : UEObject
    {
        public RootMotionMovementParams(nint addr) : base(addr) { }
        public RootMotionMovementParams() : base(0) { }
        public bool bHasRootMotion { get { return this["bHasRootMotion"].Flag; } set { this["bHasRootMotion"].Flag = value; } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
        public SDK.Script.CoreUObject.Transform RootMotionTransform { get { return this[nameof(RootMotionTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["RootMotionTransform"] = value; } }
    }
    public class RootMotionFinishVelocitySettings : UEObject
    {
        public RootMotionFinishVelocitySettings(nint addr) : base(addr) { }
        public RootMotionFinishVelocitySettings() : base(0) { }
        public ERootMotionFinishVelocityMode Mode { get { return (ERootMotionFinishVelocityMode)this["Mode"].GetValue<int>(); } set { this["Mode"].SetValue<int>((int)value); } }
        public Vector SetVelocity { get { return this[nameof(SetVelocity)].As<Vector>(); } set { this["SetVelocity"] = value; } }
        public float ClampVelocity { get { return this["ClampVelocity"].GetValue<float>(); } set { this["ClampVelocity"].SetValue<float>(value); } }
    }
    public class RootMotionSource : UEObject
    {
        public RootMotionSource(nint addr) : base(addr) { }
        public RootMotionSource() : base(0) { }
        public ushort Priority { get { return this["Priority"].GetValue<ushort>(); } set { this["Priority"].SetValue<ushort>(value); } }
        public ushort LocalID { get { return this["LocalID"].GetValue<ushort>(); } set { this["LocalID"].SetValue<ushort>(value); } }
        public ERootMotionAccumulateMode AccumulateMode { get { return (ERootMotionAccumulateMode)this["AccumulateMode"].GetValue<int>(); } set { this["AccumulateMode"].SetValue<int>((int)value); } }
        public string InstanceName { get { return this["InstanceName"].ToString(); } set { /* String properties are read-only */ } }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
        public float CurrentTime { get { return this["CurrentTime"].GetValue<float>(); } set { this["CurrentTime"].SetValue<float>(value); } }
        public float PreviousTime { get { return this["PreviousTime"].GetValue<float>(); } set { this["PreviousTime"].SetValue<float>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public RootMotionSourceStatus Status { get { return this[nameof(Status)].As<RootMotionSourceStatus>(); } set { this["Status"] = value; } }
        public RootMotionSourceSettings Settings { get { return this[nameof(Settings)].As<RootMotionSourceSettings>(); } set { this["Settings"] = value; } }
        public bool bInLocalSpace { get { return this["bInLocalSpace"].Flag; } set { this["bInLocalSpace"].Flag = value; } }
        public RootMotionMovementParams RootMotionParams { get { return this[nameof(RootMotionParams)].As<RootMotionMovementParams>(); } set { this["RootMotionParams"] = value; } }
        public RootMotionFinishVelocitySettings FinishVelocityParams { get { return this[nameof(FinishVelocityParams)].As<RootMotionFinishVelocitySettings>(); } set { this["FinishVelocityParams"] = value; } }
    }
    public class SoundModulationDestinationSettings : UEObject
    {
        public SoundModulationDestinationSettings(nint addr) : base(addr) { }
        public SoundModulationDestinationSettings() : base(0) { }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public SoundModulatorBase Modulator { get { return this[nameof(Modulator)].As<SoundModulatorBase>(); } set { this["Modulator"] = value; } }
    }
    public class ActorTickFunction : TickFunction
    {
        public ActorTickFunction(nint addr) : base(addr) { }
        public ActorTickFunction() : base(0) { }
    }
    public class RepMovement : UEObject
    {
        public RepMovement(nint addr) : base(addr) { }
        public RepMovement() : base(0) { }
        public Vector LinearVelocity { get { return this[nameof(LinearVelocity)].As<Vector>(); } set { this["LinearVelocity"] = value; } }
        public Vector AngularVelocity { get { return this[nameof(AngularVelocity)].As<Vector>(); } set { this["AngularVelocity"] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public bool bSimulatedPhysicSleep { get { return this["bSimulatedPhysicSleep"].Flag; } set { this["bSimulatedPhysicSleep"].Flag = value; } }
        public bool bRepPhysics { get { return this["bRepPhysics"].Flag; } set { this["bRepPhysics"].Flag = value; } }
        public EVectorQuantization LocationQuantizationLevel { get { return (EVectorQuantization)this["LocationQuantizationLevel"].GetValue<int>(); } set { this["LocationQuantizationLevel"].SetValue<int>((int)value); } }
        public EVectorQuantization VelocityQuantizationLevel { get { return (EVectorQuantization)this["VelocityQuantizationLevel"].GetValue<int>(); } set { this["VelocityQuantizationLevel"].SetValue<int>((int)value); } }
        public ERotatorQuantization RotationQuantizationLevel { get { return (ERotatorQuantization)this["RotationQuantizationLevel"].GetValue<int>(); } set { this["RotationQuantizationLevel"].SetValue<int>((int)value); } }
    }
    public class RepAttachment : UEObject
    {
        public RepAttachment(nint addr) : base(addr) { }
        public RepAttachment() : base(0) { }
        public Actor AttachParent { get { return this[nameof(AttachParent)].As<Actor>(); } set { this["AttachParent"] = value; } }
        public Vector_NetQuantize100 LocationOffset { get { return this[nameof(LocationOffset)].As<Vector_NetQuantize100>(); } set { this["LocationOffset"] = value; } }
        public Vector_NetQuantize100 RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector_NetQuantize100>(); } set { this["RelativeScale3D"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public string AttachSocket { get { return this["AttachSocket"].ToString(); } set { /* String properties are read-only */ } }
        public SceneComponent AttachComponent { get { return this[nameof(AttachComponent)].As<SceneComponent>(); } set { this["AttachComponent"] = value; } }
    }
    public class PerPlatformBool : UEObject
    {
        public PerPlatformBool(nint addr) : base(addr) { }
        public PerPlatformBool() : base(0) { }
        public bool Default { get { return this["Default"].Flag; } set { this["Default"].Flag = value; } }
    }
    public class PerPlatformInt : UEObject
    {
        public PerPlatformInt(nint addr) : base(addr) { }
        public PerPlatformInt() : base(0) { }
        public int Default { get { return this["Default"].GetValue<int>(); } set { this["Default"].SetValue<int>(value); } }
    }
    public class PerPlatformFloat : UEObject
    {
        public PerPlatformFloat(nint addr) : base(addr) { }
        public PerPlatformFloat() : base(0) { }
        public float Default { get { return this["Default"].GetValue<float>(); } set { this["Default"].SetValue<float>(value); } }
    }
    public class BranchFilter : UEObject
    {
        public BranchFilter(nint addr) : base(addr) { }
        public BranchFilter() : base(0) { }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public int BlendDepth { get { return this["BlendDepth"].GetValue<int>(); } set { this["BlendDepth"].SetValue<int>(value); } }
    }
    public class InputBlendPose : UEObject
    {
        public InputBlendPose(nint addr) : base(addr) { }
        public InputBlendPose() : base(0) { }
        public Array<BranchFilter> BranchFilters { get { return new Array<BranchFilter>(this["BranchFilters"]); } set { this["BranchFilters"] = value; } }
    }
    public class ComponentReference : UEObject
    {
        public ComponentReference(nint addr) : base(addr) { }
        public ComponentReference() : base(0) { }
        public Actor OtherActor { get { return this[nameof(OtherActor)].As<Actor>(); } set { this["OtherActor"] = value; } }
        public string ComponentProperty { get { return this["ComponentProperty"].ToString(); } set { /* String properties are read-only */ } }
        public string PathToComponent { get { return this["PathToComponent"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimInstanceProxy : UEObject
    {
        public AnimInstanceProxy(nint addr) : base(addr) { }
        public AnimInstanceProxy() : base(0) { }
    }
    public class AnimNode_CustomProperty : AnimNode_Base
    {
        public AnimNode_CustomProperty(nint addr) : base(addr) { }
        public AnimNode_CustomProperty() : base(0) { }
        public List<string> SourcePropertyNames { get { return this["SourcePropertyNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> DestPropertyNames { get { return this["DestPropertyNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject TargetInstance { get { return this[nameof(TargetInstance)]; } set { this["TargetInstance"] = value; } }
    }
    public class RichCurveKey : UEObject
    {
        public RichCurveKey(nint addr) : base(addr) { }
        public RichCurveKey() : base(0) { }
        public byte InterpMode { get { return this["InterpMode"].GetValue<byte>(); } set { this["InterpMode"].SetValue<byte>(value); } }
        public byte TangentMode { get { return this["TangentMode"].GetValue<byte>(); } set { this["TangentMode"].SetValue<byte>(value); } }
        public byte TangentWeightMode { get { return this["TangentWeightMode"].GetValue<byte>(); } set { this["TangentWeightMode"].SetValue<byte>(value); } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public float ArriveTangent { get { return this["ArriveTangent"].GetValue<float>(); } set { this["ArriveTangent"].SetValue<float>(value); } }
        public float ArriveTangentWeight { get { return this["ArriveTangentWeight"].GetValue<float>(); } set { this["ArriveTangentWeight"].SetValue<float>(value); } }
        public float LeaveTangent { get { return this["LeaveTangent"].GetValue<float>(); } set { this["LeaveTangent"].SetValue<float>(value); } }
        public float LeaveTangentWeight { get { return this["LeaveTangentWeight"].GetValue<float>(); } set { this["LeaveTangentWeight"].SetValue<float>(value); } }
    }
    public class RichCurve : RealCurve
    {
        public RichCurve(nint addr) : base(addr) { }
        public RichCurve() : base(0) { }
        public Array<RichCurveKey> Keys { get { return new Array<RichCurveKey>(this["Keys"]); } set { this["Keys"] = value; } }
    }
    public class RealCurve : IndexedCurve
    {
        public RealCurve(nint addr) : base(addr) { }
        public RealCurve() : base(0) { }
        public float DefaultValue { get { return this["DefaultValue"].GetValue<float>(); } set { this["DefaultValue"].SetValue<float>(value); } }
        public byte PreInfinityExtrap { get { return this["PreInfinityExtrap"].GetValue<byte>(); } set { this["PreInfinityExtrap"].SetValue<byte>(value); } }
        public byte PostInfinityExtrap { get { return this["PostInfinityExtrap"].GetValue<byte>(); } set { this["PostInfinityExtrap"].SetValue<byte>(value); } }
    }
    public class KeyHandleMap : UEObject
    {
        public KeyHandleMap(nint addr) : base(addr) { }
        public KeyHandleMap() : base(0) { }
    }
    public class IndexedCurve : UEObject
    {
        public IndexedCurve(nint addr) : base(addr) { }
        public IndexedCurve() : base(0) { }
        public KeyHandleMap KeyHandlesToIndices { get { return this[nameof(KeyHandlesToIndices)].As<KeyHandleMap>(); } set { this["KeyHandlesToIndices"] = value; } }
    }
    public class RuntimeFloatCurve : UEObject
    {
        public RuntimeFloatCurve(nint addr) : base(addr) { }
        public RuntimeFloatCurve() : base(0) { }
        public RichCurve EditorCurveData { get { return this[nameof(EditorCurveData)].As<RichCurve>(); } set { this["EditorCurveData"] = value; } }
        public CurveFloat ExternalCurve { get { return this[nameof(ExternalCurve)].As<CurveFloat>(); } set { this["ExternalCurve"] = value; } }
    }
    public class KShapeElem : UEObject
    {
        public KShapeElem(nint addr) : base(addr) { }
        public KShapeElem() : base(0) { }
        public float RestOffset { get { return this["RestOffset"].GetValue<float>(); } set { this["RestOffset"].SetValue<float>(value); } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public bool bContributeToMass { get { return this["bContributeToMass"].Flag; } set { this["bContributeToMass"].Flag = value; } }
        public byte CollisionEnabled { get { return this["CollisionEnabled"].GetValue<byte>(); } set { this["CollisionEnabled"].SetValue<byte>(value); } }
    }
    public class KeyHandleLookupTable : UEObject
    {
        public KeyHandleLookupTable(nint addr) : base(addr) { }
        public KeyHandleLookupTable() : base(0) { }
    }
    public class WeightedBlendable : UEObject
    {
        public WeightedBlendable(nint addr) : base(addr) { }
        public WeightedBlendable() : base(0) { }
        public float Weight { get { return this["Weight"].GetValue<float>(); } set { this["Weight"].SetValue<float>(value); } }
        public UEObject Object { get { return this[nameof(Object)]; } set { this["Object"] = value; } }
    }
    public class WeightedBlendables : UEObject
    {
        public WeightedBlendables(nint addr) : base(addr) { }
        public WeightedBlendables() : base(0) { }
        public Array<WeightedBlendable> Array { get { return new Array<WeightedBlendable>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class PostProcessSettings : UEObject
    {
        public PostProcessSettings(nint addr) : base(addr) { }
        public PostProcessSettings() : base(0) { }
        public bool bOverride_TemperatureType { get { return this["bOverride_TemperatureType"].Flag; } set { this["bOverride_TemperatureType"].Flag = value; } }
        public bool bOverride_WhiteTemp { get { return this["bOverride_WhiteTemp"].Flag; } set { this["bOverride_WhiteTemp"].Flag = value; } }
        public bool bOverride_WhiteTint { get { return this["bOverride_WhiteTint"].Flag; } set { this["bOverride_WhiteTint"].Flag = value; } }
        public bool bOverride_ColorSaturation { get { return this["bOverride_ColorSaturation"].Flag; } set { this["bOverride_ColorSaturation"].Flag = value; } }
        public bool bOverride_ColorContrast { get { return this["bOverride_ColorContrast"].Flag; } set { this["bOverride_ColorContrast"].Flag = value; } }
        public bool bOverride_ColorGamma { get { return this["bOverride_ColorGamma"].Flag; } set { this["bOverride_ColorGamma"].Flag = value; } }
        public bool bOverride_ColorGain { get { return this["bOverride_ColorGain"].Flag; } set { this["bOverride_ColorGain"].Flag = value; } }
        public bool bOverride_ColorOffset { get { return this["bOverride_ColorOffset"].Flag; } set { this["bOverride_ColorOffset"].Flag = value; } }
        public bool bOverride_ColorSaturationShadows { get { return this["bOverride_ColorSaturationShadows"].Flag; } set { this["bOverride_ColorSaturationShadows"].Flag = value; } }
        public bool bOverride_ColorContrastShadows { get { return this["bOverride_ColorContrastShadows"].Flag; } set { this["bOverride_ColorContrastShadows"].Flag = value; } }
        public bool bOverride_ColorGammaShadows { get { return this["bOverride_ColorGammaShadows"].Flag; } set { this["bOverride_ColorGammaShadows"].Flag = value; } }
        public bool bOverride_ColorGainShadows { get { return this["bOverride_ColorGainShadows"].Flag; } set { this["bOverride_ColorGainShadows"].Flag = value; } }
        public bool bOverride_ColorOffsetShadows { get { return this["bOverride_ColorOffsetShadows"].Flag; } set { this["bOverride_ColorOffsetShadows"].Flag = value; } }
        public bool bOverride_ColorSaturationMidtones { get { return this["bOverride_ColorSaturationMidtones"].Flag; } set { this["bOverride_ColorSaturationMidtones"].Flag = value; } }
        public bool bOverride_ColorContrastMidtones { get { return this["bOverride_ColorContrastMidtones"].Flag; } set { this["bOverride_ColorContrastMidtones"].Flag = value; } }
        public bool bOverride_ColorGammaMidtones { get { return this["bOverride_ColorGammaMidtones"].Flag; } set { this["bOverride_ColorGammaMidtones"].Flag = value; } }
        public bool bOverride_ColorGainMidtones { get { return this["bOverride_ColorGainMidtones"].Flag; } set { this["bOverride_ColorGainMidtones"].Flag = value; } }
        public bool bOverride_ColorOffsetMidtones { get { return this["bOverride_ColorOffsetMidtones"].Flag; } set { this["bOverride_ColorOffsetMidtones"].Flag = value; } }
        public bool bOverride_ColorSaturationHighlights { get { return this["bOverride_ColorSaturationHighlights"].Flag; } set { this["bOverride_ColorSaturationHighlights"].Flag = value; } }
        public bool bOverride_ColorContrastHighlights { get { return this["bOverride_ColorContrastHighlights"].Flag; } set { this["bOverride_ColorContrastHighlights"].Flag = value; } }
        public bool bOverride_ColorGammaHighlights { get { return this["bOverride_ColorGammaHighlights"].Flag; } set { this["bOverride_ColorGammaHighlights"].Flag = value; } }
        public bool bOverride_ColorGainHighlights { get { return this["bOverride_ColorGainHighlights"].Flag; } set { this["bOverride_ColorGainHighlights"].Flag = value; } }
        public bool bOverride_ColorOffsetHighlights { get { return this["bOverride_ColorOffsetHighlights"].Flag; } set { this["bOverride_ColorOffsetHighlights"].Flag = value; } }
        public bool bOverride_ColorCorrectionShadowsMax { get { return this["bOverride_ColorCorrectionShadowsMax"].Flag; } set { this["bOverride_ColorCorrectionShadowsMax"].Flag = value; } }
        public bool bOverride_ColorCorrectionHighlightsMin { get { return this["bOverride_ColorCorrectionHighlightsMin"].Flag; } set { this["bOverride_ColorCorrectionHighlightsMin"].Flag = value; } }
        public bool bOverride_BlueCorrection { get { return this["bOverride_BlueCorrection"].Flag; } set { this["bOverride_BlueCorrection"].Flag = value; } }
        public bool bOverride_ExpandGamut { get { return this["bOverride_ExpandGamut"].Flag; } set { this["bOverride_ExpandGamut"].Flag = value; } }
        public bool bOverride_ToneCurveAmount { get { return this["bOverride_ToneCurveAmount"].Flag; } set { this["bOverride_ToneCurveAmount"].Flag = value; } }
        public bool bOverride_FilmWhitePoint { get { return this["bOverride_FilmWhitePoint"].Flag; } set { this["bOverride_FilmWhitePoint"].Flag = value; } }
        public bool bOverride_FilmSaturation { get { return this["bOverride_FilmSaturation"].Flag; } set { this["bOverride_FilmSaturation"].Flag = value; } }
        public bool bOverride_FilmChannelMixerRed { get { return this["bOverride_FilmChannelMixerRed"].Flag; } set { this["bOverride_FilmChannelMixerRed"].Flag = value; } }
        public bool bOverride_FilmChannelMixerGreen { get { return this["bOverride_FilmChannelMixerGreen"].Flag; } set { this["bOverride_FilmChannelMixerGreen"].Flag = value; } }
        public bool bOverride_FilmChannelMixerBlue { get { return this["bOverride_FilmChannelMixerBlue"].Flag; } set { this["bOverride_FilmChannelMixerBlue"].Flag = value; } }
        public bool bOverride_FilmContrast { get { return this["bOverride_FilmContrast"].Flag; } set { this["bOverride_FilmContrast"].Flag = value; } }
        public bool bOverride_FilmDynamicRange { get { return this["bOverride_FilmDynamicRange"].Flag; } set { this["bOverride_FilmDynamicRange"].Flag = value; } }
        public bool bOverride_FilmHealAmount { get { return this["bOverride_FilmHealAmount"].Flag; } set { this["bOverride_FilmHealAmount"].Flag = value; } }
        public bool bOverride_FilmToeAmount { get { return this["bOverride_FilmToeAmount"].Flag; } set { this["bOverride_FilmToeAmount"].Flag = value; } }
        public bool bOverride_FilmShadowTint { get { return this["bOverride_FilmShadowTint"].Flag; } set { this["bOverride_FilmShadowTint"].Flag = value; } }
        public bool bOverride_FilmShadowTintBlend { get { return this["bOverride_FilmShadowTintBlend"].Flag; } set { this["bOverride_FilmShadowTintBlend"].Flag = value; } }
        public bool bOverride_FilmShadowTintAmount { get { return this["bOverride_FilmShadowTintAmount"].Flag; } set { this["bOverride_FilmShadowTintAmount"].Flag = value; } }
        public bool bOverride_FilmSlope { get { return this["bOverride_FilmSlope"].Flag; } set { this["bOverride_FilmSlope"].Flag = value; } }
        public bool bOverride_FilmToe { get { return this["bOverride_FilmToe"].Flag; } set { this["bOverride_FilmToe"].Flag = value; } }
        public bool bOverride_FilmShoulder { get { return this["bOverride_FilmShoulder"].Flag; } set { this["bOverride_FilmShoulder"].Flag = value; } }
        public bool bOverride_FilmBlackClip { get { return this["bOverride_FilmBlackClip"].Flag; } set { this["bOverride_FilmBlackClip"].Flag = value; } }
        public bool bOverride_FilmWhiteClip { get { return this["bOverride_FilmWhiteClip"].Flag; } set { this["bOverride_FilmWhiteClip"].Flag = value; } }
        public bool bOverride_SceneColorTint { get { return this["bOverride_SceneColorTint"].Flag; } set { this["bOverride_SceneColorTint"].Flag = value; } }
        public bool bOverride_SceneFringeIntensity { get { return this["bOverride_SceneFringeIntensity"].Flag; } set { this["bOverride_SceneFringeIntensity"].Flag = value; } }
        public bool bOverride_ChromaticAberrationStartOffset { get { return this["bOverride_ChromaticAberrationStartOffset"].Flag; } set { this["bOverride_ChromaticAberrationStartOffset"].Flag = value; } }
        public bool bOverride_AmbientCubemapTint { get { return this["bOverride_AmbientCubemapTint"].Flag; } set { this["bOverride_AmbientCubemapTint"].Flag = value; } }
        public bool bOverride_AmbientCubemapIntensity { get { return this["bOverride_AmbientCubemapIntensity"].Flag; } set { this["bOverride_AmbientCubemapIntensity"].Flag = value; } }
        public bool bOverride_BloomMethod { get { return this["bOverride_BloomMethod"].Flag; } set { this["bOverride_BloomMethod"].Flag = value; } }
        public bool bOverride_BloomIntensity { get { return this["bOverride_BloomIntensity"].Flag; } set { this["bOverride_BloomIntensity"].Flag = value; } }
        public bool bOverride_BloomThreshold { get { return this["bOverride_BloomThreshold"].Flag; } set { this["bOverride_BloomThreshold"].Flag = value; } }
        public bool bOverride_Bloom1Tint { get { return this["bOverride_Bloom1Tint"].Flag; } set { this["bOverride_Bloom1Tint"].Flag = value; } }
        public bool bOverride_Bloom1Size { get { return this["bOverride_Bloom1Size"].Flag; } set { this["bOverride_Bloom1Size"].Flag = value; } }
        public bool bOverride_Bloom2Size { get { return this["bOverride_Bloom2Size"].Flag; } set { this["bOverride_Bloom2Size"].Flag = value; } }
        public bool bOverride_Bloom2Tint { get { return this["bOverride_Bloom2Tint"].Flag; } set { this["bOverride_Bloom2Tint"].Flag = value; } }
        public bool bOverride_Bloom3Tint { get { return this["bOverride_Bloom3Tint"].Flag; } set { this["bOverride_Bloom3Tint"].Flag = value; } }
        public bool bOverride_Bloom3Size { get { return this["bOverride_Bloom3Size"].Flag; } set { this["bOverride_Bloom3Size"].Flag = value; } }
        public bool bOverride_Bloom4Tint { get { return this["bOverride_Bloom4Tint"].Flag; } set { this["bOverride_Bloom4Tint"].Flag = value; } }
        public bool bOverride_Bloom4Size { get { return this["bOverride_Bloom4Size"].Flag; } set { this["bOverride_Bloom4Size"].Flag = value; } }
        public bool bOverride_Bloom5Tint { get { return this["bOverride_Bloom5Tint"].Flag; } set { this["bOverride_Bloom5Tint"].Flag = value; } }
        public bool bOverride_Bloom5Size { get { return this["bOverride_Bloom5Size"].Flag; } set { this["bOverride_Bloom5Size"].Flag = value; } }
        public bool bOverride_Bloom6Tint { get { return this["bOverride_Bloom6Tint"].Flag; } set { this["bOverride_Bloom6Tint"].Flag = value; } }
        public bool bOverride_Bloom6Size { get { return this["bOverride_Bloom6Size"].Flag; } set { this["bOverride_Bloom6Size"].Flag = value; } }
        public bool bOverride_BloomSizeScale { get { return this["bOverride_BloomSizeScale"].Flag; } set { this["bOverride_BloomSizeScale"].Flag = value; } }
        public bool bOverride_BloomConvolutionTexture { get { return this["bOverride_BloomConvolutionTexture"].Flag; } set { this["bOverride_BloomConvolutionTexture"].Flag = value; } }
        public bool bOverride_BloomConvolutionSize { get { return this["bOverride_BloomConvolutionSize"].Flag; } set { this["bOverride_BloomConvolutionSize"].Flag = value; } }
        public bool bOverride_BloomConvolutionCenterUV { get { return this["bOverride_BloomConvolutionCenterUV"].Flag; } set { this["bOverride_BloomConvolutionCenterUV"].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilter { get { return this["bOverride_BloomConvolutionPreFilter"].Flag; } set { this["bOverride_BloomConvolutionPreFilter"].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMin { get { return this["bOverride_BloomConvolutionPreFilterMin"].Flag; } set { this["bOverride_BloomConvolutionPreFilterMin"].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMax { get { return this["bOverride_BloomConvolutionPreFilterMax"].Flag; } set { this["bOverride_BloomConvolutionPreFilterMax"].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMult { get { return this["bOverride_BloomConvolutionPreFilterMult"].Flag; } set { this["bOverride_BloomConvolutionPreFilterMult"].Flag = value; } }
        public bool bOverride_BloomConvolutionBufferScale { get { return this["bOverride_BloomConvolutionBufferScale"].Flag; } set { this["bOverride_BloomConvolutionBufferScale"].Flag = value; } }
        public bool bOverride_BloomDirtMaskIntensity { get { return this["bOverride_BloomDirtMaskIntensity"].Flag; } set { this["bOverride_BloomDirtMaskIntensity"].Flag = value; } }
        public bool bOverride_BloomDirtMaskTint { get { return this["bOverride_BloomDirtMaskTint"].Flag; } set { this["bOverride_BloomDirtMaskTint"].Flag = value; } }
        public bool bOverride_BloomDirtMask { get { return this["bOverride_BloomDirtMask"].Flag; } set { this["bOverride_BloomDirtMask"].Flag = value; } }
        public bool bOverride_CameraShutterSpeed { get { return this["bOverride_CameraShutterSpeed"].Flag; } set { this["bOverride_CameraShutterSpeed"].Flag = value; } }
        public bool bOverride_CameraISO { get { return this["bOverride_CameraISO"].Flag; } set { this["bOverride_CameraISO"].Flag = value; } }
        public bool bOverride_AutoExposureMethod { get { return this["bOverride_AutoExposureMethod"].Flag; } set { this["bOverride_AutoExposureMethod"].Flag = value; } }
        public bool bOverride_AutoExposureLowPercent { get { return this["bOverride_AutoExposureLowPercent"].Flag; } set { this["bOverride_AutoExposureLowPercent"].Flag = value; } }
        public bool bOverride_AutoExposureHighPercent { get { return this["bOverride_AutoExposureHighPercent"].Flag; } set { this["bOverride_AutoExposureHighPercent"].Flag = value; } }
        public bool bOverride_AutoExposureMinBrightness { get { return this["bOverride_AutoExposureMinBrightness"].Flag; } set { this["bOverride_AutoExposureMinBrightness"].Flag = value; } }
        public bool bOverride_AutoExposureMaxBrightness { get { return this["bOverride_AutoExposureMaxBrightness"].Flag; } set { this["bOverride_AutoExposureMaxBrightness"].Flag = value; } }
        public bool bOverride_AutoExposureCalibrationConstant { get { return this["bOverride_AutoExposureCalibrationConstant"].Flag; } set { this["bOverride_AutoExposureCalibrationConstant"].Flag = value; } }
        public bool bOverride_AutoExposureSpeedUp { get { return this["bOverride_AutoExposureSpeedUp"].Flag; } set { this["bOverride_AutoExposureSpeedUp"].Flag = value; } }
        public bool bOverride_AutoExposureSpeedDown { get { return this["bOverride_AutoExposureSpeedDown"].Flag; } set { this["bOverride_AutoExposureSpeedDown"].Flag = value; } }
        public bool bOverride_AutoExposureBias { get { return this["bOverride_AutoExposureBias"].Flag; } set { this["bOverride_AutoExposureBias"].Flag = value; } }
        public bool bOverride_AutoExposureBiasCurve { get { return this["bOverride_AutoExposureBiasCurve"].Flag; } set { this["bOverride_AutoExposureBiasCurve"].Flag = value; } }
        public bool bOverride_AutoExposureMeterMask { get { return this["bOverride_AutoExposureMeterMask"].Flag; } set { this["bOverride_AutoExposureMeterMask"].Flag = value; } }
        public bool bOverride_AutoExposureApplyPhysicalCameraExposure { get { return this["bOverride_AutoExposureApplyPhysicalCameraExposure"].Flag; } set { this["bOverride_AutoExposureApplyPhysicalCameraExposure"].Flag = value; } }
        public bool bOverride_HistogramLogMin { get { return this["bOverride_HistogramLogMin"].Flag; } set { this["bOverride_HistogramLogMin"].Flag = value; } }
        public bool bOverride_HistogramLogMax { get { return this["bOverride_HistogramLogMax"].Flag; } set { this["bOverride_HistogramLogMax"].Flag = value; } }
        public bool bOverride_LensFlareIntensity { get { return this["bOverride_LensFlareIntensity"].Flag; } set { this["bOverride_LensFlareIntensity"].Flag = value; } }
        public bool bOverride_LensFlareTint { get { return this["bOverride_LensFlareTint"].Flag; } set { this["bOverride_LensFlareTint"].Flag = value; } }
        public bool bOverride_LensFlareTints { get { return this["bOverride_LensFlareTints"].Flag; } set { this["bOverride_LensFlareTints"].Flag = value; } }
        public bool bOverride_LensFlareBokehSize { get { return this["bOverride_LensFlareBokehSize"].Flag; } set { this["bOverride_LensFlareBokehSize"].Flag = value; } }
        public bool bOverride_LensFlareBokehShape { get { return this["bOverride_LensFlareBokehShape"].Flag; } set { this["bOverride_LensFlareBokehShape"].Flag = value; } }
        public bool bOverride_LensFlareThreshold { get { return this["bOverride_LensFlareThreshold"].Flag; } set { this["bOverride_LensFlareThreshold"].Flag = value; } }
        public bool bOverride_VignetteIntensity { get { return this["bOverride_VignetteIntensity"].Flag; } set { this["bOverride_VignetteIntensity"].Flag = value; } }
        public bool bOverride_GrainIntensity { get { return this["bOverride_GrainIntensity"].Flag; } set { this["bOverride_GrainIntensity"].Flag = value; } }
        public bool bOverride_GrainJitter { get { return this["bOverride_GrainJitter"].Flag; } set { this["bOverride_GrainJitter"].Flag = value; } }
        public bool bOverride_AmbientOcclusionIntensity { get { return this["bOverride_AmbientOcclusionIntensity"].Flag; } set { this["bOverride_AmbientOcclusionIntensity"].Flag = value; } }
        public bool bOverride_AmbientOcclusionStaticFraction { get { return this["bOverride_AmbientOcclusionStaticFraction"].Flag; } set { this["bOverride_AmbientOcclusionStaticFraction"].Flag = value; } }
        public bool bOverride_AmbientOcclusionRadius { get { return this["bOverride_AmbientOcclusionRadius"].Flag; } set { this["bOverride_AmbientOcclusionRadius"].Flag = value; } }
        public bool bOverride_AmbientOcclusionFadeDistance { get { return this["bOverride_AmbientOcclusionFadeDistance"].Flag; } set { this["bOverride_AmbientOcclusionFadeDistance"].Flag = value; } }
        public bool bOverride_AmbientOcclusionFadeRadius { get { return this["bOverride_AmbientOcclusionFadeRadius"].Flag; } set { this["bOverride_AmbientOcclusionFadeRadius"].Flag = value; } }
        public bool bOverride_AmbientOcclusionDistance { get { return this["bOverride_AmbientOcclusionDistance"].Flag; } set { this["bOverride_AmbientOcclusionDistance"].Flag = value; } }
        public bool bOverride_AmbientOcclusionRadiusInWS { get { return this["bOverride_AmbientOcclusionRadiusInWS"].Flag; } set { this["bOverride_AmbientOcclusionRadiusInWS"].Flag = value; } }
        public bool bOverride_AmbientOcclusionPower { get { return this["bOverride_AmbientOcclusionPower"].Flag; } set { this["bOverride_AmbientOcclusionPower"].Flag = value; } }
        public bool bOverride_AmbientOcclusionBias { get { return this["bOverride_AmbientOcclusionBias"].Flag; } set { this["bOverride_AmbientOcclusionBias"].Flag = value; } }
        public bool bOverride_AmbientOcclusionQuality { get { return this["bOverride_AmbientOcclusionQuality"].Flag; } set { this["bOverride_AmbientOcclusionQuality"].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipBlend { get { return this["bOverride_AmbientOcclusionMipBlend"].Flag; } set { this["bOverride_AmbientOcclusionMipBlend"].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipScale { get { return this["bOverride_AmbientOcclusionMipScale"].Flag; } set { this["bOverride_AmbientOcclusionMipScale"].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipThreshold { get { return this["bOverride_AmbientOcclusionMipThreshold"].Flag; } set { this["bOverride_AmbientOcclusionMipThreshold"].Flag = value; } }
        public bool bOverride_AmbientOcclusionTemporalBlendWeight { get { return this["bOverride_AmbientOcclusionTemporalBlendWeight"].Flag; } set { this["bOverride_AmbientOcclusionTemporalBlendWeight"].Flag = value; } }
        public bool bOverride_RayTracingAO { get { return this["bOverride_RayTracingAO"].Flag; } set { this["bOverride_RayTracingAO"].Flag = value; } }
        public bool bOverride_RayTracingAOSamplesPerPixel { get { return this["bOverride_RayTracingAOSamplesPerPixel"].Flag; } set { this["bOverride_RayTracingAOSamplesPerPixel"].Flag = value; } }
        public bool bOverride_RayTracingAOIntensity { get { return this["bOverride_RayTracingAOIntensity"].Flag; } set { this["bOverride_RayTracingAOIntensity"].Flag = value; } }
        public bool bOverride_RayTracingAORadius { get { return this["bOverride_RayTracingAORadius"].Flag; } set { this["bOverride_RayTracingAORadius"].Flag = value; } }
        public bool bOverride_LPVIntensity { get { return this["bOverride_LPVIntensity"].Flag; } set { this["bOverride_LPVIntensity"].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionIntensity { get { return this["bOverride_LPVDirectionalOcclusionIntensity"].Flag; } set { this["bOverride_LPVDirectionalOcclusionIntensity"].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionRadius { get { return this["bOverride_LPVDirectionalOcclusionRadius"].Flag; } set { this["bOverride_LPVDirectionalOcclusionRadius"].Flag = value; } }
        public bool bOverride_LPVDiffuseOcclusionExponent { get { return this["bOverride_LPVDiffuseOcclusionExponent"].Flag; } set { this["bOverride_LPVDiffuseOcclusionExponent"].Flag = value; } }
        public bool bOverride_LPVSpecularOcclusionExponent { get { return this["bOverride_LPVSpecularOcclusionExponent"].Flag; } set { this["bOverride_LPVSpecularOcclusionExponent"].Flag = value; } }
        public bool bOverride_LPVDiffuseOcclusionIntensity { get { return this["bOverride_LPVDiffuseOcclusionIntensity"].Flag; } set { this["bOverride_LPVDiffuseOcclusionIntensity"].Flag = value; } }
        public bool bOverride_LPVSpecularOcclusionIntensity { get { return this["bOverride_LPVSpecularOcclusionIntensity"].Flag; } set { this["bOverride_LPVSpecularOcclusionIntensity"].Flag = value; } }
        public bool bOverride_LPVSize { get { return this["bOverride_LPVSize"].Flag; } set { this["bOverride_LPVSize"].Flag = value; } }
        public bool bOverride_LPVSecondaryOcclusionIntensity { get { return this["bOverride_LPVSecondaryOcclusionIntensity"].Flag; } set { this["bOverride_LPVSecondaryOcclusionIntensity"].Flag = value; } }
        public bool bOverride_LPVSecondaryBounceIntensity { get { return this["bOverride_LPVSecondaryBounceIntensity"].Flag; } set { this["bOverride_LPVSecondaryBounceIntensity"].Flag = value; } }
        public bool bOverride_LPVGeometryVolumeBias { get { return this["bOverride_LPVGeometryVolumeBias"].Flag; } set { this["bOverride_LPVGeometryVolumeBias"].Flag = value; } }
        public bool bOverride_LPVVplInjectionBias { get { return this["bOverride_LPVVplInjectionBias"].Flag; } set { this["bOverride_LPVVplInjectionBias"].Flag = value; } }
        public bool bOverride_LPVEmissiveInjectionIntensity { get { return this["bOverride_LPVEmissiveInjectionIntensity"].Flag; } set { this["bOverride_LPVEmissiveInjectionIntensity"].Flag = value; } }
        public bool bOverride_LPVFadeRange { get { return this["bOverride_LPVFadeRange"].Flag; } set { this["bOverride_LPVFadeRange"].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionFadeRange { get { return this["bOverride_LPVDirectionalOcclusionFadeRange"].Flag; } set { this["bOverride_LPVDirectionalOcclusionFadeRange"].Flag = value; } }
        public bool bOverride_IndirectLightingColor { get { return this["bOverride_IndirectLightingColor"].Flag; } set { this["bOverride_IndirectLightingColor"].Flag = value; } }
        public bool bOverride_IndirectLightingIntensity { get { return this["bOverride_IndirectLightingIntensity"].Flag; } set { this["bOverride_IndirectLightingIntensity"].Flag = value; } }
        public bool bOverride_ColorGradingIntensity { get { return this["bOverride_ColorGradingIntensity"].Flag; } set { this["bOverride_ColorGradingIntensity"].Flag = value; } }
        public bool bOverride_ColorGradingLUT { get { return this["bOverride_ColorGradingLUT"].Flag; } set { this["bOverride_ColorGradingLUT"].Flag = value; } }
        public bool bOverride_DepthOfFieldFocalDistance { get { return this["bOverride_DepthOfFieldFocalDistance"].Flag; } set { this["bOverride_DepthOfFieldFocalDistance"].Flag = value; } }
        public bool bOverride_DepthOfFieldFstop { get { return this["bOverride_DepthOfFieldFstop"].Flag; } set { this["bOverride_DepthOfFieldFstop"].Flag = value; } }
        public bool bOverride_DepthOfFieldMinFstop { get { return this["bOverride_DepthOfFieldMinFstop"].Flag; } set { this["bOverride_DepthOfFieldMinFstop"].Flag = value; } }
        public bool bOverride_DepthOfFieldBladeCount { get { return this["bOverride_DepthOfFieldBladeCount"].Flag; } set { this["bOverride_DepthOfFieldBladeCount"].Flag = value; } }
        public bool bOverride_DepthOfFieldSensorWidth { get { return this["bOverride_DepthOfFieldSensorWidth"].Flag; } set { this["bOverride_DepthOfFieldSensorWidth"].Flag = value; } }
        public bool bOverride_DepthOfFieldDepthBlurRadius { get { return this["bOverride_DepthOfFieldDepthBlurRadius"].Flag; } set { this["bOverride_DepthOfFieldDepthBlurRadius"].Flag = value; } }
        public bool bOverride_DepthOfFieldDepthBlurAmount { get { return this["bOverride_DepthOfFieldDepthBlurAmount"].Flag; } set { this["bOverride_DepthOfFieldDepthBlurAmount"].Flag = value; } }
        public bool bOverride_DepthOfFieldFocalRegion { get { return this["bOverride_DepthOfFieldFocalRegion"].Flag; } set { this["bOverride_DepthOfFieldFocalRegion"].Flag = value; } }
        public bool bOverride_DepthOfFieldNearTransitionRegion { get { return this["bOverride_DepthOfFieldNearTransitionRegion"].Flag; } set { this["bOverride_DepthOfFieldNearTransitionRegion"].Flag = value; } }
        public bool bOverride_DepthOfFieldFarTransitionRegion { get { return this["bOverride_DepthOfFieldFarTransitionRegion"].Flag; } set { this["bOverride_DepthOfFieldFarTransitionRegion"].Flag = value; } }
        public bool bOverride_DepthOfFieldScale { get { return this["bOverride_DepthOfFieldScale"].Flag; } set { this["bOverride_DepthOfFieldScale"].Flag = value; } }
        public bool bOverride_DepthOfFieldNearBlurSize { get { return this["bOverride_DepthOfFieldNearBlurSize"].Flag; } set { this["bOverride_DepthOfFieldNearBlurSize"].Flag = value; } }
        public bool bOverride_DepthOfFieldFarBlurSize { get { return this["bOverride_DepthOfFieldFarBlurSize"].Flag; } set { this["bOverride_DepthOfFieldFarBlurSize"].Flag = value; } }
        public bool bOverride_MobileHQGaussian { get { return this["bOverride_MobileHQGaussian"].Flag; } set { this["bOverride_MobileHQGaussian"].Flag = value; } }
        public bool bOverride_DepthOfFieldOcclusion { get { return this["bOverride_DepthOfFieldOcclusion"].Flag; } set { this["bOverride_DepthOfFieldOcclusion"].Flag = value; } }
        public bool bOverride_DepthOfFieldSkyFocusDistance { get { return this["bOverride_DepthOfFieldSkyFocusDistance"].Flag; } set { this["bOverride_DepthOfFieldSkyFocusDistance"].Flag = value; } }
        public bool bOverride_DepthOfFieldVignetteSize { get { return this["bOverride_DepthOfFieldVignetteSize"].Flag; } set { this["bOverride_DepthOfFieldVignetteSize"].Flag = value; } }
        public bool bOverride_MotionBlurAmount { get { return this["bOverride_MotionBlurAmount"].Flag; } set { this["bOverride_MotionBlurAmount"].Flag = value; } }
        public bool bOverride_MotionBlurMax { get { return this["bOverride_MotionBlurMax"].Flag; } set { this["bOverride_MotionBlurMax"].Flag = value; } }
        public bool bOverride_MotionBlurTargetFPS { get { return this["bOverride_MotionBlurTargetFPS"].Flag; } set { this["bOverride_MotionBlurTargetFPS"].Flag = value; } }
        public bool bOverride_MotionBlurPerObjectSize { get { return this["bOverride_MotionBlurPerObjectSize"].Flag; } set { this["bOverride_MotionBlurPerObjectSize"].Flag = value; } }
        public bool bOverride_ScreenPercentage { get { return this["bOverride_ScreenPercentage"].Flag; } set { this["bOverride_ScreenPercentage"].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionIntensity { get { return this["bOverride_ScreenSpaceReflectionIntensity"].Flag; } set { this["bOverride_ScreenSpaceReflectionIntensity"].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionQuality { get { return this["bOverride_ScreenSpaceReflectionQuality"].Flag; } set { this["bOverride_ScreenSpaceReflectionQuality"].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionMaxRoughness { get { return this["bOverride_ScreenSpaceReflectionMaxRoughness"].Flag; } set { this["bOverride_ScreenSpaceReflectionMaxRoughness"].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionRoughnessScale { get { return this["bOverride_ScreenSpaceReflectionRoughnessScale"].Flag; } set { this["bOverride_ScreenSpaceReflectionRoughnessScale"].Flag = value; } }
        public bool bOverride_ReflectionsType { get { return this["bOverride_ReflectionsType"].Flag; } set { this["bOverride_ReflectionsType"].Flag = value; } }
        public bool bOverride_RayTracingReflectionsMaxRoughness { get { return this["bOverride_RayTracingReflectionsMaxRoughness"].Flag; } set { this["bOverride_RayTracingReflectionsMaxRoughness"].Flag = value; } }
        public bool bOverride_RayTracingReflectionsMaxBounces { get { return this["bOverride_RayTracingReflectionsMaxBounces"].Flag; } set { this["bOverride_RayTracingReflectionsMaxBounces"].Flag = value; } }
        public bool bOverride_RayTracingReflectionsSamplesPerPixel { get { return this["bOverride_RayTracingReflectionsSamplesPerPixel"].Flag; } set { this["bOverride_RayTracingReflectionsSamplesPerPixel"].Flag = value; } }
        public bool bOverride_RayTracingReflectionsShadows { get { return this["bOverride_RayTracingReflectionsShadows"].Flag; } set { this["bOverride_RayTracingReflectionsShadows"].Flag = value; } }
        public bool bOverride_RayTracingReflectionsTranslucency { get { return this["bOverride_RayTracingReflectionsTranslucency"].Flag; } set { this["bOverride_RayTracingReflectionsTranslucency"].Flag = value; } }
        public bool bOverride_TranslucencyType { get { return this["bOverride_TranslucencyType"].Flag; } set { this["bOverride_TranslucencyType"].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyMaxRoughness { get { return this["bOverride_RayTracingTranslucencyMaxRoughness"].Flag; } set { this["bOverride_RayTracingTranslucencyMaxRoughness"].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyRefractionRays { get { return this["bOverride_RayTracingTranslucencyRefractionRays"].Flag; } set { this["bOverride_RayTracingTranslucencyRefractionRays"].Flag = value; } }
        public bool bOverride_RayTracingTranslucencySamplesPerPixel { get { return this["bOverride_RayTracingTranslucencySamplesPerPixel"].Flag; } set { this["bOverride_RayTracingTranslucencySamplesPerPixel"].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyShadows { get { return this["bOverride_RayTracingTranslucencyShadows"].Flag; } set { this["bOverride_RayTracingTranslucencyShadows"].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyRefraction { get { return this["bOverride_RayTracingTranslucencyRefraction"].Flag; } set { this["bOverride_RayTracingTranslucencyRefraction"].Flag = value; } }
        public bool bOverride_RayTracingGI { get { return this["bOverride_RayTracingGI"].Flag; } set { this["bOverride_RayTracingGI"].Flag = value; } }
        public bool bOverride_RayTracingGIMaxBounces { get { return this["bOverride_RayTracingGIMaxBounces"].Flag; } set { this["bOverride_RayTracingGIMaxBounces"].Flag = value; } }
        public bool bOverride_RayTracingGISamplesPerPixel { get { return this["bOverride_RayTracingGISamplesPerPixel"].Flag; } set { this["bOverride_RayTracingGISamplesPerPixel"].Flag = value; } }
        public bool bOverride_PathTracingMaxBounces { get { return this["bOverride_PathTracingMaxBounces"].Flag; } set { this["bOverride_PathTracingMaxBounces"].Flag = value; } }
        public bool bOverride_PathTracingSamplesPerPixel { get { return this["bOverride_PathTracingSamplesPerPixel"].Flag; } set { this["bOverride_PathTracingSamplesPerPixel"].Flag = value; } }
        public bool bOverride_PathTracingFilterWidth { get { return this["bOverride_PathTracingFilterWidth"].Flag; } set { this["bOverride_PathTracingFilterWidth"].Flag = value; } }
        public bool bOverride_PathTracingEnableEmissive { get { return this["bOverride_PathTracingEnableEmissive"].Flag; } set { this["bOverride_PathTracingEnableEmissive"].Flag = value; } }
        public bool bOverride_PathTracingMaxPathExposure { get { return this["bOverride_PathTracingMaxPathExposure"].Flag; } set { this["bOverride_PathTracingMaxPathExposure"].Flag = value; } }
        public bool bOverride_PathTracingEnableDenoiser { get { return this["bOverride_PathTracingEnableDenoiser"].Flag; } set { this["bOverride_PathTracingEnableDenoiser"].Flag = value; } }
        public bool bMobileHQGaussian { get { return this["bMobileHQGaussian"].Flag; } set { this["bMobileHQGaussian"].Flag = value; } }
        public byte BloomMethod { get { return this["BloomMethod"].GetValue<byte>(); } set { this["BloomMethod"].SetValue<byte>(value); } }
        public byte AutoExposureMethod { get { return this["AutoExposureMethod"].GetValue<byte>(); } set { this["AutoExposureMethod"].SetValue<byte>(value); } }
        public byte TemperatureType { get { return this["TemperatureType"].GetValue<byte>(); } set { this["TemperatureType"].SetValue<byte>(value); } }
        public float WhiteTemp { get { return this["WhiteTemp"].GetValue<float>(); } set { this["WhiteTemp"].SetValue<float>(value); } }
        public float WhiteTint { get { return this["WhiteTint"].GetValue<float>(); } set { this["WhiteTint"].SetValue<float>(value); } }
        public Vector4 ColorSaturation { get { return this[nameof(ColorSaturation)].As<Vector4>(); } set { this["ColorSaturation"] = value; } }
        public Vector4 ColorContrast { get { return this[nameof(ColorContrast)].As<Vector4>(); } set { this["ColorContrast"] = value; } }
        public Vector4 ColorGamma { get { return this[nameof(ColorGamma)].As<Vector4>(); } set { this["ColorGamma"] = value; } }
        public Vector4 ColorGain { get { return this[nameof(ColorGain)].As<Vector4>(); } set { this["ColorGain"] = value; } }
        public Vector4 ColorOffset { get { return this[nameof(ColorOffset)].As<Vector4>(); } set { this["ColorOffset"] = value; } }
        public Vector4 ColorSaturationShadows { get { return this[nameof(ColorSaturationShadows)].As<Vector4>(); } set { this["ColorSaturationShadows"] = value; } }
        public Vector4 ColorContrastShadows { get { return this[nameof(ColorContrastShadows)].As<Vector4>(); } set { this["ColorContrastShadows"] = value; } }
        public Vector4 ColorGammaShadows { get { return this[nameof(ColorGammaShadows)].As<Vector4>(); } set { this["ColorGammaShadows"] = value; } }
        public Vector4 ColorGainShadows { get { return this[nameof(ColorGainShadows)].As<Vector4>(); } set { this["ColorGainShadows"] = value; } }
        public Vector4 ColorOffsetShadows { get { return this[nameof(ColorOffsetShadows)].As<Vector4>(); } set { this["ColorOffsetShadows"] = value; } }
        public Vector4 ColorSaturationMidtones { get { return this[nameof(ColorSaturationMidtones)].As<Vector4>(); } set { this["ColorSaturationMidtones"] = value; } }
        public Vector4 ColorContrastMidtones { get { return this[nameof(ColorContrastMidtones)].As<Vector4>(); } set { this["ColorContrastMidtones"] = value; } }
        public Vector4 ColorGammaMidtones { get { return this[nameof(ColorGammaMidtones)].As<Vector4>(); } set { this["ColorGammaMidtones"] = value; } }
        public Vector4 ColorGainMidtones { get { return this[nameof(ColorGainMidtones)].As<Vector4>(); } set { this["ColorGainMidtones"] = value; } }
        public Vector4 ColorOffsetMidtones { get { return this[nameof(ColorOffsetMidtones)].As<Vector4>(); } set { this["ColorOffsetMidtones"] = value; } }
        public Vector4 ColorSaturationHighlights { get { return this[nameof(ColorSaturationHighlights)].As<Vector4>(); } set { this["ColorSaturationHighlights"] = value; } }
        public Vector4 ColorContrastHighlights { get { return this[nameof(ColorContrastHighlights)].As<Vector4>(); } set { this["ColorContrastHighlights"] = value; } }
        public Vector4 ColorGammaHighlights { get { return this[nameof(ColorGammaHighlights)].As<Vector4>(); } set { this["ColorGammaHighlights"] = value; } }
        public Vector4 ColorGainHighlights { get { return this[nameof(ColorGainHighlights)].As<Vector4>(); } set { this["ColorGainHighlights"] = value; } }
        public Vector4 ColorOffsetHighlights { get { return this[nameof(ColorOffsetHighlights)].As<Vector4>(); } set { this["ColorOffsetHighlights"] = value; } }
        public float ColorCorrectionHighlightsMin { get { return this["ColorCorrectionHighlightsMin"].GetValue<float>(); } set { this["ColorCorrectionHighlightsMin"].SetValue<float>(value); } }
        public float ColorCorrectionShadowsMax { get { return this["ColorCorrectionShadowsMax"].GetValue<float>(); } set { this["ColorCorrectionShadowsMax"].SetValue<float>(value); } }
        public float BlueCorrection { get { return this["BlueCorrection"].GetValue<float>(); } set { this["BlueCorrection"].SetValue<float>(value); } }
        public float ExpandGamut { get { return this["ExpandGamut"].GetValue<float>(); } set { this["ExpandGamut"].SetValue<float>(value); } }
        public float ToneCurveAmount { get { return this["ToneCurveAmount"].GetValue<float>(); } set { this["ToneCurveAmount"].SetValue<float>(value); } }
        public float FilmSlope { get { return this["FilmSlope"].GetValue<float>(); } set { this["FilmSlope"].SetValue<float>(value); } }
        public float FilmToe { get { return this["FilmToe"].GetValue<float>(); } set { this["FilmToe"].SetValue<float>(value); } }
        public float FilmShoulder { get { return this["FilmShoulder"].GetValue<float>(); } set { this["FilmShoulder"].SetValue<float>(value); } }
        public float FilmBlackClip { get { return this["FilmBlackClip"].GetValue<float>(); } set { this["FilmBlackClip"].SetValue<float>(value); } }
        public float FilmWhiteClip { get { return this["FilmWhiteClip"].GetValue<float>(); } set { this["FilmWhiteClip"].SetValue<float>(value); } }
        public LinearColor FilmWhitePoint { get { return this[nameof(FilmWhitePoint)].As<LinearColor>(); } set { this["FilmWhitePoint"] = value; } }
        public LinearColor FilmShadowTint { get { return this[nameof(FilmShadowTint)].As<LinearColor>(); } set { this["FilmShadowTint"] = value; } }
        public float FilmShadowTintBlend { get { return this["FilmShadowTintBlend"].GetValue<float>(); } set { this["FilmShadowTintBlend"].SetValue<float>(value); } }
        public float FilmShadowTintAmount { get { return this["FilmShadowTintAmount"].GetValue<float>(); } set { this["FilmShadowTintAmount"].SetValue<float>(value); } }
        public float FilmSaturation { get { return this["FilmSaturation"].GetValue<float>(); } set { this["FilmSaturation"].SetValue<float>(value); } }
        public LinearColor FilmChannelMixerRed { get { return this[nameof(FilmChannelMixerRed)].As<LinearColor>(); } set { this["FilmChannelMixerRed"] = value; } }
        public LinearColor FilmChannelMixerGreen { get { return this[nameof(FilmChannelMixerGreen)].As<LinearColor>(); } set { this["FilmChannelMixerGreen"] = value; } }
        public LinearColor FilmChannelMixerBlue { get { return this[nameof(FilmChannelMixerBlue)].As<LinearColor>(); } set { this["FilmChannelMixerBlue"] = value; } }
        public float FilmContrast { get { return this["FilmContrast"].GetValue<float>(); } set { this["FilmContrast"].SetValue<float>(value); } }
        public float FilmToeAmount { get { return this["FilmToeAmount"].GetValue<float>(); } set { this["FilmToeAmount"].SetValue<float>(value); } }
        public float FilmHealAmount { get { return this["FilmHealAmount"].GetValue<float>(); } set { this["FilmHealAmount"].SetValue<float>(value); } }
        public float FilmDynamicRange { get { return this["FilmDynamicRange"].GetValue<float>(); } set { this["FilmDynamicRange"].SetValue<float>(value); } }
        public LinearColor SceneColorTint { get { return this[nameof(SceneColorTint)].As<LinearColor>(); } set { this["SceneColorTint"] = value; } }
        public float SceneFringeIntensity { get { return this["SceneFringeIntensity"].GetValue<float>(); } set { this["SceneFringeIntensity"].SetValue<float>(value); } }
        public float ChromaticAberrationStartOffset { get { return this["ChromaticAberrationStartOffset"].GetValue<float>(); } set { this["ChromaticAberrationStartOffset"].SetValue<float>(value); } }
        public float BloomIntensity { get { return this["BloomIntensity"].GetValue<float>(); } set { this["BloomIntensity"].SetValue<float>(value); } }
        public float BloomThreshold { get { return this["BloomThreshold"].GetValue<float>(); } set { this["BloomThreshold"].SetValue<float>(value); } }
        public float BloomSizeScale { get { return this["BloomSizeScale"].GetValue<float>(); } set { this["BloomSizeScale"].SetValue<float>(value); } }
        public float Bloom1Size { get { return this["Bloom1Size"].GetValue<float>(); } set { this["Bloom1Size"].SetValue<float>(value); } }
        public float Bloom2Size { get { return this["Bloom2Size"].GetValue<float>(); } set { this["Bloom2Size"].SetValue<float>(value); } }
        public float Bloom3Size { get { return this["Bloom3Size"].GetValue<float>(); } set { this["Bloom3Size"].SetValue<float>(value); } }
        public float Bloom4Size { get { return this["Bloom4Size"].GetValue<float>(); } set { this["Bloom4Size"].SetValue<float>(value); } }
        public float Bloom5Size { get { return this["Bloom5Size"].GetValue<float>(); } set { this["Bloom5Size"].SetValue<float>(value); } }
        public float Bloom6Size { get { return this["Bloom6Size"].GetValue<float>(); } set { this["Bloom6Size"].SetValue<float>(value); } }
        public LinearColor Bloom1Tint { get { return this[nameof(Bloom1Tint)].As<LinearColor>(); } set { this["Bloom1Tint"] = value; } }
        public LinearColor Bloom2Tint { get { return this[nameof(Bloom2Tint)].As<LinearColor>(); } set { this["Bloom2Tint"] = value; } }
        public LinearColor Bloom3Tint { get { return this[nameof(Bloom3Tint)].As<LinearColor>(); } set { this["Bloom3Tint"] = value; } }
        public LinearColor Bloom4Tint { get { return this[nameof(Bloom4Tint)].As<LinearColor>(); } set { this["Bloom4Tint"] = value; } }
        public LinearColor Bloom5Tint { get { return this[nameof(Bloom5Tint)].As<LinearColor>(); } set { this["Bloom5Tint"] = value; } }
        public LinearColor Bloom6Tint { get { return this[nameof(Bloom6Tint)].As<LinearColor>(); } set { this["Bloom6Tint"] = value; } }
        public float BloomConvolutionSize { get { return this["BloomConvolutionSize"].GetValue<float>(); } set { this["BloomConvolutionSize"].SetValue<float>(value); } }
        public Texture2D BloomConvolutionTexture { get { return this[nameof(BloomConvolutionTexture)].As<Texture2D>(); } set { this["BloomConvolutionTexture"] = value; } }
        public Vector2D BloomConvolutionCenterUV { get { return this[nameof(BloomConvolutionCenterUV)].As<Vector2D>(); } set { this["BloomConvolutionCenterUV"] = value; } }
        public float BloomConvolutionPreFilterMin { get { return this["BloomConvolutionPreFilterMin"].GetValue<float>(); } set { this["BloomConvolutionPreFilterMin"].SetValue<float>(value); } }
        public float BloomConvolutionPreFilterMax { get { return this["BloomConvolutionPreFilterMax"].GetValue<float>(); } set { this["BloomConvolutionPreFilterMax"].SetValue<float>(value); } }
        public float BloomConvolutionPreFilterMult { get { return this["BloomConvolutionPreFilterMult"].GetValue<float>(); } set { this["BloomConvolutionPreFilterMult"].SetValue<float>(value); } }
        public float BloomConvolutionBufferScale { get { return this["BloomConvolutionBufferScale"].GetValue<float>(); } set { this["BloomConvolutionBufferScale"].SetValue<float>(value); } }
        public Texture BloomDirtMask { get { return this[nameof(BloomDirtMask)].As<Texture>(); } set { this["BloomDirtMask"] = value; } }
        public float BloomDirtMaskIntensity { get { return this["BloomDirtMaskIntensity"].GetValue<float>(); } set { this["BloomDirtMaskIntensity"].SetValue<float>(value); } }
        public LinearColor BloomDirtMaskTint { get { return this[nameof(BloomDirtMaskTint)].As<LinearColor>(); } set { this["BloomDirtMaskTint"] = value; } }
        public LinearColor AmbientCubemapTint { get { return this[nameof(AmbientCubemapTint)].As<LinearColor>(); } set { this["AmbientCubemapTint"] = value; } }
        public float AmbientCubemapIntensity { get { return this["AmbientCubemapIntensity"].GetValue<float>(); } set { this["AmbientCubemapIntensity"].SetValue<float>(value); } }
        public TextureCube AmbientCubemap { get { return this[nameof(AmbientCubemap)].As<TextureCube>(); } set { this["AmbientCubemap"] = value; } }
        public float CameraShutterSpeed { get { return this["CameraShutterSpeed"].GetValue<float>(); } set { this["CameraShutterSpeed"].SetValue<float>(value); } }
        public float CameraISO { get { return this["CameraISO"].GetValue<float>(); } set { this["CameraISO"].SetValue<float>(value); } }
        public float DepthOfFieldFstop { get { return this["DepthOfFieldFstop"].GetValue<float>(); } set { this["DepthOfFieldFstop"].SetValue<float>(value); } }
        public float DepthOfFieldMinFstop { get { return this["DepthOfFieldMinFstop"].GetValue<float>(); } set { this["DepthOfFieldMinFstop"].SetValue<float>(value); } }
        public int DepthOfFieldBladeCount { get { return this["DepthOfFieldBladeCount"].GetValue<int>(); } set { this["DepthOfFieldBladeCount"].SetValue<int>(value); } }
        public float AutoExposureBias { get { return this["AutoExposureBias"].GetValue<float>(); } set { this["AutoExposureBias"].SetValue<float>(value); } }
        public float AutoExposureBiasBackup { get { return this["AutoExposureBiasBackup"].GetValue<float>(); } set { this["AutoExposureBiasBackup"].SetValue<float>(value); } }
        public bool bOverride_AutoExposureBiasBackup { get { return this["bOverride_AutoExposureBiasBackup"].Flag; } set { this["bOverride_AutoExposureBiasBackup"].Flag = value; } }
        public bool AutoExposureApplyPhysicalCameraExposure { get { return this["AutoExposureApplyPhysicalCameraExposure"].Flag; } set { this["AutoExposureApplyPhysicalCameraExposure"].Flag = value; } }
        public CurveFloat AutoExposureBiasCurve { get { return this[nameof(AutoExposureBiasCurve)].As<CurveFloat>(); } set { this["AutoExposureBiasCurve"] = value; } }
        public Texture AutoExposureMeterMask { get { return this[nameof(AutoExposureMeterMask)].As<Texture>(); } set { this["AutoExposureMeterMask"] = value; } }
        public float AutoExposureLowPercent { get { return this["AutoExposureLowPercent"].GetValue<float>(); } set { this["AutoExposureLowPercent"].SetValue<float>(value); } }
        public float AutoExposureHighPercent { get { return this["AutoExposureHighPercent"].GetValue<float>(); } set { this["AutoExposureHighPercent"].SetValue<float>(value); } }
        public float AutoExposureMinBrightness { get { return this["AutoExposureMinBrightness"].GetValue<float>(); } set { this["AutoExposureMinBrightness"].SetValue<float>(value); } }
        public float AutoExposureMaxBrightness { get { return this["AutoExposureMaxBrightness"].GetValue<float>(); } set { this["AutoExposureMaxBrightness"].SetValue<float>(value); } }
        public float AutoExposureSpeedUp { get { return this["AutoExposureSpeedUp"].GetValue<float>(); } set { this["AutoExposureSpeedUp"].SetValue<float>(value); } }
        public float AutoExposureSpeedDown { get { return this["AutoExposureSpeedDown"].GetValue<float>(); } set { this["AutoExposureSpeedDown"].SetValue<float>(value); } }
        public float HistogramLogMin { get { return this["HistogramLogMin"].GetValue<float>(); } set { this["HistogramLogMin"].SetValue<float>(value); } }
        public float HistogramLogMax { get { return this["HistogramLogMax"].GetValue<float>(); } set { this["HistogramLogMax"].SetValue<float>(value); } }
        public float AutoExposureCalibrationConstant { get { return this["AutoExposureCalibrationConstant"].GetValue<float>(); } set { this["AutoExposureCalibrationConstant"].SetValue<float>(value); } }
        public float LensFlareIntensity { get { return this["LensFlareIntensity"].GetValue<float>(); } set { this["LensFlareIntensity"].SetValue<float>(value); } }
        public LinearColor LensFlareTint { get { return this[nameof(LensFlareTint)].As<LinearColor>(); } set { this["LensFlareTint"] = value; } }
        public float LensFlareBokehSize { get { return this["LensFlareBokehSize"].GetValue<float>(); } set { this["LensFlareBokehSize"].SetValue<float>(value); } }
        public float LensFlareThreshold { get { return this["LensFlareThreshold"].GetValue<float>(); } set { this["LensFlareThreshold"].SetValue<float>(value); } }
        public Texture LensFlareBokehShape { get { return this[nameof(LensFlareBokehShape)].As<Texture>(); } set { this["LensFlareBokehShape"] = value; } }
        public LinearColor LensFlareTints { get { return this[nameof(LensFlareTints)].As<LinearColor>(); } set { this["LensFlareTints"] = value; } }
        public float VignetteIntensity { get { return this["VignetteIntensity"].GetValue<float>(); } set { this["VignetteIntensity"].SetValue<float>(value); } }
        public float GrainJitter { get { return this["GrainJitter"].GetValue<float>(); } set { this["GrainJitter"].SetValue<float>(value); } }
        public float GrainIntensity { get { return this["GrainIntensity"].GetValue<float>(); } set { this["GrainIntensity"].SetValue<float>(value); } }
        public float AmbientOcclusionIntensity { get { return this["AmbientOcclusionIntensity"].GetValue<float>(); } set { this["AmbientOcclusionIntensity"].SetValue<float>(value); } }
        public float AmbientOcclusionStaticFraction { get { return this["AmbientOcclusionStaticFraction"].GetValue<float>(); } set { this["AmbientOcclusionStaticFraction"].SetValue<float>(value); } }
        public float AmbientOcclusionRadius { get { return this["AmbientOcclusionRadius"].GetValue<float>(); } set { this["AmbientOcclusionRadius"].SetValue<float>(value); } }
        public bool AmbientOcclusionRadiusInWS { get { return this["AmbientOcclusionRadiusInWS"].Flag; } set { this["AmbientOcclusionRadiusInWS"].Flag = value; } }
        public float AmbientOcclusionFadeDistance { get { return this["AmbientOcclusionFadeDistance"].GetValue<float>(); } set { this["AmbientOcclusionFadeDistance"].SetValue<float>(value); } }
        public float AmbientOcclusionFadeRadius { get { return this["AmbientOcclusionFadeRadius"].GetValue<float>(); } set { this["AmbientOcclusionFadeRadius"].SetValue<float>(value); } }
        public float AmbientOcclusionDistance { get { return this["AmbientOcclusionDistance"].GetValue<float>(); } set { this["AmbientOcclusionDistance"].SetValue<float>(value); } }
        public float AmbientOcclusionPower { get { return this["AmbientOcclusionPower"].GetValue<float>(); } set { this["AmbientOcclusionPower"].SetValue<float>(value); } }
        public float AmbientOcclusionBias { get { return this["AmbientOcclusionBias"].GetValue<float>(); } set { this["AmbientOcclusionBias"].SetValue<float>(value); } }
        public float AmbientOcclusionQuality { get { return this["AmbientOcclusionQuality"].GetValue<float>(); } set { this["AmbientOcclusionQuality"].SetValue<float>(value); } }
        public float AmbientOcclusionMipBlend { get { return this["AmbientOcclusionMipBlend"].GetValue<float>(); } set { this["AmbientOcclusionMipBlend"].SetValue<float>(value); } }
        public float AmbientOcclusionMipScale { get { return this["AmbientOcclusionMipScale"].GetValue<float>(); } set { this["AmbientOcclusionMipScale"].SetValue<float>(value); } }
        public float AmbientOcclusionMipThreshold { get { return this["AmbientOcclusionMipThreshold"].GetValue<float>(); } set { this["AmbientOcclusionMipThreshold"].SetValue<float>(value); } }
        public float AmbientOcclusionTemporalBlendWeight { get { return this["AmbientOcclusionTemporalBlendWeight"].GetValue<float>(); } set { this["AmbientOcclusionTemporalBlendWeight"].SetValue<float>(value); } }
        public bool RayTracingAO { get { return this["RayTracingAO"].Flag; } set { this["RayTracingAO"].Flag = value; } }
        public int RayTracingAOSamplesPerPixel { get { return this["RayTracingAOSamplesPerPixel"].GetValue<int>(); } set { this["RayTracingAOSamplesPerPixel"].SetValue<int>(value); } }
        public float RayTracingAOIntensity { get { return this["RayTracingAOIntensity"].GetValue<float>(); } set { this["RayTracingAOIntensity"].SetValue<float>(value); } }
        public float RayTracingAORadius { get { return this["RayTracingAORadius"].GetValue<float>(); } set { this["RayTracingAORadius"].SetValue<float>(value); } }
        public LinearColor IndirectLightingColor { get { return this[nameof(IndirectLightingColor)].As<LinearColor>(); } set { this["IndirectLightingColor"] = value; } }
        public float IndirectLightingIntensity { get { return this["IndirectLightingIntensity"].GetValue<float>(); } set { this["IndirectLightingIntensity"].SetValue<float>(value); } }
        public ERayTracingGlobalIlluminationType RayTracingGIType { get { return (ERayTracingGlobalIlluminationType)this["RayTracingGIType"].GetValue<int>(); } set { this["RayTracingGIType"].SetValue<int>((int)value); } }
        public int RayTracingGIMaxBounces { get { return this["RayTracingGIMaxBounces"].GetValue<int>(); } set { this["RayTracingGIMaxBounces"].SetValue<int>(value); } }
        public int RayTracingGISamplesPerPixel { get { return this["RayTracingGISamplesPerPixel"].GetValue<int>(); } set { this["RayTracingGISamplesPerPixel"].SetValue<int>(value); } }
        public float ColorGradingIntensity { get { return this["ColorGradingIntensity"].GetValue<float>(); } set { this["ColorGradingIntensity"].SetValue<float>(value); } }
        public Texture ColorGradingLUT { get { return this[nameof(ColorGradingLUT)].As<Texture>(); } set { this["ColorGradingLUT"] = value; } }
        public float DepthOfFieldSensorWidth { get { return this["DepthOfFieldSensorWidth"].GetValue<float>(); } set { this["DepthOfFieldSensorWidth"].SetValue<float>(value); } }
        public float DepthOfFieldFocalDistance { get { return this["DepthOfFieldFocalDistance"].GetValue<float>(); } set { this["DepthOfFieldFocalDistance"].SetValue<float>(value); } }
        public float DepthOfFieldDepthBlurAmount { get { return this["DepthOfFieldDepthBlurAmount"].GetValue<float>(); } set { this["DepthOfFieldDepthBlurAmount"].SetValue<float>(value); } }
        public float DepthOfFieldDepthBlurRadius { get { return this["DepthOfFieldDepthBlurRadius"].GetValue<float>(); } set { this["DepthOfFieldDepthBlurRadius"].SetValue<float>(value); } }
        public float DepthOfFieldFocalRegion { get { return this["DepthOfFieldFocalRegion"].GetValue<float>(); } set { this["DepthOfFieldFocalRegion"].SetValue<float>(value); } }
        public float DepthOfFieldNearTransitionRegion { get { return this["DepthOfFieldNearTransitionRegion"].GetValue<float>(); } set { this["DepthOfFieldNearTransitionRegion"].SetValue<float>(value); } }
        public float DepthOfFieldFarTransitionRegion { get { return this["DepthOfFieldFarTransitionRegion"].GetValue<float>(); } set { this["DepthOfFieldFarTransitionRegion"].SetValue<float>(value); } }
        public float DepthOfFieldScale { get { return this["DepthOfFieldScale"].GetValue<float>(); } set { this["DepthOfFieldScale"].SetValue<float>(value); } }
        public float DepthOfFieldNearBlurSize { get { return this["DepthOfFieldNearBlurSize"].GetValue<float>(); } set { this["DepthOfFieldNearBlurSize"].SetValue<float>(value); } }
        public float DepthOfFieldFarBlurSize { get { return this["DepthOfFieldFarBlurSize"].GetValue<float>(); } set { this["DepthOfFieldFarBlurSize"].SetValue<float>(value); } }
        public float DepthOfFieldOcclusion { get { return this["DepthOfFieldOcclusion"].GetValue<float>(); } set { this["DepthOfFieldOcclusion"].SetValue<float>(value); } }
        public float DepthOfFieldSkyFocusDistance { get { return this["DepthOfFieldSkyFocusDistance"].GetValue<float>(); } set { this["DepthOfFieldSkyFocusDistance"].SetValue<float>(value); } }
        public float DepthOfFieldVignetteSize { get { return this["DepthOfFieldVignetteSize"].GetValue<float>(); } set { this["DepthOfFieldVignetteSize"].SetValue<float>(value); } }
        public float MotionBlurAmount { get { return this["MotionBlurAmount"].GetValue<float>(); } set { this["MotionBlurAmount"].SetValue<float>(value); } }
        public float MotionBlurMax { get { return this["MotionBlurMax"].GetValue<float>(); } set { this["MotionBlurMax"].SetValue<float>(value); } }
        public int MotionBlurTargetFPS { get { return this["MotionBlurTargetFPS"].GetValue<int>(); } set { this["MotionBlurTargetFPS"].SetValue<int>(value); } }
        public float MotionBlurPerObjectSize { get { return this["MotionBlurPerObjectSize"].GetValue<float>(); } set { this["MotionBlurPerObjectSize"].SetValue<float>(value); } }
        public float LPVIntensity { get { return this["LPVIntensity"].GetValue<float>(); } set { this["LPVIntensity"].SetValue<float>(value); } }
        public float LPVVplInjectionBias { get { return this["LPVVplInjectionBias"].GetValue<float>(); } set { this["LPVVplInjectionBias"].SetValue<float>(value); } }
        public float LPVSize { get { return this["LPVSize"].GetValue<float>(); } set { this["LPVSize"].SetValue<float>(value); } }
        public float LPVSecondaryOcclusionIntensity { get { return this["LPVSecondaryOcclusionIntensity"].GetValue<float>(); } set { this["LPVSecondaryOcclusionIntensity"].SetValue<float>(value); } }
        public float LPVSecondaryBounceIntensity { get { return this["LPVSecondaryBounceIntensity"].GetValue<float>(); } set { this["LPVSecondaryBounceIntensity"].SetValue<float>(value); } }
        public float LPVGeometryVolumeBias { get { return this["LPVGeometryVolumeBias"].GetValue<float>(); } set { this["LPVGeometryVolumeBias"].SetValue<float>(value); } }
        public float LPVEmissiveInjectionIntensity { get { return this["LPVEmissiveInjectionIntensity"].GetValue<float>(); } set { this["LPVEmissiveInjectionIntensity"].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionIntensity { get { return this["LPVDirectionalOcclusionIntensity"].GetValue<float>(); } set { this["LPVDirectionalOcclusionIntensity"].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionRadius { get { return this["LPVDirectionalOcclusionRadius"].GetValue<float>(); } set { this["LPVDirectionalOcclusionRadius"].SetValue<float>(value); } }
        public float LPVDiffuseOcclusionExponent { get { return this["LPVDiffuseOcclusionExponent"].GetValue<float>(); } set { this["LPVDiffuseOcclusionExponent"].SetValue<float>(value); } }
        public float LPVSpecularOcclusionExponent { get { return this["LPVSpecularOcclusionExponent"].GetValue<float>(); } set { this["LPVSpecularOcclusionExponent"].SetValue<float>(value); } }
        public float LPVDiffuseOcclusionIntensity { get { return this["LPVDiffuseOcclusionIntensity"].GetValue<float>(); } set { this["LPVDiffuseOcclusionIntensity"].SetValue<float>(value); } }
        public float LPVSpecularOcclusionIntensity { get { return this["LPVSpecularOcclusionIntensity"].GetValue<float>(); } set { this["LPVSpecularOcclusionIntensity"].SetValue<float>(value); } }
        public EReflectionsType ReflectionsType { get { return (EReflectionsType)this["ReflectionsType"].GetValue<int>(); } set { this["ReflectionsType"].SetValue<int>((int)value); } }
        public float ScreenSpaceReflectionIntensity { get { return this["ScreenSpaceReflectionIntensity"].GetValue<float>(); } set { this["ScreenSpaceReflectionIntensity"].SetValue<float>(value); } }
        public float ScreenSpaceReflectionQuality { get { return this["ScreenSpaceReflectionQuality"].GetValue<float>(); } set { this["ScreenSpaceReflectionQuality"].SetValue<float>(value); } }
        public float ScreenSpaceReflectionMaxRoughness { get { return this["ScreenSpaceReflectionMaxRoughness"].GetValue<float>(); } set { this["ScreenSpaceReflectionMaxRoughness"].SetValue<float>(value); } }
        public float RayTracingReflectionsMaxRoughness { get { return this["RayTracingReflectionsMaxRoughness"].GetValue<float>(); } set { this["RayTracingReflectionsMaxRoughness"].SetValue<float>(value); } }
        public int RayTracingReflectionsMaxBounces { get { return this["RayTracingReflectionsMaxBounces"].GetValue<int>(); } set { this["RayTracingReflectionsMaxBounces"].SetValue<int>(value); } }
        public int RayTracingReflectionsSamplesPerPixel { get { return this["RayTracingReflectionsSamplesPerPixel"].GetValue<int>(); } set { this["RayTracingReflectionsSamplesPerPixel"].SetValue<int>(value); } }
        public EReflectedAndRefractedRayTracedShadows RayTracingReflectionsShadows { get { return (EReflectedAndRefractedRayTracedShadows)this["RayTracingReflectionsShadows"].GetValue<int>(); } set { this["RayTracingReflectionsShadows"].SetValue<int>((int)value); } }
        public bool RayTracingReflectionsTranslucency { get { return this["RayTracingReflectionsTranslucency"].Flag; } set { this["RayTracingReflectionsTranslucency"].Flag = value; } }
        public ETranslucencyType TranslucencyType { get { return (ETranslucencyType)this["TranslucencyType"].GetValue<int>(); } set { this["TranslucencyType"].SetValue<int>((int)value); } }
        public float RayTracingTranslucencyMaxRoughness { get { return this["RayTracingTranslucencyMaxRoughness"].GetValue<float>(); } set { this["RayTracingTranslucencyMaxRoughness"].SetValue<float>(value); } }
        public int RayTracingTranslucencyRefractionRays { get { return this["RayTracingTranslucencyRefractionRays"].GetValue<int>(); } set { this["RayTracingTranslucencyRefractionRays"].SetValue<int>(value); } }
        public int RayTracingTranslucencySamplesPerPixel { get { return this["RayTracingTranslucencySamplesPerPixel"].GetValue<int>(); } set { this["RayTracingTranslucencySamplesPerPixel"].SetValue<int>(value); } }
        public EReflectedAndRefractedRayTracedShadows RayTracingTranslucencyShadows { get { return (EReflectedAndRefractedRayTracedShadows)this["RayTracingTranslucencyShadows"].GetValue<int>(); } set { this["RayTracingTranslucencyShadows"].SetValue<int>((int)value); } }
        public bool RayTracingTranslucencyRefraction { get { return this["RayTracingTranslucencyRefraction"].Flag; } set { this["RayTracingTranslucencyRefraction"].Flag = value; } }
        public int PathTracingMaxBounces { get { return this["PathTracingMaxBounces"].GetValue<int>(); } set { this["PathTracingMaxBounces"].SetValue<int>(value); } }
        public int PathTracingSamplesPerPixel { get { return this["PathTracingSamplesPerPixel"].GetValue<int>(); } set { this["PathTracingSamplesPerPixel"].SetValue<int>(value); } }
        public float PathTracingFilterWidth { get { return this["PathTracingFilterWidth"].GetValue<float>(); } set { this["PathTracingFilterWidth"].SetValue<float>(value); } }
        public bool PathTracingEnableEmissive { get { return this["PathTracingEnableEmissive"].Flag; } set { this["PathTracingEnableEmissive"].Flag = value; } }
        public float PathTracingMaxPathExposure { get { return this["PathTracingMaxPathExposure"].GetValue<float>(); } set { this["PathTracingMaxPathExposure"].SetValue<float>(value); } }
        public bool PathTracingEnableDenoiser { get { return this["PathTracingEnableDenoiser"].Flag; } set { this["PathTracingEnableDenoiser"].Flag = value; } }
        public float LPVFadeRange { get { return this["LPVFadeRange"].GetValue<float>(); } set { this["LPVFadeRange"].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionFadeRange { get { return this["LPVDirectionalOcclusionFadeRange"].GetValue<float>(); } set { this["LPVDirectionalOcclusionFadeRange"].SetValue<float>(value); } }
        public float ScreenPercentage { get { return this["ScreenPercentage"].GetValue<float>(); } set { this["ScreenPercentage"].SetValue<float>(value); } }
        public WeightedBlendables WeightedBlendables { get { return this[nameof(WeightedBlendables)].As<WeightedBlendables>(); } set { this["WeightedBlendables"] = value; } }
    }
    public class ComponentSpacePoseLink : PoseLinkBase
    {
        public ComponentSpacePoseLink(nint addr) : base(addr) { }
        public ComponentSpacePoseLink() : base(0) { }
    }
    public class InputScaleBias : UEObject
    {
        public InputScaleBias(nint addr) : base(addr) { }
        public InputScaleBias() : base(0) { }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
        public float Bias { get { return this["Bias"].GetValue<float>(); } set { this["Bias"].SetValue<float>(value); } }
    }
    public class AlphaBlend : UEObject
    {
        public AlphaBlend(nint addr) : base(addr) { }
        public AlphaBlend() : base(0) { }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public float BlendTime { get { return this["BlendTime"].GetValue<float>(); } set { this["BlendTime"].SetValue<float>(value); } }
        public EAlphaBlendOption BlendOption { get { return (EAlphaBlendOption)this["BlendOption"].GetValue<int>(); } set { this["BlendOption"].SetValue<int>((int)value); } }
    }
    public class InputAlphaBoolBlend : UEObject
    {
        public InputAlphaBoolBlend(nint addr) : base(addr) { }
        public InputAlphaBoolBlend() : base(0) { }
        public float BlendInTime { get { return this["BlendInTime"].GetValue<float>(); } set { this["BlendInTime"].SetValue<float>(value); } }
        public float BlendOutTime { get { return this["BlendOutTime"].GetValue<float>(); } set { this["BlendOutTime"].SetValue<float>(value); } }
        public EAlphaBlendOption BlendOption { get { return (EAlphaBlendOption)this["BlendOption"].GetValue<int>(); } set { this["BlendOption"].SetValue<int>((int)value); } }
        public bool bInitialized { get { return this["bInitialized"].Flag; } set { this["bInitialized"].Flag = value; } }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public AlphaBlend AlphaBlend { get { return this[nameof(AlphaBlend)].As<AlphaBlend>(); } set { this["AlphaBlend"] = value; } }
    }
    public class InputRange : UEObject
    {
        public InputRange(nint addr) : base(addr) { }
        public InputRange() : base(0) { }
        public float Min { get { return this["Min"].GetValue<float>(); } set { this["Min"].SetValue<float>(value); } }
        public float Max { get { return this["Max"].GetValue<float>(); } set { this["Max"].SetValue<float>(value); } }
    }
    public class InputScaleBiasClamp : UEObject
    {
        public InputScaleBiasClamp(nint addr) : base(addr) { }
        public InputScaleBiasClamp() : base(0) { }
        public bool bMapRange { get { return this["bMapRange"].Flag; } set { this["bMapRange"].Flag = value; } }
        public bool bClampResult { get { return this["bClampResult"].Flag; } set { this["bClampResult"].Flag = value; } }
        public bool bInterpResult { get { return this["bInterpResult"].Flag; } set { this["bInterpResult"].Flag = value; } }
        public InputRange InRange { get { return this[nameof(InRange)].As<InputRange>(); } set { this["InRange"] = value; } }
        public InputRange OutRange { get { return this[nameof(OutRange)].As<InputRange>(); } set { this["OutRange"] = value; } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
        public float Bias { get { return this["Bias"].GetValue<float>(); } set { this["Bias"].SetValue<float>(value); } }
        public float ClampMin { get { return this["ClampMin"].GetValue<float>(); } set { this["ClampMin"].SetValue<float>(value); } }
        public float ClampMax { get { return this["ClampMax"].GetValue<float>(); } set { this["ClampMax"].SetValue<float>(value); } }
        public float InterpSpeedIncreasing { get { return this["InterpSpeedIncreasing"].GetValue<float>(); } set { this["InterpSpeedIncreasing"].SetValue<float>(value); } }
        public float InterpSpeedDecreasing { get { return this["InterpSpeedDecreasing"].GetValue<float>(); } set { this["InterpSpeedDecreasing"].SetValue<float>(value); } }
    }
    public class PoseLink : PoseLinkBase
    {
        public PoseLink(nint addr) : base(addr) { }
        public PoseLink() : base(0) { }
    }
    public class PoseLinkBase : UEObject
    {
        public PoseLinkBase(nint addr) : base(addr) { }
        public PoseLinkBase() : base(0) { }
        public int LinkID { get { return this["LinkID"].GetValue<int>(); } set { this["LinkID"].SetValue<int>(value); } }
    }
    public class BoneReference : UEObject
    {
        public BoneReference(nint addr) : base(addr) { }
        public BoneReference() : base(0) { }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_Base : UEObject
    {
        public AnimNode_Base(nint addr) : base(addr) { }
        public AnimNode_Base() : base(0) { }
    }
    public class UniqueNetIdRepl : UniqueNetIdWrapper
    {
        public UniqueNetIdRepl(nint addr) : base(addr) { }
        public UniqueNetIdRepl() : base(0) { }
        public List<byte> ReplicationBytes { get { return this["ReplicationBytes"].GetList<byte>(); } set { /* Arrays are read-only */ } }
    }
    public class LightingChannels : UEObject
    {
        public LightingChannels(nint addr) : base(addr) { }
        public LightingChannels() : base(0) { }
        public bool bChannel0 { get { return this["bChannel0"].Flag; } set { this["bChannel0"].Flag = value; } }
        public bool bChannel1 { get { return this["bChannel1"].Flag; } set { this["bChannel1"].Flag = value; } }
        public bool bChannel2 { get { return this["bChannel2"].Flag; } set { this["bChannel2"].Flag = value; } }
    }
    public class CustomPrimitiveData : UEObject
    {
        public CustomPrimitiveData(nint addr) : base(addr) { }
        public CustomPrimitiveData() : base(0) { }
        public List<float> Data { get { return this["Data"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class CollisionResponseContainer : UEObject
    {
        public CollisionResponseContainer(nint addr) : base(addr) { }
        public CollisionResponseContainer() : base(0) { }
        public byte WorldStatic { get { return this["WorldStatic"].GetValue<byte>(); } set { this["WorldStatic"].SetValue<byte>(value); } }
        public byte WorldDynamic { get { return this["WorldDynamic"].GetValue<byte>(); } set { this["WorldDynamic"].SetValue<byte>(value); } }
        public byte Pawn { get { return this["Pawn"].GetValue<byte>(); } set { this["Pawn"].SetValue<byte>(value); } }
        public byte Visibility { get { return this["Visibility"].GetValue<byte>(); } set { this["Visibility"].SetValue<byte>(value); } }
        public byte Camera { get { return this["Camera"].GetValue<byte>(); } set { this["Camera"].SetValue<byte>(value); } }
        public byte PhysicsBody { get { return this["PhysicsBody"].GetValue<byte>(); } set { this["PhysicsBody"].SetValue<byte>(value); } }
        public byte Vehicle { get { return this["Vehicle"].GetValue<byte>(); } set { this["Vehicle"].SetValue<byte>(value); } }
        public byte Destructible { get { return this["Destructible"].GetValue<byte>(); } set { this["Destructible"].SetValue<byte>(value); } }
        public byte EngineTraceChannel1 { get { return this["EngineTraceChannel1"].GetValue<byte>(); } set { this["EngineTraceChannel1"].SetValue<byte>(value); } }
        public byte EngineTraceChannel2 { get { return this["EngineTraceChannel2"].GetValue<byte>(); } set { this["EngineTraceChannel2"].SetValue<byte>(value); } }
        public byte EngineTraceChannel3 { get { return this["EngineTraceChannel3"].GetValue<byte>(); } set { this["EngineTraceChannel3"].SetValue<byte>(value); } }
        public byte EngineTraceChannel4 { get { return this["EngineTraceChannel4"].GetValue<byte>(); } set { this["EngineTraceChannel4"].SetValue<byte>(value); } }
        public byte EngineTraceChannel5 { get { return this["EngineTraceChannel5"].GetValue<byte>(); } set { this["EngineTraceChannel5"].SetValue<byte>(value); } }
        public byte EngineTraceChannel6 { get { return this["EngineTraceChannel6"].GetValue<byte>(); } set { this["EngineTraceChannel6"].SetValue<byte>(value); } }
        public byte GameTraceChannel1 { get { return this["GameTraceChannel1"].GetValue<byte>(); } set { this["GameTraceChannel1"].SetValue<byte>(value); } }
        public byte GameTraceChannel2 { get { return this["GameTraceChannel2"].GetValue<byte>(); } set { this["GameTraceChannel2"].SetValue<byte>(value); } }
        public byte GameTraceChannel3 { get { return this["GameTraceChannel3"].GetValue<byte>(); } set { this["GameTraceChannel3"].SetValue<byte>(value); } }
        public byte GameTraceChannel4 { get { return this["GameTraceChannel4"].GetValue<byte>(); } set { this["GameTraceChannel4"].SetValue<byte>(value); } }
        public byte GameTraceChannel5 { get { return this["GameTraceChannel5"].GetValue<byte>(); } set { this["GameTraceChannel5"].SetValue<byte>(value); } }
        public byte GameTraceChannel6 { get { return this["GameTraceChannel6"].GetValue<byte>(); } set { this["GameTraceChannel6"].SetValue<byte>(value); } }
        public byte GameTraceChannel7 { get { return this["GameTraceChannel7"].GetValue<byte>(); } set { this["GameTraceChannel7"].SetValue<byte>(value); } }
        public byte GameTraceChannel8 { get { return this["GameTraceChannel8"].GetValue<byte>(); } set { this["GameTraceChannel8"].SetValue<byte>(value); } }
        public byte GameTraceChannel9 { get { return this["GameTraceChannel9"].GetValue<byte>(); } set { this["GameTraceChannel9"].SetValue<byte>(value); } }
        public byte GameTraceChannel10 { get { return this["GameTraceChannel10"].GetValue<byte>(); } set { this["GameTraceChannel10"].SetValue<byte>(value); } }
        public byte GameTraceChannel11 { get { return this["GameTraceChannel11"].GetValue<byte>(); } set { this["GameTraceChannel11"].SetValue<byte>(value); } }
        public byte GameTraceChannel12 { get { return this["GameTraceChannel12"].GetValue<byte>(); } set { this["GameTraceChannel12"].SetValue<byte>(value); } }
        public byte GameTraceChannel13 { get { return this["GameTraceChannel13"].GetValue<byte>(); } set { this["GameTraceChannel13"].SetValue<byte>(value); } }
        public byte GameTraceChannel14 { get { return this["GameTraceChannel14"].GetValue<byte>(); } set { this["GameTraceChannel14"].SetValue<byte>(value); } }
        public byte GameTraceChannel15 { get { return this["GameTraceChannel15"].GetValue<byte>(); } set { this["GameTraceChannel15"].SetValue<byte>(value); } }
        public byte GameTraceChannel16 { get { return this["GameTraceChannel16"].GetValue<byte>(); } set { this["GameTraceChannel16"].SetValue<byte>(value); } }
        public byte GameTraceChannel17 { get { return this["GameTraceChannel17"].GetValue<byte>(); } set { this["GameTraceChannel17"].SetValue<byte>(value); } }
        public byte GameTraceChannel18 { get { return this["GameTraceChannel18"].GetValue<byte>(); } set { this["GameTraceChannel18"].SetValue<byte>(value); } }
    }
    public class ResponseChannel : UEObject
    {
        public ResponseChannel(nint addr) : base(addr) { }
        public ResponseChannel() : base(0) { }
        public string Channel { get { return this["Channel"].ToString(); } set { /* String properties are read-only */ } }
        public byte Response { get { return this["Response"].GetValue<byte>(); } set { this["Response"].SetValue<byte>(value); } }
    }
    public class CollisionResponse : UEObject
    {
        public CollisionResponse(nint addr) : base(addr) { }
        public CollisionResponse() : base(0) { }
        public CollisionResponseContainer ResponseToChannels { get { return this[nameof(ResponseToChannels)].As<CollisionResponseContainer>(); } set { this["ResponseToChannels"] = value; } }
        public Array<ResponseChannel> ResponseArray { get { return new Array<ResponseChannel>(this["ResponseArray"]); } set { this["ResponseArray"] = value; } }
    }
    public class BodyInstance : BodyInstanceCore
    {
        public BodyInstance(nint addr) : base(addr) { }
        public BodyInstance() : base(0) { }
        public byte ObjectType { get { return this["ObjectType"].GetValue<byte>(); } set { this["ObjectType"].SetValue<byte>(value); } }
        public byte CollisionEnabled { get { return this["CollisionEnabled"].GetValue<byte>(); } set { this["CollisionEnabled"].SetValue<byte>(value); } }
        public ESleepFamily SleepFamily { get { return (ESleepFamily)this["SleepFamily"].GetValue<int>(); } set { this["SleepFamily"].SetValue<int>((int)value); } }
        public byte DOFMode { get { return this["DOFMode"].GetValue<byte>(); } set { this["DOFMode"].SetValue<byte>(value); } }
        public bool bUseCCD { get { return this["bUseCCD"].Flag; } set { this["bUseCCD"].Flag = value; } }
        public bool bIgnoreAnalyticCollisions { get { return this["bIgnoreAnalyticCollisions"].Flag; } set { this["bIgnoreAnalyticCollisions"].Flag = value; } }
        public bool bNotifyRigidBodyCollision { get { return this["bNotifyRigidBodyCollision"].Flag; } set { this["bNotifyRigidBodyCollision"].Flag = value; } }
        public bool bLockTranslation { get { return this["bLockTranslation"].Flag; } set { this["bLockTranslation"].Flag = value; } }
        public bool bLockRotation { get { return this["bLockRotation"].Flag; } set { this["bLockRotation"].Flag = value; } }
        public bool bLockXTranslation { get { return this["bLockXTranslation"].Flag; } set { this["bLockXTranslation"].Flag = value; } }
        public bool bLockYTranslation { get { return this["bLockYTranslation"].Flag; } set { this["bLockYTranslation"].Flag = value; } }
        public bool bLockZTranslation { get { return this["bLockZTranslation"].Flag; } set { this["bLockZTranslation"].Flag = value; } }
        public bool bLockXRotation { get { return this["bLockXRotation"].Flag; } set { this["bLockXRotation"].Flag = value; } }
        public bool bLockYRotation { get { return this["bLockYRotation"].Flag; } set { this["bLockYRotation"].Flag = value; } }
        public bool bLockZRotation { get { return this["bLockZRotation"].Flag; } set { this["bLockZRotation"].Flag = value; } }
        public bool bOverrideMaxAngularVelocity { get { return this["bOverrideMaxAngularVelocity"].Flag; } set { this["bOverrideMaxAngularVelocity"].Flag = value; } }
        public bool bOverrideMaxDepenetrationVelocity { get { return this["bOverrideMaxDepenetrationVelocity"].Flag; } set { this["bOverrideMaxDepenetrationVelocity"].Flag = value; } }
        public bool bOverrideWalkableSlopeOnInstance { get { return this["bOverrideWalkableSlopeOnInstance"].Flag; } set { this["bOverrideWalkableSlopeOnInstance"].Flag = value; } }
        public bool bInterpolateWhenSubStepping { get { return this["bInterpolateWhenSubStepping"].Flag; } set { this["bInterpolateWhenSubStepping"].Flag = value; } }
        public string CollisionProfileName { get { return this["CollisionProfileName"].ToString(); } set { /* String properties are read-only */ } }
        public byte PositionSolverIterationCount { get { return this["PositionSolverIterationCount"].GetValue<byte>(); } set { this["PositionSolverIterationCount"].SetValue<byte>(value); } }
        public byte VelocitySolverIterationCount { get { return this["VelocitySolverIterationCount"].GetValue<byte>(); } set { this["VelocitySolverIterationCount"].SetValue<byte>(value); } }
        public CollisionResponse CollisionResponses { get { return this[nameof(CollisionResponses)].As<CollisionResponse>(); } set { this["CollisionResponses"] = value; } }
        public float MaxDepenetrationVelocity { get { return this["MaxDepenetrationVelocity"].GetValue<float>(); } set { this["MaxDepenetrationVelocity"].SetValue<float>(value); } }
        public float MassInKgOverride { get { return this["MassInKgOverride"].GetValue<float>(); } set { this["MassInKgOverride"].SetValue<float>(value); } }
        public float LinearDamping { get { return this["LinearDamping"].GetValue<float>(); } set { this["LinearDamping"].SetValue<float>(value); } }
        public float AngularDamping { get { return this["AngularDamping"].GetValue<float>(); } set { this["AngularDamping"].SetValue<float>(value); } }
        public Vector CustomDOFPlaneNormal { get { return this[nameof(CustomDOFPlaneNormal)].As<Vector>(); } set { this["CustomDOFPlaneNormal"] = value; } }
        public Vector COMNudge { get { return this[nameof(COMNudge)].As<Vector>(); } set { this["COMNudge"] = value; } }
        public float MassScale { get { return this["MassScale"].GetValue<float>(); } set { this["MassScale"].SetValue<float>(value); } }
        public Vector InertiaTensorScale { get { return this[nameof(InertiaTensorScale)].As<Vector>(); } set { this["InertiaTensorScale"] = value; } }
        public WalkableSlopeOverride WalkableSlopeOverride { get { return this[nameof(WalkableSlopeOverride)].As<WalkableSlopeOverride>(); } set { this["WalkableSlopeOverride"] = value; } }
        public PhysicalMaterial PhysMaterialOverride { get { return this[nameof(PhysMaterialOverride)].As<PhysicalMaterial>(); } set { this["PhysMaterialOverride"] = value; } }
        public float MaxAngularVelocity { get { return this["MaxAngularVelocity"].GetValue<float>(); } set { this["MaxAngularVelocity"].SetValue<float>(value); } }
        public float CustomSleepThresholdMultiplier { get { return this["CustomSleepThresholdMultiplier"].GetValue<float>(); } set { this["CustomSleepThresholdMultiplier"].SetValue<float>(value); } }
        public float StabilizationThresholdMultiplier { get { return this["StabilizationThresholdMultiplier"].GetValue<float>(); } set { this["StabilizationThresholdMultiplier"].SetValue<float>(value); } }
        public float PhysicsBlendWeight { get { return this["PhysicsBlendWeight"].GetValue<float>(); } set { this["PhysicsBlendWeight"].SetValue<float>(value); } }
    }
    public class WalkableSlopeOverride : UEObject
    {
        public WalkableSlopeOverride(nint addr) : base(addr) { }
        public WalkableSlopeOverride() : base(0) { }
        public byte WalkableSlopeBehavior { get { return this["WalkableSlopeBehavior"].GetValue<byte>(); } set { this["WalkableSlopeBehavior"].SetValue<byte>(value); } }
        public float WalkableSlopeAngle { get { return this["WalkableSlopeAngle"].GetValue<float>(); } set { this["WalkableSlopeAngle"].SetValue<float>(value); } }
    }
    public enum EVisibilityAggressiveness : int
    {
        VIS_LeastAggressive = 0,
        VIS_ModeratelyAggressive = 1,
        VIS_MostAggressive = 2,
        VIS_Max = 3,
    }
    public enum EVolumeLightingMethod : int
    {
        VLM_VolumetricLightmap = 0,
        VLM_SparseVolumeLightingSamples = 1,
        VLM_MAX = 2,
    }
    public enum EPSCPoolMethod : int
    {
        None = 0,
        AutoRelease = 1,
        ManualRelease = 2,
        ManualRelease_OnComplete = 3,
        FreeInPool = 4,
        EPSCPoolMethod_MAX = 5,
    }
    public enum EWindSourceType : int
    {
        Directional = 0,
        Point = 1,
        EWindSourceType_MAX = 2,
    }
    public enum EVectorFieldConstructionOp : int
    {
        VFCO_Extrude = 0,
        VFCO_Revolve = 1,
        VFCO_MAX = 2,
    }
    public enum ERenderFocusRule : int
    {
        Always = 0,
        NonPointer = 1,
        NavigationOnly = 2,
        Never = 3,
        ERenderFocusRule_MAX = 4,
    }
    public enum EUIScalingRule : int
    {
        ShortestSide = 0,
        LongestSide = 1,
        Horizontal = 2,
        Vertical = 3,
        ScaleToFit = 4,
        Custom = 5,
        EUIScalingRule_MAX = 6,
    }
    public enum EUserDefinedStructureStatus : int
    {
        UDSS_UpToDate = 0,
        UDSS_Dirty = 1,
        UDSS_Error = 2,
        UDSS_Duplicate = 3,
        UDSS_MAX = 4,
    }
    public enum ETwitterRequestMethod : int
    {
        TRM_Get = 0,
        TRM_Post = 1,
        TRM_Delete = 2,
        TRM_MAX = 3,
    }
    public enum ETwitterIntegrationDelegate : int
    {
        TID_AuthorizeComplete = 0,
        TID_TweetUIComplete = 1,
        TID_RequestComplete = 2,
        TID_MAX = 3,
    }
    public enum ETimeStretchCurveMapping : int
    {
        T_Original = 0,
        T_TargetMin = 1,
        T_TargetMax = 2,
        MAX = 3,
    }
    public enum ETimelineLengthMode : int
    {
        TL_TimelineLength = 0,
        TL_LastKeyFrame = 1,
        TL_MAX = 2,
    }
    public enum ETimelineDirection : int
    {
        Forward = 0,
        Backward = 1,
        ETimelineDirection_MAX = 2,
    }
    public enum ETimecodeProviderSynchronizationState : int
    {
        Closed = 0,
        Error = 1,
        Synchronized = 2,
        Synchronizing = 3,
        ETimecodeProviderSynchronizationState_MAX = 4,
    }
    public enum ETextureRenderTargetFormat : int
    {
        RTF_R8 = 0,
        RTF_RG8 = 1,
        RTF_RGBA8 = 2,
        RTF_RGBA8_SRGB = 3,
        RTF_R16f = 4,
        RTF_RG16f = 5,
        RTF_RGBA16f = 6,
        RTF_R32f = 7,
        RTF_RG32f = 8,
        RTF_RGBA32f = 9,
        RTF_RGB10A2 = 10,
        RTF_MAX = 11,
    }
    public enum TextureGroup : int
    {
        TEXTUREGROUP_World = 0,
        TEXTUREGROUP_WorldNormalMap = 1,
        TEXTUREGROUP_WorldSpecular = 2,
        TEXTUREGROUP_Character = 3,
        TEXTUREGROUP_CharacterNormalMap = 4,
        TEXTUREGROUP_CharacterSpecular = 5,
        TEXTUREGROUP_Weapon = 6,
        TEXTUREGROUP_WeaponNormalMap = 7,
        TEXTUREGROUP_WeaponSpecular = 8,
        TEXTUREGROUP_Vehicle = 9,
        TEXTUREGROUP_VehicleNormalMap = 10,
        TEXTUREGROUP_VehicleSpecular = 11,
        TEXTUREGROUP_Cinematic = 12,
        TEXTUREGROUP_Effects = 13,
        TEXTUREGROUP_EffectsNotFiltered = 14,
        TEXTUREGROUP_Skybox = 15,
        TEXTUREGROUP_UI = 16,
        TEXTUREGROUP_Lightmap = 17,
        TEXTUREGROUP_RenderTarget = 18,
        TEXTUREGROUP_MobileFlattened = 19,
        TEXTUREGROUP_ProcBuilding_Face = 20,
        TEXTUREGROUP_ProcBuilding_LightMap = 21,
        TEXTUREGROUP_Shadowmap = 22,
        TEXTUREGROUP_ColorLookupTable = 23,
        TEXTUREGROUP_Terrain_Heightmap = 24,
        TEXTUREGROUP_Terrain_Weightmap = 25,
        TEXTUREGROUP_Bokeh = 26,
        TEXTUREGROUP_IESLightProfile = 27,
        TEXTUREGROUP_Pixels2D = 28,
        TEXTUREGROUP_HierarchicalLOD = 29,
        TEXTUREGROUP_Impostor = 30,
        TEXTUREGROUP_ImpostorNormalDepth = 31,
        TEXTUREGROUP_8BitData = 32,
        TEXTUREGROUP_16BitData = 33,
        TEXTUREGROUP_Project01 = 34,
        TEXTUREGROUP_Project02 = 35,
        TEXTUREGROUP_Project03 = 36,
        TEXTUREGROUP_Project04 = 37,
        TEXTUREGROUP_Project05 = 38,
        TEXTUREGROUP_Project06 = 39,
        TEXTUREGROUP_Project07 = 40,
        TEXTUREGROUP_Project08 = 41,
        TEXTUREGROUP_Project09 = 42,
        TEXTUREGROUP_Project10 = 43,
        TEXTUREGROUP_Project11 = 44,
        TEXTUREGROUP_Project12 = 45,
        TEXTUREGROUP_Project13 = 46,
        TEXTUREGROUP_Project14 = 47,
        TEXTUREGROUP_Project15 = 48,
        TEXTUREGROUP_MAX = 49,
    }
    public enum TextureMipGenSettings : int
    {
        TMGS_FromTextureGroup = 0,
        TMGS_SimpleAverage = 1,
        TMGS_Sharpen0 = 2,
        TMGS_Sharpen1 = 3,
        TMGS_Sharpen2 = 4,
        TMGS_Sharpen3 = 5,
        TMGS_Sharpen4 = 6,
        TMGS_Sharpen5 = 7,
        TMGS_Sharpen6 = 8,
        TMGS_Sharpen7 = 9,
        TMGS_Sharpen8 = 10,
        TMGS_Sharpen9 = 11,
        TMGS_Sharpen10 = 12,
        TMGS_NoMipmaps = 13,
        TMGS_LeaveExistingMips = 14,
        TMGS_Blur1 = 15,
        TMGS_Blur2 = 16,
        TMGS_Blur3 = 17,
        TMGS_Blur4 = 18,
        TMGS_Blur5 = 19,
        TMGS_Unfiltered = 20,
        TMGS_MAX = 21,
    }
    public enum ETexturePowerOfTwoSetting : int
    {
        None = 0,
        PadToPowerOfTwo = 1,
        PadToSquarePowerOfTwo = 2,
        ETexturePowerOfTwoSetting_MAX = 3,
    }
    public enum ETextureSamplerFilter : int
    {
        Point = 0,
        Bilinear = 1,
        Trilinear = 2,
        AnisotropicPoint = 3,
        AnisotropicLinear = 4,
        ETextureSamplerFilter_MAX = 5,
    }
    public enum ETextureMipLoadOptions : int
    {
        Default = 0,
        AllMips = 1,
        OnlyFirstMip = 2,
        ETextureMipLoadOptions_MAX = 3,
    }
    public enum ETextureDownscaleOptions : int
    {
        Default = 0,
        Unfiltered = 1,
        SimpleAverage = 2,
        Sharpen0 = 3,
        Sharpen1 = 4,
        Sharpen2 = 5,
        Sharpen3 = 6,
        Sharpen4 = 7,
        Sharpen5 = 8,
        Sharpen6 = 9,
        Sharpen7 = 10,
        Sharpen8 = 11,
        Sharpen9 = 12,
        Sharpen10 = 13,
        ETextureDownscaleOptions_MAX = 14,
    }
    public enum ETextureLossyCompressionAmount : int
    {
        TLCA_Default = 0,
        TLCA_None = 1,
        TLCA_Lowest = 2,
        TLCA_Low = 3,
        TLCA_Medium = 4,
        TLCA_High = 5,
        TLCA_Highest = 6,
        TLCA_MAX = 7,
    }
    public enum TextureCompressionSettings : int
    {
        TC_Default = 0,
        TC_Normalmap = 1,
        TC_Masks = 2,
        TC_Grayscale = 3,
        TC_Displacementmap = 4,
        TC_VectorDisplacementmap = 5,
        TC_HDR = 6,
        TC_EditorIcon = 7,
        TC_Alpha = 8,
        TC_DistanceFieldFont = 9,
        TC_HDR_Compressed = 10,
        TC_BC7 = 11,
        TC_HalfFloat = 12,
        TC_EncodedReflectionCapture = 13,
        TC_MAX = 14,
    }
    public enum TextureFilter : int
    {
        TF_Nearest = 0,
        TF_Bilinear = 1,
        TF_Trilinear = 2,
        TF_Default = 3,
        TF_MAX = 4,
    }
    public enum TextureAddress : int
    {
        TA_Wrap = 0,
        TA_Clamp = 1,
        TA_Mirror = 2,
        TA_MAX = 3,
    }
    public enum ECompositeTextureMode : int
    {
        CTM_Disabled = 0,
        CTM_NormalRoughnessToRed = 1,
        CTM_NormalRoughnessToGreen = 2,
        CTM_NormalRoughnessToBlue = 3,
        CTM_NormalRoughnessToAlpha = 4,
        CTM_MAX = 5,
    }
    public enum ETextureMipCount : int
    {
        TMC_ResidentMips = 0,
        TMC_AllMips = 1,
        TMC_AllMipsBiased = 2,
        TMC_MAX = 3,
    }
    public enum ETextureSourceArtType : int
    {
        TSAT_Uncompressed = 0,
        TSAT_PNGCompressed = 1,
        TSAT_DDSFile = 2,
        TSAT_MAX = 3,
    }
    public enum ETextureSourceFormat : int
    {
        TSF_Invalid = 0,
        TSF_G8 = 1,
        TSF_BGRA8 = 2,
        TSF_BGRE8 = 3,
        TSF_RGBA16 = 4,
        TSF_RGBA16F = 5,
        TSF_RGBA8 = 6,
        TSF_RGBE8 = 7,
        TSF_G16 = 8,
        TSF_MAX = 9,
    }
    public enum ETextureCompressionQuality : int
    {
        TCQ_Default = 0,
        TCQ_Lowest = 1,
        TCQ_Low = 2,
        TCQ_Medium = 3,
        TCQ_High = 4,
        TCQ_Highest = 5,
        TCQ_MAX = 6,
    }
    public enum EHorizTextAligment : int
    {
        EHTA_Left = 0,
        EHTA_Center = 1,
        EHTA_Right = 2,
        EHTA_MAX = 3,
    }
    public enum EVerticalTextAligment : int
    {
        EVRTA_TextTop = 0,
        EVRTA_TextCenter = 1,
        EVRTA_TextBottom = 2,
        EVRTA_QuadTop = 3,
        EVRTA_MAX = 4,
    }
    public enum ESubUVBoundingVertexCount : int
    {
        BVC_FourVertices = 0,
        BVC_EightVertices = 1,
        BVC_MAX = 2,
    }
    public enum EOpacitySourceMode : int
    {
        OSM_Alpha = 0,
        OSM_ColorBrightness = 1,
        OSM_RedChannel = 2,
        OSM_GreenChannel = 3,
        OSM_BlueChannel = 4,
        OSM_MAX = 5,
    }
    public enum EStereoLayerType : int
    {
        SLT_WorldLocked = 0,
        SLT_TrackerLocked = 1,
        SLT_FaceLocked = 2,
        SLT_MAX = 3,
    }
    public enum EStereoLayerShape : int
    {
        SLSH_QuadLayer = 0,
        SLSH_CylinderLayer = 1,
        SLSH_CubemapLayer = 2,
        SLSH_EquirectLayer = 3,
        SLSH_MAX = 4,
    }
    public enum ENormalMode : int
    {
        NM_PreserveSmoothingGroups = 0,
        NM_RecalculateNormals = 1,
        NM_RecalculateNormalsSmooth = 2,
        NM_RecalculateNormalsHard = 3,
        TEMP_BROKEN = 4,
        ENormalMode_MAX = 5,
    }
    public enum EImportanceLevel : int
    {
        IL_Off = 0,
        IL_Lowest = 1,
        IL_Low = 2,
        IL_Normal = 3,
        IL_High = 4,
        IL_Highest = 5,
        TEMP_BROKEN2 = 6,
        EImportanceLevel_MAX = 7,
    }
    public enum EOptimizationType : int
    {
        OT_NumOfTriangles = 0,
        OT_MaxDeviation = 1,
        OT_MAX = 2,
    }
    public enum ESplineMeshAxis : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        ESplineMeshAxis_MAX = 3,
    }
    public enum ESplinePointType : int
    {
        Linear = 0,
        Curve = 1,
        Constant = 2,
        CurveClamped = 3,
        CurveCustomTangent = 4,
        ESplinePointType_MAX = 5,
    }
    public enum ESplineCoordinateSpace : int
    {
        Local = 0,
        World = 1,
        ESplineCoordinateSpace_MAX = 2,
    }
    public enum ESoundWaveLoadingBehavior : int
    {
        Inherited = 0,
        RetainOnLoad = 1,
        PrimeOnLoad = 2,
        LoadOnDemand = 3,
        ForceInline = 4,
        Uninitialized = 255,
        ESoundWaveLoadingBehavior_MAX = 256,
    }
    public enum EDecompressionType : int
    {
        DTYPE_Setup = 0,
        DTYPE_Invalid = 1,
        DTYPE_Preview = 2,
        DTYPE_Native = 3,
        DTYPE_RealTime = 4,
        DTYPE_Procedural = 5,
        DTYPE_Xenon = 6,
        DTYPE_Streaming = 7,
        DTYPE_MAX = 8,
    }
    public enum ESoundWaveFFTSize : int
    {
        VerySmall = 0,
        Small = 1,
        Medium = 2,
        Large = 3,
        VeryLarge = 4,
        ESoundWaveFFTSize_MAX = 5,
    }
    public enum EAudioSpectrumBandPresetType : int
    {
        KickDrum = 0,
        SnareDrum = 1,
        Voice = 2,
        Cymbals = 3,
        EAudioSpectrumBandPresetType_MAX = 4,
    }
    public enum EAudioRecordingExportType : int
    {
        SoundWave = 0,
        WavFile = 1,
        EAudioRecordingExportType_MAX = 2,
    }
    public enum ESendLevelControlMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESendLevelControlMethod_MAX = 3,
    }
    public enum ESubmixSendStage : int
    {
        PostDistanceAttenuation = 0,
        PreDistanceAttenuation = 1,
        ESubmixSendStage_MAX = 2,
    }
    public enum EFFTSize : int
    {
        DefaultSize = 0,
        Min = 1,
        Small = 2,
        Medium = 3,
        Large = 4,
        VeryLarge = 5,
        Max = 6,
    }
    public enum EFFTPeakInterpolationMethod : int
    {
        NearestNeighbor = 0,
        Linear = 1,
        Quadratic = 2,
        ConstantQ = 3,
        EFFTPeakInterpolationMethod_MAX = 4,
    }
    public enum EFFTWindowType : int
    {
        None = 0,
        Hamming = 1,
        Hann = 2,
        Blackman = 3,
        EFFTWindowType_MAX = 4,
    }
    public enum EAudioSpectrumType : int
    {
        MagnitudeSpectrum = 0,
        PowerSpectrum = 1,
        Decibel = 2,
        EAudioSpectrumType_MAX = 3,
    }
    public enum EGainParamMode : int
    {
        Linear = 0,
        Decibels = 1,
        EGainParamMode_MAX = 2,
    }
    public enum ESourceBusSendLevelControlMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESourceBusSendLevelControlMethod_MAX = 3,
    }
    public enum ESourceBusChannels : int
    {
        Mono = 0,
        Stereo = 1,
        ESourceBusChannels_MAX = 2,
    }
    public enum ModulationParamMode : int
    {
        MPM_Normal = 0,
        MPM_Abs = 1,
        MPM_Direct = 2,
        MPM_MAX = 3,
    }
    public enum EModulationRouting : int
    {
        Disable = 0,
        Inherit = 1,
        Override = 2,
        EModulationRouting_MAX = 3,
    }
    public enum ESoundGroup : int
    {
        SOUNDGROUP_Default = 0,
        SOUNDGROUP_Effects = 1,
        SOUNDGROUP_UI = 2,
        SOUNDGROUP_Music = 3,
        SOUNDGROUP_Voice = 4,
        SOUNDGROUP_GameSoundGroup1 = 5,
        SOUNDGROUP_GameSoundGroup2 = 6,
        SOUNDGROUP_GameSoundGroup3 = 7,
        SOUNDGROUP_GameSoundGroup4 = 8,
        SOUNDGROUP_GameSoundGroup5 = 9,
        SOUNDGROUP_GameSoundGroup6 = 10,
        SOUNDGROUP_GameSoundGroup7 = 11,
        SOUNDGROUP_GameSoundGroup8 = 12,
        SOUNDGROUP_GameSoundGroup9 = 13,
        SOUNDGROUP_GameSoundGroup10 = 14,
        SOUNDGROUP_GameSoundGroup11 = 15,
        SOUNDGROUP_GameSoundGroup12 = 16,
        SOUNDGROUP_GameSoundGroup13 = 17,
        SOUNDGROUP_GameSoundGroup14 = 18,
        SOUNDGROUP_GameSoundGroup15 = 19,
        SOUNDGROUP_GameSoundGroup16 = 20,
        SOUNDGROUP_GameSoundGroup17 = 21,
        SOUNDGROUP_GameSoundGroup18 = 22,
        SOUNDGROUP_GameSoundGroup19 = 23,
        SOUNDGROUP_GameSoundGroup20 = 24,
        SOUNDGROUP_MAX = 25,
    }
    public enum EMaxConcurrentResolutionRule : int
    {
        PreventNew = 0,
        StopOldest = 1,
        StopFarthestThenPreventNew = 2,
        StopFarthestThenOldest = 3,
        StopLowestPriority = 4,
        StopQuietest = 5,
        StopLowestPriorityThenPreventNew = 6,
        Count = 7,
        EMaxConcurrentResolutionRule_MAX = 8,
    }
    public enum EConcurrencyVolumeScaleMode : int
    {
        Default = 0,
        Distance = 1,
        Priority = 2,
        EConcurrencyVolumeScaleMode_MAX = 3,
    }
    public enum EVirtualizationMode : int
    {
        Disabled = 0,
        PlayWhenSilent = 1,
        Restart = 2,
        EVirtualizationMode_MAX = 3,
    }
    public enum ESoundDistanceCalc : int
    {
        SOUNDDISTANCE_Normal = 0,
        SOUNDDISTANCE_InfiniteXYPlane = 1,
        SOUNDDISTANCE_InfiniteXZPlane = 2,
        SOUNDDISTANCE_InfiniteYZPlane = 3,
        SOUNDDISTANCE_MAX = 4,
    }
    public enum ESoundSpatializationAlgorithm : int
    {
        SPATIALIZATION_Default = 0,
        SPATIALIZATION_HRTF = 1,
        SPATIALIZATION_MAX = 2,
    }
    public enum EAirAbsorptionMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        EAirAbsorptionMethod_MAX = 2,
    }
    public enum EReverbSendMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        EReverbSendMethod_MAX = 3,
    }
    public enum ESubmixSendMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESubmixSendMethod_MAX = 3,
    }
    public enum EPriorityAttenuationMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        EPriorityAttenuationMethod_MAX = 3,
    }
    public enum ESkyLightSourceType : int
    {
        SLS_CapturedScene = 0,
        SLS_SpecifiedCubemap = 1,
        SLS_MAX = 2,
    }
    public enum ESkyAtmosphereTransformMode : int
    {
        PlanetTopAtAbsoluteWorldOrigin = 0,
        PlanetTopAtComponentTransform = 1,
        PlanetCenterAtComponentTransform = 2,
        ESkyAtmosphereTransformMode_MAX = 3,
    }
    public enum EBoneVisibilityStatus : int
    {
        BVS_HiddenByParent = 0,
        BVS_Visible = 1,
        BVS_ExplicitlyHidden = 2,
        BVS_MAX = 3,
    }
    public enum EPhysBodyOp : int
    {
        PBO_None = 0,
        PBO_Term = 1,
        PBO_MAX = 2,
    }
    public enum EVisibilityBasedAnimTickOption : int
    {
        AlwaysTickPoseAndRefreshBones = 0,
        AlwaysTickPose = 1,
        OnlyTickMontagesWhenNotRendered = 2,
        OnlyTickPoseWhenRendered = 3,
        EVisibilityBasedAnimTickOption_MAX = 4,
    }
    public enum EBoneSpaces : int
    {
        WorldSpace = 0,
        ComponentSpace = 1,
        EBoneSpaces_MAX = 2,
    }
    public enum EVertexOffsetUsageType : int
    {
        None = 0,
        PreSkinningOffset = 1,
        PostSkinningOffset = 2,
        EVertexOffsetUsageType_MAX = 3,
    }
    public enum EBoneTranslationRetargetingMode : int
    {
        Animation = 0,
        Skeleton = 1,
        AnimationScaled = 2,
        AnimationRelative = 3,
        OrientAndScale = 4,
        EBoneTranslationRetargetingMode_MAX = 5,
    }
    public enum SkeletalMeshTerminationCriterion : int
    {
        SMTC_NumOfTriangles = 0,
        SMTC_NumOfVerts = 1,
        SMTC_TriangleOrVert = 2,
        SMTC_AbsNumOfTriangles = 3,
        SMTC_AbsNumOfVerts = 4,
        SMTC_AbsTriangleOrVert = 5,
        SMTC_MAX = 6,
    }
    public enum SkeletalMeshOptimizationType : int
    {
        SMOT_NumOfTriangles = 0,
        SMOT_MaxDeviation = 1,
        SMOT_TriangleOrDeviation = 2,
        SMOT_MAX = 3,
    }
    public enum SkeletalMeshOptimizationImportance : int
    {
        SMOI_Off = 0,
        SMOI_Lowest = 1,
        SMOI_Low = 2,
        SMOI_Normal = 3,
        SMOI_High = 4,
        SMOI_Highest = 5,
        SMOI_MAX = 6,
    }
    public enum EBoneFilterActionOption : int
    {
        Remove = 0,
        Keep = 1,
        Invalid = 2,
        EBoneFilterActionOption_MAX = 3,
    }
    public enum ESkeletalMeshGeoImportVersions : int
    {
        Before_Versionning = 0,
        SkeletalMeshBuildRefactor = 1,
        VersionPlusOne = 2,
        LatestVersion = 1,
        ESkeletalMeshGeoImportVersions_MAX = 3,
    }
    public enum ESkeletalMeshSkinningImportVersions : int
    {
        Before_Versionning = 0,
        SkeletalMeshBuildRefactor = 1,
        VersionPlusOne = 2,
        LatestVersion = 1,
        ESkeletalMeshSkinningImportVersions_MAX = 3,
    }
    public enum EAnimCurveType : int
    {
        AttributeCurve = 0,
        MaterialCurve = 1,
        MorphTargetCurve = 2,
        MaxAnimCurveType = 3,
        EAnimCurveType_MAX = 4,
    }
    public enum ECustomBoneAttributeLookup : int
    {
        BoneOnly = 0,
        ImmediateParent = 1,
        ParentHierarchy = 2,
        ECustomBoneAttributeLookup_MAX = 3,
    }
    public enum EKinematicBonesUpdateToPhysics : int
    {
        SkipSimulatingBones = 0,
        SkipAllBones = 1,
        EKinematicBonesUpdateToPhysics_MAX = 2,
    }
    public enum EAnimationMode : int
    {
        AnimationBlueprint = 0,
        AnimationSingleNode = 1,
        AnimationCustomMode = 2,
        EAnimationMode_MAX = 3,
    }
    public enum EPhysicsTransformUpdateMode : int
    {
        SimulationUpatesComponentTransform = 0,
        ComponentTransformIsKinematic = 1,
        EPhysicsTransformUpdateMode_MAX = 2,
    }
    public enum ESkinCacheUsage : int
    {
        Auto = 0,
        Disabled = 255,
        Enabled = 1,
        ESkinCacheUsage_MAX = 256,
    }
    public enum ESkinCacheDefaultBehavior : int
    {
        Exclusive = 0,
        Inclusive = 1,
        ESkinCacheDefaultBehavior_MAX = 2,
    }
    public enum EMaterialProperty : int
    {
        MP_EmissiveColor = 0,
        MP_Opacity = 1,
        MP_OpacityMask = 2,
        MP_DiffuseColor = 3,
        MP_SpecularColor = 4,
        MP_BaseColor = 5,
        MP_Metallic = 6,
        MP_Specular = 7,
        MP_Roughness = 8,
        MP_Anisotropy = 9,
        MP_Normal = 10,
        MP_Tangent = 11,
        MP_WorldPositionOffset = 12,
        MP_WorldDisplacement = 13,
        MP_TessellationMultiplier = 14,
        MP_SubsurfaceColor = 15,
        MP_CustomData0 = 16,
        MP_CustomData1 = 17,
        MP_AmbientOcclusion = 18,
        MP_Refraction = 19,
        MP_CustomizedUVs0 = 20,
        MP_CustomizedUVs1 = 21,
        MP_CustomizedUVs2 = 22,
        MP_CustomizedUVs3 = 23,
        MP_CustomizedUVs4 = 24,
        MP_CustomizedUVs5 = 25,
        MP_CustomizedUVs6 = 26,
        MP_CustomizedUVs7 = 27,
        MP_PixelDepthOffset = 28,
        MP_ShadingModel = 29,
        MP_MaterialAttributes = 30,
        MP_CustomOutput = 31,
        MP_MAX = 32,
    }
    public enum ESceneCapturePrimitiveRenderMode : int
    {
        PRM_LegacySceneCapture = 0,
        PRM_RenderScenePrimitives = 1,
        PRM_UseShowOnlyList = 2,
        PRM_MAX = 3,
    }
    public enum EDepthOfFieldMethod : int
    {
        DOFM_BokehDOF = 0,
        DOFM_Gaussian = 1,
        DOFM_CircleDOF = 2,
        DOFM_MAX = 3,
    }
    public enum EAntiAliasingMethod : int
    {
        AAM_None = 0,
        AAM_FXAA = 1,
        AAM_TemporalAA = 2,
        AAM_MSAA = 3,
        AAM_MAX = 4,
    }
    public enum EAutoExposureMethod : int
    {
        AEM_Histogram = 0,
        AEM_Basic = 1,
        AEM_Manual = 2,
        AEM_MAX = 3,
    }
    public enum EBloomMethod : int
    {
        BM_SOG = 0,
        BM_FFT = 1,
        BM_MAX = 2,
    }
    public enum ETemperatureMethod : int
    {
        TEMP_WhiteBalance = 0,
        TEMP_ColorTemperature = 1,
        TEMP_MAX = 2,
    }
    public enum ELightUnits : int
    {
        Unitless = 0,
        Candelas = 1,
        Lumens = 2,
        ELightUnits_MAX = 3,
    }
    public enum EReflectionsType : int
    {
        ScreenSpace = 0,
        RayTracing = 1,
        EReflectionsType_MAX = 2,
    }
    public enum ETranslucencyType : int
    {
        Raster = 0,
        RayTracing = 1,
        ETranslucencyType_MAX = 2,
    }
    public enum ERayTracingGlobalIlluminationType : int
    {
        Disabled = 0,
        BruteForce = 1,
        FinalGather = 2,
        ERayTracingGlobalIlluminationType_MAX = 3,
    }
    public enum EReflectedAndRefractedRayTracedShadows : int
    {
        Disabled = 0,
        Hard_shadows = 1,
        Area_shadows = 2,
        EReflectedAndRefractedRayTracedShadows_MAX = 3,
    }
    public enum EMobilePlanarReflectionMode : int
    {
        Usual = 0,
        MobilePPRExclusive = 1,
        MobilePPR = 2,
        EMobilePlanarReflectionMode_MAX = 3,
    }
    public enum EMobilePixelProjectedReflectionQuality : int
    {
        Disabled = 0,
        BestPerformance = 1,
        BetterQuality = 2,
        BestQuality = 3,
        EMobilePixelProjectedReflectionQuality_MAX = 4,
    }
    public enum ERuntimeVirtualTextureMaterialType : int
    {
        BaseColor = 0,
        BaseColor_Normal_DEPRECATED = 1,
        BaseColor_Normal_Specular = 2,
        BaseColor_Normal_Specular_YCoCg = 3,
        BaseColor_Normal_Specular_Mask_YCoCg = 4,
        WorldHeight = 5,
        Count = 6,
        ERuntimeVirtualTextureMaterialType_MAX = 7,
    }
    public enum ERuntimeVirtualTextureMainPassType : int
    {
        Never = 0,
        Exclusive = 1,
        Always = 2,
        ERuntimeVirtualTextureMainPassType_MAX = 3,
    }
    public enum ERootMotionAccumulateMode : int
    {
        Override = 0,
        Additive = 1,
        ERootMotionAccumulateMode_MAX = 2,
    }
    public enum ERootMotionSourceStatusFlags : int
    {
        Prepared = 1,
        Finished = 2,
        MarkedForRemoval = 4,
        ERootMotionSourceStatusFlags_MAX = 5,
    }
    public enum ERootMotionSourceSettingsFlags : int
    {
        UseSensitiveLiftoffCheck = 1,
        DisablePartialEndTick = 2,
        IgnoreZAccumulate = 4,
        ERootMotionSourceSettingsFlags_MAX = 5,
    }
    public enum ERootMotionFinishVelocityMode : int
    {
        MaintainLastRootMotionVelocity = 0,
        SetVelocity = 1,
        ClampVelocity = 2,
        ERootMotionFinishVelocityMode_MAX = 3,
    }
    public enum EControlConstraint : int
    {
        Orientation = 0,
        Translation = 1,
        MAX = 2,
    }
    public enum EConstraintTransform : int
    {
        Absolute = 0,
        Relative = 1,
        EConstraintTransform_MAX = 2,
    }
    public enum ERichCurveTangentMode : int
    {
        RCTM_Auto = 0,
        RCTM_User = 1,
        RCTM_Break = 2,
        RCTM_None = 3,
        RCTM_MAX = 4,
    }
    public enum ERichCurveTangentWeightMode : int
    {
        RCTWM_WeightedNone = 0,
        RCTWM_WeightedArrive = 1,
        RCTWM_WeightedLeave = 2,
        RCTWM_WeightedBoth = 3,
        RCTWM_MAX = 4,
    }
    public enum ERichCurveCompressionFormat : int
    {
        RCCF_Empty = 0,
        RCCF_Constant = 1,
        RCCF_Linear = 2,
        RCCF_Cubic = 3,
        RCCF_Mixed = 4,
        RCCF_Weighted = 5,
        RCCF_MAX = 6,
    }
    public enum ERichCurveKeyTimeCompressionFormat : int
    {
        RCKTCF_uint16 = 0,
        RCKTCF_float32 = 1,
        RCKTCF_MAX = 2,
    }
    public enum ReverbPreset : int
    {
        REVERB_Default = 0,
        REVERB_Bathroom = 1,
        REVERB_StoneRoom = 2,
        REVERB_Auditorium = 3,
        REVERB_ConcertHall = 4,
        REVERB_Cave = 5,
        REVERB_Hallway = 6,
        REVERB_StoneCorridor = 7,
        REVERB_Alley = 8,
        REVERB_Forest = 9,
        REVERB_City = 10,
        REVERB_Mountains = 11,
        REVERB_Quarry = 12,
        REVERB_Plain = 13,
        REVERB_ParkingLot = 14,
        REVERB_SewerPipe = 15,
        REVERB_Underwater = 16,
        REVERB_SmallRoom = 17,
        REVERB_MediumRoom = 18,
        REVERB_LargeRoom = 19,
        REVERB_MediumHall = 20,
        REVERB_LargeHall = 21,
        REVERB_Plate = 22,
        REVERB_MAX = 23,
    }
    public enum EGraphAxisStyle : int
    {
        Lines = 0,
        Notches = 1,
        Grid = 2,
        EGraphAxisStyle_MAX = 3,
    }
    public enum EGraphDataStyle : int
    {
        Lines = 0,
        Filled = 1,
        EGraphDataStyle_MAX = 2,
    }
    public enum ELegendPosition : int
    {
        Outside = 0,
        Inside = 1,
        ELegendPosition_MAX = 2,
    }
    public enum EReporterLineStyle : int
    {
        Line = 0,
        Dash = 1,
        EReporterLineStyle_MAX = 2,
    }
    public enum EClearSceneOptions : int
    {
        NoClear = 0,
        HardwareClear = 1,
        QuadAtMaxZ = 2,
        EClearSceneOptions_MAX = 3,
    }
    public enum ECompositingSampleCount : int
    {
        One = 1,
        Two = 2,
        Four = 4,
        Eight = 8,
        ECompositingSampleCount_MAX = 9,
    }
    public enum EMobileMSAASampleCount : int
    {
        One = 1,
        Two = 2,
        Four = 4,
        Eight = 8,
        EMobileMSAASampleCount_MAX = 9,
    }
    public enum ECustomDepthStencil : int
    {
        Disabled = 0,
        Enabled = 1,
        EnabledOnDemand = 2,
        EnabledWithStencil = 3,
        ECustomDepthStencil_MAX = 4,
    }
    public enum EEarlyZPass : int
    {
        None = 0,
        OpaqueOnly = 1,
        OpaqueAndMasked = 2,
        Auto = 3,
        EEarlyZPass_MAX = 4,
    }
    public enum EAlphaChannelMode : int
    {
        Disabled = 0,
        LinearColorSpaceOnly = 1,
        AllowThroughTonemapper = 2,
        EAlphaChannelMode_MAX = 3,
    }
    public enum EAutoExposureMethodUI : int
    {
        AEM_Histogram = 0,
        AEM_Basic = 1,
        AEM_Manual = 2,
        AEM_MAX = 3,
    }
    public enum EDefaultBackBufferPixelFormat : int
    {
        DBBPF_B8G8R8A8 = 0,
        DBBPF_A16B16G16R16_DEPRECATED = 1,
        DBBPF_FloatRGB_DEPRECATED = 2,
        DBBPF_FloatRGBA = 3,
        DBBPF_A2B10G10R10 = 4,
        DBBPF_MAX = 5,
    }
    public enum EFixedFoveationLevels : int
    {
        Disabled = 0,
        Low = 1,
        Medium = 2,
        High = 3,
        EFixedFoveationLevels_MAX = 4,
    }
    public enum EReflectionSourceType : int
    {
        CapturedScene = 0,
        SpecifiedCubemap = 1,
        EReflectionSourceType_MAX = 2,
    }
    public enum EMobileReflectionCompression : int
    {
        Default = 0,
        On = 1,
        Off = 2,
        EMobileReflectionCompression_MAX = 3,
    }
    public enum ERichCurveInterpMode : int
    {
        RCIM_Linear = 0,
        RCIM_Constant = 1,
        RCIM_Cubic = 2,
        RCIM_None = 3,
        RCIM_MAX = 4,
    }
    public enum ERichCurveExtrapolation : int
    {
        RCCE_Cycle = 0,
        RCCE_CycleWithOffset = 1,
        RCCE_Oscillate = 2,
        RCCE_Linear = 3,
        RCCE_Constant = 4,
        RCCE_None = 5,
        RCCE_MAX = 6,
    }
    public enum EQuartzTimeSignatureQuantization : int
    {
        HalfNote = 0,
        QuarterNote = 1,
        EighthNote = 2,
        SixteenthNote = 3,
        ThirtySecondNote = 4,
        Count = 5,
        EQuartzTimeSignatureQuantization_MAX = 6,
    }
    public enum EQuartzDelegateType : int
    {
        MetronomeTick = 0,
        CommandEvent = 1,
        Count = 2,
        EQuartzDelegateType_MAX = 3,
    }
    public enum EQuarztQuantizationReference : int
    {
        BarRelative = 0,
        TransportRelative = 1,
        CurrentTimeRelative = 2,
        Count = 3,
        EQuarztQuantizationReference_MAX = 4,
    }
    public enum ECanBeCharacterBase : int
    {
        ECB_No = 0,
        ECB_Yes = 1,
        ECB_Owner = 2,
        ECB_MAX = 3,
    }
    public enum EHasCustomNavigableGeometry : int
    {
        No = 0,
        Yes = 1,
        EvenIfNotCollidable = 2,
        DontExport = 3,
        EHasCustomNavigableGeometry_MAX = 4,
    }
    public enum ERendererStencilMask : int
    {
        ERSM_Default = 0,
        ERSM = 1,
        ERSM_1 = 2,
        ERSM_2 = 3,
        ERSM_3 = 4,
        ERSM_4 = 5,
        ERSM_5 = 6,
        ERSM_6 = 7,
        ERSM_7 = 8,
        ERSM_8 = 9,
        ERSM_MAX = 10,
    }
    public enum EDynamicForceFeedbackAction : int
    {
        Start = 0,
        Update = 1,
        Stop = 2,
        EDynamicForceFeedbackAction_MAX = 3,
    }
    public enum EViewTargetBlendFunction : int
    {
        VTBlend_Linear = 0,
        VTBlend_Cubic = 1,
        VTBlend_EaseIn = 2,
        VTBlend_EaseOut = 3,
        VTBlend_EaseInOut = 4,
        VTBlend_PreBlended = 5,
        VTBlend_MAX = 6,
    }
    public enum ESettingsDOF : int
    {
        Full3D = 0,
        YZPlane = 1,
        XZPlane = 2,
        XYPlane = 3,
        ESettingsDOF_MAX = 4,
    }
    public enum ESettingsLockedAxis : int
    {
        None = 0,
        X = 1,
        Y = 2,
        Z = 3,
        Invalid = 4,
        ESettingsLockedAxis_MAX = 5,
    }
    public enum EPhysicsAssetSolverType : int
    {
        RBAN = 0,
        World = 1,
        EPhysicsAssetSolverType_MAX = 2,
    }
    public enum EParticleSysParamType : int
    {
        PSPT_None = 0,
        PSPT_Scalar = 1,
        PSPT_ScalarRand = 2,
        PSPT_Vector = 3,
        PSPT_VectorRand = 4,
        PSPT_Color = 5,
        PSPT_Actor = 6,
        PSPT_Material = 7,
        PSPT_VectorUnitRand = 8,
        PSPT_MAX = 9,
    }
    public enum ParticleReplayState : int
    {
        PRS_Disabled = 0,
        PRS_Capturing = 1,
        PRS_Replaying = 2,
        PRS_MAX = 3,
    }
    public enum EParticleEventType : int
    {
        EPET_Any = 0,
        EPET_Spawn = 1,
        EPET_Death = 2,
        EPET_Collision = 3,
        EPET_Burst = 4,
        EPET_Blueprint = 5,
        EPET_MAX = 6,
    }
    public enum EParticleSystemUpdateMode : int
    {
        EPSUM_RealTime = 0,
        EPSUM_FixedTime = 1,
        EPSUM_MAX = 2,
    }
    public enum ParticleSystemLODMethod : int
    {
        PARTICLESYSTEMLODMETHOD_Automatic = 0,
        PARTICLESYSTEMLODMETHOD_DirectSet = 1,
        PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
        PARTICLESYSTEMLODMETHOD_MAX = 3,
    }
    public enum EParticleSystemOcclusionBoundsMethod : int
    {
        EPSOBM_None = 0,
        EPSOBM_ParticleBounds = 1,
        EPSOBM_CustomBounds = 2,
        EPSOBM_MAX = 3,
    }
    public enum EParticleScreenAlignment : int
    {
        PSA_FacingCameraPosition = 0,
        PSA_Square = 1,
        PSA_Rectangle = 2,
        PSA_Velocity = 3,
        PSA_AwayFromCenter = 4,
        PSA_TypeSpecific = 5,
        PSA_FacingCameraDistanceBlend = 6,
        PSA_MAX = 7,
    }
    public enum ETrailsRenderAxisOption : int
    {
        Trails_CameraUp = 0,
        Trails_SourceUp = 1,
        Trails_WorldUp = 2,
        Trails_MAX = 3,
    }
    public enum EMeshScreenAlignment : int
    {
        PSMA_MeshFaceCameraWithRoll = 0,
        PSMA_MeshFaceCameraWithSpin = 1,
        PSMA_MeshFaceCameraWithLockedAxis = 2,
        PSMA_MAX = 3,
    }
    public enum EMeshCameraFacingUpAxis : int
    {
        CameraFacing_NoneUP = 0,
        CameraFacing_ZUp = 1,
        CameraFacing_NegativeZUp = 2,
        CameraFacing_YUp = 3,
        CameraFacing_NegativeYUp = 4,
        CameraFacing_MAX = 5,
    }
    public enum EMeshCameraFacingOptions : int
    {
        XAxisFacing_NoUp = 0,
        XAxisFacing_ZUp = 1,
        XAxisFacing_NegativeZUp = 2,
        XAxisFacing_YUp = 3,
        XAxisFacing_NegativeYUp = 4,
        LockedAxis_ZAxisFacing = 5,
        LockedAxis_NegativeZAxisFacing = 6,
        LockedAxis_YAxisFacing = 7,
        LockedAxis_NegativeYAxisFacing = 8,
        VelocityAligned_ZAxisFacing = 9,
        VelocityAligned_NegativeZAxisFacing = 10,
        VelocityAligned_YAxisFacing = 11,
        VelocityAligned_NegativeYAxisFacing = 12,
        EMeshCameraFacingOptions_MAX = 13,
    }
    public enum EBeam2Method : int
    {
        PEB2M_Distance = 0,
        PEB2M_Target = 1,
        PEB2M_Branch = 2,
        PEB2M_MAX = 3,
    }
    public enum EBeamTaperMethod : int
    {
        PEBTM_None = 0,
        PEBTM_Full = 1,
        PEBTM_Partial = 2,
        PEBTM_MAX = 3,
    }
    public enum ETrail2SourceMethod : int
    {
        PET2SRCM_Default = 0,
        PET2SRCM_Particle = 1,
        PET2SRCM_Actor = 2,
        PET2SRCM_MAX = 3,
    }
    public enum EParticleUVFlipMode : int
    {
        None = 0,
        FlipUV = 1,
        FlipUOnly = 2,
        FlipVOnly = 3,
        RandomFlipUV = 4,
        RandomFlipUOnly = 5,
        RandomFlipVOnly = 6,
        RandomFlipUVIndependent = 7,
        EParticleUVFlipMode_MAX = 8,
    }
    public enum EParticleSortMode : int
    {
        PSORTMODE_None = 0,
        PSORTMODE_ViewProjDepth = 1,
        PSORTMODE_DistanceToView = 2,
        PSORTMODE_Age_OldestFirst = 3,
        PSORTMODE_Age_NewestFirst = 4,
        PSORTMODE_MAX = 5,
    }
    public enum EEmitterNormalsMode : int
    {
        ENM_CameraFacing = 0,
        ENM_Spherical = 1,
        ENM_Cylindrical = 2,
        ENM_MAX = 3,
    }
    public enum EEmitterDynamicParameterValue : int
    {
        EDPV_UserSet = 0,
        EDPV_AutoSet = 1,
        EDPV_VelocityX = 2,
        EDPV_VelocityY = 3,
        EDPV_VelocityZ = 4,
        EDPV_VelocityMag = 5,
        EDPV_MAX = 6,
    }
    public enum EParticleAxisLock : int
    {
        EPAL_NONE = 0,
        EPAL_X = 1,
        EPAL_Y = 2,
        EPAL_Z = 3,
        EPAL_NEGATIVE_X = 4,
        EPAL_NEGATIVE_Y = 5,
        EPAL_NEGATIVE_Z = 6,
        EPAL_ROTATE_X = 7,
        EPAL_ROTATE_Y = 8,
        EPAL_ROTATE_Z = 9,
        EPAL_MAX = 10,
    }
    public enum EOrbitChainMode : int
    {
        EOChainMode_Add = 0,
        EOChainMode_Scale = 1,
        EOChainMode_Link = 2,
        EOChainMode_MAX = 3,
    }
    public enum ELocationSkelVertSurfaceSource : int
    {
        VERTSURFACESOURCE_Vert = 0,
        VERTSURFACESOURCE_Surface = 1,
        VERTSURFACESOURCE_MAX = 2,
    }
    public enum CylinderHeightAxis : int
    {
        PMLPC_HEIGHTAXIS_X = 0,
        PMLPC_HEIGHTAXIS_Y = 1,
        PMLPC_HEIGHTAXIS_Z = 2,
        PMLPC_HEIGHTAXIS_MAX = 3,
    }
    public enum ELocationEmitterSelectionMethod : int
    {
        ELESM_Random = 0,
        ELESM_Sequential = 1,
        ELESM_MAX = 2,
    }
    public enum ELocationBoneSocketSource : int
    {
        BONESOCKETSOURCE_Bones = 0,
        BONESOCKETSOURCE_Sockets = 1,
        BONESOCKETSOURCE_MAX = 2,
    }
    public enum ELocationBoneSocketSelectionMethod : int
    {
        BONESOCKETSEL_Sequential = 0,
        BONESOCKETSEL_Random = 1,
        BONESOCKETSEL_MAX = 2,
    }
    public enum EParticleCollisionResponse : int
    {
        Bounce = 0,
        Stop = 1,
        Kill = 2,
        EParticleCollisionResponse_MAX = 3,
    }
    public enum EParticleCollisionComplete : int
    {
        EPCC_Kill = 0,
        EPCC_Freeze = 1,
        EPCC_HaltCollisions = 2,
        EPCC_FreezeTranslation = 3,
        EPCC_FreezeRotation = 4,
        EPCC_FreezeMovement = 5,
        EPCC_MAX = 6,
    }
    public enum EParticleCameraOffsetUpdateMethod : int
    {
        EPCOUM_DirectSet = 0,
        EPCOUM_Additive = 1,
        EPCOUM_Scalar = 2,
        EPCOUM_MAX = 3,
    }
    public enum BeamModifierType : int
    {
        PEB2MT_Source = 0,
        PEB2MT_Target = 1,
        PEB2MT_MAX = 2,
    }
    public enum Beam2SourceTargetMethod : int
    {
        PEB2STM_Default = 0,
        PEB2STM_UserSet = 1,
        PEB2STM_Emitter = 2,
        PEB2STM_Particle = 3,
        PEB2STM_Actor = 4,
        PEB2STM_MAX = 5,
    }
    public enum Beam2SourceTargetTangentMethod : int
    {
        PEB2STTM_Direct = 0,
        PEB2STTM_UserSet = 1,
        PEB2STTM_Distribution = 2,
        PEB2STTM_Emitter = 3,
        PEB2STTM_MAX = 4,
    }
    public enum EAttractorParticleSelectionMethod : int
    {
        EAPSM_Random = 0,
        EAPSM_Sequential = 1,
        EAPSM_MAX = 2,
    }
    public enum EModuleType : int
    {
        EPMT_General = 0,
        EPMT_TypeData = 1,
        EPMT_Beam = 2,
        EPMT_Trail = 3,
        EPMT_Spawn = 4,
        EPMT_Required = 5,
        EPMT_Event = 6,
        EPMT_Light = 7,
        EPMT_SubUV = 8,
        EPMT_MAX = 9,
    }
    public enum EParticleSourceSelectionMethod : int
    {
        EPSSM_Random = 0,
        EPSSM_Sequential = 1,
        EPSSM_MAX = 2,
    }
    public enum EParticleDetailMode : int
    {
        PDM_Low = 0,
        PDM_Medium = 1,
        PDM_High = 2,
        PDM_MAX = 3,
    }
    public enum EParticleSignificanceLevel : int
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Critical = 3,
        Num = 4,
        EParticleSignificanceLevel_MAX = 5,
    }
    public enum EParticleSystemInsignificanceReaction : int
    {
        Auto = 0,
        Complete = 1,
        DisableTick = 2,
        DisableTickAndKill = 3,
        Num = 4,
        EParticleSystemInsignificanceReaction_MAX = 5,
    }
    public enum EParticleBurstMethod : int
    {
        EPBM_Instant = 0,
        EPBM_Interpolated = 1,
        EPBM_MAX = 2,
    }
    public enum EParticleSubUVInterpMethod : int
    {
        PSUVIM_None = 0,
        PSUVIM_Linear = 1,
        PSUVIM_Linear_Blend = 2,
        PSUVIM_Random = 3,
        PSUVIM_Random_Blend = 4,
        PSUVIM_MAX = 5,
    }
    public enum EEmitterRenderMode : int
    {
        ERM_Normal = 0,
        ERM_Point = 1,
        ERM_Cross = 2,
        ERM_LightsOnly = 3,
        ERM_None = 4,
        ERM_MAX = 5,
    }
    public enum ENavLinkDirection : int
    {
        BothWays = 0,
        LeftToRight = 1,
        RightToLeft = 2,
        ENavLinkDirection_MAX = 3,
    }
    public enum ENavigationOptionFlag : int
    {
        Default = 0,
        Enable = 1,
        Disable = 2,
        MAX = 3,
    }
    public enum ENavDataGatheringMode : int
    {
        Default = 0,
        Instant = 1,
        Lazy = 2,
        ENavDataGatheringMode_MAX = 3,
    }
    public enum ENavDataGatheringModeConfig : int
    {
        Invalid = 0,
        Instant = 1,
        Lazy = 2,
        ENavDataGatheringModeConfig_MAX = 3,
    }
    public enum ENavPathEvent : int
    {
        Cleared = 0,
        NewPath = 1,
        UpdatedDueToGoalMoved = 2,
        UpdatedDueToNavigationChanged = 3,
        Invalidated = 4,
        RePathFailed = 5,
        MetaPathUpdate = 6,
        Custom = 7,
        ENavPathEvent_MAX = 8,
    }
    public enum ENavigationQueryResult : int
    {
        Invalid = 0,
        Error = 1,
        Fail = 2,
        Success = 3,
        ENavigationQueryResult_MAX = 4,
    }
    public enum FNavigationSystemRunMode : int
    {
        InvalidMode = 0,
        GameMode = 1,
        EditorMode = 2,
        SimulationMode = 3,
        PIEMode = 4,
        InferFromWorldMode = 5,
        FNavigationSystemRunMode_MAX = 6,
    }
    public enum EMicroTransactionDelegate : int
    {
        MTD_PurchaseQueryComplete = 0,
        MTD_PurchaseComplete = 1,
        MTD_MAX = 2,
    }
    public enum EMicroTransactionResult : int
    {
        MTR_Succeeded = 0,
        MTR_Failed = 1,
        MTR_Canceled = 2,
        MTR_RestoredFromServer = 3,
        MTR_MAX = 4,
    }
    public enum EVertexPaintAxis : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        EVertexPaintAxis_MAX = 3,
    }
    public enum EMeshFeatureImportance : int
    {
        Off = 0,
        Lowest = 1,
        Low = 2,
        Normal = 3,
        High = 4,
        Highest = 5,
        EMeshFeatureImportance_MAX = 6,
    }
    public enum EStaticMeshReductionTerimationCriterion : int
    {
        Triangles = 0,
        Vertices = 1,
        Any = 2,
        EStaticMeshReductionTerimationCriterion_MAX = 3,
    }
    public enum ELandscapeCullingPrecision : int
    {
        High = 0,
        Medium = 1,
        Low = 2,
        ELandscapeCullingPrecision_MAX = 3,
    }
    public enum EProxyNormalComputationMethod : int
    {
        AngleWeighted = 0,
        AreaWeighted = 1,
        EqualWeighted = 2,
        EProxyNormalComputationMethod_MAX = 3,
    }
    public enum EMeshLODSelectionType : int
    {
        AllLODs = 0,
        SpecificLOD = 1,
        CalculateLOD = 2,
        LowestDetailLOD = 3,
        EMeshLODSelectionType_MAX = 4,
    }
    public enum EMeshMergeType : int
    {
        MeshMergeType_Default = 0,
        MeshMergeType_MergeActor = 1,
        MeshMergeType_MAX = 2,
    }
    public enum EUVOutput : int
    {
        DoNotOutputChannel = 0,
        OutputChannel = 1,
        EUVOutput_MAX = 2,
    }
    public enum EMeshInstancingReplacementMethod : int
    {
        RemoveOriginalActors = 0,
        KeepOriginalActorsAsEditorOnly = 1,
        EMeshInstancingReplacementMethod_MAX = 2,
    }
    public enum EMaterialDomain : int
    {
        MD_Surface = 0,
        MD_DeferredDecal = 1,
        MD_LightFunction = 2,
        MD_Volume = 3,
        MD_PostProcess = 4,
        MD_UI = 5,
        MD_RuntimeVirtualTexture = 6,
        MD_MAX = 7,
    }
    public enum ESceneTextureId : int
    {
        PPI_SceneColor = 0,
        PPI_SceneDepth = 1,
        PPI_DiffuseColor = 2,
        PPI_SpecularColor = 3,
        PPI_SubsurfaceColor = 4,
        PPI_BaseColor = 5,
        PPI_Specular = 6,
        PPI_Metallic = 7,
        PPI_WorldNormal = 8,
        PPI_SeparateTranslucency = 9,
        PPI_Opacity = 10,
        PPI_Roughness = 11,
        PPI_MaterialAO = 12,
        PPI_CustomDepth = 13,
        PPI_PostProcessInput0 = 14,
        PPI_PostProcessInput1 = 15,
        PPI_PostProcessInput2 = 16,
        PPI_PostProcessInput3 = 17,
        PPI_PostProcessInput4 = 18,
        PPI_PostProcessInput5 = 19,
        PPI_PostProcessInput6 = 20,
        PPI_DecalMask = 21,
        PPI_ShadingModelColor = 22,
        PPI_ShadingModelID = 23,
        PPI_AmbientOcclusion = 24,
        PPI_CustomStencil = 25,
        PPI_StoredBaseColor = 26,
        PPI_StoredSpecular = 27,
        PPI_Velocity = 28,
        PPI_WorldTangent = 29,
        PPI_Anisotropy = 30,
        PPI_MAX = 31,
    }
    public enum ETextureSizingType : int
    {
        TextureSizingType_UseSingleTextureSize = 0,
        TextureSizingType_UseAutomaticBiasedSizes = 1,
        TextureSizingType_UseManualOverrideTextureSize = 2,
        TextureSizingType_UseSimplygonAutomaticSizing = 3,
        TextureSizingType_MAX = 4,
    }
    public enum EMaterialMergeType : int
    {
        MaterialMergeType_Default = 0,
        MaterialMergeType_Simplygon = 1,
        MaterialMergeType_MAX = 2,
    }
    public enum EMaterialParameterAssociation : int
    {
        LayerParameter = 0,
        BlendParameter = 1,
        GlobalParameter = 2,
        EMaterialParameterAssociation_MAX = 3,
    }
    public enum EMaterialLayerLinkState : int
    {
        Uninitialized = 0,
        LinkedToParent = 1,
        UnlinkedFromParent = 2,
        NotFromParent = 3,
        EMaterialLayerLinkState_MAX = 4,
    }
    public enum EMaterialUsage : int
    {
        MATUSAGE_SkeletalMesh = 0,
        MATUSAGE_ParticleSprites = 1,
        MATUSAGE_BeamTrails = 2,
        MATUSAGE_MeshParticles = 3,
        MATUSAGE_StaticLighting = 4,
        MATUSAGE_MorphTargets = 5,
        MATUSAGE_SplineMesh = 6,
        MATUSAGE_InstancedStaticMeshes = 7,
        MATUSAGE_GeometryCollections = 8,
        MATUSAGE_Clothing = 9,
        MATUSAGE_NiagaraSprites = 10,
        MATUSAGE_NiagaraRibbons = 11,
        MATUSAGE_NiagaraMeshParticles = 12,
        MATUSAGE_GeometryCache = 13,
        MATUSAGE_Water = 14,
        MATUSAGE_HairStrands = 15,
        MATUSAGE_LidarPointCloud = 16,
        MATUSAGE_VirtualHeightfieldMesh = 17,
        MATUSAGE_MAX = 18,
    }
    public enum EMaterialFunctionUsage : int
    {
        Default = 0,
        MaterialLayer = 1,
        MaterialLayerBlend = 2,
        EMaterialFunctionUsage_MAX = 3,
    }
    public enum EWorldPositionIncludedOffsets : int
    {
        WPT_Default = 0,
        WPT_ExcludeAllShaderOffsets = 1,
        WPT_CameraRelative = 2,
        WPT_CameraRelativeNoOffsets = 3,
        WPT_MAX = 4,
    }
    public enum EMaterialExposedViewProperty : int
    {
        MEVP_BufferSize = 0,
        MEVP_FieldOfView = 1,
        MEVP_TanHalfFieldOfView = 2,
        MEVP_ViewSize = 3,
        MEVP_WorldSpaceViewPosition = 4,
        MEVP_WorldSpaceCameraPosition = 5,
        MEVP_ViewportOffset = 6,
        MEVP_TemporalSampleCount = 7,
        MEVP_TemporalSampleIndex = 8,
        MEVP_TemporalSampleOffset = 9,
        MEVP_RuntimeVirtualTextureOutputLevel = 10,
        MEVP_RuntimeVirtualTextureOutputDerivative = 11,
        MEVP_PreExposure = 12,
        MEVP_RuntimeVirtualTextureMaxLevel = 13,
        MEVP_MAX = 14,
    }
    public enum EVectorNoiseFunction : int
    {
        VNF_CellnoiseALU = 0,
        VNF_VectorALU = 1,
        VNF_GradientALU = 2,
        VNF_CurlALU = 3,
        VNF_VoronoiALU = 4,
        VNF_MAX = 5,
    }
    public enum EMaterialPositionTransformSource : int
    {
        TRANSFORMPOSSOURCE_Local = 0,
        TRANSFORMPOSSOURCE_World = 1,
        TRANSFORMPOSSOURCE_TranslatedWorld = 2,
        TRANSFORMPOSSOURCE_View = 3,
        TRANSFORMPOSSOURCE_Camera = 4,
        TRANSFORMPOSSOURCE_Particle = 5,
        TRANSFORMPOSSOURCE_MAX = 6,
    }
    public enum EMaterialVectorCoordTransformSource : int
    {
        TRANSFORMSOURCE_Tangent = 0,
        TRANSFORMSOURCE_Local = 1,
        TRANSFORMSOURCE_World = 2,
        TRANSFORMSOURCE_View = 3,
        TRANSFORMSOURCE_Camera = 4,
        TRANSFORMSOURCE_ParticleWorld = 5,
        TRANSFORMSOURCE_MAX = 6,
    }
    public enum EMaterialVectorCoordTransform : int
    {
        TRANSFORM_Tangent = 0,
        TRANSFORM_Local = 1,
        TRANSFORM_World = 2,
        TRANSFORM_View = 3,
        TRANSFORM_Camera = 4,
        TRANSFORM_ParticleWorld = 5,
        TRANSFORM_MAX = 6,
    }
    public enum ETextureMipValueMode : int
    {
        TMVM_None = 0,
        TMVM_MipLevel = 1,
        TMVM_MipBias = 2,
        TMVM_Derivative = 3,
        TMVM_MAX = 4,
    }
    public enum EMaterialExposedTextureProperty : int
    {
        TMTM_TextureSize = 0,
        TMTM_TexelSize = 1,
        TMTM_MAX = 2,
    }
    public enum ESpeedTreeGeometryType : int
    {
        STG_Branch = 0,
        STG_Frond = 1,
        STG_Leaf = 2,
        STG_FacingLeaf = 3,
        STG_Billboard = 4,
        STG_MAX = 5,
    }
    public enum ESpeedTreeWindType : int
    {
        STW_None = 0,
        STW_Fastest = 1,
        STW_Fast = 2,
        STW_Better = 3,
        STW_Best = 4,
        STW_Palm = 5,
        STW_BestPlus = 6,
        STW_MAX = 7,
    }
    public enum ESpeedTreeLODType : int
    {
        STLOD_Pop = 0,
        STLOD_Smooth = 1,
        STLOD_MAX = 2,
    }
    public enum EMaterialSceneAttributeInputMode : int
    {
        Coordinates = 0,
        OffsetFraction = 1,
        EMaterialSceneAttributeInputMode_MAX = 2,
    }
    public enum ERuntimeVirtualTextureMipValueMode : int
    {
        RVTMVM_None = 0,
        RVTMVM_MipLevel = 1,
        RVTMVM_MipBias = 2,
        RVTMVM_MAX = 3,
    }
    public enum ERuntimeVirtualTextureTextureAddressMode : int
    {
        RVTTA_Clamp = 0,
        RVTTA_Wrap = 1,
        RVTTA_MAX = 2,
    }
    public enum ENoiseFunction : int
    {
        NOISEFUNCTION_SimplexTex = 0,
        NOISEFUNCTION_GradientTex = 1,
        NOISEFUNCTION_GradientTex3D = 2,
        NOISEFUNCTION_GradientALU = 3,
        NOISEFUNCTION_ValueALU = 4,
        NOISEFUNCTION_VoronoiALU = 5,
        NOISEFUNCTION_MAX = 6,
    }
    public enum EFunctionInputType : int
    {
        FunctionInput_Scalar = 0,
        FunctionInput_Vector2 = 1,
        FunctionInput_Vector3 = 2,
        FunctionInput_Vector4 = 3,
        FunctionInput_Texture2D = 4,
        FunctionInput_TextureCube = 5,
        FunctionInput_Texture2DArray = 6,
        FunctionInput_VolumeTexture = 7,
        FunctionInput_StaticBool = 8,
        FunctionInput_MaterialAttributes = 9,
        FunctionInput_TextureExternal = 10,
        FunctionInput_MAX = 11,
    }
    public enum EDepthOfFieldFunctionValue : int
    {
        TDOF_NearAndFarMask = 0,
        TDOF_NearMask = 1,
        TDOF_FarMask = 2,
        TDOF_CircleOfConfusionRadius = 3,
        TDOF_MAX = 4,
    }
    public enum ECustomMaterialOutputType : int
    {
        CMOT_Float1 = 0,
        CMOT_Float2 = 1,
        CMOT_Float3 = 2,
        CMOT_Float4 = 3,
        CMOT_MaterialAttributes = 4,
        CMOT_MAX = 5,
    }
    public enum EClampMode : int
    {
        CMODE_Clamp = 0,
        CMODE_ClampMin = 1,
        CMODE_ClampMax = 2,
        CMODE_MAX = 3,
    }
    public enum EChannelMaskParameterColor : int
    {
        Red = 0,
        Green = 1,
        Blue = 2,
        Alpha = 3,
        EChannelMaskParameterColor_MAX = 4,
    }
    public enum EMaterialAttributeBlend : int
    {
        Blend = 0,
        UseA = 1,
        UseB = 2,
        EMaterialAttributeBlend_MAX = 3,
    }
    public enum ETextureColorChannel : int
    {
        TCC_Red = 0,
        TCC_Green = 1,
        TCC_Blue = 2,
        TCC_Alpha = 3,
        TCC_MAX = 4,
    }
    public enum EDecalBlendMode : int
    {
        DBM_Translucent = 0,
        DBM_Stain = 1,
        DBM_Normal = 2,
        DBM_Emissive = 3,
        DBM_DBuffer_ColorNormalRoughness = 4,
        DBM_DBuffer_Color = 5,
        DBM_DBuffer_ColorNormal = 6,
        DBM_DBuffer_ColorRoughness = 7,
        DBM_DBuffer_Normal = 8,
        DBM_DBuffer_NormalRoughness = 9,
        DBM_DBuffer_Roughness = 10,
        DBM_DBuffer_Emissive = 11,
        DBM_DBuffer_AlphaComposite = 12,
        DBM_DBuffer_EmissiveAlphaComposite = 13,
        DBM_Volumetric_DistanceFunction = 14,
        DBM_AlphaComposite = 15,
        DBM_AmbientOcclusion = 16,
        DBM_MAX = 17,
    }
    public enum EMaterialDecalResponse : int
    {
        MDR_None = 0,
        MDR_ColorNormalRoughness = 1,
        MDR_Color = 2,
        MDR_ColorNormal = 3,
        MDR_ColorRoughness = 4,
        MDR_Normal = 5,
        MDR_NormalRoughness = 6,
        MDR_Roughness = 7,
        MDR_MAX = 8,
    }
    public enum ESyncOption : int
    {
        Drive = 0,
        Passive = 1,
        Disabled = 2,
        ESyncOption_MAX = 3,
    }
    public enum EStreamingVolumeUsage : int
    {
        SVB_Loading = 0,
        SVB_LoadingAndVisibility = 1,
        SVB_VisibilityBlockingOnLoad = 2,
        SVB_BlockingOnLoad = 3,
        SVB_LoadingNotVisible = 4,
        SVB_MAX = 5,
    }
    public enum ERoundingMode : int
    {
        HalfToEven = 0,
        HalfFromZero = 1,
        HalfToZero = 2,
        FromZero = 3,
        ToZero = 4,
        ToNegativeInfinity = 5,
        ToPositiveInfinity = 6,
        ERoundingMode_MAX = 7,
    }
    public enum EEasingFunc : int
    {
        Linear = 0,
        Step = 1,
        SinusoidalIn = 2,
        SinusoidalOut = 3,
        SinusoidalInOut = 4,
        EaseIn = 5,
        EaseOut = 6,
        EaseInOut = 7,
        ExpoIn = 8,
        ExpoOut = 9,
        ExpoInOut = 10,
        CircularIn = 11,
        CircularOut = 12,
        CircularInOut = 13,
        EEasingFunc_MAX = 14,
    }
    public enum ELerpInterpolationMode : int
    {
        QuatInterp = 0,
        EulerInterp = 1,
        DualQuatInterp = 2,
        ELerpInterpolationMode_MAX = 3,
    }
    public enum EMatrixColumns : int
    {
        First = 0,
        Second = 1,
        Third = 2,
        Fourth = 3,
        EMatrixColumns_MAX = 4,
    }
    public enum EMIDCreationFlags : int
    {
        None = 0,
        Transient = 1,
        EMIDCreationFlags_MAX = 2,
    }
    public enum ESlateGesture : int
    {
        None = 0,
        Scroll = 1,
        Magnify = 2,
        Swipe = 3,
        Rotate = 4,
        LongPress = 5,
        ESlateGesture_MAX = 6,
    }
    public enum EVisibilityTrackAction : int
    {
        EVTA_Hide = 0,
        EVTA_Show = 1,
        EVTA_Toggle = 2,
        EVTA_MAX = 3,
    }
    public enum EVisibilityTrackCondition : int
    {
        EVTC_Always = 0,
        EVTC_GoreEnabled = 1,
        EVTC_GoreDisabled = 2,
        EVTC_MAX = 3,
    }
    public enum ETrackToggleAction : int
    {
        ETTA_Off = 0,
        ETTA_On = 1,
        ETTA_Toggle = 2,
        ETTA_Trigger = 3,
        ETTA_MAX = 4,
    }
    public enum EInterpMoveAxis : int
    {
        AXIS_TranslationX = 0,
        AXIS_TranslationY = 1,
        AXIS_TranslationZ = 2,
        AXIS_RotationX = 3,
        AXIS_RotationY = 4,
        AXIS_RotationZ = 5,
        AXIS_MAX = 6,
    }
    public enum EInterpTrackMoveRotMode : int
    {
        IMR_Keyframed = 0,
        IMR_LookAtGroup = 1,
        IMR_Ignore = 2,
        IMR_MAX = 3,
    }
    public enum ETrackActiveCondition : int
    {
        ETAC_Always = 0,
        ETAC_GoreEnabled = 1,
        ETAC_GoreDisabled = 2,
        ETAC_MAX = 3,
    }
    public enum EAnimAlphaInputType : int
    {
        Float = 0,
        Bool = 1,
        Curve = 2,
        EAnimAlphaInputType_MAX = 3,
    }
    public enum EControllerAnalogStick : int
    {
        CAS_LeftStick = 0,
        CAS_RightStick = 1,
        CAS_MAX = 2,
    }
    public enum EAdManagerDelegate : int
    {
        AMD_ClickedBanner = 0,
        AMD_UserClosedAd = 1,
        AMD_MAX = 2,
    }
    public enum EImportanceWeight : int
    {
        Luminance = 0,
        Red = 1,
        Green = 2,
        Blue = 3,
        Alpha = 4,
        EImportanceWeight_MAX = 5,
    }
    public enum EHitProxyPriority : int
    {
        HPP_World = 0,
        HPP_Wireframe = 1,
        HPP_Foreground = 2,
        HPP_UI = 3,
        HPP_MAX = 4,
    }
    public enum EWindowMode : int
    {
        Fullscreen = 0,
        WindowedFullscreen = 1,
        Windowed = 2,
        EWindowMode_MAX = 3,
    }
    public enum ESuggestProjVelocityTraceOption : int
    {
        DoNotTrace = 0,
        TraceFullPath = 1,
        OnlyTraceWhileAscending = 2,
        ESuggestProjVelocityTraceOption_MAX = 3,
    }
    public enum EStandbyType : int
    {
        STDBY_Rx = 0,
        STDBY_Tx = 1,
        STDBY_BadPing = 2,
        STDBY_MAX = 3,
    }
    public enum EFontImportCharacterSet : int
    {
        FontICS_Default = 0,
        FontICS_Ansi = 1,
        FontICS_Symbol = 2,
        FontICS_MAX = 3,
    }
    public enum EFontCacheType : int
    {
        Offline = 0,
        Runtime = 1,
        EFontCacheType_MAX = 2,
    }
    public enum EAspectRatioAxisConstraint : int
    {
        AspectRatio_MaintainYFOV = 0,
        AspectRatio_MaintainXFOV = 1,
        AspectRatio_MajorAxisFOV = 2,
        AspectRatio_MAX = 3,
    }
    public enum ESceneDepthPriorityGroup : int
    {
        SDPG_World = 0,
        SDPG_Foreground = 1,
        SDPG_MAX = 2,
    }
    public enum EIndirectLightingCacheQuality : int
    {
        ILCQ_Off = 0,
        ILCQ_Point = 1,
        ILCQ_Volume = 2,
        ILCQ_MAX = 3,
    }
    public enum ELightmapType : int
    {
        Default = 0,
        ForceSurface = 1,
        ForceVolumetric = 2,
        ELightmapType_MAX = 3,
    }
    public enum EOcclusionCombineMode : int
    {
        OCM_Minimum = 0,
        OCM_Multiply = 1,
        OCM_MAX = 2,
    }
    public enum EBlendMode : int
    {
        BLEND_Opaque = 0,
        BLEND_Masked = 1,
        BLEND_Translucent = 2,
        BLEND_Additive = 3,
        BLEND_Modulate = 4,
        BLEND_AlphaComposite = 5,
        BLEND_AlphaHoldout = 6,
        BLEND_MAX = 7,
    }
    public enum ESamplerSourceMode : int
    {
        SSM_FromTextureAsset = 0,
        SSM_Wrap_WorldGroupSettings = 1,
        SSM_Clamp_WorldGroupSettings = 2,
        SSM_MAX = 3,
    }
    public enum ETranslucencyLightingMode : int
    {
        TLM_VolumetricNonDirectional = 0,
        TLM_VolumetricDirectional = 1,
        TLM_VolumetricPerVertexNonDirectional = 2,
        TLM_VolumetricPerVertexDirectional = 3,
        TLM_Surface = 4,
        TLM_SurfacePerPixelLighting = 5,
        TLM_MAX = 6,
    }
    public enum ERefractionMode : int
    {
        RM_IndexOfRefraction = 0,
        RM_PixelNormalOffset = 1,
        RM_MAX = 2,
    }
    public enum ETranslucentSortPolicy : int
    {
        SortByDistance = 0,
        SortByProjectedZ = 1,
        SortAlongAxis = 2,
        ETranslucentSortPolicy_MAX = 3,
    }
    public enum ESceneCaptureSource : int
    {
        SCS_SceneColorHDR = 0,
        SCS_SceneColorHDRNoAlpha = 1,
        SCS_FinalColorLDR = 2,
        SCS_SceneColorSceneDepth = 3,
        SCS_SceneDepth = 4,
        SCS_DeviceDepth = 5,
        SCS_Normal = 6,
        SCS_BaseColor = 7,
        SCS_FinalColorHDR = 8,
        SCS_FinalToneCurveHDR = 9,
        SCS_MAX = 10,
    }
    public enum ESceneCaptureCompositeMode : int
    {
        SCCM_Overwrite = 0,
        SCCM_Additive = 1,
        SCCM_Composite = 2,
        SCCM_MAX = 3,
    }
    public enum EGBufferFormat : int
    {
        Force8BitsPerChannel = 0,
        Default = 1,
        HighPrecisionNormals = 3,
        Force16BitsPerChannel = 5,
        EGBufferFormat_MAX = 6,
    }
    public enum ETrailWidthMode : int
    {
        ETrailWidthMode_FromCentre = 0,
        ETrailWidthMode_FromFirst = 1,
        ETrailWidthMode_FromSecond = 2,
        ETrailWidthMode_MAX = 3,
    }
    public enum EParticleCollisionMode : int
    {
        SceneDepth = 0,
        DistanceField = 1,
        EParticleCollisionMode_MAX = 2,
    }
    public enum EMaterialShadingModel : int
    {
        MSM_Unlit = 0,
        MSM_DefaultLit = 1,
        MSM_Subsurface = 2,
        MSM_PreintegratedSkin = 3,
        MSM_ClearCoat = 4,
        MSM_SubsurfaceProfile = 5,
        MSM_TwoSidedFoliage = 6,
        MSM_Hair = 7,
        MSM_Cloth = 8,
        MSM_Eye = 9,
        MSM_SingleLayerWater = 10,
        MSM_ThinTranslucent = 11,
        MSM_LitReactive = 12,
        MSM_NUM = 13,
        MSM_FromMaterialExpression = 14,
        MSM_MAX = 15,
    }
    public enum EMaterialTessellationMode : int
    {
        MTM_NoTessellation = 0,
        MTM_FlatTessellation = 1,
        MTM_PNTriangles = 2,
        MTM_MAX = 3,
    }
    public enum EMaterialSamplerType : int
    {
        SAMPLERTYPE_Color = 0,
        SAMPLERTYPE_Grayscale = 1,
        SAMPLERTYPE_Alpha = 2,
        SAMPLERTYPE_Normal = 3,
        SAMPLERTYPE_Masks = 4,
        SAMPLERTYPE_DistanceFieldFont = 5,
        SAMPLERTYPE_LinearColor = 6,
        SAMPLERTYPE_LinearGrayscale = 7,
        SAMPLERTYPE_Data = 8,
        SAMPLERTYPE_External = 9,
        SAMPLERTYPE_VirtualColor = 10,
        SAMPLERTYPE_VirtualGrayscale = 11,
        SAMPLERTYPE_VirtualAlpha = 12,
        SAMPLERTYPE_VirtualNormal = 13,
        SAMPLERTYPE_VirtualMasks = 14,
        SAMPLERTYPE_VirtualLinearColor = 15,
        SAMPLERTYPE_VirtualLinearGrayscale = 16,
        SAMPLERTYPE_MAX = 17,
    }
    public enum EMaterialStencilCompare : int
    {
        MSC_Less = 0,
        MSC_LessEqual = 1,
        MSC_Greater = 2,
        MSC_GreaterEqual = 3,
        MSC_Equal = 4,
        MSC_NotEqual = 5,
        MSC_Never = 6,
        MSC_Always = 7,
        MSC_Count = 8,
        MSC_MAX = 9,
    }
    public enum EMaterialShadingRate : int
    {
        MSR_1x1 = 0,
        MSR_2x1 = 1,
        MSR_1x2 = 2,
        MSR_2x2 = 3,
        MSR_4x2 = 4,
        MSR_2x4 = 5,
        MSR_4x4 = 6,
        MSR_Count = 7,
        MSR_MAX = 8,
    }
    public enum ELightingBuildQuality : int
    {
        Quality_Preview = 0,
        Quality_Medium = 1,
        Quality_High = 2,
        Quality_Production = 3,
        Quality_MAX = 4,
    }
    public enum ENetworkSmoothingMode : int
    {
        Disabled = 0,
        Linear = 1,
        Exponential = 2,
        Replay = 3,
        ENetworkSmoothingMode_MAX = 4,
    }
    public enum ECollisionChannel : int
    {
        ECC_WorldStatic = 0,
        ECC_WorldDynamic = 1,
        ECC_Pawn = 2,
        ECC_Visibility = 3,
        ECC_Camera = 4,
        ECC_PhysicsBody = 5,
        ECC_Vehicle = 6,
        ECC_Destructible = 7,
        ECC_EngineTraceChannel1 = 8,
        ECC_EngineTraceChannel2 = 9,
        ECC_EngineTraceChannel3 = 10,
        ECC_EngineTraceChannel4 = 11,
        ECC_EngineTraceChannel5 = 12,
        ECC_EngineTraceChannel6 = 13,
        ECC_GameTraceChannel1 = 14,
        ECC_GameTraceChannel2 = 15,
        ECC_GameTraceChannel3 = 16,
        ECC_GameTraceChannel4 = 17,
        ECC_GameTraceChannel5 = 18,
        ECC_GameTraceChannel6 = 19,
        ECC_GameTraceChannel7 = 20,
        ECC_GameTraceChannel8 = 21,
        ECC_GameTraceChannel9 = 22,
        ECC_GameTraceChannel10 = 23,
        ECC_GameTraceChannel11 = 24,
        ECC_GameTraceChannel12 = 25,
        ECC_GameTraceChannel13 = 26,
        ECC_GameTraceChannel14 = 27,
        ECC_GameTraceChannel15 = 28,
        ECC_GameTraceChannel16 = 29,
        ECC_GameTraceChannel17 = 30,
        ECC_GameTraceChannel18 = 31,
        ECC_OverlapAll_Deprecated = 32,
        ECC_MAX = 33,
    }
    public enum EOverlapFilterOption : int
    {
        OverlapFilter_All = 0,
        OverlapFilter_DynamicOnly = 1,
        OverlapFilter_StaticOnly = 2,
        OverlapFilter_MAX = 3,
    }
    public enum ECollisionResponse : int
    {
        ECR_Ignore = 0,
        ECR_Overlap = 1,
        ECR_Block = 2,
        ECR_MAX = 3,
    }
    public enum EFilterInterpolationType : int
    {
        BSIT_Average = 0,
        BSIT_Linear = 1,
        BSIT_Cubic = 2,
        BSIT_MAX = 3,
    }
    public enum ETimelineSigType : int
    {
        ETS_EventSignature = 0,
        ETS_FloatSignature = 1,
        ETS_VectorSignature = 2,
        ETS_LinearColorSignature = 3,
        ETS_InvalidSignature = 4,
        ETS_MAX = 5,
    }
    public enum ECollisionEnabled : int
    {
        NoCollision = 0,
        QueryOnly = 1,
        PhysicsOnly = 2,
        QueryAndPhysics = 3,
        ECollisionEnabled_MAX = 4,
    }
    public enum ELightMapPaddingType : int
    {
        LMPT_NormalPadding = 0,
        LMPT_PrePadding = 1,
        LMPT_NoPadding = 2,
        LMPT_MAX = 3,
    }
    public enum EShadowMapFlags : int
    {
        SMF_None = 0,
        SMF_Streamed = 1,
        SMF_MAX = 2,
    }
    public enum EUpdateRateShiftBucket : int
    {
        ShiftBucket0 = 0,
        ShiftBucket1 = 1,
        ShiftBucket2 = 2,
        ShiftBucket3 = 3,
        ShiftBucket4 = 4,
        ShiftBucket5 = 5,
        ShiftBucketMax = 6,
        EUpdateRateShiftBucket_MAX = 7,
    }
    public enum ENetDormancy : int
    {
        DORM_Never = 0,
        DORM_Awake = 1,
        DORM_DormantAll = 2,
        DORM_DormantPartial = 3,
        DORM_Initial = 4,
        DORM_MAX = 5,
    }
    public enum EAutoReceiveInput : int
    {
        Disabled = 0,
        Player0 = 1,
        Player1 = 2,
        Player2 = 3,
        Player3 = 4,
        Player4 = 5,
        Player5 = 6,
        Player6 = 7,
        Player7 = 8,
        EAutoReceiveInput_MAX = 9,
    }
    public enum EAutoPossessAI : int
    {
        Disabled = 0,
        PlacedInWorld = 1,
        Spawned = 2,
        PlacedInWorldOrSpawned = 3,
        EAutoPossessAI_MAX = 4,
    }
    public enum EVectorQuantization : int
    {
        RoundWholeNumber = 0,
        RoundOneDecimal = 1,
        RoundTwoDecimals = 2,
        EVectorQuantization_MAX = 3,
    }
    public enum ERotatorQuantization : int
    {
        ByteComponents = 0,
        ShortComponents = 1,
        ERotatorQuantization_MAX = 2,
    }
    public enum EWalkableSlopeBehavior : int
    {
        WalkableSlope_Default = 0,
        WalkableSlope_Increase = 1,
        WalkableSlope_Decrease = 2,
        WalkableSlope_Unwalkable = 3,
        WalkableSlope_Max = 4,
    }
    public enum EPhysicalMaterialMaskColor : int
    {
        Red = 0,
        Green = 1,
        Blue = 2,
        Cyan = 3,
        Magenta = 4,
        Yellow = 5,
        White = 6,
        Black = 7,
        MAX = 8,
    }
    public enum EComponentSocketType : int
    {
        Invalid = 0,
        Bone = 1,
        Socket = 2,
        EComponentSocketType_MAX = 3,
    }
    public enum EMeshBufferAccess : int
    {
        Default = 0,
        ForceCPUAndGPU = 1,
        EMeshBufferAccess_MAX = 2,
    }
    public enum ECustomTimeStepSynchronizationState : int
    {
        Closed = 0,
        Error = 1,
        Synchronized = 2,
        Synchronizing = 3,
        ECustomTimeStepSynchronizationState_MAX = 4,
    }
    public enum EMouseCaptureMode : int
    {
        NoCapture = 0,
        CapturePermanently = 1,
        CapturePermanently_IncludingInitialMouseDown = 2,
        CaptureDuringMouseDown = 3,
        CaptureDuringRightMouseDown = 4,
        EMouseCaptureMode_MAX = 5,
    }
    public enum ENetworkLagState : int
    {
        NotLagging = 0,
        Lagging = 1,
        ENetworkLagState_MAX = 2,
    }
    public enum ETravelType : int
    {
        TRAVEL_Absolute = 0,
        TRAVEL_Partial = 1,
        TRAVEL_Relative = 2,
        TRAVEL_MAX = 3,
    }
    public enum EDemoPlayFailure : int
    {
        Generic = 0,
        DemoNotFound = 1,
        Corrupt = 2,
        InvalidVersion = 3,
        InitBase = 4,
        GameSpecificHeader = 5,
        ReplayStreamerInternal = 6,
        LoadMap = 7,
        Serialization = 8,
        EDemoPlayFailure_MAX = 9,
    }
    public enum EViewModeIndex : int
    {
        VMI_BrushWireframe = 0,
        VMI_Wireframe = 1,
        VMI_Unlit = 2,
        VMI_Lit = 3,
        VMI_Lit_DetailLighting = 4,
        VMI_LightingOnly = 5,
        VMI_LightComplexity = 6,
        VMI_ShaderComplexity = 8,
        VMI_LightmapDensity = 9,
        VMI_LitLightmapDensity = 10,
        VMI_ReflectionOverride = 11,
        VMI_VisualizeBuffer = 12,
        VMI_StationaryLightOverlap = 14,
        VMI_CollisionPawn = 15,
        VMI_CollisionVisibility = 16,
        VMI_LODColoration = 18,
        VMI_QuadOverdraw = 19,
        VMI_PrimitiveDistanceAccuracy = 20,
        VMI_MeshUVDensityAccuracy = 21,
        VMI_ShaderComplexityWithQuadOverdraw = 22,
        VMI_HLODColoration = 23,
        VMI_GroupLODColoration = 24,
        VMI_MaterialTextureScaleAccuracy = 25,
        VMI_RequiredTextureResolution = 26,
        VMI_PathTracing = 27,
        VMI_RayTracingDebug = 28,
        VMI_AstroUnlit = 29,
        VMI_Max = 30,
        VMI_Unknown = 255,
    }
    public enum EFullyLoadPackageType : int
    {
        FULLYLOAD_Map = 0,
        FULLYLOAD_Game_PreLoadClass = 1,
        FULLYLOAD_Game_PostLoadClass = 2,
        FULLYLOAD_Always = 3,
        FULLYLOAD_Mutator = 4,
        FULLYLOAD_MAX = 5,
    }
    public enum ETransitionType : int
    {
        None = 0,
        Paused = 1,
        Loading = 2,
        Saving = 3,
        Connecting = 4,
        Precaching = 5,
        WaitingToConnect = 6,
        MAX = 7,
    }
    public enum EGraphType : int
    {
        GT_Function = 0,
        GT_Ubergraph = 1,
        GT_Macro = 2,
        GT_Animation = 3,
        GT_StateMachine = 4,
        GT_MAX = 5,
    }
    public enum ECanCreateConnectionResponse : int
    {
        CONNECT_RESPONSE_MAKE = 0,
        CONNECT_RESPONSE_DISALLOW = 1,
        CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
        CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
        CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
        CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
        CONNECT_RESPONSE_MAX = 6,
    }
    public enum EBlueprintPinStyleType : int
    {
        BPST_Original = 0,
        BPST_VariantA = 1,
        BPST_MAX = 2,
    }
    public enum EEdGraphPinDirection : int
    {
        EGPD_Input = 0,
        EGPD_Output = 1,
        EGPD_MAX = 2,
    }
    public enum EPinContainerType : int
    {
        None = 0,
        Array = 1,
        Set = 2,
        Map = 3,
        EPinContainerType_MAX = 4,
    }
    public enum ENodeTitleType : int
    {
        FullTitle = 0,
        ListView = 1,
        EditableTitle = 2,
        MenuTitle = 3,
        MAX_TitleTypes = 4,
        ENodeTitleType_MAX = 5,
    }
    public enum ENodeAdvancedPins : int
    {
        NoPins = 0,
        Shown = 1,
        Hidden = 2,
        ENodeAdvancedPins_MAX = 3,
    }
    public enum ENodeEnabledState : int
    {
        Enabled = 0,
        Disabled = 1,
        DevelopmentOnly = 2,
        ENodeEnabledState_MAX = 3,
    }
    public enum EDistributionVectorLockFlags : int
    {
        EDVLF_None = 0,
        EDVLF_XY = 1,
        EDVLF_XZ = 2,
        EDVLF_YZ = 3,
        EDVLF_XYZ = 4,
        EDVLF_MAX = 5,
    }
    public enum EDistributionVectorMirrorFlags : int
    {
        EDVMF_Same = 0,
        EDVMF_Different = 1,
        EDVMF_Mirror = 2,
        EDVMF_MAX = 3,
    }
    public enum DistributionParamMode : int
    {
        DPM_Normal = 0,
        DPM_Abs = 1,
        DPM_Direct = 2,
        DPM_MAX = 3,
    }
    public enum EGrammaticalGender : int
    {
        Neuter = 0,
        Masculine = 1,
        Feminine = 2,
        Mixed = 3,
        EGrammaticalGender_MAX = 4,
    }
    public enum EGrammaticalNumber : int
    {
        Singular = 0,
        Plural = 1,
        EGrammaticalNumber_MAX = 2,
    }
    public enum EEvaluateCurveTableResult : int
    {
        RowFound = 0,
        RowNotFound = 1,
        EEvaluateCurveTableResult_MAX = 2,
    }
    public enum FDataDrivenCVarType : int
    {
        CVarFloat = 0,
        CVarInt = 1,
        CVarBool = 2,
        FDataDrivenCVarType_MAX = 3,
    }
    public enum ECustomAttributeBlendType : int
    {
        Override = 0,
        Blend = 1,
        ECustomAttributeBlendType_MAX = 2,
    }
    public enum ECurveTableMode : int
    {
        Empty = 0,
        SimpleCurves = 1,
        RichCurves = 2,
        ECurveTableMode_MAX = 3,
    }
    public enum EAngularDriveMode : int
    {
        SLERP = 0,
        TwistAndSwing = 1,
        EAngularDriveMode_MAX = 2,
    }
    public enum ECloudStorageDelegate : int
    {
        CSD_KeyValueReadComplete = 0,
        CSD_KeyValueWriteComplete = 1,
        CSD_ValueChanged = 2,
        CSD_DocumentQueryComplete = 3,
        CSD_DocumentReadComplete = 4,
        CSD_DocumentWriteComplete = 5,
        CSD_DocumentConflictDetected = 6,
        CSD_MAX = 7,
    }
    public enum ECameraProjectionMode : int
    {
        Perspective = 0,
        Orthographic = 1,
        ECameraProjectionMode_MAX = 2,
    }
    public enum ECameraShakePlaySpace : int
    {
        CameraLocal = 0,
        World = 1,
        UserDefined = 2,
        ECameraShakePlaySpace_MAX = 3,
    }
    public enum ECameraAlphaBlendMode : int
    {
        CABM_Linear = 0,
        CABM_Cubic = 1,
        CABM_MAX = 2,
    }
    public enum ECameraShakeAttenuation : int
    {
        Linear = 0,
        Quadratic = 1,
        ECameraShakeAttenuation_MAX = 2,
    }
    public enum ECameraShakeUpdateResultFlags : int
    {
        ApplyAsAbsolute = 1,
        SkipAutoScale = 2,
        SkipAutoPlaySpace = 4,
        Default = 0,
        ECameraShakeUpdateResultFlags_MAX = 5,
    }
    public enum ECameraShakeDurationType : int
    {
        Fixed = 0,
        Infinite = 1,
        Custom = 2,
        ECameraShakeDurationType_MAX = 3,
    }
    public enum ECsgOper : int
    {
        CSG_Active = 0,
        CSG_Add = 1,
        CSG_Subtract = 2,
        CSG_Intersect = 3,
        CSG_Deintersect = 4,
        CSG_None = 5,
        CSG_MAX = 6,
    }
    public enum EBrushType : int
    {
        Brush_Default = 0,
        Brush_Add = 1,
        Brush_Subtract = 2,
        Brush_MAX = 3,
    }
    public enum EDOFMode : int
    {
        Default = 0,
        SixDOF = 1,
        YZPlane = 2,
        XZPlane = 3,
        XYPlane = 4,
        CustomPlane = 5,
        None = 6,
        EDOFMode_MAX = 7,
    }
    public enum EBlueprintStatus : int
    {
        BS_Unknown = 0,
        BS_Dirty = 1,
        BS_Error = 2,
        BS_UpToDate = 3,
        BS_BeingCreated = 4,
        BS_UpToDateWithWarnings = 5,
        BS_MAX = 6,
    }
    public enum EBlueprintType : int
    {
        BPTYPE_Normal = 0,
        BPTYPE_Const = 1,
        BPTYPE_MacroLibrary = 2,
        BPTYPE_Interface = 3,
        BPTYPE_LevelScript = 4,
        BPTYPE_FunctionLibrary = 5,
        BPTYPE_MAX = 6,
    }
    public enum EBlueprintCompileMode : int
    {
        Default = 0,
        Development = 1,
        FinalRelease = 2,
        EBlueprintCompileMode_MAX = 3,
    }
    public enum EBlueprintNativizationFlag : int
    {
        Disabled = 0,
        Dependency = 1,
        ExplicitlyEnabled = 2,
        EBlueprintNativizationFlag_MAX = 3,
    }
    public enum EBlendSpaceAxis : int
    {
        BSA_None = 0,
        BSA_X = 1,
        BSA_Y = 2,
        BSA_Max = 3,
    }
    public enum ENotifyTriggerMode : int
    {
        AllAnimations = 0,
        HighestWeightedAnimation = 1,
        None = 2,
        ENotifyTriggerMode_MAX = 3,
    }
    public enum EBlendableLocation : int
    {
        BL_AfterTonemapping = 0,
        BL_BeforeTonemapping = 1,
        BL_BeforeTranslucency = 2,
        BL_ReplacingTonemapper = 3,
        BL_SSRInput = 4,
        BL_MAX = 5,
    }
    public enum EAudioVolumeLocationState : int
    {
        InsideTheVolume = 0,
        OutsideTheVolume = 1,
        EAudioVolumeLocationState_MAX = 2,
    }
    public enum EVoiceSampleRate : int
    {
        Low16000Hz = 16000,
        Normal24000Hz = 24000,
        EVoiceSampleRate_MAX = 24001,
    }
    public enum EPanningMethod : int
    {
        Linear = 0,
        EqualPower = 1,
        EPanningMethod_MAX = 2,
    }
    public enum EMonoChannelUpmixMethod : int
    {
        Linear = 0,
        EqualPower = 1,
        FullVolume = 2,
        EMonoChannelUpmixMethod_MAX = 3,
    }
    public enum EAudioOutputTarget : int
    {
        Speaker = 0,
        Controller = 1,
        ControllerFallbackToSpeaker = 2,
        EAudioOutputTarget_MAX = 3,
    }
    public enum EAudioFaderCurve : int
    {
        Linear = 0,
        Logarithmic = 1,
        SCurve = 2,
        Sin = 3,
        Count = 4,
        EAudioFaderCurve_MAX = 5,
    }
    public enum EAudioBusChannels : int
    {
        Mono = 0,
        Stereo = 1,
        EAudioBusChannels_MAX = 2,
    }
    public enum EAttenuationDistanceModel : int
    {
        Linear = 0,
        Logarithmic = 1,
        Inverse = 2,
        LogReverse = 3,
        NaturalSound = 4,
        Custom = 5,
        EAttenuationDistanceModel_MAX = 6,
    }
    public enum EAttenuationShape : int
    {
        Sphere = 0,
        Capsule = 1,
        Box = 2,
        Cone = 3,
        EAttenuationShape_MAX = 4,
    }
    public enum ENaturalSoundFalloffMode : int
    {
        Continues = 0,
        Silent = 1,
        Hold = 2,
        ENaturalSoundFalloffMode_MAX = 3,
    }
    public enum EPrimaryAssetCookRule : int
    {
        Unknown = 0,
        NeverCook = 1,
        DevelopmentCook = 2,
        DevelopmentAlwaysCook = 3,
        AlwaysCook = 4,
        EPrimaryAssetCookRule_MAX = 5,
    }
    public enum EBoneAxis : int
    {
        BA_X = 0,
        BA_Y = 1,
        BA_Z = 2,
        BA_MAX = 3,
    }
    public enum EBoneControlSpace : int
    {
        BCS_WorldSpace = 0,
        BCS_ComponentSpace = 1,
        BCS_ParentBoneSpace = 2,
        BCS_BoneSpace = 3,
        BCS_MAX = 4,
    }
    public enum EBoneRotationSource : int
    {
        BRS_KeepComponentSpaceRotation = 0,
        BRS_KeepLocalSpaceRotation = 1,
        BRS_CopyFromTarget = 2,
        BRS_MAX = 3,
    }
    public enum EAdditiveAnimationType : int
    {
        AAT_None = 0,
        AAT_LocalSpaceBase = 1,
        AAT_RotationOffsetMeshSpace = 2,
        AAT_MAX = 3,
    }
    public enum ECurveBlendOption : int
    {
        Override = 0,
        DoNotOverride = 1,
        NormalizeByWeight = 2,
        BlendByWeight = 3,
        UseBasePose = 4,
        UseMaxValue = 5,
        UseMinValue = 6,
        ECurveBlendOption_MAX = 7,
    }
    public enum EAnimInterpolationType : int
    {
        Linear = 0,
        Step = 1,
        EAnimInterpolationType_MAX = 2,
    }
    public enum EAxisOption : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        X_Neg = 3,
        Y_Neg = 4,
        Z_Neg = 5,
        Custom = 6,
        EAxisOption_MAX = 7,
    }
    public enum EComponentType : int
    {
        None = 0,
        TranslationX = 1,
        TranslationY = 2,
        TranslationZ = 3,
        RotationX = 4,
        RotationY = 5,
        RotationZ = 6,
        Scale = 7,
        ScaleX = 8,
        ScaleY = 9,
        ScaleZ = 10,
        EComponentType_MAX = 11,
    }
    public enum ETransitionBlendMode : int
    {
        TBM_Linear = 0,
        TBM_Cubic = 1,
        TBM_MAX = 2,
    }
    public enum ETransitionLogicType : int
    {
        TLT_StandardBlend = 0,
        TLT_Inertialization = 1,
        TLT_Custom = 2,
        TLT_MAX = 3,
    }
    public enum ETypeAdvanceAnim : int
    {
        ETAA_Default = 0,
        ETAA_Finished = 1,
        ETAA_Looped = 2,
        ETAA_MAX = 3,
    }
    public enum AnimPhysTwistAxis : int
    {
        AxisX = 0,
        AxisY = 1,
        AxisZ = 2,
        AnimPhysTwistAxis_MAX = 3,
    }
    public enum AnimPhysCollisionType : int
    {
        CoM = 0,
        CustomSphere = 1,
        InnerSphere = 2,
        OuterSphere = 3,
        AnimPhysCollisionType_MAX = 4,
    }
    public enum EPinHidingMode : int
    {
        NeverAsPin = 0,
        PinHiddenByDefault = 1,
        PinShownByDefault = 2,
        AlwaysAsPin = 3,
        EPinHidingMode_MAX = 4,
    }
    public enum EPostCopyOperation : int
    {
        None = 0,
        LogicalNegateBool = 1,
        EPostCopyOperation_MAX = 2,
    }
    public enum EEvaluatorDataSource : int
    {
        EDS_SourcePose = 0,
        EDS_DestinationPose = 1,
        EDS_MAX = 2,
    }
    public enum EEvaluatorMode : int
    {
        EM_Standard = 0,
        EM_Freeze = 1,
        EM_DelayedFreeze = 2,
        EM_MAX = 3,
    }
    public enum EInertializationState : int
    {
        Inactive = 0,
        Pending = 1,
        Active = 2,
        EInertializationState_MAX = 3,
    }
    public enum EInertializationBoneState : int
    {
        Invalid = 0,
        Valid = 1,
        Excluded = 2,
        EInertializationBoneState_MAX = 3,
    }
    public enum EInertializationSpace : int
    {
        Default = 0,
        WorldSpace = 1,
        WorldRotation = 2,
        EInertializationSpace_MAX = 3,
    }
    public enum EAnimNotifyEventType : int
    {
        Begin = 0,
        End = 1,
        EAnimNotifyEventType_MAX = 2,
    }
    public enum EMontageSubStepResult : int
    {
        Moved = 0,
        NotMoved = 1,
        InvalidSection = 2,
        InvalidMontage = 3,
        EMontageSubStepResult_MAX = 4,
    }
    public enum EDrawDebugItemType : int
    {
        DirectionalArrow = 0,
        Sphere = 1,
        Line = 2,
        OnScreenMessage = 3,
        CoordinateSystem = 4,
        EDrawDebugItemType_MAX = 5,
    }
    public enum EMontagePlayReturnType : int
    {
        MontageLength = 0,
        Duration = 1,
        EMontagePlayReturnType_MAX = 2,
    }
    public enum ERootMotionRootLock : int
    {
        RefPose = 0,
        AnimFirstFrame = 1,
        Zero = 2,
        ERootMotionRootLock_MAX = 3,
    }
    public enum ERootMotionMode : int
    {
        NoRootMotionExtraction = 0,
        IgnoreRootMotion = 1,
        RootMotionFromEverything = 2,
        RootMotionFromMontagesOnly = 3,
        ERootMotionMode_MAX = 4,
    }
    public enum EAdditiveBasePoseType : int
    {
        ABPT_None = 0,
        ABPT_RefPose = 1,
        ABPT_AnimScaled = 2,
        ABPT_AnimFrame = 3,
        ABPT_MAX = 4,
    }
    public enum AnimationCompressionFormat : int
    {
        ACF_None = 0,
        ACF_Float96NoW = 1,
        ACF_Fixed48NoW = 2,
        ACF_IntervalFixed32NoW = 3,
        ACF_Fixed32NoW = 4,
        ACF_Float32NoW = 5,
        ACF_Identity = 6,
        ACF_MAX = 7,
    }
    public enum EAnimAssetCurveFlags : int
    {
        AACF_NONE = 0,
        AACF_DriveMorphTarget_DEPRECATED = 1,
        AACF_DriveAttribute_DEPRECATED = 2,
        AACF_Editable = 4,
        AACF_DriveMaterial_DEPRECATED = 8,
        AACF_Metadata = 16,
        AACF_DriveTrack = 32,
        AACF_Disabled = 64,
        AACF_MAX = 65,
    }
    public enum ERawCurveTrackTypes : int
    {
        RCT_Float = 0,
        RCT_Vector = 1,
        RCT_Transform = 2,
        RCT_MAX = 3,
    }
    public enum AnimationKeyFormat : int
    {
        AKF_ConstantKeyLerp = 0,
        AKF_VariableKeyLerp = 1,
        AKF_PerTrackCompression = 2,
        AKF_MAX = 3,
    }
    public enum EPreviewAnimationBlueprintApplicationMethod : int
    {
        LinkedLayers = 0,
        LinkedAnimGraph = 1,
        EPreviewAnimationBlueprintApplicationMethod_MAX = 2,
    }
    public enum EAnimGroupRole : int
    {
        CanBeLeader = 0,
        AlwaysFollower = 1,
        AlwaysLeader = 2,
        TransitionLeader = 3,
        TransitionFollower = 4,
        EAnimGroupRole_MAX = 5,
    }
    public enum EAnimSyncGroupScope : int
    {
        Local = 0,
        Component = 1,
        EAnimSyncGroupScope_MAX = 2,
    }
    public enum EAlphaBlendOption : int
    {
        Linear = 0,
        Cubic = 1,
        HermiteCubic = 2,
        Sinusoidal = 3,
        QuadraticInOut = 4,
        CubicInOut = 5,
        QuarticInOut = 6,
        QuinticInOut = 7,
        CircularIn = 8,
        CircularOut = 9,
        CircularInOut = 10,
        ExpIn = 11,
        ExpOut = 12,
        ExpInOut = 13,
        Custom = 14,
        EAlphaBlendOption_MAX = 15,
    }
    public enum EActorUpdateOverlapsMethod : int
    {
        UseConfigDefault = 0,
        AlwaysUpdate = 1,
        OnlyUpdateMovable = 2,
        NeverUpdate = 3,
        EActorUpdateOverlapsMethod_MAX = 4,
    }
    public enum ENetRole : int
    {
        ROLE_None = 0,
        ROLE_SimulatedProxy = 1,
        ROLE_AutonomousProxy = 2,
        ROLE_Authority = 3,
        ROLE_MAX = 4,
    }
    public enum EWindowTitleBarMode : int
    {
        Overlay = 0,
        VerticalBox = 1,
        EWindowTitleBarMode_MAX = 2,
    }
    public enum EMouseLockMode : int
    {
        DoNotLock = 0,
        LockOnCapture = 1,
        LockAlways = 2,
        LockInFullscreen = 3,
        EMouseLockMode_MAX = 4,
    }
    public enum EInputEvent : int
    {
        IE_Pressed = 0,
        IE_Released = 1,
        IE_Repeat = 2,
        IE_DoubleClick = 3,
        IE_Axis = 4,
        IE_MAX = 5,
    }
    public enum EMontageNotifyTickType : int
    {
        Queued = 0,
        BranchingPoint = 1,
        EMontageNotifyTickType_MAX = 2,
    }
    public enum ENotifyFilterType : int
    {
        NoFiltering = 0,
        LOD = 1,
        ENotifyFilterType_MAX = 2,
    }
    public class AnimNotifyEvent : AnimLinkableElement
    {
        public AnimNotifyEvent(nint addr) : base(addr) { }
        public AnimNotifyEvent() : base(0) { }
        public float DisplayTime { get { return this["DisplayTime"].GetValue<float>(); } set { this["DisplayTime"].SetValue<float>(value); } }
        public float TriggerTimeOffset { get { return this["TriggerTimeOffset"].GetValue<float>(); } set { this["TriggerTimeOffset"].SetValue<float>(value); } }
        public float EndTriggerTimeOffset { get { return this["EndTriggerTimeOffset"].GetValue<float>(); } set { this["EndTriggerTimeOffset"].SetValue<float>(value); } }
        public float TriggerWeightThreshold { get { return this["TriggerWeightThreshold"].GetValue<float>(); } set { this["TriggerWeightThreshold"].SetValue<float>(value); } }
        public string NotifyName { get { return this["NotifyName"].ToString(); } set { /* String properties are read-only */ } }
        public AnimNotify Notify { get { return this[nameof(Notify)].As<AnimNotify>(); } set { this["Notify"] = value; } }
        public AnimNotifyState NotifyStateClass { get { return this[nameof(NotifyStateClass)].As<AnimNotifyState>(); } set { this["NotifyStateClass"] = value; } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public AnimLinkableElement EndLink { get { return this[nameof(EndLink)].As<AnimLinkableElement>(); } set { this["EndLink"] = value; } }
        public bool bConvertedFromBranchingPoint { get { return this["bConvertedFromBranchingPoint"].Flag; } set { this["bConvertedFromBranchingPoint"].Flag = value; } }
        public byte MontageTickType { get { return this["MontageTickType"].GetValue<byte>(); } set { this["MontageTickType"].SetValue<byte>(value); } }
        public float NotifyTriggerChance { get { return this["NotifyTriggerChance"].GetValue<float>(); } set { this["NotifyTriggerChance"].SetValue<float>(value); } }
        public byte NotifyFilterType { get { return this["NotifyFilterType"].GetValue<byte>(); } set { this["NotifyFilterType"].SetValue<byte>(value); } }
        public int NotifyFilterLOD { get { return this["NotifyFilterLOD"].GetValue<int>(); } set { this["NotifyFilterLOD"].SetValue<int>(value); } }
        public bool bTriggerOnDedicatedServer { get { return this["bTriggerOnDedicatedServer"].Flag; } set { this["bTriggerOnDedicatedServer"].Flag = value; } }
        public bool bTriggerOnFollower { get { return this["bTriggerOnFollower"].Flag; } set { this["bTriggerOnFollower"].Flag = value; } }
        public int TrackIndex { get { return this["TrackIndex"].GetValue<int>(); } set { this["TrackIndex"].SetValue<int>(value); } }
    }
    public enum EAnimLinkMethod : int
    {
        Absolute = 0,
        Relative = 1,
        Proportional = 2,
        EAnimLinkMethod_MAX = 3,
    }
    public class AnimLinkableElement : UEObject
    {
        public AnimLinkableElement(nint addr) : base(addr) { }
        public AnimLinkableElement() : base(0) { }
        public AnimMontage LinkedMontage { get { return this[nameof(LinkedMontage)].As<AnimMontage>(); } set { this["LinkedMontage"] = value; } }
        public int SlotIndex { get { return this["SlotIndex"].GetValue<int>(); } set { this["SlotIndex"].SetValue<int>(value); } }
        public int SegmentIndex { get { return this["SegmentIndex"].GetValue<int>(); } set { this["SegmentIndex"].SetValue<int>(value); } }
        public byte LinkMethod { get { return this["LinkMethod"].GetValue<byte>(); } set { this["LinkMethod"].SetValue<byte>(value); } }
        public byte CachedLinkMethod { get { return this["CachedLinkMethod"].GetValue<byte>(); } set { this["CachedLinkMethod"].SetValue<byte>(value); } }
        public float SegmentBeginTime { get { return this["SegmentBeginTime"].GetValue<float>(); } set { this["SegmentBeginTime"].SetValue<float>(value); } }
        public float SegmentLength { get { return this["SegmentLength"].GetValue<float>(); } set { this["SegmentLength"].SetValue<float>(value); } }
        public float LinkValue { get { return this["LinkValue"].GetValue<float>(); } set { this["LinkValue"].SetValue<float>(value); } }
        public AnimSequenceBase LinkedSequence { get { return this[nameof(LinkedSequence)].As<AnimSequenceBase>(); } set { this["LinkedSequence"] = value; } }
    }
    public enum ESpawnActorCollisionHandlingMethod : int
    {
        Undefined = 0,
        AlwaysSpawn = 1,
        AdjustIfPossibleButAlwaysSpawn = 2,
        AdjustIfPossibleButDontSpawnIfColliding = 3,
        DontSpawnIfColliding = 4,
        ESpawnActorCollisionHandlingMethod_MAX = 5,
    }
    public class DataTableRowHandle : UEObject
    {
        public DataTableRowHandle(nint addr) : base(addr) { }
        public DataTableRowHandle() : base(0) { }
        public DataTable DataTable { get { return this[nameof(DataTable)].As<DataTable>(); } set { this["DataTable"] = value; } }
        public string RowName { get { return this["RowName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TableRowBase : UEObject
    {
        public TableRowBase(nint addr) : base(addr) { }
        public TableRowBase() : base(0) { }
    }
    public enum EDetailMode : int
    {
        DM_Low = 0,
        DM_Medium = 1,
        DM_High = 2,
        DM_MAX = 3,
    }
    public enum EComponentMobility : int
    {
        Static = 0,
        Stationary = 1,
        Movable = 2,
        EComponentMobility_MAX = 3,
    }
    public enum EDetachmentRule : int
    {
        KeepRelative = 0,
        KeepWorld = 1,
        EDetachmentRule_MAX = 2,
    }
    public enum EAttachmentRule : int
    {
        KeepRelative = 0,
        KeepWorld = 1,
        SnapToTarget = 2,
        EAttachmentRule_MAX = 3,
    }
    public enum EAttachLocation : int
    {
        KeepRelativeOffset = 0,
        KeepWorldPosition = 1,
        SnapToTarget = 2,
        SnapToTargetIncludingScale = 3,
        EAttachLocation_MAX = 4,
    }
    public enum ERelativeTransformSpace : int
    {
        RTS_World = 0,
        RTS_Actor = 1,
        RTS_Component = 2,
        RTS_ParentBoneSpace = 3,
        RTS_MAX = 4,
    }
    public enum EFastArraySerializerDeltaFlags : int
    {
        None = 0,
        HasBeenSerialized = 1,
        HasDeltaBeenRequested = 2,
        IsUsingDeltaSerialization = 4,
        EFastArraySerializerDeltaFlags_MAX = 5,
    }
    public class FastArraySerializer : UEObject
    {
        public FastArraySerializer(nint addr) : base(addr) { }
        public FastArraySerializer() : base(0) { }
        public int ArrayReplicationKey { get { return this["ArrayReplicationKey"].GetValue<int>(); } set { this["ArrayReplicationKey"].SetValue<int>(value); } }
        public EFastArraySerializerDeltaFlags DeltaFlags { get { return (EFastArraySerializerDeltaFlags)this["DeltaFlags"].GetValue<int>(); } set { this["DeltaFlags"].SetValue<int>((int)value); } }
    }
    public class Vector_NetQuantize100 : Vector
    {
        public Vector_NetQuantize100(nint addr) : base(addr) { }
        public Vector_NetQuantize100() : base(0) { }
    }
    public class Vector_NetQuantize10 : Vector
    {
        public Vector_NetQuantize10(nint addr) : base(addr) { }
        public Vector_NetQuantize10() : base(0) { }
    }
    public class CurveTableRowHandle : UEObject
    {
        public CurveTableRowHandle(nint addr) : base(addr) { }
        public CurveTableRowHandle() : base(0) { }
        public CurveTable CurveTable { get { return this[nameof(CurveTable)].As<CurveTable>(); } set { this["CurveTable"] = value; } }
        public string RowName { get { return this["RowName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class FastArraySerializerItem : UEObject
    {
        public FastArraySerializerItem(nint addr) : base(addr) { }
        public FastArraySerializerItem() : base(0) { }
        public int ReplicationID { get { return this["ReplicationID"].GetValue<int>(); } set { this["ReplicationID"].SetValue<int>(value); } }
        public int ReplicationKey { get { return this["ReplicationKey"].GetValue<int>(); } set { this["ReplicationKey"].SetValue<int>(value); } }
        public int MostRecentArrayReplicationKey { get { return this["MostRecentArrayReplicationKey"].GetValue<int>(); } set { this["MostRecentArrayReplicationKey"].SetValue<int>(value); } }
    }
    public class UserActivity : UEObject
    {
        public UserActivity(nint addr) : base(addr) { }
        public UserActivity() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class GenericStruct : UEObject
    {
        public GenericStruct(nint addr) : base(addr) { }
        public GenericStruct() : base(0) { }
        public int Data { get { return this["Data"].GetValue<int>(); } set { this["Data"].SetValue<int>(value); } }
    }
    public class CollisionProfileName : UEObject
    {
        public CollisionProfileName(nint addr) : base(addr) { }
        public CollisionProfileName() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
    }
    public enum EQuitPreference : int
    {
        Quit = 0,
        Background = 1,
        EQuitPreference_MAX = 2,
    }
    public enum EMoveComponentAction : int
    {
        Move = 0,
        Stop = 1,
        Return = 2,
        EMoveComponentAction_MAX = 3,
    }
    public class TimerHandle : UEObject
    {
        public TimerHandle(nint addr) : base(addr) { }
        public TimerHandle() : base(0) { }
        public ulong Handle { get { return this["Handle"].GetValue<ulong>(); } set { this["Handle"].SetValue<ulong>(value); } }
    }
    public class LatentActionInfo : UEObject
    {
        public LatentActionInfo(nint addr) : base(addr) { }
        public LatentActionInfo() : base(0) { }
        public int Linkage { get { return this["Linkage"].GetValue<int>(); } set { this["Linkage"].SetValue<int>(value); } }
        public int UUID { get { return this["UUID"].GetValue<int>(); } set { this["UUID"].SetValue<int>(value); } }
        public string ExecutionFunction { get { return this["ExecutionFunction"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject CallbackTarget { get { return this[nameof(CallbackTarget)]; } set { this["CallbackTarget"] = value; } }
    }
    public enum ETraceTypeQuery : int
    {
        TraceTypeQuery1 = 0,
        TraceTypeQuery2 = 1,
        TraceTypeQuery3 = 2,
        TraceTypeQuery4 = 3,
        TraceTypeQuery5 = 4,
        TraceTypeQuery6 = 5,
        TraceTypeQuery7 = 6,
        TraceTypeQuery8 = 7,
        TraceTypeQuery9 = 8,
        TraceTypeQuery10 = 9,
        TraceTypeQuery11 = 10,
        TraceTypeQuery12 = 11,
        TraceTypeQuery13 = 12,
        TraceTypeQuery14 = 13,
        TraceTypeQuery15 = 14,
        TraceTypeQuery16 = 15,
        TraceTypeQuery17 = 16,
        TraceTypeQuery18 = 17,
        TraceTypeQuery19 = 18,
        TraceTypeQuery20 = 19,
        TraceTypeQuery21 = 20,
        TraceTypeQuery22 = 21,
        TraceTypeQuery23 = 22,
        TraceTypeQuery24 = 23,
        TraceTypeQuery25 = 24,
        TraceTypeQuery26 = 25,
        TraceTypeQuery27 = 26,
        TraceTypeQuery28 = 27,
        TraceTypeQuery29 = 28,
        TraceTypeQuery30 = 29,
        TraceTypeQuery31 = 30,
        TraceTypeQuery32 = 31,
        TraceTypeQuery_MAX = 32,
        ETraceTypeQuery_MAX = 33,
    }
    public enum EDrawDebugTrace : int
    {
        None = 0,
        ForOneFrame = 1,
        ForDuration = 2,
        Persistent = 3,
        EDrawDebugTrace_MAX = 4,
    }
    public enum EObjectTypeQuery : int
    {
        ObjectTypeQuery1 = 0,
        ObjectTypeQuery2 = 1,
        ObjectTypeQuery3 = 2,
        ObjectTypeQuery4 = 3,
        ObjectTypeQuery5 = 4,
        ObjectTypeQuery6 = 5,
        ObjectTypeQuery7 = 6,
        ObjectTypeQuery8 = 7,
        ObjectTypeQuery9 = 8,
        ObjectTypeQuery10 = 9,
        ObjectTypeQuery11 = 10,
        ObjectTypeQuery12 = 11,
        ObjectTypeQuery13 = 12,
        ObjectTypeQuery14 = 13,
        ObjectTypeQuery15 = 14,
        ObjectTypeQuery16 = 15,
        ObjectTypeQuery17 = 16,
        ObjectTypeQuery18 = 17,
        ObjectTypeQuery19 = 18,
        ObjectTypeQuery20 = 19,
        ObjectTypeQuery21 = 20,
        ObjectTypeQuery22 = 21,
        ObjectTypeQuery23 = 22,
        ObjectTypeQuery24 = 23,
        ObjectTypeQuery25 = 24,
        ObjectTypeQuery26 = 25,
        ObjectTypeQuery27 = 26,
        ObjectTypeQuery28 = 27,
        ObjectTypeQuery29 = 28,
        ObjectTypeQuery30 = 29,
        ObjectTypeQuery31 = 30,
        ObjectTypeQuery32 = 31,
        ObjectTypeQuery_MAX = 32,
        EObjectTypeQuery_MAX = 33,
    }
    public class DebugFloatHistory : UEObject
    {
        public DebugFloatHistory(nint addr) : base(addr) { }
        public DebugFloatHistory() : base(0) { }
        public List<float> Samples { get { return this["Samples"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float MaxSamples { get { return this["MaxSamples"].GetValue<float>(); } set { this["MaxSamples"].SetValue<float>(value); } }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public bool bAutoAdjustMinMax { get { return this["bAutoAdjustMinMax"].Flag; } set { this["bAutoAdjustMinMax"].Flag = value; } }
    }
    public enum EApplicationState : int
    {
        Unknown = 0,
        Inactive = 1,
        Background = 2,
        Active = 3,
        EApplicationState_MAX = 4,
    }
    public enum EScreenOrientation : int
    {
        Unknown = 0,
        Portrait = 1,
        PortraitUpsideDown = 2,
        LandscapeLeft = 3,
        LandscapeRight = 4,
        FaceUp = 5,
        FaceDown = 6,
        EScreenOrientation_MAX = 7,
    }
    public enum ETravelFailure : int
    {
        NoLevel = 0,
        LoadMapFailure = 1,
        InvalidURL = 2,
        PackageMissing = 3,
        PackageVersion = 4,
        NoDownload = 5,
        TravelFailure = 6,
        CheatCommands = 7,
        PendingNetGameCreateFailure = 8,
        CloudSaveFailure = 9,
        ServerTravelFailure = 10,
        ClientTravelFailure = 11,
        ETravelFailure_MAX = 12,
    }
    public enum ENetworkFailure : int
    {
        NetDriverAlreadyExists = 0,
        NetDriverCreateFailure = 1,
        NetDriverListenFailure = 2,
        ConnectionLost = 3,
        ConnectionTimeout = 4,
        FailureReceived = 5,
        OutdatedClient = 6,
        OutdatedServer = 7,
        PendingConnectionFailure = 8,
        NetGuidMismatch = 9,
        NetChecksumMismatch = 10,
        ENetworkFailure_MAX = 11,
    }
    public enum EMovementMode : int
    {
        MOVE_None = 0,
        MOVE_Walking = 1,
        MOVE_NavWalking = 2,
        MOVE_Falling = 3,
        MOVE_Swimming = 4,
        MOVE_Flying = 5,
        MOVE_Custom = 6,
        MOVE_MAX = 7,
    }
    public enum EPlatformInterfaceDataType : int
    {
        PIDT_None = 0,
        PIDT_Int = 1,
        PIDT_Float = 2,
        PIDT_String = 3,
        PIDT_Object = 4,
        PIDT_Custom = 5,
        PIDT_MAX = 6,
    }
    public class PlatformInterfaceData : UEObject
    {
        public PlatformInterfaceData(nint addr) : base(addr) { }
        public PlatformInterfaceData() : base(0) { }
        public string DataName { get { return this["DataName"].ToString(); } set { /* String properties are read-only */ } }
        public byte Type { get { return this["Type"].GetValue<byte>(); } set { this["Type"].SetValue<byte>(value); } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject ObjectValue { get { return this[nameof(ObjectValue)]; } set { this["ObjectValue"] = value; } }
    }
    public class PlatformInterfaceDelegateResult : UEObject
    {
        public PlatformInterfaceDelegateResult(nint addr) : base(addr) { }
        public PlatformInterfaceDelegateResult() : base(0) { }
        public bool bSuccessful { get { return this["bSuccessful"].Flag; } set { this["bSuccessful"].Flag = value; } }
        public PlatformInterfaceData Data { get { return this[nameof(Data)].As<PlatformInterfaceData>(); } set { this["Data"] = value; } }
    }
    public enum ETeleportType : int
    {
        None = 0,
        TeleportPhysics = 1,
        ResetPhysics = 2,
        ETeleportType_MAX = 3,
    }
    public enum EInterpToBehaviourType : int
    {
        OneShot = 0,
        OneShot_Reverse = 1,
        Loop_Reset = 2,
        PingPong = 3,
        EInterpToBehaviourType_MAX = 4,
    }
    public class InterpControlPoint : UEObject
    {
        public InterpControlPoint(nint addr) : base(addr) { }
        public InterpControlPoint() : base(0) { }
        public Vector PositionControlPoint { get { return this[nameof(PositionControlPoint)].As<Vector>(); } set { this["PositionControlPoint"] = value; } }
        public bool bPositionIsRelative { get { return this["bPositionIsRelative"].Flag; } set { this["bPositionIsRelative"].Flag = value; } }
    }
    public enum EPlaneConstraintAxisSetting : int
    {
        Custom = 0,
        X = 1,
        Y = 2,
        Z = 3,
        UseGlobalPhysicsSetting = 4,
        EPlaneConstraintAxisSetting_MAX = 5,
    }
    public enum EAudioComponentPlayState : int
    {
        Playing = 0,
        Stopped = 1,
        Paused = 2,
        FadingIn = 3,
        FadingOut = 4,
        Count = 5,
        EAudioComponentPlayState_MAX = 6,
    }
    public class SubtitleCue : UEObject
    {
        public SubtitleCue(nint addr) : base(addr) { }
        public SubtitleCue() : base(0) { }
        public string Text { get { return this["Text"].ToString(); } set { /* String properties are read-only */ } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
    }
    public enum EQuartzCommandDelegateSubType : int
    {
        CommandOnFailedToQueue = 0,
        CommandOnQueued = 1,
        CommandOnCanceled = 2,
        CommandOnAboutToStart = 3,
        CommandOnStarted = 4,
        Count = 5,
        EQuartzCommandDelegateSubType_MAX = 6,
    }
    public enum EQuartzCommandQuantization : int
    {
        Bar = 0,
        Beat = 1,
        ThirtySecondNote = 2,
        SixteenthNote = 3,
        EighthNote = 4,
        QuarterNote = 5,
        HalfNote = 6,
        WholeNote = 7,
        DottedSixteenthNote = 8,
        DottedEighthNote = 9,
        DottedQuarterNote = 10,
        DottedHalfNote = 11,
        DottedWholeNote = 12,
        SixteenthNoteTriplet = 13,
        EighthNoteTriplet = 14,
        QuarterNoteTriplet = 15,
        HalfNoteTriplet = 16,
        Tick = 17,
        Count = 18,
        None = 19,
        EQuartzCommandQuantization_MAX = 20,
    }
    public enum ETemperatureSeverityType : int
    {
        Unknown = 0,
        Good = 1,
        Bad = 2,
        Serious = 3,
        Critical = 4,
        NumSeverities = 5,
        ETemperatureSeverityType_MAX = 6,
    }
    public class ActorComponentTickFunction : TickFunction
    {
        public ActorComponentTickFunction(nint addr) : base(addr) { }
        public ActorComponentTickFunction() : base(0) { }
    }
    public class TickFunction : UEObject
    {
        public TickFunction(nint addr) : base(addr) { }
        public TickFunction() : base(0) { }
        public byte TickGroup { get { return this["TickGroup"].GetValue<byte>(); } set { this["TickGroup"].SetValue<byte>(value); } }
        public byte EndTickGroup { get { return this["EndTickGroup"].GetValue<byte>(); } set { this["EndTickGroup"].SetValue<byte>(value); } }
        public bool bTickEvenWhenPaused { get { return this["bTickEvenWhenPaused"].Flag; } set { this["bTickEvenWhenPaused"].Flag = value; } }
        public bool bCanEverTick { get { return this["bCanEverTick"].Flag; } set { this["bCanEverTick"].Flag = value; } }
        public bool bStartWithTickEnabled { get { return this["bStartWithTickEnabled"].Flag; } set { this["bStartWithTickEnabled"].Flag = value; } }
        public bool bAllowTickOnDedicatedServer { get { return this["bAllowTickOnDedicatedServer"].Flag; } set { this["bAllowTickOnDedicatedServer"].Flag = value; } }
        public float TickInterval { get { return this["TickInterval"].GetValue<float>(); } set { this["TickInterval"].SetValue<float>(value); } }
    }
    public enum EComponentCreationMethod : int
    {
        Native = 0,
        SimpleConstructionScript = 1,
        UserConstructionScript = 2,
        Instance = 3,
        EComponentCreationMethod_MAX = 4,
    }
    public class SimpleMemberReference : UEObject
    {
        public SimpleMemberReference(nint addr) : base(addr) { }
        public SimpleMemberReference() : base(0) { }
        public UEObject MemberParent { get { return this[nameof(MemberParent)]; } set { this["MemberParent"] = value; } }
        public string MemberName { get { return this["MemberName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid MemberGuid { get { return this[nameof(MemberGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["MemberGuid"] = value; } }
    }
    public enum ETickingGroup : int
    {
        TG_PrePhysics = 0,
        TG_StartPhysics = 1,
        TG_DuringPhysics = 2,
        TG_EndPhysics = 3,
        TG_PostPhysics = 4,
        TG_PostUpdateWork = 5,
        TG_LastDemotable = 6,
        TG_NewlySpawned = 7,
        TG_MAX = 8,
    }
    public class BranchingPointNotifyPayload : UEObject
    {
        public BranchingPointNotifyPayload(nint addr) : base(addr) { }
        public BranchingPointNotifyPayload() : base(0) { }
    }
    public enum EEndPlayReason : int
    {
        Destroyed = 0,
        LevelTransition = 1,
        EndPlayInEditor = 2,
        RemovedFromWorld = 3,
        Quit = 4,
        EEndPlayReason_MAX = 5,
    }
    public class Vector_NetQuantizeNormal : Vector
    {
        public Vector_NetQuantizeNormal(nint addr) : base(addr) { }
        public Vector_NetQuantizeNormal() : base(0) { }
    }
    public class Vector_NetQuantize : Vector
    {
        public Vector_NetQuantize(nint addr) : base(addr) { }
        public Vector_NetQuantize() : base(0) { }
    }
    public class HitResult : UEObject
    {
        public HitResult(nint addr) : base(addr) { }
        public HitResult() : base(0) { }
        public int FaceIndex { get { return this["FaceIndex"].GetValue<int>(); } set { this["FaceIndex"].SetValue<int>(value); } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Distance { get { return this["Distance"].GetValue<float>(); } set { this["Distance"].SetValue<float>(value); } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Vector_NetQuantize ImpactPoint { get { return this[nameof(ImpactPoint)].As<Vector_NetQuantize>(); } set { this["ImpactPoint"] = value; } }
        public Vector_NetQuantizeNormal Normal { get { return this[nameof(Normal)].As<Vector_NetQuantizeNormal>(); } set { this["Normal"] = value; } }
        public Vector_NetQuantizeNormal ImpactNormal { get { return this[nameof(ImpactNormal)].As<Vector_NetQuantizeNormal>(); } set { this["ImpactNormal"] = value; } }
        public Vector_NetQuantize TraceStart { get { return this[nameof(TraceStart)].As<Vector_NetQuantize>(); } set { this["TraceStart"] = value; } }
        public Vector_NetQuantize TraceEnd { get { return this[nameof(TraceEnd)].As<Vector_NetQuantize>(); } set { this["TraceEnd"] = value; } }
        public float PenetrationDepth { get { return this["PenetrationDepth"].GetValue<float>(); } set { this["PenetrationDepth"].SetValue<float>(value); } }
        public int Item { get { return this["Item"].GetValue<int>(); } set { this["Item"].SetValue<int>(value); } }
        public byte ElementIndex { get { return this["ElementIndex"].GetValue<byte>(); } set { this["ElementIndex"].SetValue<byte>(value); } }
        public bool bBlockingHit { get { return this["bBlockingHit"].Flag; } set { this["bBlockingHit"].Flag = value; } }
        public bool bStartPenetrating { get { return this["bStartPenetrating"].Flag; } set { this["bStartPenetrating"].Flag = value; } }
        public UEObject PhysMaterial { get { return this["PhysMaterial"]; } set { this["PhysMaterial"] = value; } }
        public UEObject Actor { get { return this["Actor"]; } set { this["Actor"] = value; } }
        public UEObject Component { get { return this["Component"]; } set { this["Component"] = value; } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public string MyBoneName { get { return this["MyBoneName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class Vector2MaterialInput : MaterialInput
    {
        public Vector2MaterialInput(nint addr) : base(addr) { }
        public Vector2MaterialInput() : base(0) { }
    }
    public class VectorMaterialInput : MaterialInput
    {
        public VectorMaterialInput(nint addr) : base(addr) { }
        public VectorMaterialInput() : base(0) { }
    }
    public class ShadingModelMaterialInput : MaterialInput
    {
        public ShadingModelMaterialInput(nint addr) : base(addr) { }
        public ShadingModelMaterialInput() : base(0) { }
    }
    public class ScalarMaterialInput : MaterialInput
    {
        public ScalarMaterialInput(nint addr) : base(addr) { }
        public ScalarMaterialInput() : base(0) { }
    }
    public class ColorMaterialInput : MaterialInput
    {
        public ColorMaterialInput(nint addr) : base(addr) { }
        public ColorMaterialInput() : base(0) { }
    }
    public class MaterialInput : UEObject
    {
        public MaterialInput(nint addr) : base(addr) { }
        public MaterialInput() : base(0) { }
        public int OutputIndex { get { return this["OutputIndex"].GetValue<int>(); } set { this["OutputIndex"].SetValue<int>(value); } }
        public string InputName { get { return this["InputName"].ToString(); } set { /* String properties are read-only */ } }
        public string ExpressionName { get { return this["ExpressionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ExpressionOutput : UEObject
    {
        public ExpressionOutput(nint addr) : base(addr) { }
        public ExpressionOutput() : base(0) { }
        public string OutputName { get { return this["OutputName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MaterialAttributesInput : ExpressionInput
    {
        public MaterialAttributesInput(nint addr) : base(addr) { }
        public MaterialAttributesInput() : base(0) { }
        public int PropertyConnectedBitmask { get { return this["PropertyConnectedBitmask"].GetValue<int>(); } set { this["PropertyConnectedBitmask"].SetValue<int>(value); } }
    }
    public class ExpressionInput : UEObject
    {
        public ExpressionInput(nint addr) : base(addr) { }
        public ExpressionInput() : base(0) { }
        public int OutputIndex { get { return this["OutputIndex"].GetValue<int>(); } set { this["OutputIndex"].SetValue<int>(value); } }
        public string InputName { get { return this["InputName"].ToString(); } set { /* String properties are read-only */ } }
        public string ExpressionName { get { return this["ExpressionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public enum EFormatArgumentType : int
    {
        Int = 0,
        UInt = 1,
        Float = 2,
        Double = 3,
        Text = 4,
        Gender = 5,
        EFormatArgumentType_MAX = 6,
    }
    public enum ETextGender : int
    {
        Masculine = 0,
        Feminine = 1,
        Neuter = 2,
        ETextGender_MAX = 3,
    }
    public class FormatArgumentData : UEObject
    {
        public FormatArgumentData(nint addr) : base(addr) { }
        public FormatArgumentData() : base(0) { }
        public string ArgumentName { get { return this["ArgumentName"].ToString(); } set { /* String properties are read-only */ } }
        public byte ArgumentValueType { get { return this["ArgumentValueType"].GetValue<byte>(); } set { this["ArgumentValueType"].SetValue<byte>(value); } }
        public string ArgumentValue { get { return this["ArgumentValue"].ToString(); } set { /* String properties are read-only */ } }
        public int ArgumentValueInt { get { return this["ArgumentValueInt"].GetValue<int>(); } set { this["ArgumentValueInt"].SetValue<int>(value); } }
        public float ArgumentValueFloat { get { return this["ArgumentValueFloat"].GetValue<float>(); } set { this["ArgumentValueFloat"].SetValue<float>(value); } }
        public ETextGender ArgumentValueGender { get { return (ETextGender)this["ArgumentValueGender"].GetValue<int>(); } set { this["ArgumentValueGender"].SetValue<int>((int)value); } }
    }
    public class VectorRK4SpringInterpolator : UEObject
    {
        public VectorRK4SpringInterpolator(nint addr) : base(addr) { }
        public VectorRK4SpringInterpolator() : base(0) { }
        public float StiffnessConstant { get { return this["StiffnessConstant"].GetValue<float>(); } set { this["StiffnessConstant"].SetValue<float>(value); } }
        public float DampeningRatio { get { return this["DampeningRatio"].GetValue<float>(); } set { this["DampeningRatio"].SetValue<float>(value); } }
    }
    public class FloatRK4SpringInterpolator : UEObject
    {
        public FloatRK4SpringInterpolator(nint addr) : base(addr) { }
        public FloatRK4SpringInterpolator() : base(0) { }
        public float StiffnessConstant { get { return this["StiffnessConstant"].GetValue<float>(); } set { this["StiffnessConstant"].SetValue<float>(value); } }
        public float DampeningRatio { get { return this["DampeningRatio"].GetValue<float>(); } set { this["DampeningRatio"].SetValue<float>(value); } }
    }
    public class Vector4Distribution : UEObject
    {
        public Vector4Distribution(nint addr) : base(addr) { }
        public Vector4Distribution() : base(0) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class VectorDistribution : UEObject
    {
        public VectorDistribution(nint addr) : base(addr) { }
        public VectorDistribution() : base(0) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class FloatDistribution : UEObject
    {
        public FloatDistribution(nint addr) : base(addr) { }
        public FloatDistribution() : base(0) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class RawDistribution : UEObject
    {
        public RawDistribution(nint addr) : base(addr) { }
        public RawDistribution() : base(0) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class DistributionLookupTable : UEObject
    {
        public DistributionLookupTable(nint addr) : base(addr) { }
        public DistributionLookupTable() : base(0) { }
        public float TimeScale { get { return this["TimeScale"].GetValue<float>(); } set { this["TimeScale"].SetValue<float>(value); } }
        public float TimeBias { get { return this["TimeBias"].GetValue<float>(); } set { this["TimeBias"].SetValue<float>(value); } }
        public List<float> Values { get { return this["Values"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public byte Op { get { return this["Op"].GetValue<byte>(); } set { this["Op"].SetValue<byte>(value); } }
        public byte EntryCount { get { return this["EntryCount"].GetValue<byte>(); } set { this["EntryCount"].SetValue<byte>(value); } }
        public byte EntryStride { get { return this["EntryStride"].GetValue<byte>(); } set { this["EntryStride"].SetValue<byte>(value); } }
        public byte SubEntryStride { get { return this["SubEntryStride"].GetValue<byte>(); } set { this["SubEntryStride"].SetValue<byte>(value); } }
        public byte LockFlag { get { return this["LockFlag"].GetValue<byte>(); } set { this["LockFlag"].SetValue<byte>(value); } }
    }
    public class WorldSettings : Info
    {
        public WorldSettings(nint addr) : base(addr) { }
        public WorldSettings() : base(0) { }
        public int VisibilityCellSize { get { return this["VisibilityCellSize"].GetValue<int>(); } set { this["VisibilityCellSize"].SetValue<int>(value); } }
        public byte VisibilityAggressiveness { get { return this["VisibilityAggressiveness"].GetValue<byte>(); } set { this["VisibilityAggressiveness"].SetValue<byte>(value); } }
        public bool bPrecomputeVisibility { get { return this["bPrecomputeVisibility"].Flag; } set { this["bPrecomputeVisibility"].Flag = value; } }
        public bool bPlaceCellsOnlyAlongCameraTracks { get { return this["bPlaceCellsOnlyAlongCameraTracks"].Flag; } set { this["bPlaceCellsOnlyAlongCameraTracks"].Flag = value; } }
        public bool bEnableWorldBoundsChecks { get { return this["bEnableWorldBoundsChecks"].Flag; } set { this["bEnableWorldBoundsChecks"].Flag = value; } }
        public bool bEnableNavigationSystem { get { return this["bEnableNavigationSystem"].Flag; } set { this["bEnableNavigationSystem"].Flag = value; } }
        public bool bEnableAISystem { get { return this["bEnableAISystem"].Flag; } set { this["bEnableAISystem"].Flag = value; } }
        public bool bEnableWorldComposition { get { return this["bEnableWorldComposition"].Flag; } set { this["bEnableWorldComposition"].Flag = value; } }
        public bool bUseClientSideLevelStreamingVolumes { get { return this["bUseClientSideLevelStreamingVolumes"].Flag; } set { this["bUseClientSideLevelStreamingVolumes"].Flag = value; } }
        public bool bEnableWorldOriginRebasing { get { return this["bEnableWorldOriginRebasing"].Flag; } set { this["bEnableWorldOriginRebasing"].Flag = value; } }
        public bool bWorldGravitySet { get { return this["bWorldGravitySet"].Flag; } set { this["bWorldGravitySet"].Flag = value; } }
        public bool bGlobalGravitySet { get { return this["bGlobalGravitySet"].Flag; } set { this["bGlobalGravitySet"].Flag = value; } }
        public bool bMinimizeBSPSections { get { return this["bMinimizeBSPSections"].Flag; } set { this["bMinimizeBSPSections"].Flag = value; } }
        public bool bForceNoPrecomputedLighting { get { return this["bForceNoPrecomputedLighting"].Flag; } set { this["bForceNoPrecomputedLighting"].Flag = value; } }
        public bool bHighPriorityLoading { get { return this["bHighPriorityLoading"].Flag; } set { this["bHighPriorityLoading"].Flag = value; } }
        public bool bHighPriorityLoadingLocal { get { return this["bHighPriorityLoadingLocal"].Flag; } set { this["bHighPriorityLoadingLocal"].Flag = value; } }
        public bool bOverrideDefaultBroadphaseSettings { get { return this["bOverrideDefaultBroadphaseSettings"].Flag; } set { this["bOverrideDefaultBroadphaseSettings"].Flag = value; } }
        public NavigationSystemConfig NavigationSystemConfig { get { return this[nameof(NavigationSystemConfig)].As<NavigationSystemConfig>(); } set { this["NavigationSystemConfig"] = value; } }
        public NavigationSystemConfig NavigationSystemConfigOverride { get { return this[nameof(NavigationSystemConfigOverride)].As<NavigationSystemConfig>(); } set { this["NavigationSystemConfigOverride"] = value; } }
        public float WorldToMeters { get { return this["WorldToMeters"].GetValue<float>(); } set { this["WorldToMeters"].SetValue<float>(value); } }
        public float KillZ { get { return this["KillZ"].GetValue<float>(); } set { this["KillZ"].SetValue<float>(value); } }
        public UEObject KillZDamageType { get { return this["KillZDamageType"]; } set { this["KillZDamageType"] = value; } }
        public float WorldGravityZ { get { return this["WorldGravityZ"].GetValue<float>(); } set { this["WorldGravityZ"].SetValue<float>(value); } }
        public float GlobalGravityZ { get { return this["GlobalGravityZ"].GetValue<float>(); } set { this["GlobalGravityZ"].SetValue<float>(value); } }
        public UEObject DefaultPhysicsVolumeClass { get { return this["DefaultPhysicsVolumeClass"]; } set { this["DefaultPhysicsVolumeClass"] = value; } }
        public UEObject PhysicsCollisionHandlerClass { get { return this["PhysicsCollisionHandlerClass"]; } set { this["PhysicsCollisionHandlerClass"] = value; } }
        public UEObject DefaultGameMode { get { return this["DefaultGameMode"]; } set { this["DefaultGameMode"] = value; } }
        public UEObject GameNetworkManagerClass { get { return this["GameNetworkManagerClass"]; } set { this["GameNetworkManagerClass"] = value; } }
        public int PackedLightAndShadowMapTextureSize { get { return this["PackedLightAndShadowMapTextureSize"].GetValue<int>(); } set { this["PackedLightAndShadowMapTextureSize"].SetValue<int>(value); } }
        public Vector DefaultColorScale { get { return this[nameof(DefaultColorScale)].As<Vector>(); } set { this["DefaultColorScale"] = value; } }
        public float DefaultMaxDistanceFieldOcclusionDistance { get { return this["DefaultMaxDistanceFieldOcclusionDistance"].GetValue<float>(); } set { this["DefaultMaxDistanceFieldOcclusionDistance"].SetValue<float>(value); } }
        public float GlobalDistanceFieldViewDistance { get { return this["GlobalDistanceFieldViewDistance"].GetValue<float>(); } set { this["GlobalDistanceFieldViewDistance"].SetValue<float>(value); } }
        public float DynamicIndirectShadowsSelfShadowingIntensity { get { return this["DynamicIndirectShadowsSelfShadowingIntensity"].GetValue<float>(); } set { this["DynamicIndirectShadowsSelfShadowingIntensity"].SetValue<float>(value); } }
        public ReverbSettings DefaultReverbSettings { get { return this[nameof(DefaultReverbSettings)].As<ReverbSettings>(); } set { this["DefaultReverbSettings"] = value; } }
        public InteriorSettings DefaultAmbientZoneSettings { get { return this[nameof(DefaultAmbientZoneSettings)].As<InteriorSettings>(); } set { this["DefaultAmbientZoneSettings"] = value; } }
        public SoundMix DefaultBaseSoundMix { get { return this[nameof(DefaultBaseSoundMix)].As<SoundMix>(); } set { this["DefaultBaseSoundMix"] = value; } }
        public float TimeDilation { get { return this["TimeDilation"].GetValue<float>(); } set { this["TimeDilation"].SetValue<float>(value); } }
        public float MatineeTimeDilation { get { return this["MatineeTimeDilation"].GetValue<float>(); } set { this["MatineeTimeDilation"].SetValue<float>(value); } }
        public float DemoPlayTimeDilation { get { return this["DemoPlayTimeDilation"].GetValue<float>(); } set { this["DemoPlayTimeDilation"].SetValue<float>(value); } }
        public float MinGlobalTimeDilation { get { return this["MinGlobalTimeDilation"].GetValue<float>(); } set { this["MinGlobalTimeDilation"].SetValue<float>(value); } }
        public float MaxGlobalTimeDilation { get { return this["MaxGlobalTimeDilation"].GetValue<float>(); } set { this["MaxGlobalTimeDilation"].SetValue<float>(value); } }
        public float MinUndilatedFrameTime { get { return this["MinUndilatedFrameTime"].GetValue<float>(); } set { this["MinUndilatedFrameTime"].SetValue<float>(value); } }
        public float MaxUndilatedFrameTime { get { return this["MaxUndilatedFrameTime"].GetValue<float>(); } set { this["MaxUndilatedFrameTime"].SetValue<float>(value); } }
        public BroadphaseSettings BroadphaseSettings { get { return this[nameof(BroadphaseSettings)].As<BroadphaseSettings>(); } set { this["BroadphaseSettings"] = value; } }
        public PlayerState Pauser { get { return this[nameof(Pauser)].As<PlayerState>(); } set { this["Pauser"] = value; } }
        public Array<NetViewer> ReplicationViewers { get { return new Array<NetViewer>(this["ReplicationViewers"]); } set { this["ReplicationViewers"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public PlayerState PauserPlayerState { get { return this[nameof(PauserPlayerState)].As<PlayerState>(); } set { this["PauserPlayerState"] = value; } }
        public int MaxNumberOfBookmarks { get { return this["MaxNumberOfBookmarks"].GetValue<int>(); } set { this["MaxNumberOfBookmarks"].SetValue<int>(value); } }
        public UEObject DefaultBookmarkClass { get { return this["DefaultBookmarkClass"]; } set { this["DefaultBookmarkClass"] = value; } }
        public Array<BookmarkBase> BookmarkArray { get { return new Array<BookmarkBase>(this["BookmarkArray"]); } set { this["BookmarkArray"] = value; } }
        public UEObject LastBookmarkClass { get { return this["LastBookmarkClass"]; } set { this["LastBookmarkClass"] = value; } }
        public void OnRep_WorldGravityZ() { Invoke("OnRep_WorldGravityZ"); }
        public void _WorldSettings(UEObject VisibilityCellSize, UEObject VisibilityAggressiveness, UEObject bPrecomputeVisibility, UEObject bPlaceCellsOnlyAlongCameraTracks, UEObject bEnableWorldBoundsChecks, UEObject bEnableNavigationSystem, UEObject bEnableAISystem, UEObject bEnableWorldComposition, UEObject bUseClientSideLevelStreamingVolumes, UEObject bEnableWorldOriginRebasing, UEObject bWorldGravitySet, UEObject bGlobalGravitySet, UEObject bMinimizeBSPSections, UEObject bForceNoPrecomputedLighting, UEObject bHighPriorityLoading, UEObject bHighPriorityLoadingLocal, UEObject bOverrideDefaultBroadphaseSettings, UEObject NavigationSystemConfig, UEObject NavigationSystemConfigOverride, UEObject WorldToMeters, UEObject KillZ, UEObject KillZDamageType, UEObject WorldGravityZ, UEObject GlobalGravityZ, UEObject DefaultPhysicsVolumeClass, UEObject PhysicsCollisionHandlerClass, UEObject DefaultGameMode, UEObject GameNetworkManagerClass, UEObject PackedLightAndShadowMapTextureSize, UEObject DefaultColorScale, UEObject DefaultMaxDistanceFieldOcclusionDistance, UEObject GlobalDistanceFieldViewDistance, UEObject DynamicIndirectShadowsSelfShadowingIntensity, UEObject DefaultReverbSettings, UEObject DefaultAmbientZoneSettings, UEObject DefaultBaseSoundMix, UEObject TimeDilation, UEObject MatineeTimeDilation, UEObject DemoPlayTimeDilation, UEObject MinGlobalTimeDilation, UEObject MaxGlobalTimeDilation, UEObject MinUndilatedFrameTime, UEObject MaxUndilatedFrameTime, UEObject BroadphaseSettings, UEObject Pauser, UEObject ReplicationViewers, UEObject AssetUserData, UEObject PauserPlayerState, UEObject MaxNumberOfBookmarks, UEObject DefaultBookmarkClass, UEObject BookmarkArray, UEObject LastBookmarkClass) { Invoke("WorldSettings", VisibilityCellSize, VisibilityAggressiveness, bPrecomputeVisibility, bPlaceCellsOnlyAlongCameraTracks, bEnableWorldBoundsChecks, bEnableNavigationSystem, bEnableAISystem, bEnableWorldComposition, bUseClientSideLevelStreamingVolumes, bEnableWorldOriginRebasing, bWorldGravitySet, bGlobalGravitySet, bMinimizeBSPSections, bForceNoPrecomputedLighting, bHighPriorityLoading, bHighPriorityLoadingLocal, bOverrideDefaultBroadphaseSettings, NavigationSystemConfig, NavigationSystemConfigOverride, WorldToMeters, KillZ, KillZDamageType, WorldGravityZ, GlobalGravityZ, DefaultPhysicsVolumeClass, PhysicsCollisionHandlerClass, DefaultGameMode, GameNetworkManagerClass, PackedLightAndShadowMapTextureSize, DefaultColorScale, DefaultMaxDistanceFieldOcclusionDistance, GlobalDistanceFieldViewDistance, DynamicIndirectShadowsSelfShadowingIntensity, DefaultReverbSettings, DefaultAmbientZoneSettings, DefaultBaseSoundMix, TimeDilation, MatineeTimeDilation, DemoPlayTimeDilation, MinGlobalTimeDilation, MaxGlobalTimeDilation, MinUndilatedFrameTime, MaxUndilatedFrameTime, BroadphaseSettings, Pauser, ReplicationViewers, AssetUserData, PauserPlayerState, MaxNumberOfBookmarks, DefaultBookmarkClass, BookmarkArray, LastBookmarkClass); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class HierarchicalLODSetup : UEObject
    {
        public HierarchicalLODSetup(nint addr) : base(addr) { }
        public HierarchicalLODSetup() : base(0) { }
        public Array<HierarchicalSimplification> HierarchicalLODSetup_Property { get { return new Array<HierarchicalSimplification>(this["HierarchicalLODSetup"]); } set { this["HierarchicalLODSetup"] = value; } }
        public UEObject OverrideBaseMaterial { get { return this["OverrideBaseMaterial"]; } set { this["OverrideBaseMaterial"] = value; } }
    }
    public class WorldComposition : UEObject
    {
        public WorldComposition(nint addr) : base(addr) { }
        public WorldComposition() : base(0) { }
        public Array<LevelStreaming> TilesStreaming { get { return new Array<LevelStreaming>(this["TilesStreaming"]); } set { this["TilesStreaming"] = value; } }
        public double TilesStreamingTimeThreshold { get { return this["TilesStreamingTimeThreshold"].GetValue<double>(); } set { this["TilesStreamingTimeThreshold"].SetValue<double>(value); } }
        public bool bLoadAllTilesDuringCinematic { get { return this["bLoadAllTilesDuringCinematic"].Flag; } set { this["bLoadAllTilesDuringCinematic"].Flag = value; } }
        public bool bRebaseOriginIn3DSpace { get { return this["bRebaseOriginIn3DSpace"].Flag; } set { this["bRebaseOriginIn3DSpace"].Flag = value; } }
        public float RebaseOriginDistance { get { return this["RebaseOriginDistance"].GetValue<float>(); } set { this["RebaseOriginDistance"].SetValue<float>(value); } }
    }
    public class WindDirectionalSourceComponent : SceneComponent
    {
        public WindDirectionalSourceComponent(nint addr) : base(addr) { }
        public WindDirectionalSourceComponent() : base(0) { }
        public float Strength { get { return this["Strength"].GetValue<float>(); } set { this["Strength"].SetValue<float>(value); } }
        public float Speed { get { return this["Speed"].GetValue<float>(); } set { this["Speed"].SetValue<float>(value); } }
        public float MinGustAmount { get { return this["MinGustAmount"].GetValue<float>(); } set { this["MinGustAmount"].SetValue<float>(value); } }
        public float MaxGustAmount { get { return this["MaxGustAmount"].GetValue<float>(); } set { this["MaxGustAmount"].SetValue<float>(value); } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public bool bPointWind { get { return this["bPointWind"].Flag; } set { this["bPointWind"].Flag = value; } }
        public void SetWindType(UEObject InNewType) { Invoke("SetWindType", InNewType); }
        public void _WindDirectionalSourceComponent(UEObject Strength, UEObject Speed, UEObject MinGustAmount, UEObject MaxGustAmount, UEObject Radius, UEObject bPointWind) { Invoke("WindDirectionalSourceComponent", Strength, Speed, MinGustAmount, MaxGustAmount, Radius, bPointWind); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class WindDirectionalSource : Info
    {
        public WindDirectionalSource(nint addr) : base(addr) { }
        public WindDirectionalSource() : base(0) { }
        public WindDirectionalSourceComponent Component { get { return this[nameof(Component)].As<WindDirectionalSourceComponent>(); } set { this["Component"] = value; } }
    }
    public class VolumetricLightmapDensityVolume : Volume
    {
        public VolumetricLightmapDensityVolume(nint addr) : base(addr) { }
        public VolumetricLightmapDensityVolume() : base(0) { }
        public Int32Interval AllowedMipLevelRange { get { return this[nameof(AllowedMipLevelRange)].As<Int32Interval>(); } set { this["AllowedMipLevelRange"] = value; } }
    }
    public class VolumetricCloud : Info
    {
        public VolumetricCloud(nint addr) : base(addr) { }
        public VolumetricCloud() : base(0) { }
        public VolumetricCloudComponent VolumetricCloudComponent { get { return this[nameof(VolumetricCloudComponent)].As<VolumetricCloudComponent>(); } set { this["VolumetricCloudComponent"] = value; } }
    }
    public class VolumetricCloudComponent : SceneComponent
    {
        public VolumetricCloudComponent(nint addr) : base(addr) { }
        public VolumetricCloudComponent() : base(0) { }
        public float LayerBottomAltitude { get { return this["LayerBottomAltitude"].GetValue<float>(); } set { this["LayerBottomAltitude"].SetValue<float>(value); } }
        public float LayerHeight { get { return this["LayerHeight"].GetValue<float>(); } set { this["LayerHeight"].SetValue<float>(value); } }
        public float TracingStartMaxDistance { get { return this["TracingStartMaxDistance"].GetValue<float>(); } set { this["TracingStartMaxDistance"].SetValue<float>(value); } }
        public float TracingMaxDistance { get { return this["TracingMaxDistance"].GetValue<float>(); } set { this["TracingMaxDistance"].SetValue<float>(value); } }
        public float PlanetRadius { get { return this["PlanetRadius"].GetValue<float>(); } set { this["PlanetRadius"].SetValue<float>(value); } }
        public Color GroundAlbedo { get { return this[nameof(GroundAlbedo)].As<Color>(); } set { this["GroundAlbedo"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public bool bUsePerSampleAtmosphericLightTransmittance { get { return this["bUsePerSampleAtmosphericLightTransmittance"].Flag; } set { this["bUsePerSampleAtmosphericLightTransmittance"].Flag = value; } }
        public float SkyLightCloudBottomOcclusion { get { return this["SkyLightCloudBottomOcclusion"].GetValue<float>(); } set { this["SkyLightCloudBottomOcclusion"].SetValue<float>(value); } }
        public float ViewSampleCountScale { get { return this["ViewSampleCountScale"].GetValue<float>(); } set { this["ViewSampleCountScale"].SetValue<float>(value); } }
        public float ReflectionSampleCountScale { get { return this["ReflectionSampleCountScale"].GetValue<float>(); } set { this["ReflectionSampleCountScale"].SetValue<float>(value); } }
        public float ShadowViewSampleCountScale { get { return this["ShadowViewSampleCountScale"].GetValue<float>(); } set { this["ShadowViewSampleCountScale"].SetValue<float>(value); } }
        public float ShadowReflectionSampleCountScale { get { return this["ShadowReflectionSampleCountScale"].GetValue<float>(); } set { this["ShadowReflectionSampleCountScale"].SetValue<float>(value); } }
        public float ShadowTracingDistance { get { return this["ShadowTracingDistance"].GetValue<float>(); } set { this["ShadowTracingDistance"].SetValue<float>(value); } }
        public float StopTracingTransmittanceThreshold { get { return this["StopTracingTransmittanceThreshold"].GetValue<float>(); } set { this["StopTracingTransmittanceThreshold"].SetValue<float>(value); } }
        public void SetViewSampleCountScale(UEObject NewValue) { Invoke("SetViewSampleCountScale", NewValue); }
        public void _VolumetricCloudComponent(UEObject LayerBottomAltitude, UEObject LayerHeight, UEObject TracingStartMaxDistance, UEObject TracingMaxDistance, UEObject PlanetRadius, UEObject GroundAlbedo, UEObject Material, UEObject bUsePerSampleAtmosphericLightTransmittance, UEObject SkyLightCloudBottomOcclusion, UEObject ViewSampleCountScale, UEObject ReflectionSampleCountScale, UEObject ShadowViewSampleCountScale, UEObject ShadowReflectionSampleCountScale, UEObject ShadowTracingDistance, UEObject StopTracingTransmittanceThreshold) { Invoke("VolumetricCloudComponent", LayerBottomAltitude, LayerHeight, TracingStartMaxDistance, TracingMaxDistance, PlanetRadius, GroundAlbedo, Material, bUsePerSampleAtmosphericLightTransmittance, SkyLightCloudBottomOcclusion, ViewSampleCountScale, ReflectionSampleCountScale, ShadowViewSampleCountScale, ShadowReflectionSampleCountScale, ShadowTracingDistance, StopTracingTransmittanceThreshold); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VolumeTexture : Texture
    {
        public VolumeTexture(nint addr) : base(addr) { }
        public VolumeTexture() : base(0) { }
    }
    public class VOIPStatics : UEObject
    {
        public VOIPStatics(nint addr) : base(addr) { }
        public VOIPStatics() : base(0) { }
        public void SetMicThreshold(UEObject InThreshold) { Invoke("SetMicThreshold", InThreshold); }
        public void _VOIPStatics() { Invoke("VOIPStatics"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VOIPTalker : ActorComponent
    {
        public VOIPTalker(nint addr) : base(addr) { }
        public VOIPTalker() : base(0) { }
        public VoiceSettings Settings { get { return this[nameof(Settings)].As<VoiceSettings>(); } set { this["Settings"] = value; } }
        public void RegisterWithPlayerState(UEObject OwningState) { Invoke("RegisterWithPlayerState", OwningState); }
        public void _VOIPTalker(UEObject Settings) { Invoke("VOIPTalker", Settings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VoiceChannel : Channel
    {
        public VoiceChannel(nint addr) : base(addr) { }
        public VoiceChannel() : base(0) { }
    }
    public class VisualLoggerKismetLibrary : UEObject
    {
        public VisualLoggerKismetLibrary(nint addr) : base(addr) { }
        public VisualLoggerKismetLibrary() : base(0) { }
        public void RedirectVislog(UEObject SourceOwner, UEObject DestinationOwner) { Invoke("RedirectVislog", SourceOwner, DestinationOwner); }
        public void _VisualLoggerKismetLibrary() { Invoke("VisualLoggerKismetLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VisualLoggerDebugSnapshotInterface : Interface
    {
        public VisualLoggerDebugSnapshotInterface(nint addr) : base(addr) { }
        public VisualLoggerDebugSnapshotInterface() : base(0) { }
    }
    public class VisualLoggerAutomationTests : UEObject
    {
        public VisualLoggerAutomationTests(nint addr) : base(addr) { }
        public VisualLoggerAutomationTests() : base(0) { }
    }
    public class VirtualTexturePoolConfig : UEObject
    {
        public VirtualTexturePoolConfig(nint addr) : base(addr) { }
        public VirtualTexturePoolConfig() : base(0) { }
        public int DefaultSizeInMegabyte { get { return this["DefaultSizeInMegabyte"].GetValue<int>(); } set { this["DefaultSizeInMegabyte"].SetValue<int>(value); } }
        public Array<VirtualTextureSpacePoolConfig> Pools { get { return new Array<VirtualTextureSpacePoolConfig>(this["Pools"]); } set { this["Pools"] = value; } }
    }
    public class VirtualTextureBuilder : UEObject
    {
        public VirtualTextureBuilder(nint addr) : base(addr) { }
        public VirtualTextureBuilder() : base(0) { }
        public VirtualTexture2D Texture { get { return this[nameof(Texture)].As<VirtualTexture2D>(); } set { this["Texture"] = value; } }
        public ulong BuildHash { get { return this["BuildHash"].GetValue<ulong>(); } set { this["BuildHash"].SetValue<ulong>(value); } }
    }
    public class VirtualTexture2D : Texture2D
    {
        public VirtualTexture2D(nint addr) : base(addr) { }
        public VirtualTexture2D() : base(0) { }
        public VirtualTextureBuildSettings Settings { get { return this[nameof(Settings)].As<VirtualTextureBuildSettings>(); } set { this["Settings"] = value; } }
        public bool bContinuousUpdate { get { return this["bContinuousUpdate"].Flag; } set { this["bContinuousUpdate"].Flag = value; } }
        public bool bSinglePhysicalSpace { get { return this["bSinglePhysicalSpace"].Flag; } set { this["bSinglePhysicalSpace"].Flag = value; } }
    }
    public class RuntimeVirtualTextureStreamingProxy : Texture2D
    {
        public RuntimeVirtualTextureStreamingProxy(nint addr) : base(addr) { }
        public RuntimeVirtualTextureStreamingProxy() : base(0) { }
    }
    public class LightMapVirtualTexture : VirtualTexture
    {
        public LightMapVirtualTexture(nint addr) : base(addr) { }
        public LightMapVirtualTexture() : base(0) { }
    }
    public class VirtualTexture : UEObject
    {
        public VirtualTexture(nint addr) : base(addr) { }
        public VirtualTexture() : base(0) { }
    }
    public class ViewportStatsSubsystem : WorldSubsystem
    {
        public ViewportStatsSubsystem(nint addr) : base(addr) { }
        public ViewportStatsSubsystem() : base(0) { }
        public void RemoveDisplayDelegate(UEObject IndexToRemove) { Invoke("RemoveDisplayDelegate", IndexToRemove); }
        public void _ViewportStatsSubsystem() { Invoke("ViewportStatsSubsystem"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VectorFieldVolume : Actor
    {
        public VectorFieldVolume(nint addr) : base(addr) { }
        public VectorFieldVolume() : base(0) { }
        public VectorFieldComponent VectorFieldComponent { get { return this[nameof(VectorFieldComponent)].As<VectorFieldComponent>(); } set { this["VectorFieldComponent"] = value; } }
    }
    public class VectorFieldStatic : VectorField
    {
        public VectorFieldStatic(nint addr) : base(addr) { }
        public VectorFieldStatic() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public int SizeZ { get { return this["SizeZ"].GetValue<int>(); } set { this["SizeZ"].SetValue<int>(value); } }
        public bool bAllowCPUAccess { get { return this["bAllowCPUAccess"].Flag; } set { this["bAllowCPUAccess"].Flag = value; } }
    }
    public class VectorFieldComponent : PrimitiveComponent
    {
        public VectorFieldComponent(nint addr) : base(addr) { }
        public VectorFieldComponent() : base(0) { }
        public VectorField VectorField { get { return this[nameof(VectorField)].As<VectorField>(); } set { this["VectorField"] = value; } }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
        public float Tightness { get { return this["Tightness"].GetValue<float>(); } set { this["Tightness"].SetValue<float>(value); } }
        public bool bPreviewVectorField { get { return this["bPreviewVectorField"].Flag; } set { this["bPreviewVectorField"].Flag = value; } }
        public void SetIntensity(UEObject NewIntensity) { Invoke("SetIntensity", NewIntensity); }
        public void _VectorFieldComponent(UEObject VectorField, UEObject Intensity, UEObject Tightness, UEObject bPreviewVectorField) { Invoke("VectorFieldComponent", VectorField, Intensity, Tightness, bPreviewVectorField); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class VectorFieldAnimated : VectorField
    {
        public VectorFieldAnimated(nint addr) : base(addr) { }
        public VectorFieldAnimated() : base(0) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public byte ConstructionOp { get { return this["ConstructionOp"].GetValue<byte>(); } set { this["ConstructionOp"].SetValue<byte>(value); } }
        public int VolumeSizeX { get { return this["VolumeSizeX"].GetValue<int>(); } set { this["VolumeSizeX"].SetValue<int>(value); } }
        public int VolumeSizeY { get { return this["VolumeSizeY"].GetValue<int>(); } set { this["VolumeSizeY"].SetValue<int>(value); } }
        public int VolumeSizeZ { get { return this["VolumeSizeZ"].GetValue<int>(); } set { this["VolumeSizeZ"].SetValue<int>(value); } }
        public int SubImagesX { get { return this["SubImagesX"].GetValue<int>(); } set { this["SubImagesX"].SetValue<int>(value); } }
        public int SubImagesY { get { return this["SubImagesY"].GetValue<int>(); } set { this["SubImagesY"].SetValue<int>(value); } }
        public int FrameCount { get { return this["FrameCount"].GetValue<int>(); } set { this["FrameCount"].SetValue<int>(value); } }
        public float FramesPerSecond { get { return this["FramesPerSecond"].GetValue<float>(); } set { this["FramesPerSecond"].SetValue<float>(value); } }
        public bool bLoop { get { return this["bLoop"].Flag; } set { this["bLoop"].Flag = value; } }
        public VectorFieldStatic NoiseField { get { return this[nameof(NoiseField)].As<VectorFieldStatic>(); } set { this["NoiseField"] = value; } }
        public float NoiseScale { get { return this["NoiseScale"].GetValue<float>(); } set { this["NoiseScale"].SetValue<float>(value); } }
        public float NoiseMax { get { return this["NoiseMax"].GetValue<float>(); } set { this["NoiseMax"].SetValue<float>(value); } }
    }
    public class VectorField : UEObject
    {
        public VectorField(nint addr) : base(addr) { }
        public VectorField() : base(0) { }
        public Box Bounds { get { return this[nameof(Bounds)].As<Box>(); } set { this["Bounds"] = value; } }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
    }
    public class UserInterfaceSettings : UEObject
    {
        public UserInterfaceSettings(nint addr) : base(addr) { }
        public UserInterfaceSettings() : base(0) { }
        public ERenderFocusRule RenderFocusRule { get { return (ERenderFocusRule)this["RenderFocusRule"].GetValue<int>(); } set { this["RenderFocusRule"].SetValue<int>((int)value); } }
        public UEObject HardwareCursors { get { return this["HardwareCursors"]; } set { this["HardwareCursors"] = value; } }
        public UEObject SoftwareCursors { get { return this["SoftwareCursors"]; } set { this["SoftwareCursors"] = value; } }
        public SoftClassPath DefaultCursor { get { return this[nameof(DefaultCursor)].As<SoftClassPath>(); } set { this["DefaultCursor"] = value; } }
        public SoftClassPath TextEditBeamCursor { get { return this[nameof(TextEditBeamCursor)].As<SoftClassPath>(); } set { this["TextEditBeamCursor"] = value; } }
        public SoftClassPath CrosshairsCursor { get { return this[nameof(CrosshairsCursor)].As<SoftClassPath>(); } set { this["CrosshairsCursor"] = value; } }
        public SoftClassPath HandCursor { get { return this[nameof(HandCursor)].As<SoftClassPath>(); } set { this["HandCursor"] = value; } }
        public SoftClassPath GrabHandCursor { get { return this[nameof(GrabHandCursor)].As<SoftClassPath>(); } set { this["GrabHandCursor"] = value; } }
        public SoftClassPath GrabHandClosedCursor { get { return this[nameof(GrabHandClosedCursor)].As<SoftClassPath>(); } set { this["GrabHandClosedCursor"] = value; } }
        public SoftClassPath SlashedCircleCursor { get { return this[nameof(SlashedCircleCursor)].As<SoftClassPath>(); } set { this["SlashedCircleCursor"] = value; } }
        public float ApplicationScale { get { return this["ApplicationScale"].GetValue<float>(); } set { this["ApplicationScale"].SetValue<float>(value); } }
        public EUIScalingRule UIScaleRule { get { return (EUIScalingRule)this["UIScaleRule"].GetValue<int>(); } set { this["UIScaleRule"].SetValue<int>((int)value); } }
        public SoftClassPath CustomScalingRuleClass { get { return this[nameof(CustomScalingRuleClass)].As<SoftClassPath>(); } set { this["CustomScalingRuleClass"] = value; } }
        public RuntimeFloatCurve UIScaleCurve { get { return this[nameof(UIScaleCurve)].As<RuntimeFloatCurve>(); } set { this["UIScaleCurve"] = value; } }
        public bool bAllowHighDPIInGameMode { get { return this["bAllowHighDPIInGameMode"].Flag; } set { this["bAllowHighDPIInGameMode"].Flag = value; } }
        public IntPoint DesignScreenSize { get { return this[nameof(DesignScreenSize)].As<IntPoint>(); } set { this["DesignScreenSize"] = value; } }
        public bool bLoadWidgetsOnDedicatedServer { get { return this["bLoadWidgetsOnDedicatedServer"].Flag; } set { this["bLoadWidgetsOnDedicatedServer"].Flag = value; } }
        public Array<UEObject> CursorClasses { get { return new Array<UEObject>(this["CursorClasses"]); } set { this["CursorClasses"] = value; } }
        public UEObject CustomScalingRuleClassInstance { get { return this["CustomScalingRuleClassInstance"]; } set { this["CustomScalingRuleClassInstance"] = value; } }
        public DPICustomScalingRule CustomScalingRule { get { return this[nameof(CustomScalingRule)].As<DPICustomScalingRule>(); } set { this["CustomScalingRule"] = value; } }
    }
    public class UserDefinedStruct : ScriptStruct
    {
        public UserDefinedStruct(nint addr) : base(addr) { }
        public UserDefinedStruct() : base(0) { }
        public byte Status { get { return this["Status"].GetValue<byte>(); } set { this["Status"].SetValue<byte>(value); } }
        public SDK.Script.CoreUObject.Guid Guid { get { return this[nameof(Guid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["Guid"] = value; } }
    }
    public class UserDefinedEnum : Enum
    {
        public UserDefinedEnum(nint addr) : base(addr) { }
        public UserDefinedEnum() : base(0) { }
        public UEObject DisplayNameMap { get { return this["DisplayNameMap"]; } set { this["DisplayNameMap"] = value; } }
    }
    public class TwitterIntegrationBase : PlatformInterfaceBase
    {
        public TwitterIntegrationBase(nint addr) : base(addr) { }
        public TwitterIntegrationBase() : base(0) { }
        public UEObject TwitterRequest(UEObject URL, UEObject ParamKeysAndValues, UEObject RequestMethod, UEObject AccountIndex) { return InvokeUEObject("TwitterRequest", URL, ParamKeysAndValues, RequestMethod, AccountIndex); }
        public void _TwitterIntegrationBase() { Invoke("TwitterIntegrationBase"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TriggerSphere : TriggerBase
    {
        public TriggerSphere(nint addr) : base(addr) { }
        public TriggerSphere() : base(0) { }
    }
    public class TriggerCapsule : TriggerBase
    {
        public TriggerCapsule(nint addr) : base(addr) { }
        public TriggerCapsule() : base(0) { }
    }
    public class TriggerBox : TriggerBase
    {
        public TriggerBox(nint addr) : base(addr) { }
        public TriggerBox() : base(0) { }
    }
    public class TriggerBase : Actor
    {
        public TriggerBase(nint addr) : base(addr) { }
        public TriggerBase() : base(0) { }
        public ShapeComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<ShapeComponent>(); } set { this["CollisionComponent"] = value; } }
    }
    public class TouchInterface : UEObject
    {
        public TouchInterface(nint addr) : base(addr) { }
        public TouchInterface() : base(0) { }
        public Array<TouchInputControl> Controls { get { return new Array<TouchInputControl>(this["Controls"]); } set { this["Controls"] = value; } }
        public float ActiveOpacity { get { return this["ActiveOpacity"].GetValue<float>(); } set { this["ActiveOpacity"].SetValue<float>(value); } }
        public float InactiveOpacity { get { return this["InactiveOpacity"].GetValue<float>(); } set { this["InactiveOpacity"].SetValue<float>(value); } }
        public float TimeUntilDeactive { get { return this["TimeUntilDeactive"].GetValue<float>(); } set { this["TimeUntilDeactive"].SetValue<float>(value); } }
        public float TimeUntilReset { get { return this["TimeUntilReset"].GetValue<float>(); } set { this["TimeUntilReset"].SetValue<float>(value); } }
        public float ActivationDelay { get { return this["ActivationDelay"].GetValue<float>(); } set { this["ActivationDelay"].SetValue<float>(value); } }
        public bool bPreventRecenter { get { return this["bPreventRecenter"].Flag; } set { this["bPreventRecenter"].Flag = value; } }
        public float StartupDelay { get { return this["StartupDelay"].GetValue<float>(); } set { this["StartupDelay"].SetValue<float>(value); } }
    }
    public class TireType : DataAsset
    {
        public TireType(nint addr) : base(addr) { }
        public TireType() : base(0) { }
        public float FrictionScale { get { return this["FrictionScale"].GetValue<float>(); } set { this["FrictionScale"].SetValue<float>(value); } }
    }
    public class TimelineTemplate : UEObject
    {
        public TimelineTemplate(nint addr) : base(addr) { }
        public TimelineTemplate() : base(0) { }
        public float TimelineLength { get { return this["TimelineLength"].GetValue<float>(); } set { this["TimelineLength"].SetValue<float>(value); } }
        public byte LengthMode { get { return this["LengthMode"].GetValue<byte>(); } set { this["LengthMode"].SetValue<byte>(value); } }
        public bool bAutoPlay { get { return this["bAutoPlay"].Flag; } set { this["bAutoPlay"].Flag = value; } }
        public bool bLoop { get { return this["bLoop"].Flag; } set { this["bLoop"].Flag = value; } }
        public bool bReplicated { get { return this["bReplicated"].Flag; } set { this["bReplicated"].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this["bIgnoreTimeDilation"].Flag; } set { this["bIgnoreTimeDilation"].Flag = value; } }
        public Array<TTEventTrack> EventTracks { get { return new Array<TTEventTrack>(this["EventTracks"]); } set { this["EventTracks"] = value; } }
        public Array<TTFloatTrack> FloatTracks { get { return new Array<TTFloatTrack>(this["FloatTracks"]); } set { this["FloatTracks"] = value; } }
        public Array<TTVectorTrack> VectorTracks { get { return new Array<TTVectorTrack>(this["VectorTracks"]); } set { this["VectorTracks"] = value; } }
        public Array<TTLinearColorTrack> LinearColorTracks { get { return new Array<TTLinearColorTrack>(this["LinearColorTracks"]); } set { this["LinearColorTracks"] = value; } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this["MetaDataArray"]); } set { this["MetaDataArray"] = value; } }
        public SDK.Script.CoreUObject.Guid TimelineGuid { get { return this[nameof(TimelineGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["TimelineGuid"] = value; } }
        public byte TimelineTickGroup { get { return this["TimelineTickGroup"].GetValue<byte>(); } set { this["TimelineTickGroup"].SetValue<byte>(value); } }
        public string VariableName { get { return this["VariableName"].ToString(); } set { /* String properties are read-only */ } }
        public string DirectionPropertyName { get { return this["DirectionPropertyName"].ToString(); } set { /* String properties are read-only */ } }
        public string UpdateFunctionName { get { return this["UpdateFunctionName"].ToString(); } set { /* String properties are read-only */ } }
        public string FinishedFunctionName { get { return this["FinishedFunctionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TimelineComponent : ActorComponent
    {
        public TimelineComponent(nint addr) : base(addr) { }
        public TimelineComponent() : base(0) { }
        public Timeline TheTimeline { get { return this[nameof(TheTimeline)].As<Timeline>(); } set { this["TheTimeline"] = value; } }
        public bool bIgnoreTimeDilation { get { return this["bIgnoreTimeDilation"].Flag; } set { this["bIgnoreTimeDilation"].Flag = value; } }
        public void Stop() { Invoke("Stop"); }
        public void _TimelineComponent(UEObject TheTimeline, UEObject bIgnoreTimeDilation) { Invoke("TimelineComponent", TheTimeline, bIgnoreTimeDilation); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ThumbnailInfo : UEObject
    {
        public ThumbnailInfo(nint addr) : base(addr) { }
        public ThumbnailInfo() : base(0) { }
    }
    public class TextureRenderTargetVolume : TextureRenderTarget
    {
        public TextureRenderTargetVolume(nint addr) : base(addr) { }
        public TextureRenderTargetVolume() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public int SizeZ { get { return this["SizeZ"].GetValue<int>(); } set { this["SizeZ"].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this["OverrideFormat"].GetValue<byte>(); } set { this["OverrideFormat"].SetValue<byte>(value); } }
        public bool bHDR { get { return this["bHDR"].Flag; } set { this["bHDR"].Flag = value; } }
        public bool bForceLinearGamma { get { return this["bForceLinearGamma"].Flag; } set { this["bForceLinearGamma"].Flag = value; } }
    }
    public class TextureRenderTargetCube : TextureRenderTarget
    {
        public TextureRenderTargetCube(nint addr) : base(addr) { }
        public TextureRenderTargetCube() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this["OverrideFormat"].GetValue<byte>(); } set { this["OverrideFormat"].SetValue<byte>(value); } }
        public bool bHDR { get { return this["bHDR"].Flag; } set { this["bHDR"].Flag = value; } }
        public bool bForceLinearGamma { get { return this["bForceLinearGamma"].Flag; } set { this["bForceLinearGamma"].Flag = value; } }
    }
    public class TextureRenderTarget2DArray : TextureRenderTarget
    {
        public TextureRenderTarget2DArray(nint addr) : base(addr) { }
        public TextureRenderTarget2DArray() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public int Slices { get { return this["Slices"].GetValue<int>(); } set { this["Slices"].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this["OverrideFormat"].GetValue<byte>(); } set { this["OverrideFormat"].SetValue<byte>(value); } }
        public bool bHDR { get { return this["bHDR"].Flag; } set { this["bHDR"].Flag = value; } }
        public bool bForceLinearGamma { get { return this["bForceLinearGamma"].Flag; } set { this["bForceLinearGamma"].Flag = value; } }
    }
    public class TextureMipDataProviderFactory : AssetUserData
    {
        public TextureMipDataProviderFactory(nint addr) : base(addr) { }
        public TextureMipDataProviderFactory() : base(0) { }
    }
    public class TextureLightProfile : Texture2D
    {
        public TextureLightProfile(nint addr) : base(addr) { }
        public TextureLightProfile() : base(0) { }
        public float Brightness { get { return this["Brightness"].GetValue<float>(); } set { this["Brightness"].SetValue<float>(value); } }
        public float TextureMultiplier { get { return this["TextureMultiplier"].GetValue<float>(); } set { this["TextureMultiplier"].SetValue<float>(value); } }
    }
    public class Texture2DDynamic : Texture
    {
        public Texture2DDynamic(nint addr) : base(addr) { }
        public Texture2DDynamic() : base(0) { }
        public byte Format { get { return this["Format"].GetValue<byte>(); } set { this["Format"].SetValue<byte>(value); } }
    }
    public class Texture2DArray : Texture
    {
        public Texture2DArray(nint addr) : base(addr) { }
        public Texture2DArray() : base(0) { }
        public byte AddressX { get { return this["AddressX"].GetValue<byte>(); } set { this["AddressX"].SetValue<byte>(value); } }
        public byte AddressY { get { return this["AddressY"].GetValue<byte>(); } set { this["AddressY"].SetValue<byte>(value); } }
        public byte AddressZ { get { return this["AddressZ"].GetValue<byte>(); } set { this["AddressZ"].SetValue<byte>(value); } }
    }
    public class TextRenderComponent : PrimitiveComponent
    {
        public TextRenderComponent(nint addr) : base(addr) { }
        public TextRenderComponent() : base(0) { }
        public string Text { get { return this["Text"].ToString(); } set { /* String properties are read-only */ } }
        public MaterialInterface TextMaterial { get { return this[nameof(TextMaterial)].As<MaterialInterface>(); } set { this["TextMaterial"] = value; } }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public byte HorizontalAlignment { get { return this["HorizontalAlignment"].GetValue<byte>(); } set { this["HorizontalAlignment"].SetValue<byte>(value); } }
        public byte VerticalAlignment { get { return this["VerticalAlignment"].GetValue<byte>(); } set { this["VerticalAlignment"].SetValue<byte>(value); } }
        public Color TextRenderColor { get { return this[nameof(TextRenderColor)].As<Color>(); } set { this["TextRenderColor"] = value; } }
        public float XScale { get { return this["XScale"].GetValue<float>(); } set { this["XScale"].SetValue<float>(value); } }
        public float YScale { get { return this["YScale"].GetValue<float>(); } set { this["YScale"].SetValue<float>(value); } }
        public float WorldSize { get { return this["WorldSize"].GetValue<float>(); } set { this["WorldSize"].SetValue<float>(value); } }
        public float InvDefaultSize { get { return this["InvDefaultSize"].GetValue<float>(); } set { this["InvDefaultSize"].SetValue<float>(value); } }
        public float HorizSpacingAdjust { get { return this["HorizSpacingAdjust"].GetValue<float>(); } set { this["HorizSpacingAdjust"].SetValue<float>(value); } }
        public float VertSpacingAdjust { get { return this["VertSpacingAdjust"].GetValue<float>(); } set { this["VertSpacingAdjust"].SetValue<float>(value); } }
        public bool bAlwaysRenderAsText { get { return this["bAlwaysRenderAsText"].Flag; } set { this["bAlwaysRenderAsText"].Flag = value; } }
        public void SetYScale(UEObject Value) { Invoke("SetYScale", Value); }
        public void _TextRenderComponent(UEObject Text, UEObject TextMaterial, UEObject Font, UEObject HorizontalAlignment, UEObject VerticalAlignment, UEObject TextRenderColor, UEObject XScale, UEObject YScale, UEObject WorldSize, UEObject InvDefaultSize, UEObject HorizSpacingAdjust, UEObject VertSpacingAdjust, UEObject bAlwaysRenderAsText) { Invoke("TextRenderComponent", Text, TextMaterial, Font, HorizontalAlignment, VerticalAlignment, TextRenderColor, XScale, YScale, WorldSize, InvDefaultSize, HorizSpacingAdjust, VertSpacingAdjust, bAlwaysRenderAsText); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TextRenderActor : Actor
    {
        public TextRenderActor(nint addr) : base(addr) { }
        public TextRenderActor() : base(0) { }
        public TextRenderComponent TextRender { get { return this[nameof(TextRender)].As<TextRenderComponent>(); } set { this["TextRender"] = value; } }
    }
    public class TextPropertyTestObject : UEObject
    {
        public TextPropertyTestObject(nint addr) : base(addr) { }
        public TextPropertyTestObject() : base(0) { }
        public string DefaultedText { get { return this["DefaultedText"].ToString(); } set { /* String properties are read-only */ } }
        public string UndefaultedText { get { return this["UndefaultedText"].ToString(); } set { /* String properties are read-only */ } }
        public string TransientText { get { return this["TransientText"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class TargetPoint : Actor
    {
        public TargetPoint(nint addr) : base(addr) { }
        public TargetPoint() : base(0) { }
    }
    public class SystemTimeTimecodeProvider : TimecodeProvider
    {
        public SystemTimeTimecodeProvider(nint addr) : base(addr) { }
        public SystemTimeTimecodeProvider() : base(0) { }
        public FrameRate FrameRate { get { return this[nameof(FrameRate)].As<FrameRate>(); } set { this["FrameRate"] = value; } }
        public bool bGenerateFullFrame { get { return this["bGenerateFullFrame"].Flag; } set { this["bGenerateFullFrame"].Flag = value; } }
        public bool bUseHighPerformanceClock { get { return this["bUseHighPerformanceClock"].Flag; } set { this["bUseHighPerformanceClock"].Flag = value; } }
    }
    public class SubUVAnimation : UEObject
    {
        public SubUVAnimation(nint addr) : base(addr) { }
        public SubUVAnimation() : base(0) { }
        public Texture2D SubUVTexture { get { return this[nameof(SubUVTexture)].As<Texture2D>(); } set { this["SubUVTexture"] = value; } }
        public int SubImages_Horizontal { get { return this["SubImages_Horizontal"].GetValue<int>(); } set { this["SubImages_Horizontal"].SetValue<int>(value); } }
        public int SubImages_Vertical { get { return this["SubImages_Vertical"].GetValue<int>(); } set { this["SubImages_Vertical"].SetValue<int>(value); } }
        public byte BoundingMode { get { return this["BoundingMode"].GetValue<byte>(); } set { this["BoundingMode"].SetValue<byte>(value); } }
        public byte OpacitySourceMode { get { return this["OpacitySourceMode"].GetValue<byte>(); } set { this["OpacitySourceMode"].SetValue<byte>(value); } }
        public float AlphaThreshold { get { return this["AlphaThreshold"].GetValue<float>(); } set { this["AlphaThreshold"].SetValue<float>(value); } }
    }
    public class SubsystemBlueprintLibrary : UEObject
    {
        public SubsystemBlueprintLibrary(nint addr) : base(addr) { }
        public SubsystemBlueprintLibrary() : base(0) { }
        public UEObject GetWorldSubsystem(UEObject ContextObject, UEObject Class) { return InvokeUEObject("GetWorldSubsystem", ContextObject, Class); }
        public void _SubsystemBlueprintLibrary() { Invoke("SubsystemBlueprintLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SubsurfaceProfile : UEObject
    {
        public SubsurfaceProfile(nint addr) : base(addr) { }
        public SubsurfaceProfile() : base(0) { }
        public SubsurfaceProfileStruct Settings { get { return this[nameof(Settings)].As<SubsurfaceProfileStruct>(); } set { this["Settings"] = value; } }
    }
    public class StringTable : UEObject
    {
        public StringTable(nint addr) : base(addr) { }
        public StringTable() : base(0) { }
    }
    public class StereoLayerFunctionLibrary : UEObject
    {
        public StereoLayerFunctionLibrary(nint addr) : base(addr) { }
        public StereoLayerFunctionLibrary() : base(0) { }
        public void ShowSplashScreen() { Invoke("ShowSplashScreen"); }
        public void _StereoLayerFunctionLibrary() { Invoke("StereoLayerFunctionLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StereoLayerComponent : SceneComponent
    {
        public StereoLayerComponent(nint addr) : base(addr) { }
        public StereoLayerComponent() : base(0) { }
        public bool bLiveTexture { get { return this["bLiveTexture"].Flag; } set { this["bLiveTexture"].Flag = value; } }
        public bool bSupportsDepth { get { return this["bSupportsDepth"].Flag; } set { this["bSupportsDepth"].Flag = value; } }
        public bool bNoAlphaChannel { get { return this["bNoAlphaChannel"].Flag; } set { this["bNoAlphaChannel"].Flag = value; } }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
        public Texture LeftTexture { get { return this[nameof(LeftTexture)].As<Texture>(); } set { this["LeftTexture"] = value; } }
        public bool bQuadPreserveTextureRatio { get { return this["bQuadPreserveTextureRatio"].Flag; } set { this["bQuadPreserveTextureRatio"].Flag = value; } }
        public Vector2D QuadSize { get { return this[nameof(QuadSize)].As<Vector2D>(); } set { this["QuadSize"] = value; } }
        public Box2D UVRect { get { return this[nameof(UVRect)].As<Box2D>(); } set { this["UVRect"] = value; } }
        public float CylinderRadius { get { return this["CylinderRadius"].GetValue<float>(); } set { this["CylinderRadius"].SetValue<float>(value); } }
        public float CylinderOverlayArc { get { return this["CylinderOverlayArc"].GetValue<float>(); } set { this["CylinderOverlayArc"].SetValue<float>(value); } }
        public int CylinderHeight { get { return this["CylinderHeight"].GetValue<int>(); } set { this["CylinderHeight"].SetValue<int>(value); } }
        public EquirectProps EquirectProps { get { return this[nameof(EquirectProps)].As<EquirectProps>(); } set { this["EquirectProps"] = value; } }
        public byte StereoLayerType { get { return this["StereoLayerType"].GetValue<byte>(); } set { this["StereoLayerType"].SetValue<byte>(value); } }
        public byte StereoLayerShape { get { return this["StereoLayerShape"].GetValue<byte>(); } set { this["StereoLayerShape"].SetValue<byte>(value); } }
        public StereoLayerShape Shape { get { return this[nameof(Shape)].As<StereoLayerShape>(); } set { this["Shape"] = value; } }
        public int Priority { get { return this["Priority"].GetValue<int>(); } set { this["Priority"].SetValue<int>(value); } }
        public void SetUVRect(UEObject InUVRect) { Invoke("SetUVRect", InUVRect); }
        public void _StereoLayerComponent(UEObject bLiveTexture, UEObject bSupportsDepth, UEObject bNoAlphaChannel, UEObject Texture, UEObject LeftTexture, UEObject bQuadPreserveTextureRatio, UEObject QuadSize, UEObject UVRect, UEObject CylinderRadius, UEObject CylinderOverlayArc, UEObject CylinderHeight, UEObject EquirectProps, UEObject StereoLayerType, UEObject StereoLayerShape, UEObject Shape, UEObject Priority) { Invoke("StereoLayerComponent", bLiveTexture, bSupportsDepth, bNoAlphaChannel, Texture, LeftTexture, bQuadPreserveTextureRatio, QuadSize, UVRect, CylinderRadius, CylinderOverlayArc, CylinderHeight, EquirectProps, StereoLayerType, StereoLayerShape, Shape, Priority); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StereoLayerShapeEquirect : StereoLayerShape
    {
        public StereoLayerShapeEquirect(nint addr) : base(addr) { }
        public StereoLayerShapeEquirect() : base(0) { }
        public Box2D LeftUVRect { get { return this[nameof(LeftUVRect)].As<Box2D>(); } set { this["LeftUVRect"] = value; } }
        public Box2D RightUVRect { get { return this[nameof(RightUVRect)].As<Box2D>(); } set { this["RightUVRect"] = value; } }
        public Vector2D LeftScale { get { return this[nameof(LeftScale)].As<Vector2D>(); } set { this["LeftScale"] = value; } }
        public Vector2D RightScale { get { return this[nameof(RightScale)].As<Vector2D>(); } set { this["RightScale"] = value; } }
        public Vector2D LeftBias { get { return this[nameof(LeftBias)].As<Vector2D>(); } set { this["LeftBias"] = value; } }
        public Vector2D RightBias { get { return this[nameof(RightBias)].As<Vector2D>(); } set { this["RightBias"] = value; } }
        public void SetEquirectProps(UEObject InScaleBiases) { Invoke("SetEquirectProps", InScaleBiases); }
        public void _StereoLayerShapeEquirect(UEObject LeftUVRect, UEObject RightUVRect, UEObject LeftScale, UEObject RightScale, UEObject LeftBias, UEObject RightBias) { Invoke("StereoLayerShapeEquirect", LeftUVRect, RightUVRect, LeftScale, RightScale, LeftBias, RightBias); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StereoLayerShapeCubemap : StereoLayerShape
    {
        public StereoLayerShapeCubemap(nint addr) : base(addr) { }
        public StereoLayerShapeCubemap() : base(0) { }
    }
    public class StereoLayerShapeCylinder : StereoLayerShape
    {
        public StereoLayerShapeCylinder(nint addr) : base(addr) { }
        public StereoLayerShapeCylinder() : base(0) { }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public float OverlayArc { get { return this["OverlayArc"].GetValue<float>(); } set { this["OverlayArc"].SetValue<float>(value); } }
        public int Height { get { return this["Height"].GetValue<int>(); } set { this["Height"].SetValue<int>(value); } }
        public void SetRadius(UEObject InRadius) { Invoke("SetRadius", InRadius); }
        public void _StereoLayerShapeCylinder(UEObject Radius, UEObject OverlayArc, UEObject Height) { Invoke("StereoLayerShapeCylinder", Radius, OverlayArc, Height); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StereoLayerShapeQuad : StereoLayerShape
    {
        public StereoLayerShapeQuad(nint addr) : base(addr) { }
        public StereoLayerShapeQuad() : base(0) { }
    }
    public class StereoLayerShape : UEObject
    {
        public StereoLayerShape(nint addr) : base(addr) { }
        public StereoLayerShape() : base(0) { }
    }
    public class StaticMeshSocket : UEObject
    {
        public StaticMeshSocket(nint addr) : base(addr) { }
        public StaticMeshSocket() : base(0) { }
        public string SocketName { get { return this["SocketName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale { get { return this[nameof(RelativeScale)].As<Vector>(); } set { this["RelativeScale"] = value; } }
        public string Tag { get { return this["Tag"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class StaticMesh : StreamableRenderAsset
    {
        public StaticMesh(nint addr) : base(addr) { }
        public StaticMesh() : base(0) { }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public float LpvBiasMultiplier { get { return this["LpvBiasMultiplier"].GetValue<float>(); } set { this["LpvBiasMultiplier"].SetValue<float>(value); } }
        public Array<StaticMaterial> StaticMaterials { get { return new Array<StaticMaterial>(this["StaticMaterials"]); } set { this["StaticMaterials"] = value; } }
        public float LightmapUVDensity { get { return this["LightmapUVDensity"].GetValue<float>(); } set { this["LightmapUVDensity"].SetValue<float>(value); } }
        public int LightMapResolution { get { return this["LightMapResolution"].GetValue<int>(); } set { this["LightMapResolution"].SetValue<int>(value); } }
        public int LightMapCoordinateIndex { get { return this["LightMapCoordinateIndex"].GetValue<int>(); } set { this["LightMapCoordinateIndex"].SetValue<int>(value); } }
        public float DistanceFieldSelfShadowBias { get { return this["DistanceFieldSelfShadowBias"].GetValue<float>(); } set { this["DistanceFieldSelfShadowBias"].SetValue<float>(value); } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public int LODForCollision { get { return this["LODForCollision"].GetValue<int>(); } set { this["LODForCollision"].SetValue<int>(value); } }
        public bool bGenerateMeshDistanceField { get { return this["bGenerateMeshDistanceField"].Flag; } set { this["bGenerateMeshDistanceField"].Flag = value; } }
        public bool bStripComplexCollisionForConsole { get { return this["bStripComplexCollisionForConsole"].Flag; } set { this["bStripComplexCollisionForConsole"].Flag = value; } }
        public bool bHasNavigationData { get { return this["bHasNavigationData"].Flag; } set { this["bHasNavigationData"].Flag = value; } }
        public bool bSupportUniformlyDistributedSampling { get { return this["bSupportUniformlyDistributedSampling"].Flag; } set { this["bSupportUniformlyDistributedSampling"].Flag = value; } }
        public bool bSupportPhysicalMaterialMasks { get { return this["bSupportPhysicalMaterialMasks"].Flag; } set { this["bSupportPhysicalMaterialMasks"].Flag = value; } }
        public bool bSupportRayTracing { get { return this["bSupportRayTracing"].Flag; } set { this["bSupportRayTracing"].Flag = value; } }
        public bool bIsBuiltAtRuntime { get { return this["bIsBuiltAtRuntime"].Flag; } set { this["bIsBuiltAtRuntime"].Flag = value; } }
        public bool bAllowCPUAccess { get { return this["bAllowCPUAccess"].Flag; } set { this["bAllowCPUAccess"].Flag = value; } }
        public bool bSupportGpuUniformlyDistributedSampling { get { return this["bSupportGpuUniformlyDistributedSampling"].Flag; } set { this["bSupportGpuUniformlyDistributedSampling"].Flag = value; } }
        public Array<StaticMeshSocket> Sockets { get { return new Array<StaticMeshSocket>(this["Sockets"]); } set { this["Sockets"] = value; } }
        public Vector PositiveBoundsExtension { get { return this[nameof(PositiveBoundsExtension)].As<Vector>(); } set { this["PositiveBoundsExtension"] = value; } }
        public Vector NegativeBoundsExtension { get { return this[nameof(NegativeBoundsExtension)].As<Vector>(); } set { this["NegativeBoundsExtension"] = value; } }
        public BoxSphereBounds ExtendedBounds { get { return this[nameof(ExtendedBounds)].As<BoxSphereBounds>(); } set { this["ExtendedBounds"] = value; } }
        public int ElementToIgnoreForTexFactor { get { return this["ElementToIgnoreForTexFactor"].GetValue<int>(); } set { this["ElementToIgnoreForTexFactor"].SetValue<int>(value); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public UEObject EditableMesh { get { return this[nameof(EditableMesh)]; } set { this["EditableMesh"] = value; } }
        public NavCollisionBase NavCollision { get { return this[nameof(NavCollision)].As<NavCollisionBase>(); } set { this["NavCollision"] = value; } }
        public bool bForceSharedStaticLightingForLODs { get { return this["bForceSharedStaticLightingForLODs"].Flag; } set { this["bForceSharedStaticLightingForLODs"].Flag = value; } }
        public void SetStaticMaterials(UEObject InStaticMaterials) { Invoke("SetStaticMaterials", InStaticMaterials); }
        public void _StaticMesh(UEObject MinLOD, UEObject LpvBiasMultiplier, UEObject StaticMaterials, UEObject LightmapUVDensity, UEObject LightMapResolution, UEObject LightMapCoordinateIndex, UEObject DistanceFieldSelfShadowBias, UEObject BodySetup, UEObject LODForCollision, UEObject bGenerateMeshDistanceField, UEObject bStripComplexCollisionForConsole, UEObject bHasNavigationData, UEObject bSupportUniformlyDistributedSampling, UEObject bSupportPhysicalMaterialMasks, UEObject bSupportRayTracing, UEObject bIsBuiltAtRuntime, UEObject bAllowCPUAccess, UEObject bSupportGpuUniformlyDistributedSampling, UEObject Sockets, UEObject PositiveBoundsExtension, UEObject NegativeBoundsExtension, UEObject ExtendedBounds, UEObject ElementToIgnoreForTexFactor, UEObject AssetUserData, UEObject EditableMesh, UEObject NavCollision, UEObject bForceSharedStaticLightingForLODs) { Invoke("StaticMesh", MinLOD, LpvBiasMultiplier, StaticMaterials, LightmapUVDensity, LightMapResolution, LightMapCoordinateIndex, DistanceFieldSelfShadowBias, BodySetup, LODForCollision, bGenerateMeshDistanceField, bStripComplexCollisionForConsole, bHasNavigationData, bSupportUniformlyDistributedSampling, bSupportPhysicalMaterialMasks, bSupportRayTracing, bIsBuiltAtRuntime, bAllowCPUAccess, bSupportGpuUniformlyDistributedSampling, Sockets, PositiveBoundsExtension, NegativeBoundsExtension, ExtendedBounds, ElementToIgnoreForTexFactor, AssetUserData, EditableMesh, NavCollision, bForceSharedStaticLightingForLODs); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SpringArmComponent : SceneComponent
    {
        public SpringArmComponent(nint addr) : base(addr) { }
        public SpringArmComponent() : base(0) { }
        public float TargetArmLength { get { return this["TargetArmLength"].GetValue<float>(); } set { this["TargetArmLength"].SetValue<float>(value); } }
        public Vector SocketOffset { get { return this[nameof(SocketOffset)].As<Vector>(); } set { this["SocketOffset"] = value; } }
        public Vector TargetOffset { get { return this[nameof(TargetOffset)].As<Vector>(); } set { this["TargetOffset"] = value; } }
        public float ProbeSize { get { return this["ProbeSize"].GetValue<float>(); } set { this["ProbeSize"].SetValue<float>(value); } }
        public byte ProbeChannel { get { return this["ProbeChannel"].GetValue<byte>(); } set { this["ProbeChannel"].SetValue<byte>(value); } }
        public bool bDoCollisionTest { get { return this["bDoCollisionTest"].Flag; } set { this["bDoCollisionTest"].Flag = value; } }
        public bool bUsePawnControlRotation { get { return this["bUsePawnControlRotation"].Flag; } set { this["bUsePawnControlRotation"].Flag = value; } }
        public bool bInheritPitch { get { return this["bInheritPitch"].Flag; } set { this["bInheritPitch"].Flag = value; } }
        public bool bInheritYaw { get { return this["bInheritYaw"].Flag; } set { this["bInheritYaw"].Flag = value; } }
        public bool bInheritRoll { get { return this["bInheritRoll"].Flag; } set { this["bInheritRoll"].Flag = value; } }
        public bool bEnableCameraLag { get { return this["bEnableCameraLag"].Flag; } set { this["bEnableCameraLag"].Flag = value; } }
        public bool bEnableCameraRotationLag { get { return this["bEnableCameraRotationLag"].Flag; } set { this["bEnableCameraRotationLag"].Flag = value; } }
        public bool bUseCameraLagSubstepping { get { return this["bUseCameraLagSubstepping"].Flag; } set { this["bUseCameraLagSubstepping"].Flag = value; } }
        public bool bDrawDebugLagMarkers { get { return this["bDrawDebugLagMarkers"].Flag; } set { this["bDrawDebugLagMarkers"].Flag = value; } }
        public float CameraLagSpeed { get { return this["CameraLagSpeed"].GetValue<float>(); } set { this["CameraLagSpeed"].SetValue<float>(value); } }
        public float CameraRotationLagSpeed { get { return this["CameraRotationLagSpeed"].GetValue<float>(); } set { this["CameraRotationLagSpeed"].SetValue<float>(value); } }
        public float CameraLagMaxTimeStep { get { return this["CameraLagMaxTimeStep"].GetValue<float>(); } set { this["CameraLagMaxTimeStep"].SetValue<float>(value); } }
        public float CameraLagMaxDistance { get { return this["CameraLagMaxDistance"].GetValue<float>(); } set { this["CameraLagMaxDistance"].SetValue<float>(value); } }
        public UEObject IsCollisionFixApplied() { return InvokeUEObject("IsCollisionFixApplied"); }
        public void _SpringArmComponent(UEObject TargetArmLength, UEObject SocketOffset, UEObject TargetOffset, UEObject ProbeSize, UEObject ProbeChannel, UEObject bDoCollisionTest, UEObject bUsePawnControlRotation, UEObject bInheritPitch, UEObject bInheritYaw, UEObject bInheritRoll, UEObject bEnableCameraLag, UEObject bEnableCameraRotationLag, UEObject bUseCameraLagSubstepping, UEObject bDrawDebugLagMarkers, UEObject CameraLagSpeed, UEObject CameraRotationLagSpeed, UEObject CameraLagMaxTimeStep, UEObject CameraLagMaxDistance) { Invoke("SpringArmComponent", TargetArmLength, SocketOffset, TargetOffset, ProbeSize, ProbeChannel, bDoCollisionTest, bUsePawnControlRotation, bInheritPitch, bInheritYaw, bInheritRoll, bEnableCameraLag, bEnableCameraRotationLag, bUseCameraLagSubstepping, bDrawDebugLagMarkers, CameraLagSpeed, CameraRotationLagSpeed, CameraLagMaxTimeStep, CameraLagMaxDistance); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SpotLightComponent : PointLightComponent
    {
        public SpotLightComponent(nint addr) : base(addr) { }
        public SpotLightComponent() : base(0) { }
        public float InnerConeAngle { get { return this["InnerConeAngle"].GetValue<float>(); } set { this["InnerConeAngle"].SetValue<float>(value); } }
        public float OuterConeAngle { get { return this["OuterConeAngle"].GetValue<float>(); } set { this["OuterConeAngle"].SetValue<float>(value); } }
        public void SetOuterConeAngle(UEObject NewOuterConeAngle) { Invoke("SetOuterConeAngle", NewOuterConeAngle); }
        public void _SpotLightComponent(UEObject InnerConeAngle, UEObject OuterConeAngle) { Invoke("SpotLightComponent", InnerConeAngle, OuterConeAngle); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SplineMeshComponent : StaticMeshComponent
    {
        public SplineMeshComponent(nint addr) : base(addr) { }
        public SplineMeshComponent() : base(0) { }
        public SplineMeshParams SplineParams { get { return this[nameof(SplineParams)].As<SplineMeshParams>(); } set { this["SplineParams"] = value; } }
        public Vector SplineUpDir { get { return this[nameof(SplineUpDir)].As<Vector>(); } set { this["SplineUpDir"] = value; } }
        public float SplineBoundaryMin { get { return this["SplineBoundaryMin"].GetValue<float>(); } set { this["SplineBoundaryMin"].SetValue<float>(value); } }
        public SDK.Script.CoreUObject.Guid CachedMeshBodySetupGuid { get { return this[nameof(CachedMeshBodySetupGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["CachedMeshBodySetupGuid"] = value; } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public float SplineBoundaryMax { get { return this["SplineBoundaryMax"].GetValue<float>(); } set { this["SplineBoundaryMax"].SetValue<float>(value); } }
        public bool bAllowSplineEditingPerInstance { get { return this["bAllowSplineEditingPerInstance"].Flag; } set { this["bAllowSplineEditingPerInstance"].Flag = value; } }
        public bool bSmoothInterpRollScale { get { return this["bSmoothInterpRollScale"].Flag; } set { this["bSmoothInterpRollScale"].Flag = value; } }
        public bool bMeshDirty { get { return this["bMeshDirty"].Flag; } set { this["bMeshDirty"].Flag = value; } }
        public byte ForwardAxis { get { return this["ForwardAxis"].GetValue<byte>(); } set { this["ForwardAxis"].SetValue<byte>(value); } }
        public float VirtualTextureMainPassMaxDrawDistance { get { return this["VirtualTextureMainPassMaxDrawDistance"].GetValue<float>(); } set { this["VirtualTextureMainPassMaxDrawDistance"].SetValue<float>(value); } }
        public void UpdateMesh() { Invoke("UpdateMesh"); }
        public void _SplineMeshComponent(UEObject SplineParams, UEObject SplineUpDir, UEObject SplineBoundaryMin, UEObject CachedMeshBodySetupGuid, UEObject BodySetup, UEObject SplineBoundaryMax, UEObject bAllowSplineEditingPerInstance, UEObject bSmoothInterpRollScale, UEObject bMeshDirty, UEObject ForwardAxis, UEObject VirtualTextureMainPassMaxDrawDistance) { Invoke("SplineMeshComponent", SplineParams, SplineUpDir, SplineBoundaryMin, CachedMeshBodySetupGuid, BodySetup, SplineBoundaryMax, bAllowSplineEditingPerInstance, bSmoothInterpRollScale, bMeshDirty, ForwardAxis, VirtualTextureMainPassMaxDrawDistance); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SplineMeshActor : Actor
    {
        public SplineMeshActor(nint addr) : base(addr) { }
        public SplineMeshActor() : base(0) { }
        public SplineMeshComponent SplineMeshComponent { get { return this[nameof(SplineMeshComponent)].As<SplineMeshComponent>(); } set { this["SplineMeshComponent"] = value; } }
    }
    public class SphereReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public SphereReflectionCaptureComponent(nint addr) : base(addr) { }
        public SphereReflectionCaptureComponent() : base(0) { }
        public float InfluenceRadius { get { return this["InfluenceRadius"].GetValue<float>(); } set { this["InfluenceRadius"].SetValue<float>(value); } }
        public float CaptureDistanceScale { get { return this["CaptureDistanceScale"].GetValue<float>(); } set { this["CaptureDistanceScale"].SetValue<float>(value); } }
        public DrawSphereComponent PreviewInfluenceRadius { get { return this[nameof(PreviewInfluenceRadius)].As<DrawSphereComponent>(); } set { this["PreviewInfluenceRadius"] = value; } }
    }
    public class SphereReflectionCapture : ReflectionCapture
    {
        public SphereReflectionCapture(nint addr) : base(addr) { }
        public SphereReflectionCapture() : base(0) { }
        public DrawSphereComponent DrawCaptureRadius { get { return this[nameof(DrawCaptureRadius)].As<DrawSphereComponent>(); } set { this["DrawCaptureRadius"] = value; } }
    }
    public class SpectatorPawnMovement : FloatingPawnMovement
    {
        public SpectatorPawnMovement(nint addr) : base(addr) { }
        public SpectatorPawnMovement() : base(0) { }
        public bool bIgnoreTimeDilation { get { return this["bIgnoreTimeDilation"].Flag; } set { this["bIgnoreTimeDilation"].Flag = value; } }
    }
    public class SpectatorPawn : DefaultPawn
    {
        public SpectatorPawn(nint addr) : base(addr) { }
        public SpectatorPawn() : base(0) { }
    }
    public class SoundfieldEndpointSubmix : SoundSubmixBase
    {
        public SoundfieldEndpointSubmix(nint addr) : base(addr) { }
        public SoundfieldEndpointSubmix() : base(0) { }
        public string SoundfieldEndpointType { get { return this["SoundfieldEndpointType"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject EndpointSettingsClass { get { return this["EndpointSettingsClass"]; } set { this["EndpointSettingsClass"] = value; } }
        public SoundfieldEndpointSettingsBase EndpointSettings { get { return this[nameof(EndpointSettings)].As<SoundfieldEndpointSettingsBase>(); } set { this["EndpointSettings"] = value; } }
        public UEObject EncodingSettingsClass { get { return this["EncodingSettingsClass"]; } set { this["EncodingSettingsClass"] = value; } }
        public SoundfieldEncodingSettingsBase EncodingSettings { get { return this[nameof(EncodingSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["EncodingSettings"] = value; } }
        public Array<SoundfieldEffectBase> SoundfieldEffectChain { get { return new Array<SoundfieldEffectBase>(this["SoundfieldEffectChain"]); } set { this["SoundfieldEffectChain"] = value; } }
    }
    public class EndpointSubmix : SoundSubmixBase
    {
        public EndpointSubmix(nint addr) : base(addr) { }
        public EndpointSubmix() : base(0) { }
        public string EndpointType { get { return this["EndpointType"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject EndpointSettingsClass { get { return this["EndpointSettingsClass"]; } set { this["EndpointSettingsClass"] = value; } }
        public AudioEndpointSettingsBase EndpointSettings { get { return this[nameof(EndpointSettings)].As<AudioEndpointSettingsBase>(); } set { this["EndpointSettings"] = value; } }
    }
    public class SoundfieldSubmix : SoundSubmixWithParentBase
    {
        public SoundfieldSubmix(nint addr) : base(addr) { }
        public SoundfieldSubmix() : base(0) { }
        public string SoundfieldEncodingFormat { get { return this["SoundfieldEncodingFormat"].ToString(); } set { /* String properties are read-only */ } }
        public SoundfieldEncodingSettingsBase EncodingSettings { get { return this[nameof(EncodingSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["EncodingSettings"] = value; } }
        public Array<SoundfieldEffectBase> SoundfieldEffectChain { get { return new Array<SoundfieldEffectBase>(this["SoundfieldEffectChain"]); } set { this["SoundfieldEffectChain"] = value; } }
        public UEObject EncodingSettingsClass { get { return this["EncodingSettingsClass"]; } set { this["EncodingSettingsClass"] = value; } }
    }
    public class SoundSubmix : SoundSubmixWithParentBase
    {
        public SoundSubmix(nint addr) : base(addr) { }
        public SoundSubmix() : base(0) { }
        public bool bMuteWhenBackgrounded { get { return this["bMuteWhenBackgrounded"].Flag; } set { this["bMuteWhenBackgrounded"].Flag = value; } }
        public Array<SoundEffectSubmixPreset> SubmixEffectChain { get { return new Array<SoundEffectSubmixPreset>(this["SubmixEffectChain"]); } set { this["SubmixEffectChain"] = value; } }
        public SoundfieldEncodingSettingsBase AmbisonicsPluginSettings { get { return this[nameof(AmbisonicsPluginSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["AmbisonicsPluginSettings"] = value; } }
        public int EnvelopeFollowerAttackTime { get { return this["EnvelopeFollowerAttackTime"].GetValue<int>(); } set { this["EnvelopeFollowerAttackTime"].SetValue<int>(value); } }
        public int EnvelopeFollowerReleaseTime { get { return this["EnvelopeFollowerReleaseTime"].GetValue<int>(); } set { this["EnvelopeFollowerReleaseTime"].SetValue<int>(value); } }
        public EGainParamMode GainMode { get { return (EGainParamMode)this["GainMode"].GetValue<int>(); } set { this["GainMode"].SetValue<int>((int)value); } }
        public float OutputVolume { get { return this["OutputVolume"].GetValue<float>(); } set { this["OutputVolume"].SetValue<float>(value); } }
        public float WetLevel { get { return this["WetLevel"].GetValue<float>(); } set { this["WetLevel"].SetValue<float>(value); } }
        public float DryLevel { get { return this["DryLevel"].GetValue<float>(); } set { this["DryLevel"].SetValue<float>(value); } }
        public SoundModulationDestinationSettings OutputVolumeModulation { get { return this[nameof(OutputVolumeModulation)].As<SoundModulationDestinationSettings>(); } set { this["OutputVolumeModulation"] = value; } }
        public SoundModulationDestinationSettings WetLevelModulation { get { return this[nameof(WetLevelModulation)].As<SoundModulationDestinationSettings>(); } set { this["WetLevelModulation"] = value; } }
        public SoundModulationDestinationSettings DryLevelModulation { get { return this[nameof(DryLevelModulation)].As<SoundModulationDestinationSettings>(); } set { this["DryLevelModulation"] = value; } }
        public UEObject OnSubmixRecordedFileDone { get { return this["OnSubmixRecordedFileDone"]; } set { this["OnSubmixRecordedFileDone"] = value; } }
        public void StopSpectralAnalysis(UEObject WorldContextObject) { Invoke("StopSpectralAnalysis", WorldContextObject); }
        public void _SoundSubmix(UEObject bMuteWhenBackgrounded, UEObject SubmixEffectChain, UEObject AmbisonicsPluginSettings, UEObject EnvelopeFollowerAttackTime, UEObject EnvelopeFollowerReleaseTime, UEObject GainMode, UEObject OutputVolume, UEObject WetLevel, UEObject DryLevel, UEObject OutputVolumeModulation, UEObject WetLevelModulation, UEObject DryLevelModulation, UEObject OnSubmixRecordedFileDone) { Invoke("SoundSubmix", bMuteWhenBackgrounded, SubmixEffectChain, AmbisonicsPluginSettings, EnvelopeFollowerAttackTime, EnvelopeFollowerReleaseTime, GainMode, OutputVolume, WetLevel, DryLevel, OutputVolumeModulation, WetLevelModulation, DryLevelModulation, OnSubmixRecordedFileDone); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SoundSubmixWithParentBase : SoundSubmixBase
    {
        public SoundSubmixWithParentBase(nint addr) : base(addr) { }
        public SoundSubmixWithParentBase() : base(0) { }
        public SoundSubmixBase ParentSubmix { get { return this[nameof(ParentSubmix)].As<SoundSubmixBase>(); } set { this["ParentSubmix"] = value; } }
    }
    public class SoundSubmixBase : UEObject
    {
        public SoundSubmixBase(nint addr) : base(addr) { }
        public SoundSubmixBase() : base(0) { }
        public Array<SoundSubmixBase> ChildSubmixes { get { return new Array<SoundSubmixBase>(this["ChildSubmixes"]); } set { this["ChildSubmixes"] = value; } }
    }
    public class SoundSourceBus : SoundWave
    {
        public SoundSourceBus(nint addr) : base(addr) { }
        public SoundSourceBus() : base(0) { }
        public ESourceBusChannels SourceBusChannels { get { return (ESourceBusChannels)this["SourceBusChannels"].GetValue<int>(); } set { this["SourceBusChannels"].SetValue<int>((int)value); } }
        public float SourceBusDuration { get { return this["SourceBusDuration"].GetValue<float>(); } set { this["SourceBusDuration"].SetValue<float>(value); } }
        public AudioBus AudioBus { get { return this[nameof(AudioBus)].As<AudioBus>(); } set { this["AudioBus"] = value; } }
        public bool bAutoDeactivateWhenSilent { get { return this["bAutoDeactivateWhenSilent"].Flag; } set { this["bAutoDeactivateWhenSilent"].Flag = value; } }
    }
    public class SoundNodeWavePlayer : SoundNodeAssetReferencer
    {
        public SoundNodeWavePlayer(nint addr) : base(addr) { }
        public SoundNodeWavePlayer() : base(0) { }
        public UEObject SoundWaveAssetPtr { get { return this["SoundWaveAssetPtr"]; } set { this["SoundWaveAssetPtr"] = value; } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
    }
    public class SoundNodeWaveParam : SoundNode
    {
        public SoundNodeWaveParam(nint addr) : base(addr) { }
        public SoundNodeWaveParam() : base(0) { }
        public string WaveParameterName { get { return this["WaveParameterName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SoundNodeSwitch : SoundNode
    {
        public SoundNodeSwitch(nint addr) : base(addr) { }
        public SoundNodeSwitch() : base(0) { }
        public string IntParameterName { get { return this["IntParameterName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SoundNodeSoundClass : SoundNode
    {
        public SoundNodeSoundClass(nint addr) : base(addr) { }
        public SoundNodeSoundClass() : base(0) { }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
    }
    public class SoundNodeRandom : SoundNode
    {
        public SoundNodeRandom(nint addr) : base(addr) { }
        public SoundNodeRandom() : base(0) { }
        public List<float> Weights { get { return this["Weights"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<bool> HasBeenUsed { get { return this["HasBeenUsed"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public int NumRandomUsed { get { return this["NumRandomUsed"].GetValue<int>(); } set { this["NumRandomUsed"].SetValue<int>(value); } }
        public int PreselectAtLevelLoad { get { return this["PreselectAtLevelLoad"].GetValue<int>(); } set { this["PreselectAtLevelLoad"].SetValue<int>(value); } }
        public bool bShouldExcludeFromBranchCulling { get { return this["bShouldExcludeFromBranchCulling"].Flag; } set { this["bShouldExcludeFromBranchCulling"].Flag = value; } }
        public bool bSoundCueExcludedFromBranchCulling { get { return this["bSoundCueExcludedFromBranchCulling"].Flag; } set { this["bSoundCueExcludedFromBranchCulling"].Flag = value; } }
        public bool bRandomizeWithoutReplacement { get { return this["bRandomizeWithoutReplacement"].Flag; } set { this["bRandomizeWithoutReplacement"].Flag = value; } }
    }
    public class SoundNodeQualityLevel : SoundNode
    {
        public SoundNodeQualityLevel(nint addr) : base(addr) { }
        public SoundNodeQualityLevel() : base(0) { }
        public int CookedQualityLevelIndex { get { return this["CookedQualityLevelIndex"].GetValue<int>(); } set { this["CookedQualityLevelIndex"].SetValue<int>(value); } }
    }
    public class SoundNodeOscillator : SoundNode
    {
        public SoundNodeOscillator(nint addr) : base(addr) { }
        public SoundNodeOscillator() : base(0) { }
        public bool bModulateVolume { get { return this["bModulateVolume"].Flag; } set { this["bModulateVolume"].Flag = value; } }
        public bool bModulatePitch { get { return this["bModulatePitch"].Flag; } set { this["bModulatePitch"].Flag = value; } }
        public float AmplitudeMin { get { return this["AmplitudeMin"].GetValue<float>(); } set { this["AmplitudeMin"].SetValue<float>(value); } }
        public float AmplitudeMax { get { return this["AmplitudeMax"].GetValue<float>(); } set { this["AmplitudeMax"].SetValue<float>(value); } }
        public float FrequencyMin { get { return this["FrequencyMin"].GetValue<float>(); } set { this["FrequencyMin"].SetValue<float>(value); } }
        public float FrequencyMax { get { return this["FrequencyMax"].GetValue<float>(); } set { this["FrequencyMax"].SetValue<float>(value); } }
        public float OffsetMin { get { return this["OffsetMin"].GetValue<float>(); } set { this["OffsetMin"].SetValue<float>(value); } }
        public float OffsetMax { get { return this["OffsetMax"].GetValue<float>(); } set { this["OffsetMax"].SetValue<float>(value); } }
        public float CenterMin { get { return this["CenterMin"].GetValue<float>(); } set { this["CenterMin"].SetValue<float>(value); } }
        public float CenterMax { get { return this["CenterMax"].GetValue<float>(); } set { this["CenterMax"].SetValue<float>(value); } }
    }
    public class SoundNodeModulatorContinuous : SoundNode
    {
        public SoundNodeModulatorContinuous(nint addr) : base(addr) { }
        public SoundNodeModulatorContinuous() : base(0) { }
        public ModulatorContinuousParams PitchModulationParams { get { return this[nameof(PitchModulationParams)].As<ModulatorContinuousParams>(); } set { this["PitchModulationParams"] = value; } }
        public ModulatorContinuousParams VolumeModulationParams { get { return this[nameof(VolumeModulationParams)].As<ModulatorContinuousParams>(); } set { this["VolumeModulationParams"] = value; } }
    }
    public class SoundNodeModulator : SoundNode
    {
        public SoundNodeModulator(nint addr) : base(addr) { }
        public SoundNodeModulator() : base(0) { }
        public float PitchMin { get { return this["PitchMin"].GetValue<float>(); } set { this["PitchMin"].SetValue<float>(value); } }
        public float PitchMax { get { return this["PitchMax"].GetValue<float>(); } set { this["PitchMax"].SetValue<float>(value); } }
        public float VolumeMin { get { return this["VolumeMin"].GetValue<float>(); } set { this["VolumeMin"].SetValue<float>(value); } }
        public float VolumeMax { get { return this["VolumeMax"].GetValue<float>(); } set { this["VolumeMax"].SetValue<float>(value); } }
    }
    public class SoundNodeMixer : SoundNode
    {
        public SoundNodeMixer(nint addr) : base(addr) { }
        public SoundNodeMixer() : base(0) { }
        public List<float> InputVolume { get { return this["InputVolume"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class SoundNodeMature : SoundNode
    {
        public SoundNodeMature(nint addr) : base(addr) { }
        public SoundNodeMature() : base(0) { }
    }
    public class SoundNodeLooping : SoundNode
    {
        public SoundNodeLooping(nint addr) : base(addr) { }
        public SoundNodeLooping() : base(0) { }
        public int LoopCount { get { return this["LoopCount"].GetValue<int>(); } set { this["LoopCount"].SetValue<int>(value); } }
        public bool bLoopIndefinitely { get { return this["bLoopIndefinitely"].Flag; } set { this["bLoopIndefinitely"].Flag = value; } }
    }
    public class SoundNodeGroupControl : SoundNode
    {
        public SoundNodeGroupControl(nint addr) : base(addr) { }
        public SoundNodeGroupControl() : base(0) { }
        public List<int> GroupSizes { get { return this["GroupSizes"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class SoundNodeEnveloper : SoundNode
    {
        public SoundNodeEnveloper(nint addr) : base(addr) { }
        public SoundNodeEnveloper() : base(0) { }
        public float LoopStart { get { return this["LoopStart"].GetValue<float>(); } set { this["LoopStart"].SetValue<float>(value); } }
        public float LoopEnd { get { return this["LoopEnd"].GetValue<float>(); } set { this["LoopEnd"].SetValue<float>(value); } }
        public float DurationAfterLoop { get { return this["DurationAfterLoop"].GetValue<float>(); } set { this["DurationAfterLoop"].SetValue<float>(value); } }
        public int LoopCount { get { return this["LoopCount"].GetValue<int>(); } set { this["LoopCount"].SetValue<int>(value); } }
        public bool bLoopIndefinitely { get { return this["bLoopIndefinitely"].Flag; } set { this["bLoopIndefinitely"].Flag = value; } }
        public bool bLoop { get { return this["bLoop"].Flag; } set { this["bLoop"].Flag = value; } }
        public DistributionFloatConstantCurve VolumeInterpCurve { get { return this[nameof(VolumeInterpCurve)].As<DistributionFloatConstantCurve>(); } set { this["VolumeInterpCurve"] = value; } }
        public DistributionFloatConstantCurve PitchInterpCurve { get { return this[nameof(PitchInterpCurve)].As<DistributionFloatConstantCurve>(); } set { this["PitchInterpCurve"] = value; } }
        public RuntimeFloatCurve VolumeCurve { get { return this[nameof(VolumeCurve)].As<RuntimeFloatCurve>(); } set { this["VolumeCurve"] = value; } }
        public RuntimeFloatCurve PitchCurve { get { return this[nameof(PitchCurve)].As<RuntimeFloatCurve>(); } set { this["PitchCurve"] = value; } }
        public float PitchMin { get { return this["PitchMin"].GetValue<float>(); } set { this["PitchMin"].SetValue<float>(value); } }
        public float PitchMax { get { return this["PitchMax"].GetValue<float>(); } set { this["PitchMax"].SetValue<float>(value); } }
        public float VolumeMin { get { return this["VolumeMin"].GetValue<float>(); } set { this["VolumeMin"].SetValue<float>(value); } }
        public float VolumeMax { get { return this["VolumeMax"].GetValue<float>(); } set { this["VolumeMax"].SetValue<float>(value); } }
    }
    public class SoundNodeDoppler : SoundNode
    {
        public SoundNodeDoppler(nint addr) : base(addr) { }
        public SoundNodeDoppler() : base(0) { }
        public float DopplerIntensity { get { return this["DopplerIntensity"].GetValue<float>(); } set { this["DopplerIntensity"].SetValue<float>(value); } }
        public bool bUseSmoothing { get { return this["bUseSmoothing"].Flag; } set { this["bUseSmoothing"].Flag = value; } }
        public float SmoothingInterpSpeed { get { return this["SmoothingInterpSpeed"].GetValue<float>(); } set { this["SmoothingInterpSpeed"].SetValue<float>(value); } }
    }
    public class SoundNodeDialoguePlayer : SoundNode
    {
        public SoundNodeDialoguePlayer(nint addr) : base(addr) { }
        public SoundNodeDialoguePlayer() : base(0) { }
        public DialogueWaveParameter DialogueWaveParameter { get { return this[nameof(DialogueWaveParameter)].As<DialogueWaveParameter>(); } set { this["DialogueWaveParameter"] = value; } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
    }
    public class SoundNodeDelay : SoundNode
    {
        public SoundNodeDelay(nint addr) : base(addr) { }
        public SoundNodeDelay() : base(0) { }
        public float DelayMin { get { return this["DelayMin"].GetValue<float>(); } set { this["DelayMin"].SetValue<float>(value); } }
        public float DelayMax { get { return this["DelayMax"].GetValue<float>(); } set { this["DelayMax"].SetValue<float>(value); } }
    }
    public class SoundNodeConcatenator : SoundNode
    {
        public SoundNodeConcatenator(nint addr) : base(addr) { }
        public SoundNodeConcatenator() : base(0) { }
        public List<float> InputVolume { get { return this["InputVolume"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class SoundNodeBranch : SoundNode
    {
        public SoundNodeBranch(nint addr) : base(addr) { }
        public SoundNodeBranch() : base(0) { }
        public string BoolParameterName { get { return this["BoolParameterName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SoundNodeAttenuation : SoundNode
    {
        public SoundNodeAttenuation(nint addr) : base(addr) { }
        public SoundNodeAttenuation() : base(0) { }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public bool bOverrideAttenuation { get { return this["bOverrideAttenuation"].Flag; } set { this["bOverrideAttenuation"].Flag = value; } }
    }
    public class SoundNodeAssetReferencer : SoundNode
    {
        public SoundNodeAssetReferencer(nint addr) : base(addr) { }
        public SoundNodeAssetReferencer() : base(0) { }
    }
    public class SoundMix : UEObject
    {
        public SoundMix(nint addr) : base(addr) { }
        public SoundMix() : base(0) { }
        public bool bApplyEQ { get { return this["bApplyEQ"].Flag; } set { this["bApplyEQ"].Flag = value; } }
        public float EQPriority { get { return this["EQPriority"].GetValue<float>(); } set { this["EQPriority"].SetValue<float>(value); } }
        public AudioEQEffect EQSettings { get { return this[nameof(EQSettings)].As<AudioEQEffect>(); } set { this["EQSettings"] = value; } }
        public Array<SoundClassAdjuster> SoundClassEffects { get { return new Array<SoundClassAdjuster>(this["SoundClassEffects"]); } set { this["SoundClassEffects"] = value; } }
        public float InitialDelay { get { return this["InitialDelay"].GetValue<float>(); } set { this["InitialDelay"].SetValue<float>(value); } }
        public float FadeInTime { get { return this["FadeInTime"].GetValue<float>(); } set { this["FadeInTime"].SetValue<float>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public float FadeOutTime { get { return this["FadeOutTime"].GetValue<float>(); } set { this["FadeOutTime"].SetValue<float>(value); } }
    }
    public class SoundGroups : UEObject
    {
        public SoundGroups(nint addr) : base(addr) { }
        public SoundGroups() : base(0) { }
        public Array<SoundGroup> SoundGroupProfiles { get { return new Array<SoundGroup>(this["SoundGroupProfiles"]); } set { this["SoundGroupProfiles"] = value; } }
    }
    public class SoundEffectSourcePresetChain : UEObject
    {
        public SoundEffectSourcePresetChain(nint addr) : base(addr) { }
        public SoundEffectSourcePresetChain() : base(0) { }
        public Array<SourceEffectChainEntry> Chain { get { return new Array<SourceEffectChainEntry>(this["Chain"]); } set { this["Chain"] = value; } }
        public bool bPlayEffectChainTails { get { return this["bPlayEffectChainTails"].Flag; } set { this["bPlayEffectChainTails"].Flag = value; } }
    }
    public class SoundCue : SoundBase
    {
        public SoundCue(nint addr) : base(addr) { }
        public SoundCue() : base(0) { }
        public bool bPrimeOnLoad { get { return this["bPrimeOnLoad"].Flag; } set { this["bPrimeOnLoad"].Flag = value; } }
        public SoundNode FirstNode { get { return this[nameof(FirstNode)].As<SoundNode>(); } set { this["FirstNode"] = value; } }
        public float VolumeMultiplier { get { return this["VolumeMultiplier"].GetValue<float>(); } set { this["VolumeMultiplier"].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this["PitchMultiplier"].GetValue<float>(); } set { this["PitchMultiplier"].SetValue<float>(value); } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public float SubtitlePriority { get { return this["SubtitlePriority"].GetValue<float>(); } set { this["SubtitlePriority"].SetValue<float>(value); } }
        public bool bOverrideAttenuation { get { return this["bOverrideAttenuation"].Flag; } set { this["bOverrideAttenuation"].Flag = value; } }
        public bool bExcludeFromRandomNodeBranchCulling { get { return this["bExcludeFromRandomNodeBranchCulling"].Flag; } set { this["bExcludeFromRandomNodeBranchCulling"].Flag = value; } }
        public int CookedQualityIndex { get { return this["CookedQualityIndex"].GetValue<int>(); } set { this["CookedQualityIndex"].SetValue<int>(value); } }
        public bool bHasPlayWhenSilent { get { return this["bHasPlayWhenSilent"].Flag; } set { this["bHasPlayWhenSilent"].Flag = value; } }
    }
    public class SoundConcurrency : UEObject
    {
        public SoundConcurrency(nint addr) : base(addr) { }
        public SoundConcurrency() : base(0) { }
        public SoundConcurrencySettings Concurrency { get { return this[nameof(Concurrency)].As<SoundConcurrencySettings>(); } set { this["Concurrency"] = value; } }
    }
    public class SoundClass : UEObject
    {
        public SoundClass(nint addr) : base(addr) { }
        public SoundClass() : base(0) { }
        public SoundClassProperties Properties { get { return this[nameof(Properties)].As<SoundClassProperties>(); } set { this["Properties"] = value; } }
        public Array<SoundClass> ChildClasses { get { return new Array<SoundClass>(this["ChildClasses"]); } set { this["ChildClasses"] = value; } }
        public Array<PassiveSoundMixModifier> PassiveSoundMixModifiers { get { return new Array<PassiveSoundMixModifier>(this["PassiveSoundMixModifiers"]); } set { this["PassiveSoundMixModifiers"] = value; } }
        public SoundClass ParentClass { get { return this[nameof(ParentClass)].As<SoundClass>(); } set { this["ParentClass"] = value; } }
    }
    public class SoundAttenuation : UEObject
    {
        public SoundAttenuation(nint addr) : base(addr) { }
        public SoundAttenuation() : base(0) { }
        public SoundAttenuationSettings Attenuation { get { return this[nameof(Attenuation)].As<SoundAttenuationSettings>(); } set { this["Attenuation"] = value; } }
    }
    public class SmokeTestCommandlet : Commandlet
    {
        public SmokeTestCommandlet(nint addr) : base(addr) { }
        public SmokeTestCommandlet() : base(0) { }
    }
    public class SlateTextureAtlasInterface : Interface
    {
        public SlateTextureAtlasInterface(nint addr) : base(addr) { }
        public SlateTextureAtlasInterface() : base(0) { }
    }
    public class SlateBrushAsset : UEObject
    {
        public SlateBrushAsset(nint addr) : base(addr) { }
        public SlateBrushAsset() : base(0) { }
        public SlateBrush Brush { get { return this[nameof(Brush)].As<SlateBrush>(); } set { this["Brush"] = value; } }
    }
    public class SkyLightComponent : LightComponentBase
    {
        public SkyLightComponent(nint addr) : base(addr) { }
        public SkyLightComponent() : base(0) { }
        public bool bRealTimeCapture { get { return this["bRealTimeCapture"].Flag; } set { this["bRealTimeCapture"].Flag = value; } }
        public byte SourceType { get { return this["SourceType"].GetValue<byte>(); } set { this["SourceType"].SetValue<byte>(value); } }
        public TextureCube Cubemap { get { return this[nameof(Cubemap)].As<TextureCube>(); } set { this["Cubemap"] = value; } }
        public float SourceCubemapAngle { get { return this["SourceCubemapAngle"].GetValue<float>(); } set { this["SourceCubemapAngle"].SetValue<float>(value); } }
        public int CubemapResolution { get { return this["CubemapResolution"].GetValue<int>(); } set { this["CubemapResolution"].SetValue<int>(value); } }
        public float SkyDistanceThreshold { get { return this["SkyDistanceThreshold"].GetValue<float>(); } set { this["SkyDistanceThreshold"].SetValue<float>(value); } }
        public bool bCaptureEmissiveOnly { get { return this["bCaptureEmissiveOnly"].Flag; } set { this["bCaptureEmissiveOnly"].Flag = value; } }
        public bool bLowerHemisphereIsBlack { get { return this["bLowerHemisphereIsBlack"].Flag; } set { this["bLowerHemisphereIsBlack"].Flag = value; } }
        public LinearColor LowerHemisphereColor { get { return this[nameof(LowerHemisphereColor)].As<LinearColor>(); } set { this["LowerHemisphereColor"] = value; } }
        public float OcclusionMaxDistance { get { return this["OcclusionMaxDistance"].GetValue<float>(); } set { this["OcclusionMaxDistance"].SetValue<float>(value); } }
        public float Contrast { get { return this["Contrast"].GetValue<float>(); } set { this["Contrast"].SetValue<float>(value); } }
        public float OcclusionExponent { get { return this["OcclusionExponent"].GetValue<float>(); } set { this["OcclusionExponent"].SetValue<float>(value); } }
        public float MinOcclusion { get { return this["MinOcclusion"].GetValue<float>(); } set { this["MinOcclusion"].SetValue<float>(value); } }
        public Color OcclusionTint { get { return this[nameof(OcclusionTint)].As<Color>(); } set { this["OcclusionTint"] = value; } }
        public bool bCloudAmbientOcclusion { get { return this["bCloudAmbientOcclusion"].Flag; } set { this["bCloudAmbientOcclusion"].Flag = value; } }
        public float CloudAmbientOcclusionStrength { get { return this["CloudAmbientOcclusionStrength"].GetValue<float>(); } set { this["CloudAmbientOcclusionStrength"].SetValue<float>(value); } }
        public float CloudAmbientOcclusionExtent { get { return this["CloudAmbientOcclusionExtent"].GetValue<float>(); } set { this["CloudAmbientOcclusionExtent"].SetValue<float>(value); } }
        public float CloudAmbientOcclusionMapResolutionScale { get { return this["CloudAmbientOcclusionMapResolutionScale"].GetValue<float>(); } set { this["CloudAmbientOcclusionMapResolutionScale"].SetValue<float>(value); } }
        public float CloudAmbientOcclusionApertureScale { get { return this["CloudAmbientOcclusionApertureScale"].GetValue<float>(); } set { this["CloudAmbientOcclusionApertureScale"].SetValue<float>(value); } }
        public byte OcclusionCombineMode { get { return this["OcclusionCombineMode"].GetValue<byte>(); } set { this["OcclusionCombineMode"].SetValue<byte>(value); } }
        public TextureCube BlendDestinationCubemap { get { return this[nameof(BlendDestinationCubemap)].As<TextureCube>(); } set { this["BlendDestinationCubemap"] = value; } }
        public void SetVolumetricScatteringIntensity(UEObject NewIntensity) { Invoke("SetVolumetricScatteringIntensity", NewIntensity); }
        public void _SkyLightComponent(UEObject bRealTimeCapture, UEObject SourceType, UEObject Cubemap, UEObject SourceCubemapAngle, UEObject CubemapResolution, UEObject SkyDistanceThreshold, UEObject bCaptureEmissiveOnly, UEObject bLowerHemisphereIsBlack, UEObject LowerHemisphereColor, UEObject OcclusionMaxDistance, UEObject Contrast, UEObject OcclusionExponent, UEObject MinOcclusion, UEObject OcclusionTint, UEObject bCloudAmbientOcclusion, UEObject CloudAmbientOcclusionStrength, UEObject CloudAmbientOcclusionExtent, UEObject CloudAmbientOcclusionMapResolutionScale, UEObject CloudAmbientOcclusionApertureScale, UEObject OcclusionCombineMode, UEObject BlendDestinationCubemap) { Invoke("SkyLightComponent", bRealTimeCapture, SourceType, Cubemap, SourceCubemapAngle, CubemapResolution, SkyDistanceThreshold, bCaptureEmissiveOnly, bLowerHemisphereIsBlack, LowerHemisphereColor, OcclusionMaxDistance, Contrast, OcclusionExponent, MinOcclusion, OcclusionTint, bCloudAmbientOcclusion, CloudAmbientOcclusionStrength, CloudAmbientOcclusionExtent, CloudAmbientOcclusionMapResolutionScale, CloudAmbientOcclusionApertureScale, OcclusionCombineMode, BlendDestinationCubemap); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SkyAtmosphere : Info
    {
        public SkyAtmosphere(nint addr) : base(addr) { }
        public SkyAtmosphere() : base(0) { }
        public SkyAtmosphereComponent SkyAtmosphereComponent { get { return this[nameof(SkyAtmosphereComponent)].As<SkyAtmosphereComponent>(); } set { this["SkyAtmosphereComponent"] = value; } }
    }
    public class SkyAtmosphereComponent : SceneComponent
    {
        public SkyAtmosphereComponent(nint addr) : base(addr) { }
        public SkyAtmosphereComponent() : base(0) { }
        public ESkyAtmosphereTransformMode TransformMode { get { return (ESkyAtmosphereTransformMode)this["TransformMode"].GetValue<int>(); } set { this["TransformMode"].SetValue<int>((int)value); } }
        public float BottomRadius { get { return this["BottomRadius"].GetValue<float>(); } set { this["BottomRadius"].SetValue<float>(value); } }
        public Color GroundAlbedo { get { return this[nameof(GroundAlbedo)].As<Color>(); } set { this["GroundAlbedo"] = value; } }
        public float AtmosphereHeight { get { return this["AtmosphereHeight"].GetValue<float>(); } set { this["AtmosphereHeight"].SetValue<float>(value); } }
        public float MultiScatteringFactor { get { return this["MultiScatteringFactor"].GetValue<float>(); } set { this["MultiScatteringFactor"].SetValue<float>(value); } }
        public float TraceSampleCountScale { get { return this["TraceSampleCountScale"].GetValue<float>(); } set { this["TraceSampleCountScale"].SetValue<float>(value); } }
        public float RayleighScatteringScale { get { return this["RayleighScatteringScale"].GetValue<float>(); } set { this["RayleighScatteringScale"].SetValue<float>(value); } }
        public LinearColor RayleighScattering { get { return this[nameof(RayleighScattering)].As<LinearColor>(); } set { this["RayleighScattering"] = value; } }
        public float RayleighExponentialDistribution { get { return this["RayleighExponentialDistribution"].GetValue<float>(); } set { this["RayleighExponentialDistribution"].SetValue<float>(value); } }
        public float MieScatteringScale { get { return this["MieScatteringScale"].GetValue<float>(); } set { this["MieScatteringScale"].SetValue<float>(value); } }
        public LinearColor MieScattering { get { return this[nameof(MieScattering)].As<LinearColor>(); } set { this["MieScattering"] = value; } }
        public float MieAbsorptionScale { get { return this["MieAbsorptionScale"].GetValue<float>(); } set { this["MieAbsorptionScale"].SetValue<float>(value); } }
        public LinearColor MieAbsorption { get { return this[nameof(MieAbsorption)].As<LinearColor>(); } set { this["MieAbsorption"] = value; } }
        public float MieAnisotropy { get { return this["MieAnisotropy"].GetValue<float>(); } set { this["MieAnisotropy"].SetValue<float>(value); } }
        public float MieExponentialDistribution { get { return this["MieExponentialDistribution"].GetValue<float>(); } set { this["MieExponentialDistribution"].SetValue<float>(value); } }
        public float OtherAbsorptionScale { get { return this["OtherAbsorptionScale"].GetValue<float>(); } set { this["OtherAbsorptionScale"].SetValue<float>(value); } }
        public LinearColor OtherAbsorption { get { return this[nameof(OtherAbsorption)].As<LinearColor>(); } set { this["OtherAbsorption"] = value; } }
        public TentDistribution OtherTentDistribution { get { return this[nameof(OtherTentDistribution)].As<TentDistribution>(); } set { this["OtherTentDistribution"] = value; } }
        public LinearColor SkyLuminanceFactor { get { return this[nameof(SkyLuminanceFactor)].As<LinearColor>(); } set { this["SkyLuminanceFactor"] = value; } }
        public float AerialPespectiveViewDistanceScale { get { return this["AerialPespectiveViewDistanceScale"].GetValue<float>(); } set { this["AerialPespectiveViewDistanceScale"].SetValue<float>(value); } }
        public float HeightFogContribution { get { return this["HeightFogContribution"].GetValue<float>(); } set { this["HeightFogContribution"].SetValue<float>(value); } }
        public float TransmittanceMinLightElevationAngle { get { return this["TransmittanceMinLightElevationAngle"].GetValue<float>(); } set { this["TransmittanceMinLightElevationAngle"].SetValue<float>(value); } }
        public float AerialPerspectiveStartDepth { get { return this["AerialPerspectiveStartDepth"].GetValue<float>(); } set { this["AerialPerspectiveStartDepth"].SetValue<float>(value); } }
        public SDK.Script.CoreUObject.Guid bStaticLightingBuiltGUID { get { return this[nameof(bStaticLightingBuiltGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["bStaticLightingBuiltGUID"] = value; } }
        public void SetSkyLuminanceFactor(UEObject NewValue) { Invoke("SetSkyLuminanceFactor", NewValue); }
        public void _SkyAtmosphereComponent(UEObject TransformMode, UEObject BottomRadius, UEObject GroundAlbedo, UEObject AtmosphereHeight, UEObject MultiScatteringFactor, UEObject TraceSampleCountScale, UEObject RayleighScatteringScale, UEObject RayleighScattering, UEObject RayleighExponentialDistribution, UEObject MieScatteringScale, UEObject MieScattering, UEObject MieAbsorptionScale, UEObject MieAbsorption, UEObject MieAnisotropy, UEObject MieExponentialDistribution, UEObject OtherAbsorptionScale, UEObject OtherAbsorption, UEObject OtherTentDistribution, UEObject SkyLuminanceFactor, UEObject AerialPespectiveViewDistanceScale, UEObject HeightFogContribution, UEObject TransmittanceMinLightElevationAngle, UEObject AerialPerspectiveStartDepth, UEObject bStaticLightingBuiltGUID) { Invoke("SkyAtmosphereComponent", TransformMode, BottomRadius, GroundAlbedo, AtmosphereHeight, MultiScatteringFactor, TraceSampleCountScale, RayleighScatteringScale, RayleighScattering, RayleighExponentialDistribution, MieScatteringScale, MieScattering, MieAbsorptionScale, MieAbsorption, MieAnisotropy, MieExponentialDistribution, OtherAbsorptionScale, OtherAbsorption, OtherTentDistribution, SkyLuminanceFactor, AerialPespectiveViewDistanceScale, HeightFogContribution, TransmittanceMinLightElevationAngle, AerialPerspectiveStartDepth, bStaticLightingBuiltGUID); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SkeletalMeshSocket : UEObject
    {
        public SkeletalMeshSocket(nint addr) : base(addr) { }
        public SkeletalMeshSocket() : base(0) { }
        public string SocketName { get { return this["SocketName"].ToString(); } set { /* String properties are read-only */ } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale { get { return this[nameof(RelativeScale)].As<Vector>(); } set { this["RelativeScale"] = value; } }
        public bool bForceAlwaysAnimated { get { return this["bForceAlwaysAnimated"].Flag; } set { this["bForceAlwaysAnimated"].Flag = value; } }
        public void InitializeSocketFromLocation(UEObject SkelComp, UEObject WorldLocation, UEObject WorldNormal) { Invoke("InitializeSocketFromLocation", SkelComp, WorldLocation, WorldNormal); }
        public void _SkeletalMeshSocket(UEObject SocketName, UEObject BoneName, UEObject RelativeLocation, UEObject RelativeRotation, UEObject RelativeScale, UEObject bForceAlwaysAnimated) { Invoke("SkeletalMeshSocket", SocketName, BoneName, RelativeLocation, RelativeRotation, RelativeScale, bForceAlwaysAnimated); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SkeletalMeshSimplificationSettings : UEObject
    {
        public SkeletalMeshSimplificationSettings(nint addr) : base(addr) { }
        public SkeletalMeshSimplificationSettings() : base(0) { }
        public string SkeletalMeshReductionModuleName { get { return this["SkeletalMeshReductionModuleName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SkeletalMeshLODSettings : DataAsset
    {
        public SkeletalMeshLODSettings(nint addr) : base(addr) { }
        public SkeletalMeshLODSettings() : base(0) { }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public PerPlatformBool DisableBelowMinLodStripping { get { return this[nameof(DisableBelowMinLodStripping)].As<PerPlatformBool>(); } set { this["DisableBelowMinLodStripping"] = value; } }
        public bool bOverrideLODStreamingSettings { get { return this["bOverrideLODStreamingSettings"].Flag; } set { this["bOverrideLODStreamingSettings"].Flag = value; } }
        public PerPlatformBool bSupportLODStreaming { get { return this[nameof(bSupportLODStreaming)].As<PerPlatformBool>(); } set { this["bSupportLODStreaming"] = value; } }
        public PerPlatformInt MaxNumStreamedLODs { get { return this[nameof(MaxNumStreamedLODs)].As<PerPlatformInt>(); } set { this["MaxNumStreamedLODs"] = value; } }
        public PerPlatformInt MaxNumOptionalLODs { get { return this[nameof(MaxNumOptionalLODs)].As<PerPlatformInt>(); } set { this["MaxNumOptionalLODs"] = value; } }
        public Array<SkeletalMeshLODGroupSettings> LODGroups { get { return new Array<SkeletalMeshLODGroupSettings>(this["LODGroups"]); } set { this["LODGroups"] = value; } }
    }
    public class SkeletalMeshEditorData : UEObject
    {
        public SkeletalMeshEditorData(nint addr) : base(addr) { }
        public SkeletalMeshEditorData() : base(0) { }
    }
    public class SkeletalMeshActor : Actor
    {
        public SkeletalMeshActor(nint addr) : base(addr) { }
        public SkeletalMeshActor() : base(0) { }
        public bool bShouldDoAnimNotifies { get { return this["bShouldDoAnimNotifies"].Flag; } set { this["bShouldDoAnimNotifies"].Flag = value; } }
        public bool bWakeOnLevelStart { get { return this["bWakeOnLevelStart"].Flag; } set { this["bWakeOnLevelStart"].Flag = value; } }
        public SkeletalMeshComponent SkeletalMeshComponent { get { return this[nameof(SkeletalMeshComponent)].As<SkeletalMeshComponent>(); } set { this["SkeletalMeshComponent"] = value; } }
        public SkeletalMesh ReplicatedMesh { get { return this[nameof(ReplicatedMesh)].As<SkeletalMesh>(); } set { this["ReplicatedMesh"] = value; } }
        public PhysicsAsset ReplicatedPhysAsset { get { return this[nameof(ReplicatedPhysAsset)].As<PhysicsAsset>(); } set { this["ReplicatedPhysAsset"] = value; } }
        public MaterialInterface ReplicatedMaterial0 { get { return this[nameof(ReplicatedMaterial0)].As<MaterialInterface>(); } set { this["ReplicatedMaterial0"] = value; } }
        public MaterialInterface ReplicatedMaterial1 { get { return this[nameof(ReplicatedMaterial1)].As<MaterialInterface>(); } set { this["ReplicatedMaterial1"] = value; } }
        public void OnRep_ReplicatedPhysAsset() { Invoke("OnRep_ReplicatedPhysAsset"); }
        public void _SkeletalMeshActor(UEObject bShouldDoAnimNotifies, UEObject bWakeOnLevelStart, UEObject SkeletalMeshComponent, UEObject ReplicatedMesh, UEObject ReplicatedPhysAsset, UEObject ReplicatedMaterial0, UEObject ReplicatedMaterial1) { Invoke("SkeletalMeshActor", bShouldDoAnimNotifies, bWakeOnLevelStart, SkeletalMeshComponent, ReplicatedMesh, ReplicatedPhysAsset, ReplicatedMaterial0, ReplicatedMaterial1); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SimpleConstructionScript : UEObject
    {
        public SimpleConstructionScript(nint addr) : base(addr) { }
        public SimpleConstructionScript() : base(0) { }
        public Array<SCS_Node> RootNodes { get { return new Array<SCS_Node>(this["RootNodes"]); } set { this["RootNodes"] = value; } }
        public Array<SCS_Node> AllNodes { get { return new Array<SCS_Node>(this["AllNodes"]); } set { this["AllNodes"] = value; } }
        public SCS_Node DefaultSceneRootNode { get { return this[nameof(DefaultSceneRootNode)].As<SCS_Node>(); } set { this["DefaultSceneRootNode"] = value; } }
    }
    public class ShadowMapTexture2D : Texture2D
    {
        public ShadowMapTexture2D(nint addr) : base(addr) { }
        public ShadowMapTexture2D() : base(0) { }
        public byte ShadowmapFlags { get { return this["ShadowmapFlags"].GetValue<byte>(); } set { this["ShadowmapFlags"].SetValue<byte>(value); } }
    }
    public class ServerStatReplicator : Info
    {
        public ServerStatReplicator(nint addr) : base(addr) { }
        public ServerStatReplicator() : base(0) { }
        public bool bUpdateStatNet { get { return this["bUpdateStatNet"].Flag; } set { this["bUpdateStatNet"].Flag = value; } }
        public bool bOverwriteClientStats { get { return this["bOverwriteClientStats"].Flag; } set { this["bOverwriteClientStats"].Flag = value; } }
        public uint Channels { get { return this["Channels"].GetValue<uint>(); } set { this["Channels"].SetValue<uint>(value); } }
        public uint InRate { get { return this["InRate"].GetValue<uint>(); } set { this["InRate"].SetValue<uint>(value); } }
        public uint OutRate { get { return this["OutRate"].GetValue<uint>(); } set { this["OutRate"].SetValue<uint>(value); } }
        public uint MaxPacketOverhead { get { return this["MaxPacketOverhead"].GetValue<uint>(); } set { this["MaxPacketOverhead"].SetValue<uint>(value); } }
        public uint InRateClientMax { get { return this["InRateClientMax"].GetValue<uint>(); } set { this["InRateClientMax"].SetValue<uint>(value); } }
        public uint InRateClientMin { get { return this["InRateClientMin"].GetValue<uint>(); } set { this["InRateClientMin"].SetValue<uint>(value); } }
        public uint InRateClientAvg { get { return this["InRateClientAvg"].GetValue<uint>(); } set { this["InRateClientAvg"].SetValue<uint>(value); } }
        public uint InPacketsClientMax { get { return this["InPacketsClientMax"].GetValue<uint>(); } set { this["InPacketsClientMax"].SetValue<uint>(value); } }
        public uint InPacketsClientMin { get { return this["InPacketsClientMin"].GetValue<uint>(); } set { this["InPacketsClientMin"].SetValue<uint>(value); } }
        public uint InPacketsClientAvg { get { return this["InPacketsClientAvg"].GetValue<uint>(); } set { this["InPacketsClientAvg"].SetValue<uint>(value); } }
        public uint OutRateClientMax { get { return this["OutRateClientMax"].GetValue<uint>(); } set { this["OutRateClientMax"].SetValue<uint>(value); } }
        public uint OutRateClientMin { get { return this["OutRateClientMin"].GetValue<uint>(); } set { this["OutRateClientMin"].SetValue<uint>(value); } }
        public uint OutRateClientAvg { get { return this["OutRateClientAvg"].GetValue<uint>(); } set { this["OutRateClientAvg"].SetValue<uint>(value); } }
        public uint OutPacketsClientMax { get { return this["OutPacketsClientMax"].GetValue<uint>(); } set { this["OutPacketsClientMax"].SetValue<uint>(value); } }
        public uint OutPacketsClientMin { get { return this["OutPacketsClientMin"].GetValue<uint>(); } set { this["OutPacketsClientMin"].SetValue<uint>(value); } }
        public uint OutPacketsClientAvg { get { return this["OutPacketsClientAvg"].GetValue<uint>(); } set { this["OutPacketsClientAvg"].SetValue<uint>(value); } }
        public uint NetNumClients { get { return this["NetNumClients"].GetValue<uint>(); } set { this["NetNumClients"].SetValue<uint>(value); } }
        public uint InPackets { get { return this["InPackets"].GetValue<uint>(); } set { this["InPackets"].SetValue<uint>(value); } }
        public uint OutPackets { get { return this["OutPackets"].GetValue<uint>(); } set { this["OutPackets"].SetValue<uint>(value); } }
        public uint InBunches { get { return this["InBunches"].GetValue<uint>(); } set { this["InBunches"].SetValue<uint>(value); } }
        public uint OutBunches { get { return this["OutBunches"].GetValue<uint>(); } set { this["OutBunches"].SetValue<uint>(value); } }
        public uint OutLoss { get { return this["OutLoss"].GetValue<uint>(); } set { this["OutLoss"].SetValue<uint>(value); } }
        public uint InLoss { get { return this["InLoss"].GetValue<uint>(); } set { this["InLoss"].SetValue<uint>(value); } }
        public uint VoiceBytesSent { get { return this["VoiceBytesSent"].GetValue<uint>(); } set { this["VoiceBytesSent"].SetValue<uint>(value); } }
        public uint VoiceBytesRecv { get { return this["VoiceBytesRecv"].GetValue<uint>(); } set { this["VoiceBytesRecv"].SetValue<uint>(value); } }
        public uint VoicePacketsSent { get { return this["VoicePacketsSent"].GetValue<uint>(); } set { this["VoicePacketsSent"].SetValue<uint>(value); } }
        public uint VoicePacketsRecv { get { return this["VoicePacketsRecv"].GetValue<uint>(); } set { this["VoicePacketsRecv"].SetValue<uint>(value); } }
        public uint PercentInVoice { get { return this["PercentInVoice"].GetValue<uint>(); } set { this["PercentInVoice"].SetValue<uint>(value); } }
        public uint PercentOutVoice { get { return this["PercentOutVoice"].GetValue<uint>(); } set { this["PercentOutVoice"].SetValue<uint>(value); } }
        public uint NumActorChannels { get { return this["NumActorChannels"].GetValue<uint>(); } set { this["NumActorChannels"].SetValue<uint>(value); } }
        public uint NumConsideredActors { get { return this["NumConsideredActors"].GetValue<uint>(); } set { this["NumConsideredActors"].SetValue<uint>(value); } }
        public uint PrioritizedActors { get { return this["PrioritizedActors"].GetValue<uint>(); } set { this["PrioritizedActors"].SetValue<uint>(value); } }
        public uint NumRelevantActors { get { return this["NumRelevantActors"].GetValue<uint>(); } set { this["NumRelevantActors"].SetValue<uint>(value); } }
        public uint NumRelevantDeletedActors { get { return this["NumRelevantDeletedActors"].GetValue<uint>(); } set { this["NumRelevantDeletedActors"].SetValue<uint>(value); } }
        public uint NumReplicatedActorAttempts { get { return this["NumReplicatedActorAttempts"].GetValue<uint>(); } set { this["NumReplicatedActorAttempts"].SetValue<uint>(value); } }
        public uint NumReplicatedActors { get { return this["NumReplicatedActors"].GetValue<uint>(); } set { this["NumReplicatedActors"].SetValue<uint>(value); } }
        public uint NumActors { get { return this["NumActors"].GetValue<uint>(); } set { this["NumActors"].SetValue<uint>(value); } }
        public uint NumNetActors { get { return this["NumNetActors"].GetValue<uint>(); } set { this["NumNetActors"].SetValue<uint>(value); } }
        public uint NumDormantActors { get { return this["NumDormantActors"].GetValue<uint>(); } set { this["NumDormantActors"].SetValue<uint>(value); } }
        public uint NumInitiallyDormantActors { get { return this["NumInitiallyDormantActors"].GetValue<uint>(); } set { this["NumInitiallyDormantActors"].SetValue<uint>(value); } }
        public uint NumNetGUIDsAckd { get { return this["NumNetGUIDsAckd"].GetValue<uint>(); } set { this["NumNetGUIDsAckd"].SetValue<uint>(value); } }
        public uint NumNetGUIDsPending { get { return this["NumNetGUIDsPending"].GetValue<uint>(); } set { this["NumNetGUIDsPending"].SetValue<uint>(value); } }
        public uint NumNetGUIDsUnAckd { get { return this["NumNetGUIDsUnAckd"].GetValue<uint>(); } set { this["NumNetGUIDsUnAckd"].SetValue<uint>(value); } }
        public uint ObjPathBytes { get { return this["ObjPathBytes"].GetValue<uint>(); } set { this["ObjPathBytes"].SetValue<uint>(value); } }
        public uint NetGUIDOutRate { get { return this["NetGUIDOutRate"].GetValue<uint>(); } set { this["NetGUIDOutRate"].SetValue<uint>(value); } }
        public uint NetGUIDInRate { get { return this["NetGUIDInRate"].GetValue<uint>(); } set { this["NetGUIDInRate"].SetValue<uint>(value); } }
        public uint NetSaturated { get { return this["NetSaturated"].GetValue<uint>(); } set { this["NetSaturated"].SetValue<uint>(value); } }
    }
    public class Selection : UEObject
    {
        public Selection(nint addr) : base(addr) { }
        public Selection() : base(0) { }
    }
    public class SCS_Node : UEObject
    {
        public SCS_Node(nint addr) : base(addr) { }
        public SCS_Node() : base(0) { }
        public UEObject ComponentClass { get { return this["ComponentClass"]; } set { this["ComponentClass"] = value; } }
        public ActorComponent ComponentTemplate { get { return this[nameof(ComponentTemplate)].As<ActorComponent>(); } set { this["ComponentTemplate"] = value; } }
        public BlueprintCookedComponentInstancingData CookedComponentInstancingData { get { return this[nameof(CookedComponentInstancingData)].As<BlueprintCookedComponentInstancingData>(); } set { this["CookedComponentInstancingData"] = value; } }
        public string AttachToName { get { return this["AttachToName"].ToString(); } set { /* String properties are read-only */ } }
        public string ParentComponentOrVariableName { get { return this["ParentComponentOrVariableName"].ToString(); } set { /* String properties are read-only */ } }
        public string ParentComponentOwnerClassName { get { return this["ParentComponentOwnerClassName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsParentComponentNative { get { return this["bIsParentComponentNative"].Flag; } set { this["bIsParentComponentNative"].Flag = value; } }
        public Array<SCS_Node> ChildNodes { get { return new Array<SCS_Node>(this["ChildNodes"]); } set { this["ChildNodes"] = value; } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this["MetaDataArray"]); } set { this["MetaDataArray"] = value; } }
        public SDK.Script.CoreUObject.Guid VariableGuid { get { return this[nameof(VariableGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["VariableGuid"] = value; } }
        public string InternalVariableName { get { return this["InternalVariableName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SceneCaptureCube : SceneCapture
    {
        public SceneCaptureCube(nint addr) : base(addr) { }
        public SceneCaptureCube() : base(0) { }
        public SceneCaptureComponentCube CaptureComponentCube { get { return this[nameof(CaptureComponentCube)].As<SceneCaptureComponentCube>(); } set { this["CaptureComponentCube"] = value; } }
        public void OnInterpToggle(UEObject bEnable) { Invoke("OnInterpToggle", bEnable); }
        public void _SceneCaptureCube(UEObject CaptureComponentCube) { Invoke("SceneCaptureCube", CaptureComponentCube); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SceneCaptureComponentCube : SceneCaptureComponent
    {
        public SceneCaptureComponentCube(nint addr) : base(addr) { }
        public SceneCaptureComponentCube() : base(0) { }
        public TextureRenderTargetCube TextureTarget { get { return this[nameof(TextureTarget)].As<TextureRenderTargetCube>(); } set { this["TextureTarget"] = value; } }
        public bool bCaptureRotation { get { return this["bCaptureRotation"].Flag; } set { this["bCaptureRotation"].Flag = value; } }
        public TextureRenderTargetCube TextureTargetLeft { get { return this[nameof(TextureTargetLeft)].As<TextureRenderTargetCube>(); } set { this["TextureTargetLeft"] = value; } }
        public TextureRenderTargetCube TextureTargetRight { get { return this[nameof(TextureTargetRight)].As<TextureRenderTargetCube>(); } set { this["TextureTargetRight"] = value; } }
        public TextureRenderTarget2D TextureTargetODS { get { return this[nameof(TextureTargetODS)].As<TextureRenderTarget2D>(); } set { this["TextureTargetODS"] = value; } }
        public float IPD { get { return this["IPD"].GetValue<float>(); } set { this["IPD"].SetValue<float>(value); } }
        public void CaptureScene() { Invoke("CaptureScene"); }
        public void _SceneCaptureComponentCube(UEObject TextureTarget, UEObject bCaptureRotation, UEObject TextureTargetLeft, UEObject TextureTargetRight, UEObject TextureTargetODS, UEObject IPD) { Invoke("SceneCaptureComponentCube", TextureTarget, bCaptureRotation, TextureTargetLeft, TextureTargetRight, TextureTargetODS, IPD); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SceneCaptureComponent2D : SceneCaptureComponent
    {
        public SceneCaptureComponent2D(nint addr) : base(addr) { }
        public SceneCaptureComponent2D() : base(0) { }
        public byte ProjectionType { get { return this["ProjectionType"].GetValue<byte>(); } set { this["ProjectionType"].SetValue<byte>(value); } }
        public float FOVAngle { get { return this["FOVAngle"].GetValue<float>(); } set { this["FOVAngle"].SetValue<float>(value); } }
        public float OrthoWidth { get { return this["OrthoWidth"].GetValue<float>(); } set { this["OrthoWidth"].SetValue<float>(value); } }
        public TextureRenderTarget2D TextureTarget { get { return this[nameof(TextureTarget)].As<TextureRenderTarget2D>(); } set { this["TextureTarget"] = value; } }
        public byte CompositeMode { get { return this["CompositeMode"].GetValue<byte>(); } set { this["CompositeMode"].SetValue<byte>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public float PostProcessBlendWeight { get { return this["PostProcessBlendWeight"].GetValue<float>(); } set { this["PostProcessBlendWeight"].SetValue<float>(value); } }
        public bool bOverride_CustomNearClippingPlane { get { return this["bOverride_CustomNearClippingPlane"].Flag; } set { this["bOverride_CustomNearClippingPlane"].Flag = value; } }
        public float CustomNearClippingPlane { get { return this["CustomNearClippingPlane"].GetValue<float>(); } set { this["CustomNearClippingPlane"].SetValue<float>(value); } }
        public bool bUseCustomProjectionMatrix { get { return this["bUseCustomProjectionMatrix"].Flag; } set { this["bUseCustomProjectionMatrix"].Flag = value; } }
        public Matrix CustomProjectionMatrix { get { return this[nameof(CustomProjectionMatrix)].As<Matrix>(); } set { this["CustomProjectionMatrix"] = value; } }
        public bool bEnableClipPlane { get { return this["bEnableClipPlane"].Flag; } set { this["bEnableClipPlane"].Flag = value; } }
        public Vector ClipPlaneBase { get { return this[nameof(ClipPlaneBase)].As<Vector>(); } set { this["ClipPlaneBase"] = value; } }
        public Vector ClipPlaneNormal { get { return this[nameof(ClipPlaneNormal)].As<Vector>(); } set { this["ClipPlaneNormal"] = value; } }
        public bool bCameraCutThisFrame { get { return this["bCameraCutThisFrame"].Flag; } set { this["bCameraCutThisFrame"].Flag = value; } }
        public bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent { get { return this["bConsiderUnrenderedOpaquePixelAsFullyTranslucent"].Flag; } set { this["bConsiderUnrenderedOpaquePixelAsFullyTranslucent"].Flag = value; } }
        public bool bDisableFlipCopyGLES { get { return this["bDisableFlipCopyGLES"].Flag; } set { this["bDisableFlipCopyGLES"].Flag = value; } }
        public void RemoveBlendable(UEObject InBlendableObject) { Invoke("RemoveBlendable", InBlendableObject); }
        public void _SceneCaptureComponent2D(UEObject ProjectionType, UEObject FOVAngle, UEObject OrthoWidth, UEObject TextureTarget, UEObject CompositeMode, UEObject PostProcessSettings, UEObject PostProcessBlendWeight, UEObject bOverride_CustomNearClippingPlane, UEObject CustomNearClippingPlane, UEObject bUseCustomProjectionMatrix, UEObject CustomProjectionMatrix, UEObject bEnableClipPlane, UEObject ClipPlaneBase, UEObject ClipPlaneNormal, UEObject bCameraCutThisFrame, UEObject bConsiderUnrenderedOpaquePixelAsFullyTranslucent, UEObject bDisableFlipCopyGLES) { Invoke("SceneCaptureComponent2D", ProjectionType, FOVAngle, OrthoWidth, TextureTarget, CompositeMode, PostProcessSettings, PostProcessBlendWeight, bOverride_CustomNearClippingPlane, CustomNearClippingPlane, bUseCustomProjectionMatrix, CustomProjectionMatrix, bEnableClipPlane, ClipPlaneBase, ClipPlaneNormal, bCameraCutThisFrame, bConsiderUnrenderedOpaquePixelAsFullyTranslucent, bDisableFlipCopyGLES); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SceneCapture2D : SceneCapture
    {
        public SceneCapture2D(nint addr) : base(addr) { }
        public SceneCapture2D() : base(0) { }
        public SceneCaptureComponent2D CaptureComponent2D { get { return this[nameof(CaptureComponent2D)].As<SceneCaptureComponent2D>(); } set { this["CaptureComponent2D"] = value; } }
        public void OnInterpToggle(UEObject bEnable) { Invoke("OnInterpToggle", bEnable); }
        public void _SceneCapture2D(UEObject CaptureComponent2D) { Invoke("SceneCapture2D", CaptureComponent2D); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Scene : UEObject
    {
        public Scene(nint addr) : base(addr) { }
        public Scene() : base(0) { }
    }
    public class RVOAvoidanceInterface : Interface
    {
        public RVOAvoidanceInterface(nint addr) : base(addr) { }
        public RVOAvoidanceInterface() : base(0) { }
    }
    public class RuntimeVirtualTextureVolume : Actor
    {
        public RuntimeVirtualTextureVolume(nint addr) : base(addr) { }
        public RuntimeVirtualTextureVolume() : base(0) { }
        public RuntimeVirtualTextureComponent VirtualTextureComponent { get { return this[nameof(VirtualTextureComponent)].As<RuntimeVirtualTextureComponent>(); } set { this["VirtualTextureComponent"] = value; } }
    }
    public class RuntimeVirtualTextureComponent : SceneComponent
    {
        public RuntimeVirtualTextureComponent(nint addr) : base(addr) { }
        public RuntimeVirtualTextureComponent() : base(0) { }
        public UEObject BoundsAlignActor { get { return this["BoundsAlignActor"]; } set { this["BoundsAlignActor"] = value; } }
        public bool bSetBoundsButton { get { return this["bSetBoundsButton"].Flag; } set { this["bSetBoundsButton"].Flag = value; } }
        public bool bSnapBoundsToLandscape { get { return this["bSnapBoundsToLandscape"].Flag; } set { this["bSnapBoundsToLandscape"].Flag = value; } }
        public RuntimeVirtualTexture VirtualTexture { get { return this[nameof(VirtualTexture)].As<RuntimeVirtualTexture>(); } set { this["VirtualTexture"] = value; } }
        public bool bEnableScalability { get { return this["bEnableScalability"].Flag; } set { this["bEnableScalability"].Flag = value; } }
        public uint ScalabilityGroup { get { return this["ScalabilityGroup"].GetValue<uint>(); } set { this["ScalabilityGroup"].SetValue<uint>(value); } }
        public bool bHidePrimitives { get { return this["bHidePrimitives"].Flag; } set { this["bHidePrimitives"].Flag = value; } }
        public VirtualTextureBuilder StreamingTexture { get { return this[nameof(StreamingTexture)].As<VirtualTextureBuilder>(); } set { this["StreamingTexture"] = value; } }
        public int StreamLowMips { get { return this["StreamLowMips"].GetValue<int>(); } set { this["StreamLowMips"].SetValue<int>(value); } }
        public bool bBuildStreamingMipsButton { get { return this["bBuildStreamingMipsButton"].Flag; } set { this["bBuildStreamingMipsButton"].Flag = value; } }
        public bool bEnableCompressCrunch { get { return this["bEnableCompressCrunch"].Flag; } set { this["bEnableCompressCrunch"].Flag = value; } }
        public bool bUseStreamingLowMipsInEditor { get { return this["bUseStreamingLowMipsInEditor"].Flag; } set { this["bUseStreamingLowMipsInEditor"].Flag = value; } }
        public bool bBuildDebugStreamingMips { get { return this["bBuildDebugStreamingMips"].Flag; } set { this["bBuildDebugStreamingMips"].Flag = value; } }
        public void Invalidate(UEObject WorldBounds) { Invoke("Invalidate", WorldBounds); }
        public void _RuntimeVirtualTextureComponent(UEObject BoundsAlignActor, UEObject bSetBoundsButton, UEObject bSnapBoundsToLandscape, UEObject VirtualTexture, UEObject bEnableScalability, UEObject ScalabilityGroup, UEObject bHidePrimitives, UEObject StreamingTexture, UEObject StreamLowMips, UEObject bBuildStreamingMipsButton, UEObject bEnableCompressCrunch, UEObject bUseStreamingLowMipsInEditor, UEObject bBuildDebugStreamingMips) { Invoke("RuntimeVirtualTextureComponent", BoundsAlignActor, bSetBoundsButton, bSnapBoundsToLandscape, VirtualTexture, bEnableScalability, ScalabilityGroup, bHidePrimitives, StreamingTexture, StreamLowMips, bBuildStreamingMipsButton, bEnableCompressCrunch, bUseStreamingLowMipsInEditor, bBuildDebugStreamingMips); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class RuntimeVirtualTexture : UEObject
    {
        public RuntimeVirtualTexture(nint addr) : base(addr) { }
        public RuntimeVirtualTexture() : base(0) { }
        public int TileCount { get { return this["TileCount"].GetValue<int>(); } set { this["TileCount"].SetValue<int>(value); } }
        public int TileSize { get { return this["TileSize"].GetValue<int>(); } set { this["TileSize"].SetValue<int>(value); } }
        public int TileBorderSize { get { return this["TileBorderSize"].GetValue<int>(); } set { this["TileBorderSize"].SetValue<int>(value); } }
        public ERuntimeVirtualTextureMaterialType MaterialType { get { return (ERuntimeVirtualTextureMaterialType)this["MaterialType"].GetValue<int>(); } set { this["MaterialType"].SetValue<int>((int)value); } }
        public bool bCompressTextures { get { return this["bCompressTextures"].Flag; } set { this["bCompressTextures"].Flag = value; } }
        public bool bClearTextures { get { return this["bClearTextures"].Flag; } set { this["bClearTextures"].Flag = value; } }
        public bool bSinglePhysicalSpace { get { return this["bSinglePhysicalSpace"].Flag; } set { this["bSinglePhysicalSpace"].Flag = value; } }
        public bool bPrivateSpace { get { return this["bPrivateSpace"].Flag; } set { this["bPrivateSpace"].Flag = value; } }
        public bool bAdaptive { get { return this["bAdaptive"].Flag; } set { this["bAdaptive"].Flag = value; } }
        public bool bContinuousUpdate { get { return this["bContinuousUpdate"].Flag; } set { this["bContinuousUpdate"].Flag = value; } }
        public int RemoveLowMips { get { return this["RemoveLowMips"].GetValue<int>(); } set { this["RemoveLowMips"].SetValue<int>(value); } }
        public byte LODGroup { get { return this["LODGroup"].GetValue<byte>(); } set { this["LODGroup"].SetValue<byte>(value); } }
        public int Size { get { return this["Size"].GetValue<int>(); } set { this["Size"].SetValue<int>(value); } }
        public RuntimeVirtualTextureStreamingProxy StreamingTexture { get { return this[nameof(StreamingTexture)].As<RuntimeVirtualTextureStreamingProxy>(); } set { this["StreamingTexture"] = value; } }
        public UEObject GetTileSize() { return InvokeUEObject("GetTileSize"); }
        public void _RuntimeVirtualTexture(UEObject TileCount, UEObject TileSize, UEObject TileBorderSize, UEObject MaterialType, UEObject bCompressTextures, UEObject bClearTextures, UEObject bSinglePhysicalSpace, UEObject bPrivateSpace, UEObject bAdaptive, UEObject bContinuousUpdate, UEObject RemoveLowMips, UEObject LODGroup, UEObject Size, UEObject StreamingTexture) { Invoke("RuntimeVirtualTexture", TileCount, TileSize, TileBorderSize, MaterialType, bCompressTextures, bClearTextures, bSinglePhysicalSpace, bPrivateSpace, bAdaptive, bContinuousUpdate, RemoveLowMips, LODGroup, Size, StreamingTexture); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class RuntimeOptionsBase : UEObject
    {
        public RuntimeOptionsBase(nint addr) : base(addr) { }
        public RuntimeOptionsBase() : base(0) { }
    }
    public class RotatingMovementComponent : MovementComponent
    {
        public RotatingMovementComponent(nint addr) : base(addr) { }
        public RotatingMovementComponent() : base(0) { }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public Vector PivotTranslation { get { return this[nameof(PivotTranslation)].As<Vector>(); } set { this["PivotTranslation"] = value; } }
        public bool bRotationInLocalSpace { get { return this["bRotationInLocalSpace"].Flag; } set { this["bRotationInLocalSpace"].Flag = value; } }
    }
    public class Rig : UEObject
    {
        public Rig(nint addr) : base(addr) { }
        public Rig() : base(0) { }
        public Array<TransformBase> TransformBases { get { return new Array<TransformBase>(this["TransformBases"]); } set { this["TransformBases"] = value; } }
        public Array<Node> Nodes { get { return new Array<Node>(this["Nodes"]); } set { this["Nodes"] = value; } }
    }
    public class ReverbEffect : UEObject
    {
        public ReverbEffect(nint addr) : base(addr) { }
        public ReverbEffect() : base(0) { }
        public bool bBypassEarlyReflections { get { return this["bBypassEarlyReflections"].Flag; } set { this["bBypassEarlyReflections"].Flag = value; } }
        public float ReflectionsDelay { get { return this["ReflectionsDelay"].GetValue<float>(); } set { this["ReflectionsDelay"].SetValue<float>(value); } }
        public float GainHF { get { return this["GainHF"].GetValue<float>(); } set { this["GainHF"].SetValue<float>(value); } }
        public float ReflectionsGain { get { return this["ReflectionsGain"].GetValue<float>(); } set { this["ReflectionsGain"].SetValue<float>(value); } }
        public bool bBypassLateReflections { get { return this["bBypassLateReflections"].Flag; } set { this["bBypassLateReflections"].Flag = value; } }
        public float LateDelay { get { return this["LateDelay"].GetValue<float>(); } set { this["LateDelay"].SetValue<float>(value); } }
        public float DecayTime { get { return this["DecayTime"].GetValue<float>(); } set { this["DecayTime"].SetValue<float>(value); } }
        public float Density { get { return this["Density"].GetValue<float>(); } set { this["Density"].SetValue<float>(value); } }
        public float Diffusion { get { return this["Diffusion"].GetValue<float>(); } set { this["Diffusion"].SetValue<float>(value); } }
        public float AirAbsorptionGainHF { get { return this["AirAbsorptionGainHF"].GetValue<float>(); } set { this["AirAbsorptionGainHF"].SetValue<float>(value); } }
        public float DecayHFRatio { get { return this["DecayHFRatio"].GetValue<float>(); } set { this["DecayHFRatio"].SetValue<float>(value); } }
        public float LateGain { get { return this["LateGain"].GetValue<float>(); } set { this["LateGain"].SetValue<float>(value); } }
        public float Gain { get { return this["Gain"].GetValue<float>(); } set { this["Gain"].SetValue<float>(value); } }
        public float RoomRolloffFactor { get { return this["RoomRolloffFactor"].GetValue<float>(); } set { this["RoomRolloffFactor"].SetValue<float>(value); } }
    }
    public class ReporterGraph : ReporterBase
    {
        public ReporterGraph(nint addr) : base(addr) { }
        public ReporterGraph() : base(0) { }
    }
    public class ReporterBase : UEObject
    {
        public ReporterBase(nint addr) : base(addr) { }
        public ReporterBase() : base(0) { }
    }
    public class ReplicationConnectionDriver : UEObject
    {
        public ReplicationConnectionDriver(nint addr) : base(addr) { }
        public ReplicationConnectionDriver() : base(0) { }
    }
    public class ReplicationDriver : UEObject
    {
        public ReplicationDriver(nint addr) : base(addr) { }
        public ReplicationDriver() : base(0) { }
    }
    public class ReplaySubsystem : GameInstanceSubsystem
    {
        public ReplaySubsystem(nint addr) : base(addr) { }
        public ReplaySubsystem() : base(0) { }
        public bool bLoadDefaultMapOnStop { get { return this["bLoadDefaultMapOnStop"].Flag; } set { this["bLoadDefaultMapOnStop"].Flag = value; } }
    }
    public class ReplayNetConnection : NetConnection
    {
        public ReplayNetConnection(nint addr) : base(addr) { }
        public ReplayNetConnection() : base(0) { }
    }
    public class RendererOverrideSettings : UEObject
    {
        public RendererOverrideSettings(nint addr) : base(addr) { }
        public RendererOverrideSettings() : base(0) { }
        public bool bSupportAllShaderPermutations { get { return this["bSupportAllShaderPermutations"].Flag; } set { this["bSupportAllShaderPermutations"].Flag = value; } }
        public bool bForceRecomputeTangents { get { return this["bForceRecomputeTangents"].Flag; } set { this["bForceRecomputeTangents"].Flag = value; } }
    }
    public class RendererSettings : UEObject
    {
        public RendererSettings(nint addr) : base(addr) { }
        public RendererSettings() : base(0) { }
        public bool bMobileDisableVertexFog { get { return this["bMobileDisableVertexFog"].Flag; } set { this["bMobileDisableVertexFog"].Flag = value; } }
        public int MaxMobileCascades { get { return this["MaxMobileCascades"].GetValue<int>(); } set { this["MaxMobileCascades"].SetValue<int>(value); } }
        public byte MobileMSAASampleCount { get { return this["MobileMSAASampleCount"].GetValue<byte>(); } set { this["MobileMSAASampleCount"].SetValue<byte>(value); } }
        public bool bMobileAllowDitheredLODTransition { get { return this["bMobileAllowDitheredLODTransition"].Flag; } set { this["bMobileAllowDitheredLODTransition"].Flag = value; } }
        public bool bMobileAllowSoftwareOcclusionCulling { get { return this["bMobileAllowSoftwareOcclusionCulling"].Flag; } set { this["bMobileAllowSoftwareOcclusionCulling"].Flag = value; } }
        public bool bMobileVirtualTextures { get { return this["bMobileVirtualTextures"].Flag; } set { this["bMobileVirtualTextures"].Flag = value; } }
        public bool bDiscardUnusedQualityLevels { get { return this["bDiscardUnusedQualityLevels"].Flag; } set { this["bDiscardUnusedQualityLevels"].Flag = value; } }
        public bool bOcclusionCulling { get { return this["bOcclusionCulling"].Flag; } set { this["bOcclusionCulling"].Flag = value; } }
        public float MinScreenRadiusForLights { get { return this["MinScreenRadiusForLights"].GetValue<float>(); } set { this["MinScreenRadiusForLights"].SetValue<float>(value); } }
        public float MinScreenRadiusForEarlyZPass { get { return this["MinScreenRadiusForEarlyZPass"].GetValue<float>(); } set { this["MinScreenRadiusForEarlyZPass"].SetValue<float>(value); } }
        public float MinScreenRadiusForCSMdepth { get { return this["MinScreenRadiusForCSMdepth"].GetValue<float>(); } set { this["MinScreenRadiusForCSMdepth"].SetValue<float>(value); } }
        public bool bPrecomputedVisibilityWarning { get { return this["bPrecomputedVisibilityWarning"].Flag; } set { this["bPrecomputedVisibilityWarning"].Flag = value; } }
        public bool bTextureStreaming { get { return this["bTextureStreaming"].Flag; } set { this["bTextureStreaming"].Flag = value; } }
        public bool bUseDXT5NormalMaps { get { return this["bUseDXT5NormalMaps"].Flag; } set { this["bUseDXT5NormalMaps"].Flag = value; } }
        public bool bVirtualTextures { get { return this["bVirtualTextures"].Flag; } set { this["bVirtualTextures"].Flag = value; } }
        public bool bVirtualTextureEnableAutoImport { get { return this["bVirtualTextureEnableAutoImport"].Flag; } set { this["bVirtualTextureEnableAutoImport"].Flag = value; } }
        public bool bVirtualTexturedLightmaps { get { return this["bVirtualTexturedLightmaps"].Flag; } set { this["bVirtualTexturedLightmaps"].Flag = value; } }
        public uint VirtualTextureTileSize { get { return this["VirtualTextureTileSize"].GetValue<uint>(); } set { this["VirtualTextureTileSize"].SetValue<uint>(value); } }
        public uint VirtualTextureTileBorderSize { get { return this["VirtualTextureTileBorderSize"].GetValue<uint>(); } set { this["VirtualTextureTileBorderSize"].SetValue<uint>(value); } }
        public uint VirtualTextureFeedbackFactor { get { return this["VirtualTextureFeedbackFactor"].GetValue<uint>(); } set { this["VirtualTextureFeedbackFactor"].SetValue<uint>(value); } }
        public bool bVirtualTextureEnableCompressZlib { get { return this["bVirtualTextureEnableCompressZlib"].Flag; } set { this["bVirtualTextureEnableCompressZlib"].Flag = value; } }
        public bool bVirtualTextureEnableCompressCrunch { get { return this["bVirtualTextureEnableCompressCrunch"].Flag; } set { this["bVirtualTextureEnableCompressCrunch"].Flag = value; } }
        public bool bClearCoatEnableSecondNormal { get { return this["bClearCoatEnableSecondNormal"].Flag; } set { this["bClearCoatEnableSecondNormal"].Flag = value; } }
        public int ReflectionCaptureResolution { get { return this["ReflectionCaptureResolution"].GetValue<int>(); } set { this["ReflectionCaptureResolution"].SetValue<int>(value); } }
        public bool bReflectionCaptureCompression { get { return this["bReflectionCaptureCompression"].Flag; } set { this["bReflectionCaptureCompression"].Flag = value; } }
        public bool ReflectionEnvironmentLightmapMixBasedOnRoughness { get { return this["ReflectionEnvironmentLightmapMixBasedOnRoughness"].Flag; } set { this["ReflectionEnvironmentLightmapMixBasedOnRoughness"].Flag = value; } }
        public bool bForwardShading { get { return this["bForwardShading"].Flag; } set { this["bForwardShading"].Flag = value; } }
        public bool bVertexFoggingForOpaque { get { return this["bVertexFoggingForOpaque"].Flag; } set { this["bVertexFoggingForOpaque"].Flag = value; } }
        public bool bAllowStaticLighting { get { return this["bAllowStaticLighting"].Flag; } set { this["bAllowStaticLighting"].Flag = value; } }
        public bool bUseNormalMapsForStaticLighting { get { return this["bUseNormalMapsForStaticLighting"].Flag; } set { this["bUseNormalMapsForStaticLighting"].Flag = value; } }
        public bool bGenerateMeshDistanceFields { get { return this["bGenerateMeshDistanceFields"].Flag; } set { this["bGenerateMeshDistanceFields"].Flag = value; } }
        public bool bEightBitMeshDistanceFields { get { return this["bEightBitMeshDistanceFields"].Flag; } set { this["bEightBitMeshDistanceFields"].Flag = value; } }
        public bool bGenerateLandscapeGIData { get { return this["bGenerateLandscapeGIData"].Flag; } set { this["bGenerateLandscapeGIData"].Flag = value; } }
        public bool bCompressMeshDistanceFields { get { return this["bCompressMeshDistanceFields"].Flag; } set { this["bCompressMeshDistanceFields"].Flag = value; } }
        public float TessellationAdaptivePixelsPerTriangle { get { return this["TessellationAdaptivePixelsPerTriangle"].GetValue<float>(); } set { this["TessellationAdaptivePixelsPerTriangle"].SetValue<float>(value); } }
        public bool bSeparateTranslucency { get { return this["bSeparateTranslucency"].Flag; } set { this["bSeparateTranslucency"].Flag = value; } }
        public byte TranslucentSortPolicy { get { return this["TranslucentSortPolicy"].GetValue<byte>(); } set { this["TranslucentSortPolicy"].SetValue<byte>(value); } }
        public Vector TranslucentSortAxis { get { return this[nameof(TranslucentSortAxis)].As<Vector>(); } set { this["TranslucentSortAxis"] = value; } }
        public byte HMDFixedFoveationLevel { get { return this["HMDFixedFoveationLevel"].GetValue<byte>(); } set { this["HMDFixedFoveationLevel"].SetValue<byte>(value); } }
        public byte CustomDepthStencil { get { return this["CustomDepthStencil"].GetValue<byte>(); } set { this["CustomDepthStencil"].SetValue<byte>(value); } }
        public bool bCustomDepthTaaJitter { get { return this["bCustomDepthTaaJitter"].Flag; } set { this["bCustomDepthTaaJitter"].Flag = value; } }
        public byte bEnableAlphaChannelInPostProcessing { get { return this["bEnableAlphaChannelInPostProcessing"].GetValue<byte>(); } set { this["bEnableAlphaChannelInPostProcessing"].SetValue<byte>(value); } }
        public bool bDefaultFeatureBloom { get { return this["bDefaultFeatureBloom"].Flag; } set { this["bDefaultFeatureBloom"].Flag = value; } }
        public bool bDefaultFeatureAmbientOcclusion { get { return this["bDefaultFeatureAmbientOcclusion"].Flag; } set { this["bDefaultFeatureAmbientOcclusion"].Flag = value; } }
        public bool bDefaultFeatureAmbientOcclusionStaticFraction { get { return this["bDefaultFeatureAmbientOcclusionStaticFraction"].Flag; } set { this["bDefaultFeatureAmbientOcclusionStaticFraction"].Flag = value; } }
        public bool bDefaultFeatureAutoExposure { get { return this["bDefaultFeatureAutoExposure"].Flag; } set { this["bDefaultFeatureAutoExposure"].Flag = value; } }
        public byte DefaultFeatureAutoExposure { get { return this["DefaultFeatureAutoExposure"].GetValue<byte>(); } set { this["DefaultFeatureAutoExposure"].SetValue<byte>(value); } }
        public float DefaultFeatureAutoExposureBias { get { return this["DefaultFeatureAutoExposureBias"].GetValue<float>(); } set { this["DefaultFeatureAutoExposureBias"].SetValue<float>(value); } }
        public bool bExtendDefaultLuminanceRangeInAutoExposureSettings { get { return this["bExtendDefaultLuminanceRangeInAutoExposureSettings"].Flag; } set { this["bExtendDefaultLuminanceRangeInAutoExposureSettings"].Flag = value; } }
        public bool bUsePreExposure { get { return this["bUsePreExposure"].Flag; } set { this["bUsePreExposure"].Flag = value; } }
        public bool bEnablePreExposureOnlyInTheEditor { get { return this["bEnablePreExposureOnlyInTheEditor"].Flag; } set { this["bEnablePreExposureOnlyInTheEditor"].Flag = value; } }
        public bool bDefaultFeatureMotionBlur { get { return this["bDefaultFeatureMotionBlur"].Flag; } set { this["bDefaultFeatureMotionBlur"].Flag = value; } }
        public bool bDefaultFeatureLensFlare { get { return this["bDefaultFeatureLensFlare"].Flag; } set { this["bDefaultFeatureLensFlare"].Flag = value; } }
        public bool bTemporalUpsampling { get { return this["bTemporalUpsampling"].Flag; } set { this["bTemporalUpsampling"].Flag = value; } }
        public bool bSSGI { get { return this["bSSGI"].Flag; } set { this["bSSGI"].Flag = value; } }
        public byte DefaultFeatureAntiAliasing { get { return this["DefaultFeatureAntiAliasing"].GetValue<byte>(); } set { this["DefaultFeatureAntiAliasing"].SetValue<byte>(value); } }
        public ELightUnits DefaultLightUnits { get { return (ELightUnits)this["DefaultLightUnits"].GetValue<int>(); } set { this["DefaultLightUnits"].SetValue<int>((int)value); } }
        public byte DefaultBackBufferPixelFormat { get { return this["DefaultBackBufferPixelFormat"].GetValue<byte>(); } set { this["DefaultBackBufferPixelFormat"].SetValue<byte>(value); } }
        public bool bRenderUnbuiltPreviewShadowsInGame { get { return this["bRenderUnbuiltPreviewShadowsInGame"].Flag; } set { this["bRenderUnbuiltPreviewShadowsInGame"].Flag = value; } }
        public bool bStencilForLODDither { get { return this["bStencilForLODDither"].Flag; } set { this["bStencilForLODDither"].Flag = value; } }
        public byte EarlyZPass { get { return this["EarlyZPass"].GetValue<byte>(); } set { this["EarlyZPass"].SetValue<byte>(value); } }
        public bool bEarlyZPassOnlyMaterialMasking { get { return this["bEarlyZPassOnlyMaterialMasking"].Flag; } set { this["bEarlyZPassOnlyMaterialMasking"].Flag = value; } }
        public bool bDBuffer { get { return this["bDBuffer"].Flag; } set { this["bDBuffer"].Flag = value; } }
        public byte ClearSceneMethod { get { return this["ClearSceneMethod"].GetValue<byte>(); } set { this["ClearSceneMethod"].SetValue<byte>(value); } }
        public bool bBasePassOutputsVelocity { get { return this["bBasePassOutputsVelocity"].Flag; } set { this["bBasePassOutputsVelocity"].Flag = value; } }
        public bool bVertexDeformationOutputsVelocity { get { return this["bVertexDeformationOutputsVelocity"].Flag; } set { this["bVertexDeformationOutputsVelocity"].Flag = value; } }
        public bool bSelectiveBasePassOutputs { get { return this["bSelectiveBasePassOutputs"].Flag; } set { this["bSelectiveBasePassOutputs"].Flag = value; } }
        public bool bDefaultParticleCutouts { get { return this["bDefaultParticleCutouts"].Flag; } set { this["bDefaultParticleCutouts"].Flag = value; } }
        public int GPUSimulationTextureSizeX { get { return this["GPUSimulationTextureSizeX"].GetValue<int>(); } set { this["GPUSimulationTextureSizeX"].SetValue<int>(value); } }
        public int GPUSimulationTextureSizeY { get { return this["GPUSimulationTextureSizeY"].GetValue<int>(); } set { this["GPUSimulationTextureSizeY"].SetValue<int>(value); } }
        public bool bGlobalClipPlane { get { return this["bGlobalClipPlane"].Flag; } set { this["bGlobalClipPlane"].Flag = value; } }
        public byte GBufferFormat { get { return this["GBufferFormat"].GetValue<byte>(); } set { this["GBufferFormat"].SetValue<byte>(value); } }
        public bool bUseGPUMorphTargets { get { return this["bUseGPUMorphTargets"].Flag; } set { this["bUseGPUMorphTargets"].Flag = value; } }
        public bool bNvidiaAftermathEnabled { get { return this["bNvidiaAftermathEnabled"].Flag; } set { this["bNvidiaAftermathEnabled"].Flag = value; } }
        public bool bMultiView { get { return this["bMultiView"].Flag; } set { this["bMultiView"].Flag = value; } }
        public bool bMobilePostProcessing { get { return this["bMobilePostProcessing"].Flag; } set { this["bMobilePostProcessing"].Flag = value; } }
        public bool bMobileMultiView { get { return this["bMobileMultiView"].Flag; } set { this["bMobileMultiView"].Flag = value; } }
        public bool bMobileUseHWsRGBEncoding { get { return this["bMobileUseHWsRGBEncoding"].Flag; } set { this["bMobileUseHWsRGBEncoding"].Flag = value; } }
        public bool bRoundRobinOcclusion { get { return this["bRoundRobinOcclusion"].Flag; } set { this["bRoundRobinOcclusion"].Flag = value; } }
        public bool bODSCapture { get { return this["bODSCapture"].Flag; } set { this["bODSCapture"].Flag = value; } }
        public bool bMeshStreaming { get { return this["bMeshStreaming"].Flag; } set { this["bMeshStreaming"].Flag = value; } }
        public float WireframeCullThreshold { get { return this["WireframeCullThreshold"].GetValue<float>(); } set { this["WireframeCullThreshold"].SetValue<float>(value); } }
        public bool bEnableRayTracing { get { return this["bEnableRayTracing"].Flag; } set { this["bEnableRayTracing"].Flag = value; } }
        public bool bEnableRayTracingTextureLOD { get { return this["bEnableRayTracingTextureLOD"].Flag; } set { this["bEnableRayTracingTextureLOD"].Flag = value; } }
        public bool bSupportStationarySkylight { get { return this["bSupportStationarySkylight"].Flag; } set { this["bSupportStationarySkylight"].Flag = value; } }
        public bool bSupportLowQualityLightmaps { get { return this["bSupportLowQualityLightmaps"].Flag; } set { this["bSupportLowQualityLightmaps"].Flag = value; } }
        public bool bSupportPointLightWholeSceneShadows { get { return this["bSupportPointLightWholeSceneShadows"].Flag; } set { this["bSupportPointLightWholeSceneShadows"].Flag = value; } }
        public bool bSupportAtmosphericFog { get { return this["bSupportAtmosphericFog"].Flag; } set { this["bSupportAtmosphericFog"].Flag = value; } }
        public bool bSupportSkyAtmosphere { get { return this["bSupportSkyAtmosphere"].Flag; } set { this["bSupportSkyAtmosphere"].Flag = value; } }
        public bool bSupportSkyAtmosphereAffectsHeightFog { get { return this["bSupportSkyAtmosphereAffectsHeightFog"].Flag; } set { this["bSupportSkyAtmosphereAffectsHeightFog"].Flag = value; } }
        public bool bSupportSkinCacheShaders { get { return this["bSupportSkinCacheShaders"].Flag; } set { this["bSupportSkinCacheShaders"].Flag = value; } }
        public ESkinCacheDefaultBehavior DefaultSkinCacheBehavior { get { return (ESkinCacheDefaultBehavior)this["DefaultSkinCacheBehavior"].GetValue<int>(); } set { this["DefaultSkinCacheBehavior"].SetValue<int>((int)value); } }
        public float SkinCacheSceneMemoryLimitInMB { get { return this["SkinCacheSceneMemoryLimitInMB"].GetValue<float>(); } set { this["SkinCacheSceneMemoryLimitInMB"].SetValue<float>(value); } }
        public bool bMobileEnableStaticAndCSMShadowReceivers { get { return this["bMobileEnableStaticAndCSMShadowReceivers"].Flag; } set { this["bMobileEnableStaticAndCSMShadowReceivers"].Flag = value; } }
        public bool bMobileEnableMovableLightCSMShaderCulling { get { return this["bMobileEnableMovableLightCSMShaderCulling"].Flag; } set { this["bMobileEnableMovableLightCSMShaderCulling"].Flag = value; } }
        public bool bMobileAllowDistanceFieldShadows { get { return this["bMobileAllowDistanceFieldShadows"].Flag; } set { this["bMobileAllowDistanceFieldShadows"].Flag = value; } }
        public bool bMobileAllowMovableDirectionalLights { get { return this["bMobileAllowMovableDirectionalLights"].Flag; } set { this["bMobileAllowMovableDirectionalLights"].Flag = value; } }
        public uint MobileNumDynamicPointLights { get { return this["MobileNumDynamicPointLights"].GetValue<uint>(); } set { this["MobileNumDynamicPointLights"].SetValue<uint>(value); } }
        public bool bMobileDynamicPointLightsUseStaticBranch { get { return this["bMobileDynamicPointLightsUseStaticBranch"].Flag; } set { this["bMobileDynamicPointLightsUseStaticBranch"].Flag = value; } }
        public bool bMobileAllowMovableSpotlights { get { return this["bMobileAllowMovableSpotlights"].Flag; } set { this["bMobileAllowMovableSpotlights"].Flag = value; } }
        public bool bMobileAllowMovableSpotlightShadows { get { return this["bMobileAllowMovableSpotlightShadows"].Flag; } set { this["bMobileAllowMovableSpotlightShadows"].Flag = value; } }
        public bool bSupport16BitBoneIndex { get { return this["bSupport16BitBoneIndex"].Flag; } set { this["bSupport16BitBoneIndex"].Flag = value; } }
        public bool bGPUSkinLimit2BoneInfluences { get { return this["bGPUSkinLimit2BoneInfluences"].Flag; } set { this["bGPUSkinLimit2BoneInfluences"].Flag = value; } }
        public bool bSupportDepthOnlyIndexBuffers { get { return this["bSupportDepthOnlyIndexBuffers"].Flag; } set { this["bSupportDepthOnlyIndexBuffers"].Flag = value; } }
        public bool bSupportReversedIndexBuffers { get { return this["bSupportReversedIndexBuffers"].Flag; } set { this["bSupportReversedIndexBuffers"].Flag = value; } }
        public bool bLPV { get { return this["bLPV"].Flag; } set { this["bLPV"].Flag = value; } }
        public bool bMobileAmbientOcclusion { get { return this["bMobileAmbientOcclusion"].Flag; } set { this["bMobileAmbientOcclusion"].Flag = value; } }
        public bool bUseUnlimitedBoneInfluences { get { return this["bUseUnlimitedBoneInfluences"].Flag; } set { this["bUseUnlimitedBoneInfluences"].Flag = value; } }
        public int UnlimitedBonInfluencesThreshold { get { return this["UnlimitedBonInfluencesThreshold"].GetValue<int>(); } set { this["UnlimitedBonInfluencesThreshold"].SetValue<int>(value); } }
        public PerPlatformInt MaxSkinBones { get { return this[nameof(MaxSkinBones)].As<PerPlatformInt>(); } set { this["MaxSkinBones"] = value; } }
        public byte MobilePlanarReflectionMode { get { return this["MobilePlanarReflectionMode"].GetValue<byte>(); } set { this["MobilePlanarReflectionMode"].SetValue<byte>(value); } }
        public bool bMobileSupportsGen4TAA { get { return this["bMobileSupportsGen4TAA"].Flag; } set { this["bMobileSupportsGen4TAA"].Flag = value; } }
        public PerPlatformBool bStreamSkeletalMeshLODs { get { return this[nameof(bStreamSkeletalMeshLODs)].As<PerPlatformBool>(); } set { this["bStreamSkeletalMeshLODs"] = value; } }
        public PerPlatformBool bDiscardSkeletalMeshOptionalLODs { get { return this[nameof(bDiscardSkeletalMeshOptionalLODs)].As<PerPlatformBool>(); } set { this["bDiscardSkeletalMeshOptionalLODs"] = value; } }
        public SoftObjectPath VisualizeCalibrationColorMaterialPath { get { return this[nameof(VisualizeCalibrationColorMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationColorMaterialPath"] = value; } }
        public SoftObjectPath VisualizeCalibrationCustomMaterialPath { get { return this[nameof(VisualizeCalibrationCustomMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationCustomMaterialPath"] = value; } }
        public SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath { get { return this[nameof(VisualizeCalibrationGrayscaleMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationGrayscaleMaterialPath"] = value; } }
    }
    public class RectLightComponent : LocalLightComponent
    {
        public RectLightComponent(nint addr) : base(addr) { }
        public RectLightComponent() : base(0) { }
        public float SourceWidth { get { return this["SourceWidth"].GetValue<float>(); } set { this["SourceWidth"].SetValue<float>(value); } }
        public float SourceHeight { get { return this["SourceHeight"].GetValue<float>(); } set { this["SourceHeight"].SetValue<float>(value); } }
        public float BarnDoorAngle { get { return this["BarnDoorAngle"].GetValue<float>(); } set { this["BarnDoorAngle"].SetValue<float>(value); } }
        public float BarnDoorLength { get { return this["BarnDoorLength"].GetValue<float>(); } set { this["BarnDoorLength"].SetValue<float>(value); } }
        public Texture SourceTexture { get { return this[nameof(SourceTexture)].As<Texture>(); } set { this["SourceTexture"] = value; } }
        public void SetSourceWidth(UEObject bNewValue) { Invoke("SetSourceWidth", bNewValue); }
        public void _RectLightComponent(UEObject SourceWidth, UEObject SourceHeight, UEObject BarnDoorAngle, UEObject BarnDoorLength, UEObject SourceTexture) { Invoke("RectLightComponent", SourceWidth, SourceHeight, BarnDoorAngle, BarnDoorLength, SourceTexture); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class RectLight : Light
    {
        public RectLight(nint addr) : base(addr) { }
        public RectLight() : base(0) { }
        public RectLightComponent RectLightComponent { get { return this[nameof(RectLightComponent)].As<RectLightComponent>(); } set { this["RectLightComponent"] = value; } }
    }
    public class RadialForceComponent : SceneComponent
    {
        public RadialForceComponent(nint addr) : base(addr) { }
        public RadialForceComponent() : base(0) { }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public byte Falloff { get { return this["Falloff"].GetValue<byte>(); } set { this["Falloff"].SetValue<byte>(value); } }
        public float ImpulseStrength { get { return this["ImpulseStrength"].GetValue<float>(); } set { this["ImpulseStrength"].SetValue<float>(value); } }
        public bool bImpulseVelChange { get { return this["bImpulseVelChange"].Flag; } set { this["bImpulseVelChange"].Flag = value; } }
        public bool bIgnoreOwningActor { get { return this["bIgnoreOwningActor"].Flag; } set { this["bIgnoreOwningActor"].Flag = value; } }
        public float ForceStrength { get { return this["ForceStrength"].GetValue<float>(); } set { this["ForceStrength"].SetValue<float>(value); } }
        public float DestructibleDamage { get { return this["DestructibleDamage"].GetValue<float>(); } set { this["DestructibleDamage"].SetValue<float>(value); } }
        public List<byte> ObjectTypesToAffect { get { return this["ObjectTypesToAffect"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public void RemoveObjectTypeToAffect(UEObject ObjectType) { Invoke("RemoveObjectTypeToAffect", ObjectType); }
        public void _RadialForceComponent(UEObject Radius, UEObject Falloff, UEObject ImpulseStrength, UEObject bImpulseVelChange, UEObject bIgnoreOwningActor, UEObject ForceStrength, UEObject DestructibleDamage, UEObject ObjectTypesToAffect) { Invoke("RadialForceComponent", Radius, Falloff, ImpulseStrength, bImpulseVelChange, bIgnoreOwningActor, ForceStrength, DestructibleDamage, ObjectTypesToAffect); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class RadialForceActor : RigidBodyBase
    {
        public RadialForceActor(nint addr) : base(addr) { }
        public RadialForceActor() : base(0) { }
        public RadialForceComponent ForceComponent { get { return this[nameof(ForceComponent)].As<RadialForceComponent>(); } set { this["ForceComponent"] = value; } }
        public void ToggleForce() { Invoke("ToggleForce"); }
        public void _RadialForceActor(UEObject ForceComponent) { Invoke("RadialForceActor", ForceComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ProxyLODMeshSimplificationSettings : UEObject
    {
        public ProxyLODMeshSimplificationSettings(nint addr) : base(addr) { }
        public ProxyLODMeshSimplificationSettings() : base(0) { }
        public string ProxyLODMeshReductionModuleName { get { return this["ProxyLODMeshReductionModuleName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PrimaryAssetLabel : PrimaryDataAsset
    {
        public PrimaryAssetLabel(nint addr) : base(addr) { }
        public PrimaryAssetLabel() : base(0) { }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
        public bool bLabelAssetsInMyDirectory { get { return this["bLabelAssetsInMyDirectory"].Flag; } set { this["bLabelAssetsInMyDirectory"].Flag = value; } }
        public bool bIsRuntimeLabel { get { return this["bIsRuntimeLabel"].Flag; } set { this["bIsRuntimeLabel"].Flag = value; } }
        public Array<UEObject> ExplicitAssets { get { return new Array<UEObject>(this["ExplicitAssets"]); } set { this["ExplicitAssets"] = value; } }
        public Array<UEObject> ExplicitBlueprints { get { return new Array<UEObject>(this["ExplicitBlueprints"]); } set { this["ExplicitBlueprints"] = value; } }
        public CollectionReference AssetCollection { get { return this[nameof(AssetCollection)].As<CollectionReference>(); } set { this["AssetCollection"] = value; } }
    }
    public class PreviewMeshCollection : DataAsset
    {
        public PreviewMeshCollection(nint addr) : base(addr) { }
        public PreviewMeshCollection() : base(0) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public Array<PreviewMeshCollectionEntry> SkeletalMeshes { get { return new Array<PreviewMeshCollectionEntry>(this["SkeletalMeshes"]); } set { this["SkeletalMeshes"] = value; } }
    }
    public class PreviewCollectionInterface : Interface
    {
        public PreviewCollectionInterface(nint addr) : base(addr) { }
        public PreviewCollectionInterface() : base(0) { }
    }
    public class PrecomputedVisibilityVolume : Volume
    {
        public PrecomputedVisibilityVolume(nint addr) : base(addr) { }
        public PrecomputedVisibilityVolume() : base(0) { }
    }
    public class PrecomputedVisibilityOverrideVolume : Volume
    {
        public PrecomputedVisibilityOverrideVolume(nint addr) : base(addr) { }
        public PrecomputedVisibilityOverrideVolume() : base(0) { }
        public Array<Actor> OverrideVisibleActors { get { return new Array<Actor>(this["OverrideVisibleActors"]); } set { this["OverrideVisibleActors"] = value; } }
        public Array<Actor> OverrideInvisibleActors { get { return new Array<Actor>(this["OverrideInvisibleActors"]); } set { this["OverrideInvisibleActors"] = value; } }
        public List<string> OverrideInvisibleLevels { get { return this["OverrideInvisibleLevels"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class PostProcessVolume : Volume
    {
        public PostProcessVolume(nint addr) : base(addr) { }
        public PostProcessVolume() : base(0) { }
        public PostProcessSettings Settings { get { return this[nameof(Settings)].As<PostProcessSettings>(); } set { this["Settings"] = value; } }
        public float Priority { get { return this["Priority"].GetValue<float>(); } set { this["Priority"].SetValue<float>(value); } }
        public float BlendRadius { get { return this["BlendRadius"].GetValue<float>(); } set { this["BlendRadius"].SetValue<float>(value); } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public bool bUnbound { get { return this["bUnbound"].Flag; } set { this["bUnbound"].Flag = value; } }
        public void AddOrUpdateBlendable(UEObject InBlendableObject, UEObject InWeight) { Invoke("AddOrUpdateBlendable", InBlendableObject, InWeight); }
        public void _PostProcessVolume(UEObject Settings, UEObject Priority, UEObject BlendRadius, UEObject BlendWeight, UEObject bEnabled, UEObject bUnbound) { Invoke("PostProcessVolume", Settings, Priority, BlendRadius, BlendWeight, bEnabled, bUnbound); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PostProcessComponent : SceneComponent
    {
        public PostProcessComponent(nint addr) : base(addr) { }
        public PostProcessComponent() : base(0) { }
        public PostProcessSettings Settings { get { return this[nameof(Settings)].As<PostProcessSettings>(); } set { this["Settings"] = value; } }
        public float Priority { get { return this["Priority"].GetValue<float>(); } set { this["Priority"].SetValue<float>(value); } }
        public float BlendRadius { get { return this["BlendRadius"].GetValue<float>(); } set { this["BlendRadius"].SetValue<float>(value); } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public bool bUnbound { get { return this["bUnbound"].Flag; } set { this["bUnbound"].Flag = value; } }
        public void AddOrUpdateBlendable(UEObject InBlendableObject, UEObject InWeight) { Invoke("AddOrUpdateBlendable", InBlendableObject, InWeight); }
        public void _PostProcessComponent(UEObject Settings, UEObject Priority, UEObject BlendRadius, UEObject BlendWeight, UEObject bEnabled, UEObject bUnbound) { Invoke("PostProcessComponent", Settings, Priority, BlendRadius, BlendWeight, bEnabled, bUnbound); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PoseWatch : UEObject
    {
        public PoseWatch(nint addr) : base(addr) { }
        public PoseWatch() : base(0) { }
        public EdGraphNode Node { get { return this[nameof(Node)].As<EdGraphNode>(); } set { this["Node"] = value; } }
        public Color PoseWatchColour { get { return this[nameof(PoseWatchColour)].As<Color>(); } set { this["PoseWatchColour"] = value; } }
    }
    public class PoseAsset : AnimationAsset
    {
        public PoseAsset(nint addr) : base(addr) { }
        public PoseAsset() : base(0) { }
        public PoseDataContainer PoseContainer { get { return this[nameof(PoseContainer)].As<PoseDataContainer>(); } set { this["PoseContainer"] = value; } }
        public bool bAdditivePose { get { return this["bAdditivePose"].Flag; } set { this["bAdditivePose"].Flag = value; } }
        public int BasePoseIndex { get { return this["BasePoseIndex"].GetValue<int>(); } set { this["BasePoseIndex"].SetValue<int>(value); } }
        public string RetargetSource { get { return this["RetargetSource"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SDK.Script.CoreUObject.Transform> RetargetSourceAssetReferencePose { get { return new Array<SDK.Script.CoreUObject.Transform>(this["RetargetSourceAssetReferencePose"]); } set { this["RetargetSourceAssetReferencePose"] = value; } }
    }
    public class PoseableMeshComponent : SkinnedMeshComponent
    {
        public PoseableMeshComponent(nint addr) : base(addr) { }
        public PoseableMeshComponent() : base(0) { }
        public void SetBoneTransformByName(UEObject BoneName, UEObject InTransform, UEObject BoneSpace) { Invoke("SetBoneTransformByName", BoneName, InTransform, BoneSpace); }
        public void _PoseableMeshComponent() { Invoke("PoseableMeshComponent"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Polys : UEObject
    {
        public Polys(nint addr) : base(addr) { }
        public Polys() : base(0) { }
    }
    public class PointLightComponent : LocalLightComponent
    {
        public PointLightComponent(nint addr) : base(addr) { }
        public PointLightComponent() : base(0) { }
        public bool bUseInverseSquaredFalloff { get { return this["bUseInverseSquaredFalloff"].Flag; } set { this["bUseInverseSquaredFalloff"].Flag = value; } }
        public float LightFalloffExponent { get { return this["LightFalloffExponent"].GetValue<float>(); } set { this["LightFalloffExponent"].SetValue<float>(value); } }
        public float SourceRadius { get { return this["SourceRadius"].GetValue<float>(); } set { this["SourceRadius"].SetValue<float>(value); } }
        public float SoftSourceRadius { get { return this["SoftSourceRadius"].GetValue<float>(); } set { this["SoftSourceRadius"].SetValue<float>(value); } }
        public float SourceLength { get { return this["SourceLength"].GetValue<float>(); } set { this["SourceLength"].SetValue<float>(value); } }
        public void SetSourceRadius(UEObject bNewValue) { Invoke("SetSourceRadius", bNewValue); }
        public void _PointLightComponent(UEObject bUseInverseSquaredFalloff, UEObject LightFalloffExponent, UEObject SourceRadius, UEObject SoftSourceRadius, UEObject SourceLength) { Invoke("PointLightComponent", bUseInverseSquaredFalloff, LightFalloffExponent, SourceRadius, SoftSourceRadius, SourceLength); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PointLight : Light
    {
        public PointLight(nint addr) : base(addr) { }
        public PointLight() : base(0) { }
        public PointLightComponent PointLightComponent { get { return this[nameof(PointLightComponent)].As<PointLightComponent>(); } set { this["PointLightComponent"] = value; } }
        public void SetRadius(UEObject NewRadius) { Invoke("SetRadius", NewRadius); }
        public void _PointLight(UEObject PointLightComponent) { Invoke("PointLight", PointLightComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PluginCommandlet : Commandlet
    {
        public PluginCommandlet(nint addr) : base(addr) { }
        public PluginCommandlet() : base(0) { }
    }
    public class PlayerState : Info
    {
        public PlayerState(nint addr) : base(addr) { }
        public PlayerState() : base(0) { }
        public float Score { get { return this["Score"].GetValue<float>(); } set { this["Score"].SetValue<float>(value); } }
        public int PlayerId { get { return this["PlayerId"].GetValue<int>(); } set { this["PlayerId"].SetValue<int>(value); } }
        public byte Ping { get { return this["Ping"].GetValue<byte>(); } set { this["Ping"].SetValue<byte>(value); } }
        public bool bShouldUpdateReplicatedPing { get { return this["bShouldUpdateReplicatedPing"].Flag; } set { this["bShouldUpdateReplicatedPing"].Flag = value; } }
        public bool bIsSpectator { get { return this["bIsSpectator"].Flag; } set { this["bIsSpectator"].Flag = value; } }
        public bool bOnlySpectator { get { return this["bOnlySpectator"].Flag; } set { this["bOnlySpectator"].Flag = value; } }
        public bool bIsABot { get { return this["bIsABot"].Flag; } set { this["bIsABot"].Flag = value; } }
        public bool bIsInactive { get { return this["bIsInactive"].Flag; } set { this["bIsInactive"].Flag = value; } }
        public bool bFromPreviousLevel { get { return this["bFromPreviousLevel"].Flag; } set { this["bFromPreviousLevel"].Flag = value; } }
        public int StartTime { get { return this["StartTime"].GetValue<int>(); } set { this["StartTime"].SetValue<int>(value); } }
        public UEObject EngineMessageClass { get { return this["EngineMessageClass"]; } set { this["EngineMessageClass"] = value; } }
        public string SavedNetworkAddress { get { return this["SavedNetworkAddress"].ToString(); } set { /* String properties are read-only */ } }
        public UniqueNetIdRepl UniqueId { get { return this[nameof(UniqueId)].As<UniqueNetIdRepl>(); } set { this["UniqueId"] = value; } }
        public Pawn PawnPrivate { get { return this[nameof(PawnPrivate)].As<Pawn>(); } set { this["PawnPrivate"] = value; } }
        public string PlayerNamePrivate { get { return this["PlayerNamePrivate"].ToString(); } set { /* String properties are read-only */ } }
        public void ReceiveOverrideWith(UEObject OldPlayerState) { Invoke("ReceiveOverrideWith", OldPlayerState); }
        public void _PlayerState(UEObject Score, UEObject PlayerId, UEObject Ping, UEObject bShouldUpdateReplicatedPing, UEObject bIsSpectator, UEObject bOnlySpectator, UEObject bIsABot, UEObject bIsInactive, UEObject bFromPreviousLevel, UEObject StartTime, UEObject EngineMessageClass, UEObject SavedNetworkAddress, UEObject UniqueId, UEObject PawnPrivate, UEObject PlayerNamePrivate) { Invoke("PlayerState", Score, PlayerId, Ping, bShouldUpdateReplicatedPing, bIsSpectator, bOnlySpectator, bIsABot, bIsInactive, bFromPreviousLevel, StartTime, EngineMessageClass, SavedNetworkAddress, UniqueId, PawnPrivate, PlayerNamePrivate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlayerStartPIE : PlayerStart
    {
        public PlayerStartPIE(nint addr) : base(addr) { }
        public PlayerStartPIE() : base(0) { }
    }
    public class PlayerStart : NavigationObjectBase
    {
        public PlayerStart(nint addr) : base(addr) { }
        public PlayerStart() : base(0) { }
        public string PlayerStartTag { get { return this["PlayerStartTag"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class PlatformInterfaceWebResponse : UEObject
    {
        public PlatformInterfaceWebResponse(nint addr) : base(addr) { }
        public PlatformInterfaceWebResponse() : base(0) { }
        public string OriginalURL { get { return this["OriginalURL"].ToString(); } set { /* String properties are read-only */ } }
        public int ResponseCode { get { return this["ResponseCode"].GetValue<int>(); } set { this["ResponseCode"].SetValue<int>(value); } }
        public int Tag { get { return this["Tag"].GetValue<int>(); } set { this["Tag"].SetValue<int>(value); } }
        public string StringResponse { get { return this["StringResponse"].ToString(); } set { /* String properties are read-only */ } }
        public List<byte> BinaryResponse { get { return this["BinaryResponse"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public UEObject GetNumHeaders() { return InvokeUEObject("GetNumHeaders"); }
        public void _PlatformInterfaceWebResponse(UEObject OriginalURL, UEObject ResponseCode, UEObject Tag, UEObject StringResponse, UEObject BinaryResponse) { Invoke("PlatformInterfaceWebResponse", OriginalURL, ResponseCode, Tag, StringResponse, BinaryResponse); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlatformEventsComponent : ActorComponent
    {
        public PlatformEventsComponent(nint addr) : base(addr) { }
        public PlatformEventsComponent() : base(0) { }
        public UEObject PlatformChangedToLaptopModeDelegate { get { return this["PlatformChangedToLaptopModeDelegate"]; } set { this["PlatformChangedToLaptopModeDelegate"] = value; } }
        public UEObject PlatformChangedToTabletModeDelegate { get { return this["PlatformChangedToTabletModeDelegate"]; } set { this["PlatformChangedToTabletModeDelegate"] = value; } }
        public UEObject SupportsConvertibleLaptops() { return InvokeUEObject("SupportsConvertibleLaptops"); }
        public void _PlatformEventsComponent(UEObject PlatformChangedToLaptopModeDelegate, UEObject PlatformChangedToTabletModeDelegate) { Invoke("PlatformEventsComponent", PlatformChangedToLaptopModeDelegate, PlatformChangedToTabletModeDelegate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlaneReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public PlaneReflectionCaptureComponent(nint addr) : base(addr) { }
        public PlaneReflectionCaptureComponent() : base(0) { }
        public float InfluenceRadiusScale { get { return this["InfluenceRadiusScale"].GetValue<float>(); } set { this["InfluenceRadiusScale"].SetValue<float>(value); } }
        public DrawSphereComponent PreviewInfluenceRadius { get { return this[nameof(PreviewInfluenceRadius)].As<DrawSphereComponent>(); } set { this["PreviewInfluenceRadius"] = value; } }
        public BoxComponent PreviewCaptureBox { get { return this[nameof(PreviewCaptureBox)].As<BoxComponent>(); } set { this["PreviewCaptureBox"] = value; } }
    }
    public class PlaneReflectionCapture : ReflectionCapture
    {
        public PlaneReflectionCapture(nint addr) : base(addr) { }
        public PlaneReflectionCapture() : base(0) { }
    }
    public class PlanarReflectionComponent : SceneCaptureComponent
    {
        public PlanarReflectionComponent(nint addr) : base(addr) { }
        public PlanarReflectionComponent() : base(0) { }
        public BoxComponent PreviewBox { get { return this[nameof(PreviewBox)].As<BoxComponent>(); } set { this["PreviewBox"] = value; } }
        public float NormalDistortionStrength { get { return this["NormalDistortionStrength"].GetValue<float>(); } set { this["NormalDistortionStrength"].SetValue<float>(value); } }
        public float PrefilterRoughness { get { return this["PrefilterRoughness"].GetValue<float>(); } set { this["PrefilterRoughness"].SetValue<float>(value); } }
        public float PrefilterRoughnessDistance { get { return this["PrefilterRoughnessDistance"].GetValue<float>(); } set { this["PrefilterRoughnessDistance"].SetValue<float>(value); } }
        public int ScreenPercentage { get { return this["ScreenPercentage"].GetValue<int>(); } set { this["ScreenPercentage"].SetValue<int>(value); } }
        public float ExtraFOV { get { return this["ExtraFOV"].GetValue<float>(); } set { this["ExtraFOV"].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeStart { get { return this["DistanceFromPlaneFadeStart"].GetValue<float>(); } set { this["DistanceFromPlaneFadeStart"].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeEnd { get { return this["DistanceFromPlaneFadeEnd"].GetValue<float>(); } set { this["DistanceFromPlaneFadeEnd"].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeoutStart { get { return this["DistanceFromPlaneFadeoutStart"].GetValue<float>(); } set { this["DistanceFromPlaneFadeoutStart"].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeoutEnd { get { return this["DistanceFromPlaneFadeoutEnd"].GetValue<float>(); } set { this["DistanceFromPlaneFadeoutEnd"].SetValue<float>(value); } }
        public float AngleFromPlaneFadeStart { get { return this["AngleFromPlaneFadeStart"].GetValue<float>(); } set { this["AngleFromPlaneFadeStart"].SetValue<float>(value); } }
        public float AngleFromPlaneFadeEnd { get { return this["AngleFromPlaneFadeEnd"].GetValue<float>(); } set { this["AngleFromPlaneFadeEnd"].SetValue<float>(value); } }
        public bool bShowPreviewPlane { get { return this["bShowPreviewPlane"].Flag; } set { this["bShowPreviewPlane"].Flag = value; } }
        public bool bRenderSceneTwoSided { get { return this["bRenderSceneTwoSided"].Flag; } set { this["bRenderSceneTwoSided"].Flag = value; } }
    }
    public class SceneCaptureComponent : SceneComponent
    {
        public SceneCaptureComponent(nint addr) : base(addr) { }
        public SceneCaptureComponent() : base(0) { }
        public ESceneCapturePrimitiveRenderMode PrimitiveRenderMode { get { return (ESceneCapturePrimitiveRenderMode)this["PrimitiveRenderMode"].GetValue<int>(); } set { this["PrimitiveRenderMode"].SetValue<int>((int)value); } }
        public byte CaptureSource { get { return this["CaptureSource"].GetValue<byte>(); } set { this["CaptureSource"].SetValue<byte>(value); } }
        public bool bCaptureEveryFrame { get { return this["bCaptureEveryFrame"].Flag; } set { this["bCaptureEveryFrame"].Flag = value; } }
        public bool bCaptureOnMovement { get { return this["bCaptureOnMovement"].Flag; } set { this["bCaptureOnMovement"].Flag = value; } }
        public bool bAlwaysPersistRenderingState { get { return this["bAlwaysPersistRenderingState"].Flag; } set { this["bAlwaysPersistRenderingState"].Flag = value; } }
        public Array<UEObject> HiddenComponents { get { return new Array<UEObject>(this["HiddenComponents"]); } set { this["HiddenComponents"] = value; } }
        public Array<Actor> HiddenActors { get { return new Array<Actor>(this["HiddenActors"]); } set { this["HiddenActors"] = value; } }
        public Array<UEObject> ShowOnlyComponents { get { return new Array<UEObject>(this["ShowOnlyComponents"]); } set { this["ShowOnlyComponents"] = value; } }
        public Array<Actor> ShowOnlyActors { get { return new Array<Actor>(this["ShowOnlyActors"]); } set { this["ShowOnlyActors"] = value; } }
        public float LODDistanceFactor { get { return this["LODDistanceFactor"].GetValue<float>(); } set { this["LODDistanceFactor"].SetValue<float>(value); } }
        public float MaxViewDistanceOverride { get { return this["MaxViewDistanceOverride"].GetValue<float>(); } set { this["MaxViewDistanceOverride"].SetValue<float>(value); } }
        public int CaptureSortPriority { get { return this["CaptureSortPriority"].GetValue<int>(); } set { this["CaptureSortPriority"].SetValue<int>(value); } }
        public bool bUseRayTracingIfEnabled { get { return this["bUseRayTracingIfEnabled"].Flag; } set { this["bUseRayTracingIfEnabled"].Flag = value; } }
        public Array<EngineShowFlagsSetting> ShowFlagSettings { get { return new Array<EngineShowFlagsSetting>(this["ShowFlagSettings"]); } set { this["ShowFlagSettings"] = value; } }
        public string ProfilingEventName { get { return this["ProfilingEventName"].ToString(); } set { /* String properties are read-only */ } }
        public void ShowOnlyComponent(UEObject InComponent) { Invoke("ShowOnlyComponent", InComponent); }
        public void _SceneCaptureComponent(UEObject PrimitiveRenderMode, UEObject CaptureSource, UEObject bCaptureEveryFrame, UEObject bCaptureOnMovement, UEObject bAlwaysPersistRenderingState, UEObject HiddenComponents, UEObject HiddenActors, UEObject ShowOnlyComponents, UEObject ShowOnlyActors, UEObject LODDistanceFactor, UEObject MaxViewDistanceOverride, UEObject CaptureSortPriority, UEObject bUseRayTracingIfEnabled, UEObject ShowFlagSettings, UEObject ProfilingEventName) { Invoke("SceneCaptureComponent", PrimitiveRenderMode, CaptureSource, bCaptureEveryFrame, bCaptureOnMovement, bAlwaysPersistRenderingState, HiddenComponents, HiddenActors, ShowOnlyComponents, ShowOnlyActors, LODDistanceFactor, MaxViewDistanceOverride, CaptureSortPriority, bUseRayTracingIfEnabled, ShowFlagSettings, ProfilingEventName); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PhysicsThrusterComponent : SceneComponent
    {
        public PhysicsThrusterComponent(nint addr) : base(addr) { }
        public PhysicsThrusterComponent() : base(0) { }
        public float ThrustStrength { get { return this["ThrustStrength"].GetValue<float>(); } set { this["ThrustStrength"].SetValue<float>(value); } }
    }
    public class PhysicsThruster : RigidBodyBase
    {
        public PhysicsThruster(nint addr) : base(addr) { }
        public PhysicsThruster() : base(0) { }
        public PhysicsThrusterComponent ThrusterComponent { get { return this[nameof(ThrusterComponent)].As<PhysicsThrusterComponent>(); } set { this["ThrusterComponent"] = value; } }
    }
    public class PhysicsSpringComponent : SceneComponent
    {
        public PhysicsSpringComponent(nint addr) : base(addr) { }
        public PhysicsSpringComponent() : base(0) { }
        public float SpringStiffness { get { return this["SpringStiffness"].GetValue<float>(); } set { this["SpringStiffness"].SetValue<float>(value); } }
        public float SpringDamping { get { return this["SpringDamping"].GetValue<float>(); } set { this["SpringDamping"].SetValue<float>(value); } }
        public float SpringLengthAtRest { get { return this["SpringLengthAtRest"].GetValue<float>(); } set { this["SpringLengthAtRest"].SetValue<float>(value); } }
        public float SpringRadius { get { return this["SpringRadius"].GetValue<float>(); } set { this["SpringRadius"].SetValue<float>(value); } }
        public byte SpringChannel { get { return this["SpringChannel"].GetValue<byte>(); } set { this["SpringChannel"].SetValue<byte>(value); } }
        public bool bIgnoreSelf { get { return this["bIgnoreSelf"].Flag; } set { this["bIgnoreSelf"].Flag = value; } }
        public float SpringCompression { get { return this["SpringCompression"].GetValue<float>(); } set { this["SpringCompression"].SetValue<float>(value); } }
        public UEObject GetSpringRestingPoint() { return InvokeUEObject("GetSpringRestingPoint"); }
        public void _PhysicsSpringComponent(UEObject SpringStiffness, UEObject SpringDamping, UEObject SpringLengthAtRest, UEObject SpringRadius, UEObject SpringChannel, UEObject bIgnoreSelf, UEObject SpringCompression) { Invoke("PhysicsSpringComponent", SpringStiffness, SpringDamping, SpringLengthAtRest, SpringRadius, SpringChannel, bIgnoreSelf, SpringCompression); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PhysicsSettings : PhysicsSettingsCore
    {
        public PhysicsSettings(nint addr) : base(addr) { }
        public PhysicsSettings() : base(0) { }
        public RigidBodyErrorCorrection PhysicErrorCorrection { get { return this[nameof(PhysicErrorCorrection)].As<RigidBodyErrorCorrection>(); } set { this["PhysicErrorCorrection"] = value; } }
        public byte LockedAxis { get { return this["LockedAxis"].GetValue<byte>(); } set { this["LockedAxis"].SetValue<byte>(value); } }
        public byte DefaultDegreesOfFreedom { get { return this["DefaultDegreesOfFreedom"].GetValue<byte>(); } set { this["DefaultDegreesOfFreedom"].SetValue<byte>(value); } }
        public bool bSuppressFaceRemapTable { get { return this["bSuppressFaceRemapTable"].Flag; } set { this["bSuppressFaceRemapTable"].Flag = value; } }
        public bool bSupportUVFromHitResults { get { return this["bSupportUVFromHitResults"].Flag; } set { this["bSupportUVFromHitResults"].Flag = value; } }
        public bool bDisableActiveActors { get { return this["bDisableActiveActors"].Flag; } set { this["bDisableActiveActors"].Flag = value; } }
        public bool bDisableKinematicStaticPairs { get { return this["bDisableKinematicStaticPairs"].Flag; } set { this["bDisableKinematicStaticPairs"].Flag = value; } }
        public bool bDisableKinematicKinematicPairs { get { return this["bDisableKinematicKinematicPairs"].Flag; } set { this["bDisableKinematicKinematicPairs"].Flag = value; } }
        public bool bDisableCCD { get { return this["bDisableCCD"].Flag; } set { this["bDisableCCD"].Flag = value; } }
        public bool bEnableEnhancedDeterminism { get { return this["bEnableEnhancedDeterminism"].Flag; } set { this["bEnableEnhancedDeterminism"].Flag = value; } }
        public float AnimPhysicsMinDeltaTime { get { return this["AnimPhysicsMinDeltaTime"].GetValue<float>(); } set { this["AnimPhysicsMinDeltaTime"].SetValue<float>(value); } }
        public bool bSimulateAnimPhysicsAfterReset { get { return this["bSimulateAnimPhysicsAfterReset"].Flag; } set { this["bSimulateAnimPhysicsAfterReset"].Flag = value; } }
        public float MaxPhysicsDeltaTime { get { return this["MaxPhysicsDeltaTime"].GetValue<float>(); } set { this["MaxPhysicsDeltaTime"].SetValue<float>(value); } }
        public bool bSubstepping { get { return this["bSubstepping"].Flag; } set { this["bSubstepping"].Flag = value; } }
        public bool bSubsteppingAsync { get { return this["bSubsteppingAsync"].Flag; } set { this["bSubsteppingAsync"].Flag = value; } }
        public float MaxSubstepDeltaTime { get { return this["MaxSubstepDeltaTime"].GetValue<float>(); } set { this["MaxSubstepDeltaTime"].SetValue<float>(value); } }
        public int MaxSubsteps { get { return this["MaxSubsteps"].GetValue<int>(); } set { this["MaxSubsteps"].SetValue<int>(value); } }
        public float SyncSceneSmoothingFactor { get { return this["SyncSceneSmoothingFactor"].GetValue<float>(); } set { this["SyncSceneSmoothingFactor"].SetValue<float>(value); } }
        public float InitialAverageFrameRate { get { return this["InitialAverageFrameRate"].GetValue<float>(); } set { this["InitialAverageFrameRate"].SetValue<float>(value); } }
        public int PhysXTreeRebuildRate { get { return this["PhysXTreeRebuildRate"].GetValue<int>(); } set { this["PhysXTreeRebuildRate"].SetValue<int>(value); } }
        public Array<PhysicalSurfaceName> PhysicalSurfaces { get { return new Array<PhysicalSurfaceName>(this["PhysicalSurfaces"]); } set { this["PhysicalSurfaces"] = value; } }
        public BroadphaseSettings DefaultBroadphaseSettings { get { return this[nameof(DefaultBroadphaseSettings)].As<BroadphaseSettings>(); } set { this["DefaultBroadphaseSettings"] = value; } }
        public float MinDeltaVelocityForHitEvents { get { return this["MinDeltaVelocityForHitEvents"].GetValue<float>(); } set { this["MinDeltaVelocityForHitEvents"].SetValue<float>(value); } }
        public ChaosPhysicsSettings ChaosSettings { get { return this[nameof(ChaosSettings)].As<ChaosPhysicsSettings>(); } set { this["ChaosSettings"] = value; } }
    }
    public class PhysicsHandleComponent : ActorComponent
    {
        public PhysicsHandleComponent(nint addr) : base(addr) { }
        public PhysicsHandleComponent() : base(0) { }
        public PrimitiveComponent GrabbedComponent { get { return this[nameof(GrabbedComponent)].As<PrimitiveComponent>(); } set { this["GrabbedComponent"] = value; } }
        public bool bSoftAngularConstraint { get { return this["bSoftAngularConstraint"].Flag; } set { this["bSoftAngularConstraint"].Flag = value; } }
        public bool bSoftLinearConstraint { get { return this["bSoftLinearConstraint"].Flag; } set { this["bSoftLinearConstraint"].Flag = value; } }
        public bool bInterpolateTarget { get { return this["bInterpolateTarget"].Flag; } set { this["bInterpolateTarget"].Flag = value; } }
        public float LinearDamping { get { return this["LinearDamping"].GetValue<float>(); } set { this["LinearDamping"].SetValue<float>(value); } }
        public float LinearStiffness { get { return this["LinearStiffness"].GetValue<float>(); } set { this["LinearStiffness"].SetValue<float>(value); } }
        public float AngularDamping { get { return this["AngularDamping"].GetValue<float>(); } set { this["AngularDamping"].SetValue<float>(value); } }
        public float AngularStiffness { get { return this["AngularStiffness"].GetValue<float>(); } set { this["AngularStiffness"].SetValue<float>(value); } }
        public float InterpolationSpeed { get { return this["InterpolationSpeed"].GetValue<float>(); } set { this["InterpolationSpeed"].SetValue<float>(value); } }
        public void SetTargetRotation(UEObject NewRotation) { Invoke("SetTargetRotation", NewRotation); }
        public void _PhysicsHandleComponent(UEObject GrabbedComponent, UEObject bSoftAngularConstraint, UEObject bSoftLinearConstraint, UEObject bInterpolateTarget, UEObject LinearDamping, UEObject LinearStiffness, UEObject AngularDamping, UEObject AngularStiffness, UEObject InterpolationSpeed) { Invoke("PhysicsHandleComponent", GrabbedComponent, bSoftAngularConstraint, bSoftLinearConstraint, bInterpolateTarget, LinearDamping, LinearStiffness, AngularDamping, AngularStiffness, InterpolationSpeed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PhysicsFieldComponent : SceneComponent
    {
        public PhysicsFieldComponent(nint addr) : base(addr) { }
        public PhysicsFieldComponent() : base(0) { }
    }
    public class PhysicsConstraintTemplate : UEObject
    {
        public PhysicsConstraintTemplate(nint addr) : base(addr) { }
        public PhysicsConstraintTemplate() : base(0) { }
        public ConstraintInstance DefaultInstance { get { return this[nameof(DefaultInstance)].As<ConstraintInstance>(); } set { this["DefaultInstance"] = value; } }
        public Array<PhysicsConstraintProfileHandle> ProfileHandles { get { return new Array<PhysicsConstraintProfileHandle>(this["ProfileHandles"]); } set { this["ProfileHandles"] = value; } }
        public ConstraintProfileProperties DefaultProfile { get { return this[nameof(DefaultProfile)].As<ConstraintProfileProperties>(); } set { this["DefaultProfile"] = value; } }
    }
    public class PhysicsConstraintComponent : SceneComponent
    {
        public PhysicsConstraintComponent(nint addr) : base(addr) { }
        public PhysicsConstraintComponent() : base(0) { }
        public Actor ConstraintActor1 { get { return this[nameof(ConstraintActor1)].As<Actor>(); } set { this["ConstraintActor1"] = value; } }
        public ConstrainComponentPropName ComponentName1 { get { return this[nameof(ComponentName1)].As<ConstrainComponentPropName>(); } set { this["ComponentName1"] = value; } }
        public Actor ConstraintActor2 { get { return this[nameof(ConstraintActor2)].As<Actor>(); } set { this["ConstraintActor2"] = value; } }
        public ConstrainComponentPropName ComponentName2 { get { return this[nameof(ComponentName2)].As<ConstrainComponentPropName>(); } set { this["ComponentName2"] = value; } }
        public PhysicsConstraintTemplate ConstraintSetup { get { return this[nameof(ConstraintSetup)].As<PhysicsConstraintTemplate>(); } set { this["ConstraintSetup"] = value; } }
        public UEObject OnConstraintBroken { get { return this["OnConstraintBroken"]; } set { this["OnConstraintBroken"] = value; } }
        public ConstraintInstance ConstraintInstance { get { return this[nameof(ConstraintInstance)].As<ConstraintInstance>(); } set { this["ConstraintInstance"] = value; } }
        public void SetOrientationDriveTwistAndSwing(UEObject bEnableTwistDrive, UEObject bEnableSwingDrive) { Invoke("SetOrientationDriveTwistAndSwing", bEnableTwistDrive, bEnableSwingDrive); }
        public void _PhysicsConstraintComponent(UEObject ConstraintActor1, UEObject ComponentName1, UEObject ConstraintActor2, UEObject ComponentName2, UEObject ConstraintSetup, UEObject OnConstraintBroken, UEObject ConstraintInstance) { Invoke("PhysicsConstraintComponent", ConstraintActor1, ComponentName1, ConstraintActor2, ComponentName2, ConstraintSetup, OnConstraintBroken, ConstraintInstance); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PhysicsConstraintActor : RigidBodyBase
    {
        public PhysicsConstraintActor(nint addr) : base(addr) { }
        public PhysicsConstraintActor() : base(0) { }
        public PhysicsConstraintComponent ConstraintComp { get { return this[nameof(ConstraintComp)].As<PhysicsConstraintComponent>(); } set { this["ConstraintComp"] = value; } }
        public Actor ConstraintActor1 { get { return this[nameof(ConstraintActor1)].As<Actor>(); } set { this["ConstraintActor1"] = value; } }
        public Actor ConstraintActor2 { get { return this[nameof(ConstraintActor2)].As<Actor>(); } set { this["ConstraintActor2"] = value; } }
        public bool bDisableCollision { get { return this["bDisableCollision"].Flag; } set { this["bDisableCollision"].Flag = value; } }
    }
    public class RigidBodyBase : Actor
    {
        public RigidBodyBase(nint addr) : base(addr) { }
        public RigidBodyBase() : base(0) { }
    }
    public class PhysicsCollisionHandler : UEObject
    {
        public PhysicsCollisionHandler(nint addr) : base(addr) { }
        public PhysicsCollisionHandler() : base(0) { }
        public float ImpactThreshold { get { return this["ImpactThreshold"].GetValue<float>(); } set { this["ImpactThreshold"].SetValue<float>(value); } }
        public float ImpactReFireDelay { get { return this["ImpactReFireDelay"].GetValue<float>(); } set { this["ImpactReFireDelay"].SetValue<float>(value); } }
        public SoundBase DefaultImpactSound { get { return this[nameof(DefaultImpactSound)].As<SoundBase>(); } set { this["DefaultImpactSound"] = value; } }
        public float LastImpactSoundTime { get { return this["LastImpactSoundTime"].GetValue<float>(); } set { this["LastImpactSoundTime"].SetValue<float>(value); } }
    }
    public class SkeletalBodySetup : BodySetup
    {
        public SkeletalBodySetup(nint addr) : base(addr) { }
        public SkeletalBodySetup() : base(0) { }
        public bool bSkipScaleFromAnimation { get { return this["bSkipScaleFromAnimation"].Flag; } set { this["bSkipScaleFromAnimation"].Flag = value; } }
        public Array<PhysicalAnimationProfile> PhysicalAnimationData { get { return new Array<PhysicalAnimationProfile>(this["PhysicalAnimationData"]); } set { this["PhysicalAnimationData"] = value; } }
    }
    public class PhysicsAsset : UEObject
    {
        public PhysicsAsset(nint addr) : base(addr) { }
        public PhysicsAsset() : base(0) { }
        public List<int> BoundsBodies { get { return this["BoundsBodies"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<SkeletalBodySetup> SkeletalBodySetups { get { return new Array<SkeletalBodySetup>(this["SkeletalBodySetups"]); } set { this["SkeletalBodySetups"] = value; } }
        public Array<PhysicsConstraintTemplate> ConstraintSetup { get { return new Array<PhysicsConstraintTemplate>(this["ConstraintSetup"]); } set { this["ConstraintSetup"] = value; } }
        public SolverIterations SolverIterations { get { return this[nameof(SolverIterations)].As<SolverIterations>(); } set { this["SolverIterations"] = value; } }
        public EPhysicsAssetSolverType SolverType { get { return (EPhysicsAssetSolverType)this["SolverType"].GetValue<int>(); } set { this["SolverType"].SetValue<int>((int)value); } }
        public bool bNotForDedicatedServer { get { return this["bNotForDedicatedServer"].Flag; } set { this["bNotForDedicatedServer"].Flag = value; } }
        public ThumbnailInfo ThumbnailInfo { get { return this[nameof(ThumbnailInfo)].As<ThumbnailInfo>(); } set { this["ThumbnailInfo"] = value; } }
        public Array<BodySetup> BodySetup { get { return new Array<BodySetup>(this["BodySetup"]); } set { this["BodySetup"] = value; } }
    }
    public class PhysicalMaterialMask : UEObject
    {
        public PhysicalMaterialMask(nint addr) : base(addr) { }
        public PhysicalMaterialMask() : base(0) { }
        public int UVChannelIndex { get { return this["UVChannelIndex"].GetValue<int>(); } set { this["UVChannelIndex"].SetValue<int>(value); } }
        public byte AddressX { get { return this["AddressX"].GetValue<byte>(); } set { this["AddressX"].SetValue<byte>(value); } }
        public byte AddressY { get { return this["AddressY"].GetValue<byte>(); } set { this["AddressY"].SetValue<byte>(value); } }
    }
    public class PhysicalAnimationComponent : ActorComponent
    {
        public PhysicalAnimationComponent(nint addr) : base(addr) { }
        public PhysicalAnimationComponent() : base(0) { }
        public float StrengthMultiplyer { get { return this["StrengthMultiplyer"].GetValue<float>(); } set { this["StrengthMultiplyer"].SetValue<float>(value); } }
        public SkeletalMeshComponent SkeletalMeshComponent { get { return this[nameof(SkeletalMeshComponent)].As<SkeletalMeshComponent>(); } set { this["SkeletalMeshComponent"] = value; } }
        public void SetStrengthMultiplyer(UEObject InStrengthMultiplyer) { Invoke("SetStrengthMultiplyer", InStrengthMultiplyer); }
        public void _PhysicalAnimationComponent(UEObject StrengthMultiplyer, UEObject SkeletalMeshComponent) { Invoke("PhysicalAnimationComponent", StrengthMultiplyer, SkeletalMeshComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PawnNoiseEmitterComponent : ActorComponent
    {
        public PawnNoiseEmitterComponent(nint addr) : base(addr) { }
        public PawnNoiseEmitterComponent() : base(0) { }
        public bool bAIPerceptionSystemCompatibilityMode { get { return this["bAIPerceptionSystemCompatibilityMode"].Flag; } set { this["bAIPerceptionSystemCompatibilityMode"].Flag = value; } }
        public Vector LastRemoteNoisePosition { get { return this[nameof(LastRemoteNoisePosition)].As<Vector>(); } set { this["LastRemoteNoisePosition"] = value; } }
        public float NoiseLifetime { get { return this["NoiseLifetime"].GetValue<float>(); } set { this["NoiseLifetime"].SetValue<float>(value); } }
        public float LastRemoteNoiseVolume { get { return this["LastRemoteNoiseVolume"].GetValue<float>(); } set { this["LastRemoteNoiseVolume"].SetValue<float>(value); } }
        public float LastRemoteNoiseTime { get { return this["LastRemoteNoiseTime"].GetValue<float>(); } set { this["LastRemoteNoiseTime"].SetValue<float>(value); } }
        public float LastLocalNoiseVolume { get { return this["LastLocalNoiseVolume"].GetValue<float>(); } set { this["LastLocalNoiseVolume"].SetValue<float>(value); } }
        public float LastLocalNoiseTime { get { return this["LastLocalNoiseTime"].GetValue<float>(); } set { this["LastLocalNoiseTime"].SetValue<float>(value); } }
        public void MakeNoise(UEObject NoiseMaker, UEObject Loudness, UEObject NoiseLocation) { Invoke("MakeNoise", NoiseMaker, Loudness, NoiseLocation); }
        public void _PawnNoiseEmitterComponent(UEObject bAIPerceptionSystemCompatibilityMode, UEObject LastRemoteNoisePosition, UEObject NoiseLifetime, UEObject LastRemoteNoiseVolume, UEObject LastRemoteNoiseTime, UEObject LastLocalNoiseVolume, UEObject LastLocalNoiseTime) { Invoke("PawnNoiseEmitterComponent", bAIPerceptionSystemCompatibilityMode, LastRemoteNoisePosition, NoiseLifetime, LastRemoteNoiseVolume, LastRemoteNoiseTime, LastLocalNoiseVolume, LastLocalNoiseTime); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PathFollowingAgentInterface : Interface
    {
        public PathFollowingAgentInterface(nint addr) : base(addr) { }
        public PathFollowingAgentInterface() : base(0) { }
    }
    public class ParticleSystemReplay : UEObject
    {
        public ParticleSystemReplay(nint addr) : base(addr) { }
        public ParticleSystemReplay() : base(0) { }
        public int ClipIDNumber { get { return this["ClipIDNumber"].GetValue<int>(); } set { this["ClipIDNumber"].SetValue<int>(value); } }
    }
    public class ParticleSpriteEmitter : ParticleEmitter
    {
        public ParticleSpriteEmitter(nint addr) : base(addr) { }
        public ParticleSpriteEmitter() : base(0) { }
    }
    public class ParticleModuleVelocityOverLifetime : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityOverLifetime(nint addr) : base(addr) { }
        public ParticleModuleVelocityOverLifetime() : base(0) { }
        public RawDistributionVector VelOverLife { get { return this[nameof(VelOverLife)].As<RawDistributionVector>(); } set { this["VelOverLife"] = value; } }
        public bool Absolute { get { return this["Absolute"].Flag; } set { this["Absolute"].Flag = value; } }
    }
    public class ParticleModuleVelocityInheritParent : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityInheritParent(nint addr) : base(addr) { }
        public ParticleModuleVelocityInheritParent() : base(0) { }
        public RawDistributionVector Scale { get { return this[nameof(Scale)].As<RawDistributionVector>(); } set { this["Scale"] = value; } }
    }
    public class ParticleModuleVelocityCone : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityCone(nint addr) : base(addr) { }
        public ParticleModuleVelocityCone() : base(0) { }
        public RawDistributionFloat Angle { get { return this[nameof(Angle)].As<RawDistributionFloat>(); } set { this["Angle"] = value; } }
        public RawDistributionFloat Velocity { get { return this[nameof(Velocity)].As<RawDistributionFloat>(); } set { this["Velocity"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
    }
    public class ParticleModuleVelocity_Seeded : ParticleModuleVelocity
    {
        public ParticleModuleVelocity_Seeded(nint addr) : base(addr) { }
        public ParticleModuleVelocity_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleVelocity : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocity(nint addr) : base(addr) { }
        public ParticleModuleVelocity() : base(0) { }
        public RawDistributionVector StartVelocity { get { return this[nameof(StartVelocity)].As<RawDistributionVector>(); } set { this["StartVelocity"] = value; } }
        public RawDistributionFloat StartVelocityRadial { get { return this[nameof(StartVelocityRadial)].As<RawDistributionFloat>(); } set { this["StartVelocityRadial"] = value; } }
    }
    public class ParticleModuleVelocityBase : ParticleModule
    {
        public ParticleModuleVelocityBase(nint addr) : base(addr) { }
        public ParticleModuleVelocityBase() : base(0) { }
        public bool bInWorldSpace { get { return this["bInWorldSpace"].Flag; } set { this["bInWorldSpace"].Flag = value; } }
        public bool bApplyOwnerScale { get { return this["bApplyOwnerScale"].Flag; } set { this["bApplyOwnerScale"].Flag = value; } }
    }
    public class ParticleModuleVectorFieldScaleOverLife : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldScaleOverLife(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldScaleOverLife() : base(0) { }
        public DistributionFloat VectorFieldScaleOverLife { get { return this[nameof(VectorFieldScaleOverLife)].As<DistributionFloat>(); } set { this["VectorFieldScaleOverLife"] = value; } }
        public RawDistributionFloat VectorFieldScaleOverLifeRaw { get { return this[nameof(VectorFieldScaleOverLifeRaw)].As<RawDistributionFloat>(); } set { this["VectorFieldScaleOverLifeRaw"] = value; } }
    }
    public class ParticleModuleVectorFieldScale : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldScale(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldScale() : base(0) { }
        public DistributionFloat VectorFieldScale { get { return this[nameof(VectorFieldScale)].As<DistributionFloat>(); } set { this["VectorFieldScale"] = value; } }
        public RawDistributionFloat VectorFieldScaleRaw { get { return this[nameof(VectorFieldScaleRaw)].As<RawDistributionFloat>(); } set { this["VectorFieldScaleRaw"] = value; } }
    }
    public class ParticleModuleVectorFieldRotationRate : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldRotationRate(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldRotationRate() : base(0) { }
        public Vector RotationRate { get { return this[nameof(RotationRate)].As<Vector>(); } set { this["RotationRate"] = value; } }
    }
    public class ParticleModuleVectorFieldRotation : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldRotation(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldRotation() : base(0) { }
        public Vector MinInitialRotation { get { return this[nameof(MinInitialRotation)].As<Vector>(); } set { this["MinInitialRotation"] = value; } }
        public Vector MaxInitialRotation { get { return this[nameof(MaxInitialRotation)].As<Vector>(); } set { this["MaxInitialRotation"] = value; } }
    }
    public class ParticleModuleVectorFieldLocal : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldLocal(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldLocal() : base(0) { }
        public VectorField VectorField { get { return this[nameof(VectorField)].As<VectorField>(); } set { this["VectorField"] = value; } }
        public Vector RelativeTranslation { get { return this[nameof(RelativeTranslation)].As<Vector>(); } set { this["RelativeTranslation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector>(); } set { this["RelativeScale3D"] = value; } }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
        public float Tightness { get { return this["Tightness"].GetValue<float>(); } set { this["Tightness"].SetValue<float>(value); } }
        public bool bIgnoreComponentTransform { get { return this["bIgnoreComponentTransform"].Flag; } set { this["bIgnoreComponentTransform"].Flag = value; } }
        public bool bTileX { get { return this["bTileX"].Flag; } set { this["bTileX"].Flag = value; } }
        public bool bTileY { get { return this["bTileY"].Flag; } set { this["bTileY"].Flag = value; } }
        public bool bTileZ { get { return this["bTileZ"].Flag; } set { this["bTileZ"].Flag = value; } }
        public bool bUseFixDT { get { return this["bUseFixDT"].Flag; } set { this["bUseFixDT"].Flag = value; } }
    }
    public class ParticleModuleVectorFieldGlobal : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldGlobal(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldGlobal() : base(0) { }
        public bool bOverrideGlobalVectorFieldTightness { get { return this["bOverrideGlobalVectorFieldTightness"].Flag; } set { this["bOverrideGlobalVectorFieldTightness"].Flag = value; } }
        public float GlobalVectorFieldScale { get { return this["GlobalVectorFieldScale"].GetValue<float>(); } set { this["GlobalVectorFieldScale"].SetValue<float>(value); } }
        public float GlobalVectorFieldTightness { get { return this["GlobalVectorFieldTightness"].GetValue<float>(); } set { this["GlobalVectorFieldTightness"].SetValue<float>(value); } }
    }
    public class ParticleModuleVectorFieldBase : ParticleModule
    {
        public ParticleModuleVectorFieldBase(nint addr) : base(addr) { }
        public ParticleModuleVectorFieldBase() : base(0) { }
    }
    public class ParticleModuleTypeDataRibbon : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataRibbon(nint addr) : base(addr) { }
        public ParticleModuleTypeDataRibbon() : base(0) { }
        public int MaxTessellationBetweenParticles { get { return this["MaxTessellationBetweenParticles"].GetValue<int>(); } set { this["MaxTessellationBetweenParticles"].SetValue<int>(value); } }
        public int SheetsPerTrail { get { return this["SheetsPerTrail"].GetValue<int>(); } set { this["SheetsPerTrail"].SetValue<int>(value); } }
        public int MaxTrailCount { get { return this["MaxTrailCount"].GetValue<int>(); } set { this["MaxTrailCount"].SetValue<int>(value); } }
        public int MaxParticleInTrailCount { get { return this["MaxParticleInTrailCount"].GetValue<int>(); } set { this["MaxParticleInTrailCount"].SetValue<int>(value); } }
        public bool bDeadTrailsOnDeactivate { get { return this["bDeadTrailsOnDeactivate"].Flag; } set { this["bDeadTrailsOnDeactivate"].Flag = value; } }
        public bool bDeadTrailsOnSourceLoss { get { return this["bDeadTrailsOnSourceLoss"].Flag; } set { this["bDeadTrailsOnSourceLoss"].Flag = value; } }
        public bool bClipSourceSegement { get { return this["bClipSourceSegement"].Flag; } set { this["bClipSourceSegement"].Flag = value; } }
        public bool bEnablePreviousTangentRecalculation { get { return this["bEnablePreviousTangentRecalculation"].Flag; } set { this["bEnablePreviousTangentRecalculation"].Flag = value; } }
        public bool bTangentRecalculationEveryFrame { get { return this["bTangentRecalculationEveryFrame"].Flag; } set { this["bTangentRecalculationEveryFrame"].Flag = value; } }
        public bool bSpawnInitialParticle { get { return this["bSpawnInitialParticle"].Flag; } set { this["bSpawnInitialParticle"].Flag = value; } }
        public byte RenderAxis { get { return this["RenderAxis"].GetValue<byte>(); } set { this["RenderAxis"].SetValue<byte>(value); } }
        public float TangentSpawningScalar { get { return this["TangentSpawningScalar"].GetValue<float>(); } set { this["TangentSpawningScalar"].SetValue<float>(value); } }
        public bool bRenderGeometry { get { return this["bRenderGeometry"].Flag; } set { this["bRenderGeometry"].Flag = value; } }
        public bool bRenderSpawnPoints { get { return this["bRenderSpawnPoints"].Flag; } set { this["bRenderSpawnPoints"].Flag = value; } }
        public bool bRenderTangents { get { return this["bRenderTangents"].Flag; } set { this["bRenderTangents"].Flag = value; } }
        public bool bRenderTessellation { get { return this["bRenderTessellation"].Flag; } set { this["bRenderTessellation"].Flag = value; } }
        public float TilingDistance { get { return this["TilingDistance"].GetValue<float>(); } set { this["TilingDistance"].SetValue<float>(value); } }
        public float DistanceTessellationStepSize { get { return this["DistanceTessellationStepSize"].GetValue<float>(); } set { this["DistanceTessellationStepSize"].SetValue<float>(value); } }
        public bool bEnableTangentDiffInterpScale { get { return this["bEnableTangentDiffInterpScale"].Flag; } set { this["bEnableTangentDiffInterpScale"].Flag = value; } }
        public float TangentTessellationScalar { get { return this["TangentTessellationScalar"].GetValue<float>(); } set { this["TangentTessellationScalar"].SetValue<float>(value); } }
    }
    public class ParticleModuleTypeDataMesh : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataMesh(nint addr) : base(addr) { }
        public ParticleModuleTypeDataMesh() : base(0) { }
        public StaticMesh Mesh { get { return this[nameof(Mesh)].As<StaticMesh>(); } set { this["Mesh"] = value; } }
        public float LODSizeScale { get { return this["LODSizeScale"].GetValue<float>(); } set { this["LODSizeScale"].SetValue<float>(value); } }
        public bool bUseStaticMeshLODs { get { return this["bUseStaticMeshLODs"].Flag; } set { this["bUseStaticMeshLODs"].Flag = value; } }
        public bool CastShadows { get { return this["CastShadows"].Flag; } set { this["CastShadows"].Flag = value; } }
        public bool DoCollisions { get { return this["DoCollisions"].Flag; } set { this["DoCollisions"].Flag = value; } }
        public byte MeshAlignment { get { return this["MeshAlignment"].GetValue<byte>(); } set { this["MeshAlignment"].SetValue<byte>(value); } }
        public bool bOverrideMaterial { get { return this["bOverrideMaterial"].Flag; } set { this["bOverrideMaterial"].Flag = value; } }
        public bool bOverrideDefaultMotionBlurSettings { get { return this["bOverrideDefaultMotionBlurSettings"].Flag; } set { this["bOverrideDefaultMotionBlurSettings"].Flag = value; } }
        public bool bEnableMotionBlur { get { return this["bEnableMotionBlur"].Flag; } set { this["bEnableMotionBlur"].Flag = value; } }
        public RawDistributionVector RollPitchYawRange { get { return this[nameof(RollPitchYawRange)].As<RawDistributionVector>(); } set { this["RollPitchYawRange"] = value; } }
        public byte AxisLockOption { get { return this["AxisLockOption"].GetValue<byte>(); } set { this["AxisLockOption"].SetValue<byte>(value); } }
        public bool bCameraFacing { get { return this["bCameraFacing"].Flag; } set { this["bCameraFacing"].Flag = value; } }
        public byte CameraFacingUpAxisOption { get { return this["CameraFacingUpAxisOption"].GetValue<byte>(); } set { this["CameraFacingUpAxisOption"].SetValue<byte>(value); } }
        public byte CameraFacingOption { get { return this["CameraFacingOption"].GetValue<byte>(); } set { this["CameraFacingOption"].SetValue<byte>(value); } }
        public bool bApplyParticleRotationAsSpin { get { return this["bApplyParticleRotationAsSpin"].Flag; } set { this["bApplyParticleRotationAsSpin"].Flag = value; } }
        public bool bFaceCameraDirectionRatherThanPosition { get { return this["bFaceCameraDirectionRatherThanPosition"].Flag; } set { this["bFaceCameraDirectionRatherThanPosition"].Flag = value; } }
        public bool bCollisionsConsiderPartilceSize { get { return this["bCollisionsConsiderPartilceSize"].Flag; } set { this["bCollisionsConsiderPartilceSize"].Flag = value; } }
    }
    public class ParticleModuleTypeDataGpu : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataGpu(nint addr) : base(addr) { }
        public ParticleModuleTypeDataGpu() : base(0) { }
        public GPUSpriteEmitterInfo EmitterInfo { get { return this[nameof(EmitterInfo)].As<GPUSpriteEmitterInfo>(); } set { this["EmitterInfo"] = value; } }
        public GPUSpriteResourceData ResourceData { get { return this[nameof(ResourceData)].As<GPUSpriteResourceData>(); } set { this["ResourceData"] = value; } }
        public float CameraMotionBlurAmount { get { return this["CameraMotionBlurAmount"].GetValue<float>(); } set { this["CameraMotionBlurAmount"].SetValue<float>(value); } }
        public bool bClearExistingParticlesOnInit { get { return this["bClearExistingParticlesOnInit"].Flag; } set { this["bClearExistingParticlesOnInit"].Flag = value; } }
    }
    public class ParticleModuleTypeDataBeam2 : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataBeam2(nint addr) : base(addr) { }
        public ParticleModuleTypeDataBeam2() : base(0) { }
        public byte BeamMethod { get { return this["BeamMethod"].GetValue<byte>(); } set { this["BeamMethod"].SetValue<byte>(value); } }
        public int TextureTile { get { return this["TextureTile"].GetValue<int>(); } set { this["TextureTile"].SetValue<int>(value); } }
        public float TextureTileDistance { get { return this["TextureTileDistance"].GetValue<float>(); } set { this["TextureTileDistance"].SetValue<float>(value); } }
        public int Sheets { get { return this["Sheets"].GetValue<int>(); } set { this["Sheets"].SetValue<int>(value); } }
        public int MaxBeamCount { get { return this["MaxBeamCount"].GetValue<int>(); } set { this["MaxBeamCount"].SetValue<int>(value); } }
        public float Speed { get { return this["Speed"].GetValue<float>(); } set { this["Speed"].SetValue<float>(value); } }
        public int InterpolationPoints { get { return this["InterpolationPoints"].GetValue<int>(); } set { this["InterpolationPoints"].SetValue<int>(value); } }
        public bool bAlwaysOn { get { return this["bAlwaysOn"].Flag; } set { this["bAlwaysOn"].Flag = value; } }
        public int UpVectorStepSize { get { return this["UpVectorStepSize"].GetValue<int>(); } set { this["UpVectorStepSize"].SetValue<int>(value); } }
        public string BranchParentName { get { return this["BranchParentName"].ToString(); } set { /* String properties are read-only */ } }
        public RawDistributionFloat Distance { get { return this[nameof(Distance)].As<RawDistributionFloat>(); } set { this["Distance"] = value; } }
        public byte TaperMethod { get { return this["TaperMethod"].GetValue<byte>(); } set { this["TaperMethod"].SetValue<byte>(value); } }
        public RawDistributionFloat TaperFactor { get { return this[nameof(TaperFactor)].As<RawDistributionFloat>(); } set { this["TaperFactor"] = value; } }
        public RawDistributionFloat TaperScale { get { return this[nameof(TaperScale)].As<RawDistributionFloat>(); } set { this["TaperScale"] = value; } }
        public bool RenderGeometry { get { return this["RenderGeometry"].Flag; } set { this["RenderGeometry"].Flag = value; } }
        public bool RenderDirectLine { get { return this["RenderDirectLine"].Flag; } set { this["RenderDirectLine"].Flag = value; } }
        public bool RenderLines { get { return this["RenderLines"].Flag; } set { this["RenderLines"].Flag = value; } }
        public bool RenderTessellation { get { return this["RenderTessellation"].Flag; } set { this["RenderTessellation"].Flag = value; } }
    }
    public class ParticleModuleTypeDataAnimTrail : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataAnimTrail(nint addr) : base(addr) { }
        public ParticleModuleTypeDataAnimTrail() : base(0) { }
        public bool bDeadTrailsOnDeactivate { get { return this["bDeadTrailsOnDeactivate"].Flag; } set { this["bDeadTrailsOnDeactivate"].Flag = value; } }
        public bool bEnablePreviousTangentRecalculation { get { return this["bEnablePreviousTangentRecalculation"].Flag; } set { this["bEnablePreviousTangentRecalculation"].Flag = value; } }
        public bool bTangentRecalculationEveryFrame { get { return this["bTangentRecalculationEveryFrame"].Flag; } set { this["bTangentRecalculationEveryFrame"].Flag = value; } }
        public float TilingDistance { get { return this["TilingDistance"].GetValue<float>(); } set { this["TilingDistance"].SetValue<float>(value); } }
        public float DistanceTessellationStepSize { get { return this["DistanceTessellationStepSize"].GetValue<float>(); } set { this["DistanceTessellationStepSize"].SetValue<float>(value); } }
        public float TangentTessellationStepSize { get { return this["TangentTessellationStepSize"].GetValue<float>(); } set { this["TangentTessellationStepSize"].SetValue<float>(value); } }
        public float WidthTessellationStepSize { get { return this["WidthTessellationStepSize"].GetValue<float>(); } set { this["WidthTessellationStepSize"].SetValue<float>(value); } }
    }
    public class ParticleModuleTypeDataBase : ParticleModule
    {
        public ParticleModuleTypeDataBase(nint addr) : base(addr) { }
        public ParticleModuleTypeDataBase() : base(0) { }
    }
    public class ParticleModuleTrailSource : ParticleModuleTrailBase
    {
        public ParticleModuleTrailSource(nint addr) : base(addr) { }
        public ParticleModuleTrailSource() : base(0) { }
        public byte SourceMethod { get { return this["SourceMethod"].GetValue<byte>(); } set { this["SourceMethod"].SetValue<byte>(value); } }
        public string SourceName { get { return this["SourceName"].ToString(); } set { /* String properties are read-only */ } }
        public RawDistributionFloat SourceStrength { get { return this[nameof(SourceStrength)].As<RawDistributionFloat>(); } set { this["SourceStrength"] = value; } }
        public bool bLockSourceStength { get { return this["bLockSourceStength"].Flag; } set { this["bLockSourceStength"].Flag = value; } }
        public int SourceOffsetCount { get { return this["SourceOffsetCount"].GetValue<int>(); } set { this["SourceOffsetCount"].SetValue<int>(value); } }
        public Array<Vector> SourceOffsetDefaults { get { return new Array<Vector>(this["SourceOffsetDefaults"]); } set { this["SourceOffsetDefaults"] = value; } }
        public byte SelectionMethod { get { return this["SelectionMethod"].GetValue<byte>(); } set { this["SelectionMethod"].SetValue<byte>(value); } }
        public bool bInheritRotation { get { return this["bInheritRotation"].Flag; } set { this["bInheritRotation"].Flag = value; } }
    }
    public class ParticleModuleTrailBase : ParticleModule
    {
        public ParticleModuleTrailBase(nint addr) : base(addr) { }
        public ParticleModuleTrailBase() : base(0) { }
    }
    public class ParticleModuleSubUVMovie : ParticleModuleSubUV
    {
        public ParticleModuleSubUVMovie(nint addr) : base(addr) { }
        public ParticleModuleSubUVMovie() : base(0) { }
        public bool bUseEmitterTime { get { return this["bUseEmitterTime"].Flag; } set { this["bUseEmitterTime"].Flag = value; } }
        public RawDistributionFloat FrameRate { get { return this[nameof(FrameRate)].As<RawDistributionFloat>(); } set { this["FrameRate"] = value; } }
        public int StartingFrame { get { return this["StartingFrame"].GetValue<int>(); } set { this["StartingFrame"].SetValue<int>(value); } }
    }
    public class ParticleModuleSubUV : ParticleModuleSubUVBase
    {
        public ParticleModuleSubUV(nint addr) : base(addr) { }
        public ParticleModuleSubUV() : base(0) { }
        public SubUVAnimation Animation { get { return this[nameof(Animation)].As<SubUVAnimation>(); } set { this["Animation"] = value; } }
        public RawDistributionFloat SubImageIndex { get { return this[nameof(SubImageIndex)].As<RawDistributionFloat>(); } set { this["SubImageIndex"] = value; } }
        public bool bUseRealTime { get { return this["bUseRealTime"].Flag; } set { this["bUseRealTime"].Flag = value; } }
    }
    public class ParticleModuleSubUVBase : ParticleModule
    {
        public ParticleModuleSubUVBase(nint addr) : base(addr) { }
        public ParticleModuleSubUVBase() : base(0) { }
    }
    public class ParticleModuleSpawnPerUnit : ParticleModuleSpawnBase
    {
        public ParticleModuleSpawnPerUnit(nint addr) : base(addr) { }
        public ParticleModuleSpawnPerUnit() : base(0) { }
        public float UnitScalar { get { return this["UnitScalar"].GetValue<float>(); } set { this["UnitScalar"].SetValue<float>(value); } }
        public float MovementTolerance { get { return this["MovementTolerance"].GetValue<float>(); } set { this["MovementTolerance"].SetValue<float>(value); } }
        public RawDistributionFloat SpawnPerUnit { get { return this[nameof(SpawnPerUnit)].As<RawDistributionFloat>(); } set { this["SpawnPerUnit"] = value; } }
        public float MaxFrameDistance { get { return this["MaxFrameDistance"].GetValue<float>(); } set { this["MaxFrameDistance"].SetValue<float>(value); } }
        public bool bIgnoreSpawnRateWhenMoving { get { return this["bIgnoreSpawnRateWhenMoving"].Flag; } set { this["bIgnoreSpawnRateWhenMoving"].Flag = value; } }
        public bool bIgnoreMovementAlongX { get { return this["bIgnoreMovementAlongX"].Flag; } set { this["bIgnoreMovementAlongX"].Flag = value; } }
        public bool bIgnoreMovementAlongY { get { return this["bIgnoreMovementAlongY"].Flag; } set { this["bIgnoreMovementAlongY"].Flag = value; } }
        public bool bIgnoreMovementAlongZ { get { return this["bIgnoreMovementAlongZ"].Flag; } set { this["bIgnoreMovementAlongZ"].Flag = value; } }
    }
    public class ParticleModuleSpawn : ParticleModuleSpawnBase
    {
        public ParticleModuleSpawn(nint addr) : base(addr) { }
        public ParticleModuleSpawn() : base(0) { }
        public RawDistributionFloat Rate { get { return this[nameof(Rate)].As<RawDistributionFloat>(); } set { this["Rate"] = value; } }
        public RawDistributionFloat RateScale { get { return this[nameof(RateScale)].As<RawDistributionFloat>(); } set { this["RateScale"] = value; } }
        public byte ParticleBurstMethod { get { return this["ParticleBurstMethod"].GetValue<byte>(); } set { this["ParticleBurstMethod"].SetValue<byte>(value); } }
        public Array<ParticleBurst> BurstList { get { return new Array<ParticleBurst>(this["BurstList"]); } set { this["BurstList"] = value; } }
        public RawDistributionFloat BurstScale { get { return this[nameof(BurstScale)].As<RawDistributionFloat>(); } set { this["BurstScale"] = value; } }
        public bool bApplyGlobalSpawnRateScale { get { return this["bApplyGlobalSpawnRateScale"].Flag; } set { this["bApplyGlobalSpawnRateScale"].Flag = value; } }
    }
    public class ParticleModuleSpawnBase : ParticleModule
    {
        public ParticleModuleSpawnBase(nint addr) : base(addr) { }
        public ParticleModuleSpawnBase() : base(0) { }
        public bool bProcessSpawnRate { get { return this["bProcessSpawnRate"].Flag; } set { this["bProcessSpawnRate"].Flag = value; } }
        public bool bProcessBurstList { get { return this["bProcessBurstList"].Flag; } set { this["bProcessBurstList"].Flag = value; } }
    }
    public class ParticleModuleSourceMovement : ParticleModuleLocationBase
    {
        public ParticleModuleSourceMovement(nint addr) : base(addr) { }
        public ParticleModuleSourceMovement() : base(0) { }
        public RawDistributionVector SourceMovementScale { get { return this[nameof(SourceMovementScale)].As<RawDistributionVector>(); } set { this["SourceMovementScale"] = value; } }
    }
    public class ParticleModuleSizeScaleBySpeed : ParticleModuleSizeBase
    {
        public ParticleModuleSizeScaleBySpeed(nint addr) : base(addr) { }
        public ParticleModuleSizeScaleBySpeed() : base(0) { }
        public Vector2D SpeedScale { get { return this[nameof(SpeedScale)].As<Vector2D>(); } set { this["SpeedScale"] = value; } }
        public Vector2D MaxScale { get { return this[nameof(MaxScale)].As<Vector2D>(); } set { this["MaxScale"] = value; } }
    }
    public class ParticleModuleSizeScale : ParticleModuleSizeBase
    {
        public ParticleModuleSizeScale(nint addr) : base(addr) { }
        public ParticleModuleSizeScale() : base(0) { }
        public RawDistributionVector SizeScale { get { return this[nameof(SizeScale)].As<RawDistributionVector>(); } set { this["SizeScale"] = value; } }
        public bool EnableX { get { return this["EnableX"].Flag; } set { this["EnableX"].Flag = value; } }
        public bool EnableY { get { return this["EnableY"].Flag; } set { this["EnableY"].Flag = value; } }
        public bool EnableZ { get { return this["EnableZ"].Flag; } set { this["EnableZ"].Flag = value; } }
    }
    public class ParticleModuleSizeMultiplyLife : ParticleModuleSizeBase
    {
        public ParticleModuleSizeMultiplyLife(nint addr) : base(addr) { }
        public ParticleModuleSizeMultiplyLife() : base(0) { }
        public RawDistributionVector LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionVector>(); } set { this["LifeMultiplier"] = value; } }
        public bool MultiplyX { get { return this["MultiplyX"].Flag; } set { this["MultiplyX"].Flag = value; } }
        public bool MultiplyY { get { return this["MultiplyY"].Flag; } set { this["MultiplyY"].Flag = value; } }
        public bool MultiplyZ { get { return this["MultiplyZ"].Flag; } set { this["MultiplyZ"].Flag = value; } }
    }
    public class ParticleModuleSize_Seeded : ParticleModuleSize
    {
        public ParticleModuleSize_Seeded(nint addr) : base(addr) { }
        public ParticleModuleSize_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleSize : ParticleModuleSizeBase
    {
        public ParticleModuleSize(nint addr) : base(addr) { }
        public ParticleModuleSize() : base(0) { }
        public RawDistributionVector StartSize { get { return this[nameof(StartSize)].As<RawDistributionVector>(); } set { this["StartSize"] = value; } }
    }
    public class ParticleModuleSizeBase : ParticleModule
    {
        public ParticleModuleSizeBase(nint addr) : base(addr) { }
        public ParticleModuleSizeBase() : base(0) { }
    }
    public class ParticleModuleRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleRotationRateMultiplyLife(nint addr) : base(addr) { }
        public ParticleModuleRotationRateMultiplyLife() : base(0) { }
        public RawDistributionFloat LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionFloat>(); } set { this["LifeMultiplier"] = value; } }
    }
    public class ParticleModuleRotationRate_Seeded : ParticleModuleRotationRate
    {
        public ParticleModuleRotationRate_Seeded(nint addr) : base(addr) { }
        public ParticleModuleRotationRate_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleRotationRate : ParticleModuleRotationRateBase
    {
        public ParticleModuleRotationRate(nint addr) : base(addr) { }
        public ParticleModuleRotationRate() : base(0) { }
        public RawDistributionFloat StartRotationRate { get { return this[nameof(StartRotationRate)].As<RawDistributionFloat>(); } set { this["StartRotationRate"] = value; } }
    }
    public class ParticleModuleRotationOverLifetime : ParticleModuleRotationBase
    {
        public ParticleModuleRotationOverLifetime(nint addr) : base(addr) { }
        public ParticleModuleRotationOverLifetime() : base(0) { }
        public RawDistributionFloat RotationOverLife { get { return this[nameof(RotationOverLife)].As<RawDistributionFloat>(); } set { this["RotationOverLife"] = value; } }
        public bool Scale { get { return this["Scale"].Flag; } set { this["Scale"].Flag = value; } }
    }
    public class ParticleModuleRotation_Seeded : ParticleModuleRotation
    {
        public ParticleModuleRotation_Seeded(nint addr) : base(addr) { }
        public ParticleModuleRotation_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleRotation : ParticleModuleRotationBase
    {
        public ParticleModuleRotation(nint addr) : base(addr) { }
        public ParticleModuleRotation() : base(0) { }
        public RawDistributionFloat StartRotation { get { return this[nameof(StartRotation)].As<RawDistributionFloat>(); } set { this["StartRotation"] = value; } }
    }
    public class ParticleModuleRequired : ParticleModule
    {
        public ParticleModuleRequired(nint addr) : base(addr) { }
        public ParticleModuleRequired() : base(0) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public float MinFacingCameraBlendDistance { get { return this["MinFacingCameraBlendDistance"].GetValue<float>(); } set { this["MinFacingCameraBlendDistance"].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this["MaxFacingCameraBlendDistance"].GetValue<float>(); } set { this["MaxFacingCameraBlendDistance"].SetValue<float>(value); } }
        public Vector EmitterOrigin { get { return this[nameof(EmitterOrigin)].As<Vector>(); } set { this["EmitterOrigin"] = value; } }
        public Rotator EmitterRotation { get { return this[nameof(EmitterRotation)].As<Rotator>(); } set { this["EmitterRotation"] = value; } }
        public byte ScreenAlignment { get { return this["ScreenAlignment"].GetValue<byte>(); } set { this["ScreenAlignment"].SetValue<byte>(value); } }
        public bool bUseLocalSpace { get { return this["bUseLocalSpace"].Flag; } set { this["bUseLocalSpace"].Flag = value; } }
        public bool bKillOnDeactivate { get { return this["bKillOnDeactivate"].Flag; } set { this["bKillOnDeactivate"].Flag = value; } }
        public bool bKillOnCompleted { get { return this["bKillOnCompleted"].Flag; } set { this["bKillOnCompleted"].Flag = value; } }
        public byte SortMode { get { return this["SortMode"].GetValue<byte>(); } set { this["SortMode"].SetValue<byte>(value); } }
        public bool bUseLegacyEmitterTime { get { return this["bUseLegacyEmitterTime"].Flag; } set { this["bUseLegacyEmitterTime"].Flag = value; } }
        public bool bRemoveHMDRoll { get { return this["bRemoveHMDRoll"].Flag; } set { this["bRemoveHMDRoll"].Flag = value; } }
        public bool bEmitterDurationUseRange { get { return this["bEmitterDurationUseRange"].Flag; } set { this["bEmitterDurationUseRange"].Flag = value; } }
        public float EmitterDuration { get { return this["EmitterDuration"].GetValue<float>(); } set { this["EmitterDuration"].SetValue<float>(value); } }
        public RawDistributionFloat SpawnRate { get { return this[nameof(SpawnRate)].As<RawDistributionFloat>(); } set { this["SpawnRate"] = value; } }
        public Array<ParticleBurst> BurstList { get { return new Array<ParticleBurst>(this["BurstList"]); } set { this["BurstList"] = value; } }
        public float EmitterDelay { get { return this["EmitterDelay"].GetValue<float>(); } set { this["EmitterDelay"].SetValue<float>(value); } }
        public float EmitterDelayLow { get { return this["EmitterDelayLow"].GetValue<float>(); } set { this["EmitterDelayLow"].SetValue<float>(value); } }
        public bool bDelayFirstLoopOnly { get { return this["bDelayFirstLoopOnly"].Flag; } set { this["bDelayFirstLoopOnly"].Flag = value; } }
        public byte InterpolationMethod { get { return this["InterpolationMethod"].GetValue<byte>(); } set { this["InterpolationMethod"].SetValue<byte>(value); } }
        public bool bScaleUV { get { return this["bScaleUV"].Flag; } set { this["bScaleUV"].Flag = value; } }
        public bool bEmitterDelayUseRange { get { return this["bEmitterDelayUseRange"].Flag; } set { this["bEmitterDelayUseRange"].Flag = value; } }
        public byte ParticleBurstMethod { get { return this["ParticleBurstMethod"].GetValue<byte>(); } set { this["ParticleBurstMethod"].SetValue<byte>(value); } }
        public bool bOverrideSystemMacroUV { get { return this["bOverrideSystemMacroUV"].Flag; } set { this["bOverrideSystemMacroUV"].Flag = value; } }
        public bool bUseMaxDrawCount { get { return this["bUseMaxDrawCount"].Flag; } set { this["bUseMaxDrawCount"].Flag = value; } }
        public byte OpacitySourceMode { get { return this["OpacitySourceMode"].GetValue<byte>(); } set { this["OpacitySourceMode"].SetValue<byte>(value); } }
        public byte EmitterNormalsMode { get { return this["EmitterNormalsMode"].GetValue<byte>(); } set { this["EmitterNormalsMode"].SetValue<byte>(value); } }
        public bool bOrbitModuleAffectsVelocityAlignment { get { return this["bOrbitModuleAffectsVelocityAlignment"].Flag; } set { this["bOrbitModuleAffectsVelocityAlignment"].Flag = value; } }
        public int SubImages_Horizontal { get { return this["SubImages_Horizontal"].GetValue<int>(); } set { this["SubImages_Horizontal"].SetValue<int>(value); } }
        public int SubImages_Vertical { get { return this["SubImages_Vertical"].GetValue<int>(); } set { this["SubImages_Vertical"].SetValue<int>(value); } }
        public float RandomImageTime { get { return this["RandomImageTime"].GetValue<float>(); } set { this["RandomImageTime"].SetValue<float>(value); } }
        public int RandomImageChanges { get { return this["RandomImageChanges"].GetValue<int>(); } set { this["RandomImageChanges"].SetValue<int>(value); } }
        public Vector MacroUVPosition { get { return this[nameof(MacroUVPosition)].As<Vector>(); } set { this["MacroUVPosition"] = value; } }
        public float MacroUVRadius { get { return this["MacroUVRadius"].GetValue<float>(); } set { this["MacroUVRadius"].SetValue<float>(value); } }
        public EParticleUVFlipMode UVFlippingMode { get { return (EParticleUVFlipMode)this["UVFlippingMode"].GetValue<int>(); } set { this["UVFlippingMode"].SetValue<int>((int)value); } }
        public byte BoundingMode { get { return this["BoundingMode"].GetValue<byte>(); } set { this["BoundingMode"].SetValue<byte>(value); } }
        public bool bDurationRecalcEachLoop { get { return this["bDurationRecalcEachLoop"].Flag; } set { this["bDurationRecalcEachLoop"].Flag = value; } }
        public Vector NormalsSphereCenter { get { return this[nameof(NormalsSphereCenter)].As<Vector>(); } set { this["NormalsSphereCenter"] = value; } }
        public float AlphaThreshold { get { return this["AlphaThreshold"].GetValue<float>(); } set { this["AlphaThreshold"].SetValue<float>(value); } }
        public int EmitterLoops { get { return this["EmitterLoops"].GetValue<int>(); } set { this["EmitterLoops"].SetValue<int>(value); } }
        public Texture2D CutoutTexture { get { return this[nameof(CutoutTexture)].As<Texture2D>(); } set { this["CutoutTexture"] = value; } }
        public int MaxDrawCount { get { return this["MaxDrawCount"].GetValue<int>(); } set { this["MaxDrawCount"].SetValue<int>(value); } }
        public float EmitterDurationLow { get { return this["EmitterDurationLow"].GetValue<float>(); } set { this["EmitterDurationLow"].SetValue<float>(value); } }
        public Vector NormalsCylinderDirection { get { return this[nameof(NormalsCylinderDirection)].As<Vector>(); } set { this["NormalsCylinderDirection"] = value; } }
        public List<string> NamedMaterialOverrides { get { return this["NamedMaterialOverrides"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class ParticleModulePivotOffset : ParticleModuleLocationBase
    {
        public ParticleModulePivotOffset(nint addr) : base(addr) { }
        public ParticleModulePivotOffset() : base(0) { }
        public Vector2D PivotOffset { get { return this[nameof(PivotOffset)].As<Vector2D>(); } set { this["PivotOffset"] = value; } }
    }
    public class ParticleModuleParameterDynamic_Seeded : ParticleModuleParameterDynamic
    {
        public ParticleModuleParameterDynamic_Seeded(nint addr) : base(addr) { }
        public ParticleModuleParameterDynamic_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleParameterDynamic : ParticleModuleParameterBase
    {
        public ParticleModuleParameterDynamic(nint addr) : base(addr) { }
        public ParticleModuleParameterDynamic() : base(0) { }
        public Array<EmitterDynamicParameter> DynamicParams { get { return new Array<EmitterDynamicParameter>(this["DynamicParams"]); } set { this["DynamicParams"] = value; } }
        public int UpdateFlags { get { return this["UpdateFlags"].GetValue<int>(); } set { this["UpdateFlags"].SetValue<int>(value); } }
        public bool bUsesVelocity { get { return this["bUsesVelocity"].Flag; } set { this["bUsesVelocity"].Flag = value; } }
    }
    public class ParticleModuleParameterBase : ParticleModule
    {
        public ParticleModuleParameterBase(nint addr) : base(addr) { }
        public ParticleModuleParameterBase() : base(0) { }
    }
    public class ParticleModuleOrientationAxisLock : ParticleModuleOrientationBase
    {
        public ParticleModuleOrientationAxisLock(nint addr) : base(addr) { }
        public ParticleModuleOrientationAxisLock() : base(0) { }
        public byte LockAxisFlags { get { return this["LockAxisFlags"].GetValue<byte>(); } set { this["LockAxisFlags"].SetValue<byte>(value); } }
    }
    public class ParticleModuleOrientationBase : ParticleModule
    {
        public ParticleModuleOrientationBase(nint addr) : base(addr) { }
        public ParticleModuleOrientationBase() : base(0) { }
    }
    public class ParticleModuleOrbit : ParticleModuleOrbitBase
    {
        public ParticleModuleOrbit(nint addr) : base(addr) { }
        public ParticleModuleOrbit() : base(0) { }
        public byte ChainMode { get { return this["ChainMode"].GetValue<byte>(); } set { this["ChainMode"].SetValue<byte>(value); } }
        public RawDistributionVector OffsetAmount { get { return this[nameof(OffsetAmount)].As<RawDistributionVector>(); } set { this["OffsetAmount"] = value; } }
        public OrbitOptions OffsetOptions { get { return this[nameof(OffsetOptions)].As<OrbitOptions>(); } set { this["OffsetOptions"] = value; } }
        public RawDistributionVector RotationAmount { get { return this[nameof(RotationAmount)].As<RawDistributionVector>(); } set { this["RotationAmount"] = value; } }
        public OrbitOptions RotationOptions { get { return this[nameof(RotationOptions)].As<OrbitOptions>(); } set { this["RotationOptions"] = value; } }
        public RawDistributionVector RotationRateAmount { get { return this[nameof(RotationRateAmount)].As<RawDistributionVector>(); } set { this["RotationRateAmount"] = value; } }
        public OrbitOptions RotationRateOptions { get { return this[nameof(RotationRateOptions)].As<OrbitOptions>(); } set { this["RotationRateOptions"] = value; } }
    }
    public class ParticleModuleOrbitBase : ParticleModule
    {
        public ParticleModuleOrbitBase(nint addr) : base(addr) { }
        public ParticleModuleOrbitBase() : base(0) { }
        public bool bUseEmitterTime { get { return this["bUseEmitterTime"].Flag; } set { this["bUseEmitterTime"].Flag = value; } }
    }
    public class ParticleModuleMeshRotationRateOverLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRateOverLife(nint addr) : base(addr) { }
        public ParticleModuleMeshRotationRateOverLife() : base(0) { }
        public RawDistributionVector RotRate { get { return this[nameof(RotRate)].As<RawDistributionVector>(); } set { this["RotRate"] = value; } }
        public bool bScaleRotRate { get { return this["bScaleRotRate"].Flag; } set { this["bScaleRotRate"].Flag = value; } }
    }
    public class ParticleModuleMeshRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRateMultiplyLife(nint addr) : base(addr) { }
        public ParticleModuleMeshRotationRateMultiplyLife() : base(0) { }
        public RawDistributionVector LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionVector>(); } set { this["LifeMultiplier"] = value; } }
    }
    public class ParticleModuleMeshRotationRate_Seeded : ParticleModuleMeshRotationRate
    {
        public ParticleModuleMeshRotationRate_Seeded(nint addr) : base(addr) { }
        public ParticleModuleMeshRotationRate_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleMeshRotationRate : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRate(nint addr) : base(addr) { }
        public ParticleModuleMeshRotationRate() : base(0) { }
        public RawDistributionVector StartRotationRate { get { return this[nameof(StartRotationRate)].As<RawDistributionVector>(); } set { this["StartRotationRate"] = value; } }
    }
    public class ParticleModuleRotationRateBase : ParticleModule
    {
        public ParticleModuleRotationRateBase(nint addr) : base(addr) { }
        public ParticleModuleRotationRateBase() : base(0) { }
    }
    public class ParticleModuleMeshRotation_Seeded : ParticleModuleMeshRotation
    {
        public ParticleModuleMeshRotation_Seeded(nint addr) : base(addr) { }
        public ParticleModuleMeshRotation_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleMeshRotation : ParticleModuleRotationBase
    {
        public ParticleModuleMeshRotation(nint addr) : base(addr) { }
        public ParticleModuleMeshRotation() : base(0) { }
        public RawDistributionVector StartRotation { get { return this[nameof(StartRotation)].As<RawDistributionVector>(); } set { this["StartRotation"] = value; } }
        public bool bInheritParent { get { return this["bInheritParent"].Flag; } set { this["bInheritParent"].Flag = value; } }
    }
    public class ParticleModuleRotationBase : ParticleModule
    {
        public ParticleModuleRotationBase(nint addr) : base(addr) { }
        public ParticleModuleRotationBase() : base(0) { }
    }
    public class ParticleModuleMeshMaterial : ParticleModuleMaterialBase
    {
        public ParticleModuleMeshMaterial(nint addr) : base(addr) { }
        public ParticleModuleMeshMaterial() : base(0) { }
        public Array<MaterialInterface> MeshMaterials { get { return new Array<MaterialInterface>(this["MeshMaterials"]); } set { this["MeshMaterials"] = value; } }
    }
    public class ParticleModuleMaterialBase : ParticleModule
    {
        public ParticleModuleMaterialBase(nint addr) : base(addr) { }
        public ParticleModuleMaterialBase() : base(0) { }
    }
    public class ParticleModuleLocationWorldOffset_Seeded : ParticleModuleLocationWorldOffset
    {
        public ParticleModuleLocationWorldOffset_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLocationWorldOffset_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationWorldOffset : ParticleModuleLocation
    {
        public ParticleModuleLocationWorldOffset(nint addr) : base(addr) { }
        public ParticleModuleLocationWorldOffset() : base(0) { }
    }
    public class ParticleModuleLocationSkelVertSurface : ParticleModuleLocationBase
    {
        public ParticleModuleLocationSkelVertSurface(nint addr) : base(addr) { }
        public ParticleModuleLocationSkelVertSurface() : base(0) { }
        public byte SourceType { get { return this["SourceType"].GetValue<byte>(); } set { this["SourceType"].SetValue<byte>(value); } }
        public Vector UniversalOffset { get { return this[nameof(UniversalOffset)].As<Vector>(); } set { this["UniversalOffset"] = value; } }
        public bool bUpdatePositionEachFrame { get { return this["bUpdatePositionEachFrame"].Flag; } set { this["bUpdatePositionEachFrame"].Flag = value; } }
        public bool bOrientMeshEmitters { get { return this["bOrientMeshEmitters"].Flag; } set { this["bOrientMeshEmitters"].Flag = value; } }
        public bool bInheritBoneVelocity { get { return this["bInheritBoneVelocity"].Flag; } set { this["bInheritBoneVelocity"].Flag = value; } }
        public float InheritVelocityScale { get { return this["InheritVelocityScale"].GetValue<float>(); } set { this["InheritVelocityScale"].SetValue<float>(value); } }
        public string SkelMeshActorParamName { get { return this["SkelMeshActorParamName"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> ValidAssociatedBones { get { return this["ValidAssociatedBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bEnforceNormalCheck { get { return this["bEnforceNormalCheck"].Flag; } set { this["bEnforceNormalCheck"].Flag = value; } }
        public Vector NormalToCompare { get { return this[nameof(NormalToCompare)].As<Vector>(); } set { this["NormalToCompare"] = value; } }
        public float NormalCheckToleranceDegrees { get { return this["NormalCheckToleranceDegrees"].GetValue<float>(); } set { this["NormalCheckToleranceDegrees"].SetValue<float>(value); } }
        public float NormalCheckTolerance { get { return this["NormalCheckTolerance"].GetValue<float>(); } set { this["NormalCheckTolerance"].SetValue<float>(value); } }
        public List<int> ValidMaterialIndices { get { return this["ValidMaterialIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bInheritVertexColor { get { return this["bInheritVertexColor"].Flag; } set { this["bInheritVertexColor"].Flag = value; } }
        public bool bInheritUV { get { return this["bInheritUV"].Flag; } set { this["bInheritUV"].Flag = value; } }
        public uint InheritUVChannel { get { return this["InheritUVChannel"].GetValue<uint>(); } set { this["InheritUVChannel"].SetValue<uint>(value); } }
    }
    public class ParticleModuleLocationPrimitiveTriangle : ParticleModuleLocationBase
    {
        public ParticleModuleLocationPrimitiveTriangle(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveTriangle() : base(0) { }
        public RawDistributionVector StartOffset { get { return this[nameof(StartOffset)].As<RawDistributionVector>(); } set { this["StartOffset"] = value; } }
        public RawDistributionFloat Height { get { return this[nameof(Height)].As<RawDistributionFloat>(); } set { this["Height"] = value; } }
        public RawDistributionFloat Angle { get { return this[nameof(Angle)].As<RawDistributionFloat>(); } set { this["Angle"] = value; } }
        public RawDistributionFloat Thickness { get { return this[nameof(Thickness)].As<RawDistributionFloat>(); } set { this["Thickness"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveSphere_Seeded : ParticleModuleLocationPrimitiveSphere
    {
        public ParticleModuleLocationPrimitiveSphere_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveSphere_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveSphere : ParticleModuleLocationPrimitiveBase
    {
        public ParticleModuleLocationPrimitiveSphere(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveSphere() : base(0) { }
        public RawDistributionFloat StartRadius { get { return this[nameof(StartRadius)].As<RawDistributionFloat>(); } set { this["StartRadius"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveCylinder_Seeded : ParticleModuleLocationPrimitiveCylinder
    {
        public ParticleModuleLocationPrimitiveCylinder_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveCylinder_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveCylinder : ParticleModuleLocationPrimitiveBase
    {
        public ParticleModuleLocationPrimitiveCylinder(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveCylinder() : base(0) { }
        public bool RadialVelocity { get { return this["RadialVelocity"].Flag; } set { this["RadialVelocity"].Flag = value; } }
        public RawDistributionFloat StartRadius { get { return this[nameof(StartRadius)].As<RawDistributionFloat>(); } set { this["StartRadius"] = value; } }
        public RawDistributionFloat StartHeight { get { return this[nameof(StartHeight)].As<RawDistributionFloat>(); } set { this["StartHeight"] = value; } }
        public byte HeightAxis { get { return this["HeightAxis"].GetValue<byte>(); } set { this["HeightAxis"].SetValue<byte>(value); } }
    }
    public class ParticleModuleLocationPrimitiveBase : ParticleModuleLocationBase
    {
        public ParticleModuleLocationPrimitiveBase(nint addr) : base(addr) { }
        public ParticleModuleLocationPrimitiveBase() : base(0) { }
        public bool Positive_X { get { return this["Positive_X"].Flag; } set { this["Positive_X"].Flag = value; } }
        public bool Positive_Y { get { return this["Positive_Y"].Flag; } set { this["Positive_Y"].Flag = value; } }
        public bool Positive_Z { get { return this["Positive_Z"].Flag; } set { this["Positive_Z"].Flag = value; } }
        public bool Negative_X { get { return this["Negative_X"].Flag; } set { this["Negative_X"].Flag = value; } }
        public bool Negative_Y { get { return this["Negative_Y"].Flag; } set { this["Negative_Y"].Flag = value; } }
        public bool Negative_Z { get { return this["Negative_Z"].Flag; } set { this["Negative_Z"].Flag = value; } }
        public bool SurfaceOnly { get { return this["SurfaceOnly"].Flag; } set { this["SurfaceOnly"].Flag = value; } }
        public bool Velocity { get { return this["Velocity"].Flag; } set { this["Velocity"].Flag = value; } }
        public RawDistributionFloat VelocityScale { get { return this[nameof(VelocityScale)].As<RawDistributionFloat>(); } set { this["VelocityScale"] = value; } }
        public RawDistributionVector StartLocation { get { return this[nameof(StartLocation)].As<RawDistributionVector>(); } set { this["StartLocation"] = value; } }
    }
    public class ParticleModuleLocationEmitterDirect : ParticleModuleLocationBase
    {
        public ParticleModuleLocationEmitterDirect(nint addr) : base(addr) { }
        public ParticleModuleLocationEmitterDirect() : base(0) { }
        public string EmitterName { get { return this["EmitterName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ParticleModuleLocationEmitter : ParticleModuleLocationBase
    {
        public ParticleModuleLocationEmitter(nint addr) : base(addr) { }
        public ParticleModuleLocationEmitter() : base(0) { }
        public string EmitterName { get { return this["EmitterName"].ToString(); } set { /* String properties are read-only */ } }
        public byte SelectionMethod { get { return this["SelectionMethod"].GetValue<byte>(); } set { this["SelectionMethod"].SetValue<byte>(value); } }
        public bool InheritSourceVelocity { get { return this["InheritSourceVelocity"].Flag; } set { this["InheritSourceVelocity"].Flag = value; } }
        public float InheritSourceVelocityScale { get { return this["InheritSourceVelocityScale"].GetValue<float>(); } set { this["InheritSourceVelocityScale"].SetValue<float>(value); } }
        public bool bInheritSourceRotation { get { return this["bInheritSourceRotation"].Flag; } set { this["bInheritSourceRotation"].Flag = value; } }
        public float InheritSourceRotationScale { get { return this["InheritSourceRotationScale"].GetValue<float>(); } set { this["InheritSourceRotationScale"].SetValue<float>(value); } }
    }
    public class ParticleModuleLocationDirect : ParticleModuleLocationBase
    {
        public ParticleModuleLocationDirect(nint addr) : base(addr) { }
        public ParticleModuleLocationDirect() : base(0) { }
        public RawDistributionVector Location { get { return this[nameof(Location)].As<RawDistributionVector>(); } set { this["Location"] = value; } }
        public RawDistributionVector LocationOffset { get { return this[nameof(LocationOffset)].As<RawDistributionVector>(); } set { this["LocationOffset"] = value; } }
        public RawDistributionVector ScaleFactor { get { return this[nameof(ScaleFactor)].As<RawDistributionVector>(); } set { this["ScaleFactor"] = value; } }
        public RawDistributionVector Direction { get { return this[nameof(Direction)].As<RawDistributionVector>(); } set { this["Direction"] = value; } }
    }
    public class ParticleModuleLocationBoneSocket : ParticleModuleLocationBase
    {
        public ParticleModuleLocationBoneSocket(nint addr) : base(addr) { }
        public ParticleModuleLocationBoneSocket() : base(0) { }
        public byte SourceType { get { return this["SourceType"].GetValue<byte>(); } set { this["SourceType"].SetValue<byte>(value); } }
        public Vector UniversalOffset { get { return this[nameof(UniversalOffset)].As<Vector>(); } set { this["UniversalOffset"] = value; } }
        public Array<LocationBoneSocketInfo> SourceLocations { get { return new Array<LocationBoneSocketInfo>(this["SourceLocations"]); } set { this["SourceLocations"] = value; } }
        public byte SelectionMethod { get { return this["SelectionMethod"].GetValue<byte>(); } set { this["SelectionMethod"].SetValue<byte>(value); } }
        public bool bUpdatePositionEachFrame { get { return this["bUpdatePositionEachFrame"].Flag; } set { this["bUpdatePositionEachFrame"].Flag = value; } }
        public bool bOrientMeshEmitters { get { return this["bOrientMeshEmitters"].Flag; } set { this["bOrientMeshEmitters"].Flag = value; } }
        public bool bInheritBoneVelocity { get { return this["bInheritBoneVelocity"].Flag; } set { this["bInheritBoneVelocity"].Flag = value; } }
        public float InheritVelocityScale { get { return this["InheritVelocityScale"].GetValue<float>(); } set { this["InheritVelocityScale"].SetValue<float>(value); } }
        public string SkelMeshActorParamName { get { return this["SkelMeshActorParamName"].ToString(); } set { /* String properties are read-only */ } }
        public int NumPreSelectedIndices { get { return this["NumPreSelectedIndices"].GetValue<int>(); } set { this["NumPreSelectedIndices"].SetValue<int>(value); } }
    }
    public class ParticleModuleLocation_Seeded : ParticleModuleLocation
    {
        public ParticleModuleLocation_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLocation_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocation : ParticleModuleLocationBase
    {
        public ParticleModuleLocation(nint addr) : base(addr) { }
        public ParticleModuleLocation() : base(0) { }
        public RawDistributionVector StartLocation { get { return this[nameof(StartLocation)].As<RawDistributionVector>(); } set { this["StartLocation"] = value; } }
        public float DistributeOverNPoints { get { return this["DistributeOverNPoints"].GetValue<float>(); } set { this["DistributeOverNPoints"].SetValue<float>(value); } }
        public float DistributeThreshold { get { return this["DistributeThreshold"].GetValue<float>(); } set { this["DistributeThreshold"].SetValue<float>(value); } }
    }
    public class ParticleModuleLocationBase : ParticleModule
    {
        public ParticleModuleLocationBase(nint addr) : base(addr) { }
        public ParticleModuleLocationBase() : base(0) { }
    }
    public class ParticleModuleLight_Seeded : ParticleModuleLight
    {
        public ParticleModuleLight_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLight_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLight : ParticleModuleLightBase
    {
        public ParticleModuleLight(nint addr) : base(addr) { }
        public ParticleModuleLight() : base(0) { }
        public bool bUseInverseSquaredFalloff { get { return this["bUseInverseSquaredFalloff"].Flag; } set { this["bUseInverseSquaredFalloff"].Flag = value; } }
        public bool bAffectsTranslucency { get { return this["bAffectsTranslucency"].Flag; } set { this["bAffectsTranslucency"].Flag = value; } }
        public bool bPreviewLightRadius { get { return this["bPreviewLightRadius"].Flag; } set { this["bPreviewLightRadius"].Flag = value; } }
        public float SpawnFraction { get { return this["SpawnFraction"].GetValue<float>(); } set { this["SpawnFraction"].SetValue<float>(value); } }
        public RawDistributionVector ColorScaleOverLife { get { return this[nameof(ColorScaleOverLife)].As<RawDistributionVector>(); } set { this["ColorScaleOverLife"] = value; } }
        public RawDistributionFloat BrightnessOverLife { get { return this[nameof(BrightnessOverLife)].As<RawDistributionFloat>(); } set { this["BrightnessOverLife"] = value; } }
        public RawDistributionFloat RadiusScale { get { return this[nameof(RadiusScale)].As<RawDistributionFloat>(); } set { this["RadiusScale"] = value; } }
        public RawDistributionFloat LightExponent { get { return this[nameof(LightExponent)].As<RawDistributionFloat>(); } set { this["LightExponent"] = value; } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public float VolumetricScatteringIntensity { get { return this["VolumetricScatteringIntensity"].GetValue<float>(); } set { this["VolumetricScatteringIntensity"].SetValue<float>(value); } }
        public bool bHighQualityLights { get { return this["bHighQualityLights"].Flag; } set { this["bHighQualityLights"].Flag = value; } }
        public bool bShadowCastingLights { get { return this["bShadowCastingLights"].Flag; } set { this["bShadowCastingLights"].Flag = value; } }
    }
    public class ParticleModuleLightBase : ParticleModule
    {
        public ParticleModuleLightBase(nint addr) : base(addr) { }
        public ParticleModuleLightBase() : base(0) { }
    }
    public class ParticleModuleLifetime_Seeded : ParticleModuleLifetime
    {
        public ParticleModuleLifetime_Seeded(nint addr) : base(addr) { }
        public ParticleModuleLifetime_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLifetime : ParticleModuleLifetimeBase
    {
        public ParticleModuleLifetime(nint addr) : base(addr) { }
        public ParticleModuleLifetime() : base(0) { }
        public RawDistributionFloat LifeTime { get { return this[nameof(LifeTime)].As<RawDistributionFloat>(); } set { this["LifeTime"] = value; } }
    }
    public class ParticleModuleLifetimeBase : ParticleModule
    {
        public ParticleModuleLifetimeBase(nint addr) : base(addr) { }
        public ParticleModuleLifetimeBase() : base(0) { }
    }
    public class ParticleModuleKillHeight : ParticleModuleKillBase
    {
        public ParticleModuleKillHeight(nint addr) : base(addr) { }
        public ParticleModuleKillHeight() : base(0) { }
        public RawDistributionFloat Height { get { return this[nameof(Height)].As<RawDistributionFloat>(); } set { this["Height"] = value; } }
        public bool bAbsolute { get { return this["bAbsolute"].Flag; } set { this["bAbsolute"].Flag = value; } }
        public bool bFloor { get { return this["bFloor"].Flag; } set { this["bFloor"].Flag = value; } }
        public bool bApplyPSysScale { get { return this["bApplyPSysScale"].Flag; } set { this["bApplyPSysScale"].Flag = value; } }
    }
    public class ParticleModuleKillBox : ParticleModuleKillBase
    {
        public ParticleModuleKillBox(nint addr) : base(addr) { }
        public ParticleModuleKillBox() : base(0) { }
        public RawDistributionVector LowerLeftCorner { get { return this[nameof(LowerLeftCorner)].As<RawDistributionVector>(); } set { this["LowerLeftCorner"] = value; } }
        public RawDistributionVector UpperRightCorner { get { return this[nameof(UpperRightCorner)].As<RawDistributionVector>(); } set { this["UpperRightCorner"] = value; } }
        public bool bAbsolute { get { return this["bAbsolute"].Flag; } set { this["bAbsolute"].Flag = value; } }
        public bool bKillInside { get { return this["bKillInside"].Flag; } set { this["bKillInside"].Flag = value; } }
        public bool bAxisAlignedAndFixedSize { get { return this["bAxisAlignedAndFixedSize"].Flag; } set { this["bAxisAlignedAndFixedSize"].Flag = value; } }
    }
    public class ParticleModuleKillBase : ParticleModule
    {
        public ParticleModuleKillBase(nint addr) : base(addr) { }
        public ParticleModuleKillBase() : base(0) { }
    }
    public class ParticleModuleEventSendToGame : UEObject
    {
        public ParticleModuleEventSendToGame(nint addr) : base(addr) { }
        public ParticleModuleEventSendToGame() : base(0) { }
    }
    public class ParticleModuleEventReceiverSpawn : ParticleModuleEventReceiverBase
    {
        public ParticleModuleEventReceiverSpawn(nint addr) : base(addr) { }
        public ParticleModuleEventReceiverSpawn() : base(0) { }
        public RawDistributionFloat SpawnCount { get { return this[nameof(SpawnCount)].As<RawDistributionFloat>(); } set { this["SpawnCount"] = value; } }
        public bool bUseParticleTime { get { return this["bUseParticleTime"].Flag; } set { this["bUseParticleTime"].Flag = value; } }
        public bool bUsePSysLocation { get { return this["bUsePSysLocation"].Flag; } set { this["bUsePSysLocation"].Flag = value; } }
        public bool bInheritVelocity { get { return this["bInheritVelocity"].Flag; } set { this["bInheritVelocity"].Flag = value; } }
        public RawDistributionVector InheritVelocityScale { get { return this[nameof(InheritVelocityScale)].As<RawDistributionVector>(); } set { this["InheritVelocityScale"] = value; } }
        public Array<PhysicalMaterial> PhysicalMaterials { get { return new Array<PhysicalMaterial>(this["PhysicalMaterials"]); } set { this["PhysicalMaterials"] = value; } }
        public bool bBanPhysicalMaterials { get { return this["bBanPhysicalMaterials"].Flag; } set { this["bBanPhysicalMaterials"].Flag = value; } }
    }
    public class ParticleModuleEventReceiverKillParticles : ParticleModuleEventReceiverBase
    {
        public ParticleModuleEventReceiverKillParticles(nint addr) : base(addr) { }
        public ParticleModuleEventReceiverKillParticles() : base(0) { }
        public bool bStopSpawning { get { return this["bStopSpawning"].Flag; } set { this["bStopSpawning"].Flag = value; } }
    }
    public class ParticleModuleEventReceiverBase : ParticleModuleEventBase
    {
        public ParticleModuleEventReceiverBase(nint addr) : base(addr) { }
        public ParticleModuleEventReceiverBase() : base(0) { }
        public byte EventGeneratorType { get { return this["EventGeneratorType"].GetValue<byte>(); } set { this["EventGeneratorType"].SetValue<byte>(value); } }
        public string EventName { get { return this["EventName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class ParticleModuleEventGenerator : ParticleModuleEventBase
    {
        public ParticleModuleEventGenerator(nint addr) : base(addr) { }
        public ParticleModuleEventGenerator() : base(0) { }
        public Array<ParticleEvent_GenerateInfo> Events { get { return new Array<ParticleEvent_GenerateInfo>(this["Events"]); } set { this["Events"] = value; } }
    }
    public class ParticleModuleEventBase : ParticleModule
    {
        public ParticleModuleEventBase(nint addr) : base(addr) { }
        public ParticleModuleEventBase() : base(0) { }
    }
    public class ParticleModuleColorScaleOverLife : ParticleModuleColorBase
    {
        public ParticleModuleColorScaleOverLife(nint addr) : base(addr) { }
        public ParticleModuleColorScaleOverLife() : base(0) { }
        public RawDistributionVector ColorScaleOverLife { get { return this[nameof(ColorScaleOverLife)].As<RawDistributionVector>(); } set { this["ColorScaleOverLife"] = value; } }
        public RawDistributionFloat AlphaScaleOverLife { get { return this[nameof(AlphaScaleOverLife)].As<RawDistributionFloat>(); } set { this["AlphaScaleOverLife"] = value; } }
        public bool bEmitterTime { get { return this["bEmitterTime"].Flag; } set { this["bEmitterTime"].Flag = value; } }
    }
    public class ParticleModuleColorOverLife : ParticleModuleColorBase
    {
        public ParticleModuleColorOverLife(nint addr) : base(addr) { }
        public ParticleModuleColorOverLife() : base(0) { }
        public RawDistributionVector ColorOverLife { get { return this[nameof(ColorOverLife)].As<RawDistributionVector>(); } set { this["ColorOverLife"] = value; } }
        public RawDistributionFloat AlphaOverLife { get { return this[nameof(AlphaOverLife)].As<RawDistributionFloat>(); } set { this["AlphaOverLife"] = value; } }
        public bool bClampAlpha { get { return this["bClampAlpha"].Flag; } set { this["bClampAlpha"].Flag = value; } }
    }
    public class ParticleModuleColor_Seeded : ParticleModuleColor
    {
        public ParticleModuleColor_Seeded(nint addr) : base(addr) { }
        public ParticleModuleColor_Seeded() : base(0) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleColor : ParticleModuleColorBase
    {
        public ParticleModuleColor(nint addr) : base(addr) { }
        public ParticleModuleColor() : base(0) { }
        public RawDistributionVector StartColor { get { return this[nameof(StartColor)].As<RawDistributionVector>(); } set { this["StartColor"] = value; } }
        public RawDistributionFloat StartAlpha { get { return this[nameof(StartAlpha)].As<RawDistributionFloat>(); } set { this["StartAlpha"] = value; } }
        public bool bClampAlpha { get { return this["bClampAlpha"].Flag; } set { this["bClampAlpha"].Flag = value; } }
    }
    public class ParticleModuleColorBase : ParticleModule
    {
        public ParticleModuleColorBase(nint addr) : base(addr) { }
        public ParticleModuleColorBase() : base(0) { }
    }
    public class ParticleModuleCollisionGPU : ParticleModuleCollisionBase
    {
        public ParticleModuleCollisionGPU(nint addr) : base(addr) { }
        public ParticleModuleCollisionGPU() : base(0) { }
        public RawDistributionFloat Resilience { get { return this[nameof(Resilience)].As<RawDistributionFloat>(); } set { this["Resilience"] = value; } }
        public RawDistributionFloat ResilienceScaleOverLife { get { return this[nameof(ResilienceScaleOverLife)].As<RawDistributionFloat>(); } set { this["ResilienceScaleOverLife"] = value; } }
        public float Friction { get { return this["Friction"].GetValue<float>(); } set { this["Friction"].SetValue<float>(value); } }
        public float RandomSpread { get { return this["RandomSpread"].GetValue<float>(); } set { this["RandomSpread"].SetValue<float>(value); } }
        public float RandomDistribution { get { return this["RandomDistribution"].GetValue<float>(); } set { this["RandomDistribution"].SetValue<float>(value); } }
        public float RadiusScale { get { return this["RadiusScale"].GetValue<float>(); } set { this["RadiusScale"].SetValue<float>(value); } }
        public float RadiusBias { get { return this["RadiusBias"].GetValue<float>(); } set { this["RadiusBias"].SetValue<float>(value); } }
        public byte Response { get { return this["Response"].GetValue<byte>(); } set { this["Response"].SetValue<byte>(value); } }
        public byte CollisionMode { get { return this["CollisionMode"].GetValue<byte>(); } set { this["CollisionMode"].SetValue<byte>(value); } }
    }
    public class ParticleModuleCollision : ParticleModuleCollisionBase
    {
        public ParticleModuleCollision(nint addr) : base(addr) { }
        public ParticleModuleCollision() : base(0) { }
        public RawDistributionVector DampingFactor { get { return this[nameof(DampingFactor)].As<RawDistributionVector>(); } set { this["DampingFactor"] = value; } }
        public RawDistributionVector DampingFactorRotation { get { return this[nameof(DampingFactorRotation)].As<RawDistributionVector>(); } set { this["DampingFactorRotation"] = value; } }
        public RawDistributionFloat MaxCollisions { get { return this[nameof(MaxCollisions)].As<RawDistributionFloat>(); } set { this["MaxCollisions"] = value; } }
        public byte CollisionCompletionOption { get { return this["CollisionCompletionOption"].GetValue<byte>(); } set { this["CollisionCompletionOption"].SetValue<byte>(value); } }
        public List<byte> CollisionTypes { get { return this["CollisionTypes"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public bool bApplyPhysics { get { return this["bApplyPhysics"].Flag; } set { this["bApplyPhysics"].Flag = value; } }
        public bool bIgnoreTriggerVolumes { get { return this["bIgnoreTriggerVolumes"].Flag; } set { this["bIgnoreTriggerVolumes"].Flag = value; } }
        public RawDistributionFloat ParticleMass { get { return this[nameof(ParticleMass)].As<RawDistributionFloat>(); } set { this["ParticleMass"] = value; } }
        public float DirScalar { get { return this["DirScalar"].GetValue<float>(); } set { this["DirScalar"].SetValue<float>(value); } }
        public bool bPawnsDoNotDecrementCount { get { return this["bPawnsDoNotDecrementCount"].Flag; } set { this["bPawnsDoNotDecrementCount"].Flag = value; } }
        public bool bOnlyVerticalNormalsDecrementCount { get { return this["bOnlyVerticalNormalsDecrementCount"].Flag; } set { this["bOnlyVerticalNormalsDecrementCount"].Flag = value; } }
        public float VerticalFudgeFactor { get { return this["VerticalFudgeFactor"].GetValue<float>(); } set { this["VerticalFudgeFactor"].SetValue<float>(value); } }
        public RawDistributionFloat DelayAmount { get { return this[nameof(DelayAmount)].As<RawDistributionFloat>(); } set { this["DelayAmount"] = value; } }
        public bool bDropDetail { get { return this["bDropDetail"].Flag; } set { this["bDropDetail"].Flag = value; } }
        public bool bCollideOnlyIfVisible { get { return this["bCollideOnlyIfVisible"].Flag; } set { this["bCollideOnlyIfVisible"].Flag = value; } }
        public bool bIgnoreSourceActor { get { return this["bIgnoreSourceActor"].Flag; } set { this["bIgnoreSourceActor"].Flag = value; } }
        public float MaxCollisionDistance { get { return this["MaxCollisionDistance"].GetValue<float>(); } set { this["MaxCollisionDistance"].SetValue<float>(value); } }
    }
    public class ParticleModuleCollisionBase : ParticleModule
    {
        public ParticleModuleCollisionBase(nint addr) : base(addr) { }
        public ParticleModuleCollisionBase() : base(0) { }
    }
    public class ParticleModuleCameraOffset : ParticleModuleCameraBase
    {
        public ParticleModuleCameraOffset(nint addr) : base(addr) { }
        public ParticleModuleCameraOffset() : base(0) { }
        public RawDistributionFloat CameraOffset { get { return this[nameof(CameraOffset)].As<RawDistributionFloat>(); } set { this["CameraOffset"] = value; } }
        public bool bSpawnTimeOnly { get { return this["bSpawnTimeOnly"].Flag; } set { this["bSpawnTimeOnly"].Flag = value; } }
        public byte UpdateMethod { get { return this["UpdateMethod"].GetValue<byte>(); } set { this["UpdateMethod"].SetValue<byte>(value); } }
    }
    public class ParticleModuleCameraBase : ParticleModule
    {
        public ParticleModuleCameraBase(nint addr) : base(addr) { }
        public ParticleModuleCameraBase() : base(0) { }
    }
    public class ParticleModuleBeamTarget : ParticleModuleBeamBase
    {
        public ParticleModuleBeamTarget(nint addr) : base(addr) { }
        public ParticleModuleBeamTarget() : base(0) { }
        public byte TargetMethod { get { return this["TargetMethod"].GetValue<byte>(); } set { this["TargetMethod"].SetValue<byte>(value); } }
        public string TargetName { get { return this["TargetName"].ToString(); } set { /* String properties are read-only */ } }
        public RawDistributionVector Target { get { return this[nameof(Target)].As<RawDistributionVector>(); } set { this["Target"] = value; } }
        public bool bTargetAbsolute { get { return this["bTargetAbsolute"].Flag; } set { this["bTargetAbsolute"].Flag = value; } }
        public bool bLockTarget { get { return this["bLockTarget"].Flag; } set { this["bLockTarget"].Flag = value; } }
        public byte TargetTangentMethod { get { return this["TargetTangentMethod"].GetValue<byte>(); } set { this["TargetTangentMethod"].SetValue<byte>(value); } }
        public RawDistributionVector TargetTangent { get { return this[nameof(TargetTangent)].As<RawDistributionVector>(); } set { this["TargetTangent"] = value; } }
        public bool bLockTargetTangent { get { return this["bLockTargetTangent"].Flag; } set { this["bLockTargetTangent"].Flag = value; } }
        public RawDistributionFloat TargetStrength { get { return this[nameof(TargetStrength)].As<RawDistributionFloat>(); } set { this["TargetStrength"] = value; } }
        public bool bLockTargetStength { get { return this["bLockTargetStength"].Flag; } set { this["bLockTargetStength"].Flag = value; } }
        public float LockRadius { get { return this["LockRadius"].GetValue<float>(); } set { this["LockRadius"].SetValue<float>(value); } }
    }
    public class ParticleModuleBeamSource : ParticleModuleBeamBase
    {
        public ParticleModuleBeamSource(nint addr) : base(addr) { }
        public ParticleModuleBeamSource() : base(0) { }
        public byte SourceMethod { get { return this["SourceMethod"].GetValue<byte>(); } set { this["SourceMethod"].SetValue<byte>(value); } }
        public string SourceName { get { return this["SourceName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bSourceAbsolute { get { return this["bSourceAbsolute"].Flag; } set { this["bSourceAbsolute"].Flag = value; } }
        public RawDistributionVector Source { get { return this[nameof(Source)].As<RawDistributionVector>(); } set { this["Source"] = value; } }
        public bool bLockSource { get { return this["bLockSource"].Flag; } set { this["bLockSource"].Flag = value; } }
        public byte SourceTangentMethod { get { return this["SourceTangentMethod"].GetValue<byte>(); } set { this["SourceTangentMethod"].SetValue<byte>(value); } }
        public RawDistributionVector SourceTangent { get { return this[nameof(SourceTangent)].As<RawDistributionVector>(); } set { this["SourceTangent"] = value; } }
        public bool bLockSourceTangent { get { return this["bLockSourceTangent"].Flag; } set { this["bLockSourceTangent"].Flag = value; } }
        public RawDistributionFloat SourceStrength { get { return this[nameof(SourceStrength)].As<RawDistributionFloat>(); } set { this["SourceStrength"] = value; } }
        public bool bLockSourceStength { get { return this["bLockSourceStength"].Flag; } set { this["bLockSourceStength"].Flag = value; } }
    }
    public class ParticleModuleBeamNoise : ParticleModuleBeamBase
    {
        public ParticleModuleBeamNoise(nint addr) : base(addr) { }
        public ParticleModuleBeamNoise() : base(0) { }
        public bool bLowFreq_Enabled { get { return this["bLowFreq_Enabled"].Flag; } set { this["bLowFreq_Enabled"].Flag = value; } }
        public int Frequency { get { return this["Frequency"].GetValue<int>(); } set { this["Frequency"].SetValue<int>(value); } }
        public int Frequency_LowRange { get { return this["Frequency_LowRange"].GetValue<int>(); } set { this["Frequency_LowRange"].SetValue<int>(value); } }
        public RawDistributionVector NoiseRange { get { return this[nameof(NoiseRange)].As<RawDistributionVector>(); } set { this["NoiseRange"] = value; } }
        public RawDistributionFloat NoiseRangeScale { get { return this[nameof(NoiseRangeScale)].As<RawDistributionFloat>(); } set { this["NoiseRangeScale"] = value; } }
        public bool bNRScaleEmitterTime { get { return this["bNRScaleEmitterTime"].Flag; } set { this["bNRScaleEmitterTime"].Flag = value; } }
        public RawDistributionVector NoiseSpeed { get { return this[nameof(NoiseSpeed)].As<RawDistributionVector>(); } set { this["NoiseSpeed"] = value; } }
        public bool bSmooth { get { return this["bSmooth"].Flag; } set { this["bSmooth"].Flag = value; } }
        public float NoiseLockRadius { get { return this["NoiseLockRadius"].GetValue<float>(); } set { this["NoiseLockRadius"].SetValue<float>(value); } }
        public bool bNoiseLock { get { return this["bNoiseLock"].Flag; } set { this["bNoiseLock"].Flag = value; } }
        public bool bOscillate { get { return this["bOscillate"].Flag; } set { this["bOscillate"].Flag = value; } }
        public float NoiseLockTime { get { return this["NoiseLockTime"].GetValue<float>(); } set { this["NoiseLockTime"].SetValue<float>(value); } }
        public float NoiseTension { get { return this["NoiseTension"].GetValue<float>(); } set { this["NoiseTension"].SetValue<float>(value); } }
        public bool bUseNoiseTangents { get { return this["bUseNoiseTangents"].Flag; } set { this["bUseNoiseTangents"].Flag = value; } }
        public RawDistributionFloat NoiseTangentStrength { get { return this[nameof(NoiseTangentStrength)].As<RawDistributionFloat>(); } set { this["NoiseTangentStrength"] = value; } }
        public int NoiseTessellation { get { return this["NoiseTessellation"].GetValue<int>(); } set { this["NoiseTessellation"].SetValue<int>(value); } }
        public bool bTargetNoise { get { return this["bTargetNoise"].Flag; } set { this["bTargetNoise"].Flag = value; } }
        public float FrequencyDistance { get { return this["FrequencyDistance"].GetValue<float>(); } set { this["FrequencyDistance"].SetValue<float>(value); } }
        public bool bApplyNoiseScale { get { return this["bApplyNoiseScale"].Flag; } set { this["bApplyNoiseScale"].Flag = value; } }
        public RawDistributionFloat NoiseScale { get { return this[nameof(NoiseScale)].As<RawDistributionFloat>(); } set { this["NoiseScale"] = value; } }
    }
    public class ParticleModuleBeamModifier : ParticleModuleBeamBase
    {
        public ParticleModuleBeamModifier(nint addr) : base(addr) { }
        public ParticleModuleBeamModifier() : base(0) { }
        public byte ModifierType { get { return this["ModifierType"].GetValue<byte>(); } set { this["ModifierType"].SetValue<byte>(value); } }
        public BeamModifierOptions PositionOptions { get { return this[nameof(PositionOptions)].As<BeamModifierOptions>(); } set { this["PositionOptions"] = value; } }
        public RawDistributionVector position { get { return this[nameof(position)].As<RawDistributionVector>(); } set { this["position"] = value; } }
        public BeamModifierOptions TangentOptions { get { return this[nameof(TangentOptions)].As<BeamModifierOptions>(); } set { this["TangentOptions"] = value; } }
        public RawDistributionVector Tangent { get { return this[nameof(Tangent)].As<RawDistributionVector>(); } set { this["Tangent"] = value; } }
        public bool bAbsoluteTangent { get { return this["bAbsoluteTangent"].Flag; } set { this["bAbsoluteTangent"].Flag = value; } }
        public BeamModifierOptions StrengthOptions { get { return this[nameof(StrengthOptions)].As<BeamModifierOptions>(); } set { this["StrengthOptions"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
    }
    public class ParticleModuleBeamBase : ParticleModule
    {
        public ParticleModuleBeamBase(nint addr) : base(addr) { }
        public ParticleModuleBeamBase() : base(0) { }
    }
    public class ParticleModuleAttractorPointGravity : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorPointGravity(nint addr) : base(addr) { }
        public ParticleModuleAttractorPointGravity() : base(0) { }
        public Vector position { get { return this[nameof(position)].As<Vector>(); } set { this["position"] = value; } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public DistributionFloat Strength { get { return this[nameof(Strength)].As<DistributionFloat>(); } set { this["Strength"] = value; } }
        public RawDistributionFloat StrengthRaw { get { return this[nameof(StrengthRaw)].As<RawDistributionFloat>(); } set { this["StrengthRaw"] = value; } }
    }
    public class ParticleModuleAttractorPoint : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorPoint(nint addr) : base(addr) { }
        public ParticleModuleAttractorPoint() : base(0) { }
        public RawDistributionVector position { get { return this[nameof(position)].As<RawDistributionVector>(); } set { this["position"] = value; } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
        public bool StrengthByDistance { get { return this["StrengthByDistance"].Flag; } set { this["StrengthByDistance"].Flag = value; } }
        public bool bAffectBaseVelocity { get { return this["bAffectBaseVelocity"].Flag; } set { this["bAffectBaseVelocity"].Flag = value; } }
        public bool bOverrideVelocity { get { return this["bOverrideVelocity"].Flag; } set { this["bOverrideVelocity"].Flag = value; } }
        public bool bUseWorldSpacePosition { get { return this["bUseWorldSpacePosition"].Flag; } set { this["bUseWorldSpacePosition"].Flag = value; } }
        public bool Positive_X { get { return this["Positive_X"].Flag; } set { this["Positive_X"].Flag = value; } }
        public bool Positive_Y { get { return this["Positive_Y"].Flag; } set { this["Positive_Y"].Flag = value; } }
        public bool Positive_Z { get { return this["Positive_Z"].Flag; } set { this["Positive_Z"].Flag = value; } }
        public bool Negative_X { get { return this["Negative_X"].Flag; } set { this["Negative_X"].Flag = value; } }
        public bool Negative_Y { get { return this["Negative_Y"].Flag; } set { this["Negative_Y"].Flag = value; } }
        public bool Negative_Z { get { return this["Negative_Z"].Flag; } set { this["Negative_Z"].Flag = value; } }
    }
    public class ParticleModuleAttractorParticle : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorParticle(nint addr) : base(addr) { }
        public ParticleModuleAttractorParticle() : base(0) { }
        public string EmitterName { get { return this["EmitterName"].ToString(); } set { /* String properties are read-only */ } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public bool bStrengthByDistance { get { return this["bStrengthByDistance"].Flag; } set { this["bStrengthByDistance"].Flag = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
        public bool bAffectBaseVelocity { get { return this["bAffectBaseVelocity"].Flag; } set { this["bAffectBaseVelocity"].Flag = value; } }
        public byte SelectionMethod { get { return this["SelectionMethod"].GetValue<byte>(); } set { this["SelectionMethod"].SetValue<byte>(value); } }
        public bool bRenewSource { get { return this["bRenewSource"].Flag; } set { this["bRenewSource"].Flag = value; } }
        public bool bInheritSourceVel { get { return this["bInheritSourceVel"].Flag; } set { this["bInheritSourceVel"].Flag = value; } }
        public int LastSelIndex { get { return this["LastSelIndex"].GetValue<int>(); } set { this["LastSelIndex"].SetValue<int>(value); } }
    }
    public class ParticleModuleAttractorLine : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorLine(nint addr) : base(addr) { }
        public ParticleModuleAttractorLine() : base(0) { }
        public Vector EndPoint0 { get { return this[nameof(EndPoint0)].As<Vector>(); } set { this["EndPoint0"] = value; } }
        public Vector EndPoint1 { get { return this[nameof(EndPoint1)].As<Vector>(); } set { this["EndPoint1"] = value; } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
    }
    public class ParticleModuleAttractorBase : ParticleModule
    {
        public ParticleModuleAttractorBase(nint addr) : base(addr) { }
        public ParticleModuleAttractorBase() : base(0) { }
    }
    public class ParticleModuleAccelerationOverLifetime : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationOverLifetime(nint addr) : base(addr) { }
        public ParticleModuleAccelerationOverLifetime() : base(0) { }
        public RawDistributionVector AccelOverLife { get { return this[nameof(AccelOverLife)].As<RawDistributionVector>(); } set { this["AccelOverLife"] = value; } }
    }
    public class ParticleModuleAccelerationDragScaleOverLife : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationDragScaleOverLife(nint addr) : base(addr) { }
        public ParticleModuleAccelerationDragScaleOverLife() : base(0) { }
        public DistributionFloat DragScale { get { return this[nameof(DragScale)].As<DistributionFloat>(); } set { this["DragScale"] = value; } }
        public RawDistributionFloat DragScaleRaw { get { return this[nameof(DragScaleRaw)].As<RawDistributionFloat>(); } set { this["DragScaleRaw"] = value; } }
    }
    public class ParticleModuleAccelerationDrag : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationDrag(nint addr) : base(addr) { }
        public ParticleModuleAccelerationDrag() : base(0) { }
        public DistributionFloat DragCoefficient { get { return this[nameof(DragCoefficient)].As<DistributionFloat>(); } set { this["DragCoefficient"] = value; } }
        public RawDistributionFloat DragCoefficientRaw { get { return this[nameof(DragCoefficientRaw)].As<RawDistributionFloat>(); } set { this["DragCoefficientRaw"] = value; } }
    }
    public class ParticleModuleAccelerationConstant : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationConstant(nint addr) : base(addr) { }
        public ParticleModuleAccelerationConstant() : base(0) { }
        public Vector Acceleration { get { return this[nameof(Acceleration)].As<Vector>(); } set { this["Acceleration"] = value; } }
    }
    public class ParticleModuleAcceleration : ParticleModuleAccelerationBase
    {
        public ParticleModuleAcceleration(nint addr) : base(addr) { }
        public ParticleModuleAcceleration() : base(0) { }
        public RawDistributionVector Acceleration { get { return this[nameof(Acceleration)].As<RawDistributionVector>(); } set { this["Acceleration"] = value; } }
        public bool bApplyOwnerScale { get { return this["bApplyOwnerScale"].Flag; } set { this["bApplyOwnerScale"].Flag = value; } }
    }
    public class ParticleModuleAccelerationBase : ParticleModule
    {
        public ParticleModuleAccelerationBase(nint addr) : base(addr) { }
        public ParticleModuleAccelerationBase() : base(0) { }
        public bool bAlwaysInWorldSpace { get { return this["bAlwaysInWorldSpace"].Flag; } set { this["bAlwaysInWorldSpace"].Flag = value; } }
    }
    public class ParticleModule : UEObject
    {
        public ParticleModule(nint addr) : base(addr) { }
        public ParticleModule() : base(0) { }
        public bool bSpawnModule { get { return this["bSpawnModule"].Flag; } set { this["bSpawnModule"].Flag = value; } }
        public bool bUpdateModule { get { return this["bUpdateModule"].Flag; } set { this["bUpdateModule"].Flag = value; } }
        public bool bFinalUpdateModule { get { return this["bFinalUpdateModule"].Flag; } set { this["bFinalUpdateModule"].Flag = value; } }
        public bool bUpdateForGPUEmitter { get { return this["bUpdateForGPUEmitter"].Flag; } set { this["bUpdateForGPUEmitter"].Flag = value; } }
        public bool bCurvesAsColor { get { return this["bCurvesAsColor"].Flag; } set { this["bCurvesAsColor"].Flag = value; } }
        public bool b3DDrawMode { get { return this["b3DDrawMode"].Flag; } set { this["b3DDrawMode"].Flag = value; } }
        public bool bSupported3DDrawMode { get { return this["bSupported3DDrawMode"].Flag; } set { this["bSupported3DDrawMode"].Flag = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public bool bEditable { get { return this["bEditable"].Flag; } set { this["bEditable"].Flag = value; } }
        public bool LODDuplicate { get { return this["LODDuplicate"].Flag; } set { this["LODDuplicate"].Flag = value; } }
        public bool bSupportsRandomSeed { get { return this["bSupportsRandomSeed"].Flag; } set { this["bSupportsRandomSeed"].Flag = value; } }
        public bool bRequiresLoopingNotification { get { return this["bRequiresLoopingNotification"].Flag; } set { this["bRequiresLoopingNotification"].Flag = value; } }
        public byte LODValidity { get { return this["LODValidity"].GetValue<byte>(); } set { this["LODValidity"].SetValue<byte>(value); } }
    }
    public class ParticleSystem : FXSystemAsset
    {
        public ParticleSystem(nint addr) : base(addr) { }
        public ParticleSystem() : base(0) { }
        public float UpdateTime_FPS { get { return this["UpdateTime_FPS"].GetValue<float>(); } set { this["UpdateTime_FPS"].SetValue<float>(value); } }
        public float UpdateTime_Delta { get { return this["UpdateTime_Delta"].GetValue<float>(); } set { this["UpdateTime_Delta"].SetValue<float>(value); } }
        public float WarmupTime { get { return this["WarmupTime"].GetValue<float>(); } set { this["WarmupTime"].SetValue<float>(value); } }
        public float WarmupTickRate { get { return this["WarmupTickRate"].GetValue<float>(); } set { this["WarmupTickRate"].SetValue<float>(value); } }
        public Array<ParticleEmitter> Emitters { get { return new Array<ParticleEmitter>(this["Emitters"]); } set { this["Emitters"] = value; } }
        public ParticleSystemComponent PreviewComponent { get { return this[nameof(PreviewComponent)].As<ParticleSystemComponent>(); } set { this["PreviewComponent"] = value; } }
        public InterpCurveEdSetup CurveEdSetup { get { return this[nameof(CurveEdSetup)].As<InterpCurveEdSetup>(); } set { this["CurveEdSetup"] = value; } }
        public float LODDistanceCheckTime { get { return this["LODDistanceCheckTime"].GetValue<float>(); } set { this["LODDistanceCheckTime"].SetValue<float>(value); } }
        public float MacroUVRadius { get { return this["MacroUVRadius"].GetValue<float>(); } set { this["MacroUVRadius"].SetValue<float>(value); } }
        public List<float> LODDistances { get { return this["LODDistances"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<ParticleSystemLOD> LODSettings { get { return new Array<ParticleSystemLOD>(this["LODSettings"]); } set { this["LODSettings"] = value; } }
        public Box FixedRelativeBoundingBox { get { return this[nameof(FixedRelativeBoundingBox)].As<Box>(); } set { this["FixedRelativeBoundingBox"] = value; } }
        public float SecondsBeforeInactive { get { return this["SecondsBeforeInactive"].GetValue<float>(); } set { this["SecondsBeforeInactive"].SetValue<float>(value); } }
        public float Delay { get { return this["Delay"].GetValue<float>(); } set { this["Delay"].SetValue<float>(value); } }
        public float DelayLow { get { return this["DelayLow"].GetValue<float>(); } set { this["DelayLow"].SetValue<float>(value); } }
        public bool bOrientZAxisTowardCamera { get { return this["bOrientZAxisTowardCamera"].Flag; } set { this["bOrientZAxisTowardCamera"].Flag = value; } }
        public bool bUseFixedRelativeBoundingBox { get { return this["bUseFixedRelativeBoundingBox"].Flag; } set { this["bUseFixedRelativeBoundingBox"].Flag = value; } }
        public bool bShouldResetPeakCounts { get { return this["bShouldResetPeakCounts"].Flag; } set { this["bShouldResetPeakCounts"].Flag = value; } }
        public bool bHasPhysics { get { return this["bHasPhysics"].Flag; } set { this["bHasPhysics"].Flag = value; } }
        public bool bUseRealtimeThumbnail { get { return this["bUseRealtimeThumbnail"].Flag; } set { this["bUseRealtimeThumbnail"].Flag = value; } }
        public bool ThumbnailImageOutOfDate { get { return this["ThumbnailImageOutOfDate"].Flag; } set { this["ThumbnailImageOutOfDate"].Flag = value; } }
        public bool bUseDelayRange { get { return this["bUseDelayRange"].Flag; } set { this["bUseDelayRange"].Flag = value; } }
        public bool bAllowManagedTicking { get { return this["bAllowManagedTicking"].Flag; } set { this["bAllowManagedTicking"].Flag = value; } }
        public bool bAutoDeactivate { get { return this["bAutoDeactivate"].Flag; } set { this["bAutoDeactivate"].Flag = value; } }
        public bool bRegenerateLODDuplicate { get { return this["bRegenerateLODDuplicate"].Flag; } set { this["bRegenerateLODDuplicate"].Flag = value; } }
        public byte SystemUpdateMode { get { return this["SystemUpdateMode"].GetValue<byte>(); } set { this["SystemUpdateMode"].SetValue<byte>(value); } }
        public byte LODMethod { get { return this["LODMethod"].GetValue<byte>(); } set { this["LODMethod"].SetValue<byte>(value); } }
        public EParticleSystemInsignificanceReaction InsignificantReaction { get { return (EParticleSystemInsignificanceReaction)this["InsignificantReaction"].GetValue<int>(); } set { this["InsignificantReaction"].SetValue<int>((int)value); } }
        public byte OcclusionBoundsMethod { get { return this["OcclusionBoundsMethod"].GetValue<byte>(); } set { this["OcclusionBoundsMethod"].SetValue<byte>(value); } }
        public EParticleSignificanceLevel MaxSignificanceLevel { get { return (EParticleSignificanceLevel)this["MaxSignificanceLevel"].GetValue<int>(); } set { this["MaxSignificanceLevel"].SetValue<int>((int)value); } }
        public uint MinTimeBetweenTicks { get { return this["MinTimeBetweenTicks"].GetValue<uint>(); } set { this["MinTimeBetweenTicks"].SetValue<uint>(value); } }
        public float InsignificanceDelay { get { return this["InsignificanceDelay"].GetValue<float>(); } set { this["InsignificanceDelay"].SetValue<float>(value); } }
        public Vector MacroUVPosition { get { return this[nameof(MacroUVPosition)].As<Vector>(); } set { this["MacroUVPosition"] = value; } }
        public Box CustomOcclusionBounds { get { return this[nameof(CustomOcclusionBounds)].As<Box>(); } set { this["CustomOcclusionBounds"] = value; } }
        public Array<LODSoloTrack> SoloTracking { get { return new Array<LODSoloTrack>(this["SoloTracking"]); } set { this["SoloTracking"] = value; } }
        public Array<NamedEmitterMaterial> NamedMaterialSlots { get { return new Array<NamedEmitterMaterial>(this["NamedMaterialSlots"]); } set { this["NamedMaterialSlots"] = value; } }
        public UEObject ContainsEmitterType(UEObject TypeData) { return InvokeUEObject("ContainsEmitterType", TypeData); }
        public void _ParticleSystem(UEObject UpdateTime_FPS, UEObject UpdateTime_Delta, UEObject WarmupTime, UEObject WarmupTickRate, UEObject Emitters, UEObject PreviewComponent, UEObject CurveEdSetup, UEObject LODDistanceCheckTime, UEObject MacroUVRadius, UEObject LODDistances, UEObject LODSettings, UEObject FixedRelativeBoundingBox, UEObject SecondsBeforeInactive, UEObject Delay, UEObject DelayLow, UEObject bOrientZAxisTowardCamera, UEObject bUseFixedRelativeBoundingBox, UEObject bShouldResetPeakCounts, UEObject bHasPhysics, UEObject bUseRealtimeThumbnail, UEObject ThumbnailImageOutOfDate, UEObject bUseDelayRange, UEObject bAllowManagedTicking, UEObject bAutoDeactivate, UEObject bRegenerateLODDuplicate, UEObject SystemUpdateMode, UEObject LODMethod, UEObject InsignificantReaction, UEObject OcclusionBoundsMethod, UEObject MaxSignificanceLevel, UEObject MinTimeBetweenTicks, UEObject InsignificanceDelay, UEObject MacroUVPosition, UEObject CustomOcclusionBounds, UEObject SoloTracking, UEObject NamedMaterialSlots) { Invoke("ParticleSystem", UpdateTime_FPS, UpdateTime_Delta, WarmupTime, WarmupTickRate, Emitters, PreviewComponent, CurveEdSetup, LODDistanceCheckTime, MacroUVRadius, LODDistances, LODSettings, FixedRelativeBoundingBox, SecondsBeforeInactive, Delay, DelayLow, bOrientZAxisTowardCamera, bUseFixedRelativeBoundingBox, bShouldResetPeakCounts, bHasPhysics, bUseRealtimeThumbnail, ThumbnailImageOutOfDate, bUseDelayRange, bAllowManagedTicking, bAutoDeactivate, bRegenerateLODDuplicate, SystemUpdateMode, LODMethod, InsignificantReaction, OcclusionBoundsMethod, MaxSignificanceLevel, MinTimeBetweenTicks, InsignificanceDelay, MacroUVPosition, CustomOcclusionBounds, SoloTracking, NamedMaterialSlots); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ParticleLODLevel : UEObject
    {
        public ParticleLODLevel(nint addr) : base(addr) { }
        public ParticleLODLevel() : base(0) { }
        public int Level { get { return this["Level"].GetValue<int>(); } set { this["Level"].SetValue<int>(value); } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public ParticleModuleRequired RequiredModule { get { return this[nameof(RequiredModule)].As<ParticleModuleRequired>(); } set { this["RequiredModule"] = value; } }
        public Array<UEObject> Modules { get { return new Array<UEObject>(this["Modules"]); } set { this["Modules"] = value; } }
        public ParticleModuleTypeDataBase TypeDataModule { get { return this[nameof(TypeDataModule)].As<ParticleModuleTypeDataBase>(); } set { this["TypeDataModule"] = value; } }
        public ParticleModuleSpawn SpawnModule { get { return this[nameof(SpawnModule)].As<ParticleModuleSpawn>(); } set { this["SpawnModule"] = value; } }
        public ParticleModuleEventGenerator EventGenerator { get { return this[nameof(EventGenerator)].As<ParticleModuleEventGenerator>(); } set { this["EventGenerator"] = value; } }
        public Array<ParticleModuleSpawnBase> SpawningModules { get { return new Array<ParticleModuleSpawnBase>(this["SpawningModules"]); } set { this["SpawningModules"] = value; } }
        public Array<UEObject> SpawnModules { get { return new Array<UEObject>(this["SpawnModules"]); } set { this["SpawnModules"] = value; } }
        public Array<UEObject> UpdateModules { get { return new Array<UEObject>(this["UpdateModules"]); } set { this["UpdateModules"] = value; } }
        public Array<ParticleModuleOrbit> OrbitModules { get { return new Array<ParticleModuleOrbit>(this["OrbitModules"]); } set { this["OrbitModules"] = value; } }
        public Array<ParticleModuleEventReceiverBase> EventReceiverModules { get { return new Array<ParticleModuleEventReceiverBase>(this["EventReceiverModules"]); } set { this["EventReceiverModules"] = value; } }
        public bool ConvertedModules { get { return this["ConvertedModules"].Flag; } set { this["ConvertedModules"].Flag = value; } }
        public int PeakActiveParticles { get { return this["PeakActiveParticles"].GetValue<int>(); } set { this["PeakActiveParticles"].SetValue<int>(value); } }
    }
    public class ParticleEventManager : Actor
    {
        public ParticleEventManager(nint addr) : base(addr) { }
        public ParticleEventManager() : base(0) { }
    }
    public class ParticleEmitter : UEObject
    {
        public ParticleEmitter(nint addr) : base(addr) { }
        public ParticleEmitter() : base(0) { }
        public string EmitterName { get { return this["EmitterName"].ToString(); } set { /* String properties are read-only */ } }
        public int SubUVDataOffset { get { return this["SubUVDataOffset"].GetValue<int>(); } set { this["SubUVDataOffset"].SetValue<int>(value); } }
        public byte EmitterRenderMode { get { return this["EmitterRenderMode"].GetValue<byte>(); } set { this["EmitterRenderMode"].SetValue<byte>(value); } }
        public EParticleSignificanceLevel SignificanceLevel { get { return (EParticleSignificanceLevel)this["SignificanceLevel"].GetValue<int>(); } set { this["SignificanceLevel"].SetValue<int>((int)value); } }
        public bool bUseLegacySpawningBehavior { get { return this["bUseLegacySpawningBehavior"].Flag; } set { this["bUseLegacySpawningBehavior"].Flag = value; } }
        public bool ConvertedModules { get { return this["ConvertedModules"].Flag; } set { this["ConvertedModules"].Flag = value; } }
        public bool bIsSoloing { get { return this["bIsSoloing"].Flag; } set { this["bIsSoloing"].Flag = value; } }
        public bool bCookedOut { get { return this["bCookedOut"].Flag; } set { this["bCookedOut"].Flag = value; } }
        public bool bDisabledLODsKeepEmitterAlive { get { return this["bDisabledLODsKeepEmitterAlive"].Flag; } set { this["bDisabledLODsKeepEmitterAlive"].Flag = value; } }
        public bool bDisableWhenInsignficant { get { return this["bDisableWhenInsignficant"].Flag; } set { this["bDisableWhenInsignficant"].Flag = value; } }
        public Array<ParticleLODLevel> LODLevels { get { return new Array<ParticleLODLevel>(this["LODLevels"]); } set { this["LODLevels"] = value; } }
        public int PeakActiveParticles { get { return this["PeakActiveParticles"].GetValue<int>(); } set { this["PeakActiveParticles"].SetValue<int>(value); } }
        public int InitialAllocationCount { get { return this["InitialAllocationCount"].GetValue<int>(); } set { this["InitialAllocationCount"].SetValue<int>(value); } }
        public float QualityLevelSpawnRateScale { get { return this["QualityLevelSpawnRateScale"].GetValue<float>(); } set { this["QualityLevelSpawnRateScale"].SetValue<float>(value); } }
        public uint DetailModeBitmask { get { return this["DetailModeBitmask"].GetValue<uint>(); } set { this["DetailModeBitmask"].SetValue<uint>(value); } }
    }
    public class PainCausingVolume : PhysicsVolume
    {
        public PainCausingVolume(nint addr) : base(addr) { }
        public PainCausingVolume() : base(0) { }
        public bool bPainCausing { get { return this["bPainCausing"].Flag; } set { this["bPainCausing"].Flag = value; } }
        public float DamagePerSec { get { return this["DamagePerSec"].GetValue<float>(); } set { this["DamagePerSec"].SetValue<float>(value); } }
        public UEObject DamageType { get { return this["DamageType"]; } set { this["DamageType"] = value; } }
        public float PainInterval { get { return this["PainInterval"].GetValue<float>(); } set { this["PainInterval"].SetValue<float>(value); } }
        public bool bEntryPain { get { return this["bEntryPain"].Flag; } set { this["bEntryPain"].Flag = value; } }
        public bool BACKUP_bPainCausing { get { return this["BACKUP_bPainCausing"].Flag; } set { this["BACKUP_bPainCausing"].Flag = value; } }
        public Controller DamageInstigator { get { return this[nameof(DamageInstigator)].As<Controller>(); } set { this["DamageInstigator"] = value; } }
    }
    public class PackageMapClient : PackageMap
    {
        public PackageMapClient(nint addr) : base(addr) { }
        public PackageMapClient() : base(0) { }
    }
    public class ObjectTraceWorldSubsystem : WorldSubsystem
    {
        public ObjectTraceWorldSubsystem(nint addr) : base(addr) { }
        public ObjectTraceWorldSubsystem() : base(0) { }
    }
    public class ObjectReferencer : UEObject
    {
        public ObjectReferencer(nint addr) : base(addr) { }
        public ObjectReferencer() : base(0) { }
        public Array<UEObject> ReferencedObjects { get { return new Array<UEObject>(this["ReferencedObjects"]); } set { this["ReferencedObjects"] = value; } }
    }
    public class ObjectLibrary : UEObject
    {
        public ObjectLibrary(nint addr) : base(addr) { }
        public ObjectLibrary() : base(0) { }
        public UEObject ObjectBaseClass { get { return this["ObjectBaseClass"]; } set { this["ObjectBaseClass"] = value; } }
        public bool bHasBlueprintClasses { get { return this["bHasBlueprintClasses"].Flag; } set { this["bHasBlueprintClasses"].Flag = value; } }
        public Array<UEObject> Objects { get { return new Array<UEObject>(this["Objects"]); } set { this["Objects"] = value; } }
        public Array<UEObject> WeakObjects { get { return new Array<UEObject>(this["WeakObjects"]); } set { this["WeakObjects"] = value; } }
        public bool bUseWeakReferences { get { return this["bUseWeakReferences"].Flag; } set { this["bUseWeakReferences"].Flag = value; } }
        public bool bIsFullyLoaded { get { return this["bIsFullyLoaded"].Flag; } set { this["bIsFullyLoaded"].Flag = value; } }
    }
    public class Note : Actor
    {
        public Note(nint addr) : base(addr) { }
        public Note() : base(0) { }
    }
    public class NodeMappingProviderInterface : Interface
    {
        public NodeMappingProviderInterface(nint addr) : base(addr) { }
        public NodeMappingProviderInterface() : base(0) { }
    }
    public class NodeMappingContainer : UEObject
    {
        public NodeMappingContainer(nint addr) : base(addr) { }
        public NodeMappingContainer() : base(0) { }
        public UEObject SourceItems { get { return this["SourceItems"]; } set { this["SourceItems"] = value; } }
        public UEObject TargetItems { get { return this["TargetItems"]; } set { this["TargetItems"] = value; } }
        public UEObject SourceToTarget { get { return this["SourceToTarget"]; } set { this["SourceToTarget"] = value; } }
        public UEObject SourceAsset { get { return this["SourceAsset"]; } set { this["SourceAsset"] = value; } }
        public UEObject TargetAsset { get { return this["TargetAsset"]; } set { this["TargetAsset"] = value; } }
    }
    public class NetworkSettings : UEObject
    {
        public NetworkSettings(nint addr) : base(addr) { }
        public NetworkSettings() : base(0) { }
        public bool bVerifyPeer { get { return this["bVerifyPeer"].Flag; } set { this["bVerifyPeer"].Flag = value; } }
        public bool bEnableMultiplayerWorldOriginRebasing { get { return this["bEnableMultiplayerWorldOriginRebasing"].Flag; } set { this["bEnableMultiplayerWorldOriginRebasing"].Flag = value; } }
        public int MaxRepArraySize { get { return this["MaxRepArraySize"].GetValue<int>(); } set { this["MaxRepArraySize"].SetValue<int>(value); } }
        public int MaxRepArrayMemory { get { return this["MaxRepArrayMemory"].GetValue<int>(); } set { this["MaxRepArrayMemory"].SetValue<int>(value); } }
        public Array<NetworkEmulationProfileDescription> NetworkEmulationProfiles { get { return new Array<NetworkEmulationProfileDescription>(this["NetworkEmulationProfiles"]); } set { this["NetworkEmulationProfiles"] = value; } }
    }
    public class NetworkPredictionInterface : Interface
    {
        public NetworkPredictionInterface(nint addr) : base(addr) { }
        public NetworkPredictionInterface() : base(0) { }
    }
    public class NetPushModelHelpers : UEObject
    {
        public NetPushModelHelpers(nint addr) : base(addr) { }
        public NetPushModelHelpers() : base(0) { }
        public void MarkPropertyDirtyFromRepIndex(UEObject Object, UEObject RepIndex, UEObject PropertyName) { Invoke("MarkPropertyDirtyFromRepIndex", Object, RepIndex, PropertyName); }
        public void _NetPushModelHelpers() { Invoke("NetPushModelHelpers"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SimulatedClientNetConnection : NetConnection
    {
        public SimulatedClientNetConnection(nint addr) : base(addr) { }
        public SimulatedClientNetConnection() : base(0) { }
    }
    public class NavRelevantInterface : Interface
    {
        public NavRelevantInterface(nint addr) : base(addr) { }
        public NavRelevantInterface() : base(0) { }
    }
    public class NavPathObserverInterface : Interface
    {
        public NavPathObserverInterface(nint addr) : base(addr) { }
        public NavPathObserverInterface() : base(0) { }
    }
    public class NavLinkDefinition : UEObject
    {
        public NavLinkDefinition(nint addr) : base(addr) { }
        public NavLinkDefinition() : base(0) { }
        public Array<NavigationLink> Links { get { return new Array<NavigationLink>(this["Links"]); } set { this["Links"] = value; } }
        public Array<NavigationSegmentLink> SegmentLinks { get { return new Array<NavigationSegmentLink>(this["SegmentLinks"]); } set { this["SegmentLinks"] = value; } }
    }
    public class NullNavSysConfig : NavigationSystemConfig
    {
        public NullNavSysConfig(nint addr) : base(addr) { }
        public NullNavSysConfig() : base(0) { }
    }
    public class NavigationSystemConfig : UEObject
    {
        public NavigationSystemConfig(nint addr) : base(addr) { }
        public NavigationSystemConfig() : base(0) { }
        public SoftClassPath NavigationSystemClass { get { return this[nameof(NavigationSystemClass)].As<SoftClassPath>(); } set { this["NavigationSystemClass"] = value; } }
        public NavAgentSelector SupportedAgentsMask { get { return this[nameof(SupportedAgentsMask)].As<NavAgentSelector>(); } set { this["SupportedAgentsMask"] = value; } }
        public string DefaultAgentName { get { return this["DefaultAgentName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsOverriden { get { return this["bIsOverriden"].Flag; } set { this["bIsOverriden"].Flag = value; } }
    }
    public class NavigationDataInterface : Interface
    {
        public NavigationDataInterface(nint addr) : base(addr) { }
        public NavigationDataInterface() : base(0) { }
    }
    public class NavigationDataChunk : UEObject
    {
        public NavigationDataChunk(nint addr) : base(addr) { }
        public NavigationDataChunk() : base(0) { }
        public string NavigationDataName { get { return this["NavigationDataName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class NavEdgeProviderInterface : Interface
    {
        public NavEdgeProviderInterface(nint addr) : base(addr) { }
        public NavEdgeProviderInterface() : base(0) { }
    }
    public class NavCollisionBase : UEObject
    {
        public NavCollisionBase(nint addr) : base(addr) { }
        public NavCollisionBase() : base(0) { }
        public bool bIsDynamicObstacle { get { return this["bIsDynamicObstacle"].Flag; } set { this["bIsDynamicObstacle"].Flag = value; } }
    }
    public class NavAreaBase : UEObject
    {
        public NavAreaBase(nint addr) : base(addr) { }
        public NavAreaBase() : base(0) { }
    }
    public class NavAgentInterface : Interface
    {
        public NavAgentInterface(nint addr) : base(addr) { }
        public NavAgentInterface() : base(0) { }
    }
    public class MorphTarget : UEObject
    {
        public MorphTarget(nint addr) : base(addr) { }
        public MorphTarget() : base(0) { }
        public SkeletalMesh BaseSkelMesh { get { return this[nameof(BaseSkelMesh)].As<SkeletalMesh>(); } set { this["BaseSkelMesh"] = value; } }
    }
    public class ModelComponent : PrimitiveComponent
    {
        public ModelComponent(nint addr) : base(addr) { }
        public ModelComponent() : base(0) { }
        public BodySetup ModelBodySetup { get { return this[nameof(ModelBodySetup)].As<BodySetup>(); } set { this["ModelBodySetup"] = value; } }
    }
    public class MicroTransactionBase : PlatformInterfaceBase
    {
        public MicroTransactionBase(nint addr) : base(addr) { }
        public MicroTransactionBase() : base(0) { }
        public Array<PurchaseInfo> AvailableProducts { get { return new Array<PurchaseInfo>(this["AvailableProducts"]); } set { this["AvailableProducts"] = value; } }
        public string LastError { get { return this["LastError"].ToString(); } set { /* String properties are read-only */ } }
        public string LastErrorSolution { get { return this["LastErrorSolution"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MeshVertexPainterKismetLibrary : UEObject
    {
        public MeshVertexPainterKismetLibrary(nint addr) : base(addr) { }
        public MeshVertexPainterKismetLibrary() : base(0) { }
        public void RemovePaintedVertices(UEObject StaticMeshComponent) { Invoke("RemovePaintedVertices", StaticMeshComponent); }
        public void _MeshVertexPainterKismetLibrary() { Invoke("MeshVertexPainterKismetLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MeshSimplificationSettings : UEObject
    {
        public MeshSimplificationSettings(nint addr) : base(addr) { }
        public MeshSimplificationSettings() : base(0) { }
        public string MeshReductionModuleName { get { return this["MeshReductionModuleName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MeshMergeCullingVolume : Volume
    {
        public MeshMergeCullingVolume(nint addr) : base(addr) { }
        public MeshMergeCullingVolume() : base(0) { }
    }
    public class MatineeInterface : Interface
    {
        public MatineeInterface(nint addr) : base(addr) { }
        public MatineeInterface() : base(0) { }
    }
    public class MatineeAnimInterface : Interface
    {
        public MatineeAnimInterface(nint addr) : base(addr) { }
        public MatineeAnimInterface() : base(0) { }
    }
    public class MatineeActorCameraAnim : MatineeActor
    {
        public MatineeActorCameraAnim(nint addr) : base(addr) { }
        public MatineeActorCameraAnim() : base(0) { }
        public CameraAnim CameraAnim { get { return this[nameof(CameraAnim)].As<CameraAnim>(); } set { this["CameraAnim"] = value; } }
    }
    public class MatineeActor : Actor
    {
        public MatineeActor(nint addr) : base(addr) { }
        public MatineeActor() : base(0) { }
        public InterpData MatineeData { get { return this[nameof(MatineeData)].As<InterpData>(); } set { this["MatineeData"] = value; } }
        public string MatineeControllerName { get { return this["MatineeControllerName"].ToString(); } set { /* String properties are read-only */ } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public bool bPlayOnLevelLoad { get { return this["bPlayOnLevelLoad"].Flag; } set { this["bPlayOnLevelLoad"].Flag = value; } }
        public bool bForceStartPos { get { return this["bForceStartPos"].Flag; } set { this["bForceStartPos"].Flag = value; } }
        public float ForceStartPosition { get { return this["ForceStartPosition"].GetValue<float>(); } set { this["ForceStartPosition"].SetValue<float>(value); } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bRewindOnPlay { get { return this["bRewindOnPlay"].Flag; } set { this["bRewindOnPlay"].Flag = value; } }
        public bool bNoResetOnRewind { get { return this["bNoResetOnRewind"].Flag; } set { this["bNoResetOnRewind"].Flag = value; } }
        public bool bRewindIfAlreadyPlaying { get { return this["bRewindIfAlreadyPlaying"].Flag; } set { this["bRewindIfAlreadyPlaying"].Flag = value; } }
        public bool bDisableRadioFilter { get { return this["bDisableRadioFilter"].Flag; } set { this["bDisableRadioFilter"].Flag = value; } }
        public bool bClientSideOnly { get { return this["bClientSideOnly"].Flag; } set { this["bClientSideOnly"].Flag = value; } }
        public bool bSkipUpdateIfNotVisible { get { return this["bSkipUpdateIfNotVisible"].Flag; } set { this["bSkipUpdateIfNotVisible"].Flag = value; } }
        public bool bIsSkippable { get { return this["bIsSkippable"].Flag; } set { this["bIsSkippable"].Flag = value; } }
        public int PreferredSplitScreenNum { get { return this["PreferredSplitScreenNum"].GetValue<int>(); } set { this["PreferredSplitScreenNum"].SetValue<int>(value); } }
        public bool bDisableMovementInput { get { return this["bDisableMovementInput"].Flag; } set { this["bDisableMovementInput"].Flag = value; } }
        public bool bDisableLookAtInput { get { return this["bDisableLookAtInput"].Flag; } set { this["bDisableLookAtInput"].Flag = value; } }
        public bool bHidePlayer { get { return this["bHidePlayer"].Flag; } set { this["bHidePlayer"].Flag = value; } }
        public bool bHideHud { get { return this["bHideHud"].Flag; } set { this["bHideHud"].Flag = value; } }
        public Array<InterpGroupActorInfo> GroupActorInfos { get { return new Array<InterpGroupActorInfo>(this["GroupActorInfos"]); } set { this["GroupActorInfos"] = value; } }
        public bool bShouldShowGore { get { return this["bShouldShowGore"].Flag; } set { this["bShouldShowGore"].Flag = value; } }
        public Array<InterpGroupInst> GroupInst { get { return new Array<InterpGroupInst>(this["GroupInst"]); } set { this["GroupInst"] = value; } }
        public Array<CameraCutInfo> CameraCuts { get { return new Array<CameraCutInfo>(this["CameraCuts"]); } set { this["CameraCuts"] = value; } }
        public bool bIsPlaying { get { return this["bIsPlaying"].Flag; } set { this["bIsPlaying"].Flag = value; } }
        public bool bReversePlayback { get { return this["bReversePlayback"].Flag; } set { this["bReversePlayback"].Flag = value; } }
        public bool bPaused { get { return this["bPaused"].Flag; } set { this["bPaused"].Flag = value; } }
        public bool bPendingStop { get { return this["bPendingStop"].Flag; } set { this["bPendingStop"].Flag = value; } }
        public float InterpPosition { get { return this["InterpPosition"].GetValue<float>(); } set { this["InterpPosition"].SetValue<float>(value); } }
        public byte ReplicationForceIsPlaying { get { return this["ReplicationForceIsPlaying"].GetValue<byte>(); } set { this["ReplicationForceIsPlaying"].SetValue<byte>(value); } }
        public UEObject OnPlay { get { return this["OnPlay"]; } set { this["OnPlay"] = value; } }
        public UEObject OnStop { get { return this["OnStop"]; } set { this["OnStop"] = value; } }
        public UEObject OnPause { get { return this["OnPause"]; } set { this["OnPause"] = value; } }
        public void Stop() { Invoke("Stop"); }
        public void _MatineeActor(UEObject MatineeData, UEObject MatineeControllerName, UEObject PlayRate, UEObject bPlayOnLevelLoad, UEObject bForceStartPos, UEObject ForceStartPosition, UEObject bLooping, UEObject bRewindOnPlay, UEObject bNoResetOnRewind, UEObject bRewindIfAlreadyPlaying, UEObject bDisableRadioFilter, UEObject bClientSideOnly, UEObject bSkipUpdateIfNotVisible, UEObject bIsSkippable, UEObject PreferredSplitScreenNum, UEObject bDisableMovementInput, UEObject bDisableLookAtInput, UEObject bHidePlayer, UEObject bHideHud, UEObject GroupActorInfos, UEObject bShouldShowGore, UEObject GroupInst, UEObject CameraCuts, UEObject bIsPlaying, UEObject bReversePlayback, UEObject bPaused, UEObject bPendingStop, UEObject InterpPosition, UEObject ReplicationForceIsPlaying, UEObject OnPlay, UEObject OnStop, UEObject OnPause) { Invoke("MatineeActor", MatineeData, MatineeControllerName, PlayRate, bPlayOnLevelLoad, bForceStartPos, ForceStartPosition, bLooping, bRewindOnPlay, bNoResetOnRewind, bRewindIfAlreadyPlaying, bDisableRadioFilter, bClientSideOnly, bSkipUpdateIfNotVisible, bIsSkippable, PreferredSplitScreenNum, bDisableMovementInput, bDisableLookAtInput, bHidePlayer, bHideHud, GroupActorInfos, bShouldShowGore, GroupInst, CameraCuts, bIsPlaying, bReversePlayback, bPaused, bPendingStop, InterpPosition, ReplicationForceIsPlaying, OnPlay, OnStop, OnPause); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MaterialParameterCollectionInstance : UEObject
    {
        public MaterialParameterCollectionInstance(nint addr) : base(addr) { }
        public MaterialParameterCollectionInstance() : base(0) { }
        public MaterialParameterCollection Collection { get { return this[nameof(Collection)].As<MaterialParameterCollection>(); } set { this["Collection"] = value; } }
    }
    public class MaterialParameterCollection : UEObject
    {
        public MaterialParameterCollection(nint addr) : base(addr) { }
        public MaterialParameterCollection() : base(0) { }
        public SDK.Script.CoreUObject.Guid StateId { get { return this[nameof(StateId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["StateId"] = value; } }
        public Array<CollectionScalarParameter> ScalarParameters { get { return new Array<CollectionScalarParameter>(this["ScalarParameters"]); } set { this["ScalarParameters"] = value; } }
        public Array<CollectionVectorParameter> VectorParameters { get { return new Array<CollectionVectorParameter>(this["VectorParameters"]); } set { this["VectorParameters"] = value; } }
    }
    public class MaterialInstanceDynamic : MaterialInstance
    {
        public MaterialInstanceDynamic(nint addr) : base(addr) { }
        public MaterialInstanceDynamic() : base(0) { }
        public void SetVectorParameterValueByInfo(UEObject ParameterInfo, UEObject Value) { Invoke("SetVectorParameterValueByInfo", ParameterInfo, Value); }
        public void _MaterialInstanceDynamic() { Invoke("MaterialInstanceDynamic"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MaterialInstanceActor : Actor
    {
        public MaterialInstanceActor(nint addr) : base(addr) { }
        public MaterialInstanceActor() : base(0) { }
        public Array<Actor> TargetActors { get { return new Array<Actor>(this["TargetActors"]); } set { this["TargetActors"] = value; } }
    }
    public class MaterialFunctionMaterialLayerBlendInstance : MaterialFunctionInstance
    {
        public MaterialFunctionMaterialLayerBlendInstance(nint addr) : base(addr) { }
        public MaterialFunctionMaterialLayerBlendInstance() : base(0) { }
    }
    public class MaterialFunctionMaterialLayerBlend : MaterialFunction
    {
        public MaterialFunctionMaterialLayerBlend(nint addr) : base(addr) { }
        public MaterialFunctionMaterialLayerBlend() : base(0) { }
    }
    public class MaterialFunctionMaterialLayerInstance : MaterialFunctionInstance
    {
        public MaterialFunctionMaterialLayerInstance(nint addr) : base(addr) { }
        public MaterialFunctionMaterialLayerInstance() : base(0) { }
    }
    public class MaterialFunctionMaterialLayer : MaterialFunction
    {
        public MaterialFunctionMaterialLayer(nint addr) : base(addr) { }
        public MaterialFunctionMaterialLayer() : base(0) { }
    }
    public class MaterialFunctionInstance : MaterialFunctionInterface
    {
        public MaterialFunctionInstance(nint addr) : base(addr) { }
        public MaterialFunctionInstance() : base(0) { }
        public MaterialFunctionInterface Parent { get { return this[nameof(Parent)].As<MaterialFunctionInterface>(); } set { this["Parent"] = value; } }
        public MaterialFunctionInterface Base { get { return this[nameof(Base)].As<MaterialFunctionInterface>(); } set { this["Base"] = value; } }
        public Array<ScalarParameterValue> ScalarParameterValues { get { return new Array<ScalarParameterValue>(this["ScalarParameterValues"]); } set { this["ScalarParameterValues"] = value; } }
        public Array<VectorParameterValue> VectorParameterValues { get { return new Array<VectorParameterValue>(this["VectorParameterValues"]); } set { this["VectorParameterValues"] = value; } }
        public Array<TextureParameterValue> TextureParameterValues { get { return new Array<TextureParameterValue>(this["TextureParameterValues"]); } set { this["TextureParameterValues"] = value; } }
        public Array<FontParameterValue> FontParameterValues { get { return new Array<FontParameterValue>(this["FontParameterValues"]); } set { this["FontParameterValues"] = value; } }
        public Array<StaticSwitchParameter> StaticSwitchParameterValues { get { return new Array<StaticSwitchParameter>(this["StaticSwitchParameterValues"]); } set { this["StaticSwitchParameterValues"] = value; } }
        public Array<StaticComponentMaskParameter> StaticComponentMaskParameterValues { get { return new Array<StaticComponentMaskParameter>(this["StaticComponentMaskParameterValues"]); } set { this["StaticComponentMaskParameterValues"] = value; } }
        public Array<RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues { get { return new Array<RuntimeVirtualTextureParameterValue>(this["RuntimeVirtualTextureParameterValues"]); } set { this["RuntimeVirtualTextureParameterValues"] = value; } }
    }
    public class MaterialFunction : MaterialFunctionInterface
    {
        public MaterialFunction(nint addr) : base(addr) { }
        public MaterialFunction() : base(0) { }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bExposeToLibrary { get { return this["bExposeToLibrary"].Flag; } set { this["bExposeToLibrary"].Flag = value; } }
        public bool bPrefixParameterNames { get { return this["bPrefixParameterNames"].Flag; } set { this["bPrefixParameterNames"].Flag = value; } }
    }
    public class MaterialFunctionInterface : UEObject
    {
        public MaterialFunctionInterface(nint addr) : base(addr) { }
        public MaterialFunctionInterface() : base(0) { }
        public SDK.Script.CoreUObject.Guid StateId { get { return this[nameof(StateId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["StateId"] = value; } }
        public EMaterialFunctionUsage MaterialFunctionUsage { get { return (EMaterialFunctionUsage)this["MaterialFunctionUsage"].GetValue<int>(); } set { this["MaterialFunctionUsage"].SetValue<int>((int)value); } }
    }
    public class MaterialExpressionWorldPosition : MaterialExpression
    {
        public MaterialExpressionWorldPosition(nint addr) : base(addr) { }
        public MaterialExpressionWorldPosition() : base(0) { }
        public byte WorldPositionShaderOffset { get { return this["WorldPositionShaderOffset"].GetValue<byte>(); } set { this["WorldPositionShaderOffset"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionVolumetricAdvancedMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionVolumetricAdvancedMaterialOutput(nint addr) : base(addr) { }
        public MaterialExpressionVolumetricAdvancedMaterialOutput() : base(0) { }
        public ExpressionInput PhaseG { get { return this[nameof(PhaseG)].As<ExpressionInput>(); } set { this["PhaseG"] = value; } }
        public ExpressionInput PhaseG2 { get { return this[nameof(PhaseG2)].As<ExpressionInput>(); } set { this["PhaseG2"] = value; } }
        public ExpressionInput PhaseBlend { get { return this[nameof(PhaseBlend)].As<ExpressionInput>(); } set { this["PhaseBlend"] = value; } }
        public ExpressionInput MultiScatteringContribution { get { return this[nameof(MultiScatteringContribution)].As<ExpressionInput>(); } set { this["MultiScatteringContribution"] = value; } }
        public ExpressionInput MultiScatteringOcclusion { get { return this[nameof(MultiScatteringOcclusion)].As<ExpressionInput>(); } set { this["MultiScatteringOcclusion"] = value; } }
        public ExpressionInput MultiScatteringEccentricity { get { return this[nameof(MultiScatteringEccentricity)].As<ExpressionInput>(); } set { this["MultiScatteringEccentricity"] = value; } }
        public ExpressionInput ConservativeDensity { get { return this[nameof(ConservativeDensity)].As<ExpressionInput>(); } set { this["ConservativeDensity"] = value; } }
        public float ConstPhaseG { get { return this["ConstPhaseG"].GetValue<float>(); } set { this["ConstPhaseG"].SetValue<float>(value); } }
        public float ConstPhaseG2 { get { return this["ConstPhaseG2"].GetValue<float>(); } set { this["ConstPhaseG2"].SetValue<float>(value); } }
        public float ConstPhaseBlend { get { return this["ConstPhaseBlend"].GetValue<float>(); } set { this["ConstPhaseBlend"].SetValue<float>(value); } }
        public bool PerSamplePhaseEvaluation { get { return this["PerSamplePhaseEvaluation"].Flag; } set { this["PerSamplePhaseEvaluation"].Flag = value; } }
        public uint MultiScatteringApproximationOctaveCount { get { return this["MultiScatteringApproximationOctaveCount"].GetValue<uint>(); } set { this["MultiScatteringApproximationOctaveCount"].SetValue<uint>(value); } }
        public float ConstMultiScatteringContribution { get { return this["ConstMultiScatteringContribution"].GetValue<float>(); } set { this["ConstMultiScatteringContribution"].SetValue<float>(value); } }
        public float ConstMultiScatteringOcclusion { get { return this["ConstMultiScatteringOcclusion"].GetValue<float>(); } set { this["ConstMultiScatteringOcclusion"].SetValue<float>(value); } }
        public float ConstMultiScatteringEccentricity { get { return this["ConstMultiScatteringEccentricity"].GetValue<float>(); } set { this["ConstMultiScatteringEccentricity"].SetValue<float>(value); } }
        public bool bGroundContribution { get { return this["bGroundContribution"].Flag; } set { this["bGroundContribution"].Flag = value; } }
        public bool bGrayScaleMaterial { get { return this["bGrayScaleMaterial"].Flag; } set { this["bGrayScaleMaterial"].Flag = value; } }
        public bool bRayMarchVolumeShadow { get { return this["bRayMarchVolumeShadow"].Flag; } set { this["bRayMarchVolumeShadow"].Flag = value; } }
    }
    public class MaterialExpressionVolumetricAdvancedMaterialInput : MaterialExpression
    {
        public MaterialExpressionVolumetricAdvancedMaterialInput(nint addr) : base(addr) { }
        public MaterialExpressionVolumetricAdvancedMaterialInput() : base(0) { }
    }
    public class MaterialExpressionVirtualTextureFeatureSwitch : MaterialExpression
    {
        public MaterialExpressionVirtualTextureFeatureSwitch(nint addr) : base(addr) { }
        public MaterialExpressionVirtualTextureFeatureSwitch() : base(0) { }
        public ExpressionInput No { get { return this[nameof(No)].As<ExpressionInput>(); } set { this["No"] = value; } }
        public ExpressionInput Yes { get { return this[nameof(Yes)].As<ExpressionInput>(); } set { this["Yes"] = value; } }
    }
    public class MaterialExpressionViewSize : MaterialExpression
    {
        public MaterialExpressionViewSize(nint addr) : base(addr) { }
        public MaterialExpressionViewSize() : base(0) { }
    }
    public class MaterialExpressionViewProperty : MaterialExpression
    {
        public MaterialExpressionViewProperty(nint addr) : base(addr) { }
        public MaterialExpressionViewProperty() : base(0) { }
        public byte Property { get { return this["Property"].GetValue<byte>(); } set { this["Property"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionVertexTangentWS : MaterialExpression
    {
        public MaterialExpressionVertexTangentWS(nint addr) : base(addr) { }
        public MaterialExpressionVertexTangentWS() : base(0) { }
    }
    public class MaterialExpressionVertexNormalWS : MaterialExpression
    {
        public MaterialExpressionVertexNormalWS(nint addr) : base(addr) { }
        public MaterialExpressionVertexNormalWS() : base(0) { }
    }
    public class MaterialExpressionVertexInterpolator : MaterialExpressionCustomOutput
    {
        public MaterialExpressionVertexInterpolator(nint addr) : base(addr) { }
        public MaterialExpressionVertexInterpolator() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionVertexColor : MaterialExpression
    {
        public MaterialExpressionVertexColor(nint addr) : base(addr) { }
        public MaterialExpressionVertexColor() : base(0) { }
    }
    public class MaterialExpressionVectorNoise : MaterialExpression
    {
        public MaterialExpressionVectorNoise(nint addr) : base(addr) { }
        public MaterialExpressionVectorNoise() : base(0) { }
        public ExpressionInput position { get { return this[nameof(position)].As<ExpressionInput>(); } set { this["position"] = value; } }
        public byte NoiseFunction { get { return this["NoiseFunction"].GetValue<byte>(); } set { this["NoiseFunction"].SetValue<byte>(value); } }
        public int Quality { get { return this["Quality"].GetValue<int>(); } set { this["Quality"].SetValue<int>(value); } }
        public bool bTiling { get { return this["bTiling"].Flag; } set { this["bTiling"].Flag = value; } }
        public uint TileSize { get { return this["TileSize"].GetValue<uint>(); } set { this["TileSize"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionTwoSidedSign : MaterialExpression
    {
        public MaterialExpressionTwoSidedSign(nint addr) : base(addr) { }
        public MaterialExpressionTwoSidedSign() : base(0) { }
    }
    public class MaterialExpressionTruncate : MaterialExpression
    {
        public MaterialExpressionTruncate(nint addr) : base(addr) { }
        public MaterialExpressionTruncate() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionTransformPosition : MaterialExpression
    {
        public MaterialExpressionTransformPosition(nint addr) : base(addr) { }
        public MaterialExpressionTransformPosition() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public byte TransformSourceType { get { return this["TransformSourceType"].GetValue<byte>(); } set { this["TransformSourceType"].SetValue<byte>(value); } }
        public byte TransformType { get { return this["TransformType"].GetValue<byte>(); } set { this["TransformType"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTransform : MaterialExpression
    {
        public MaterialExpressionTransform(nint addr) : base(addr) { }
        public MaterialExpressionTransform() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public byte TransformSourceType { get { return this["TransformSourceType"].GetValue<byte>(); } set { this["TransformSourceType"].SetValue<byte>(value); } }
        public byte TransformType { get { return this["TransformType"].GetValue<byte>(); } set { this["TransformType"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTime : MaterialExpression
    {
        public MaterialExpressionTime(nint addr) : base(addr) { }
        public MaterialExpressionTime() : base(0) { }
        public bool bIgnorePause { get { return this["bIgnorePause"].Flag; } set { this["bIgnorePause"].Flag = value; } }
        public bool bOverride_Period { get { return this["bOverride_Period"].Flag; } set { this["bOverride_Period"].Flag = value; } }
        public float Period { get { return this["Period"].GetValue<float>(); } set { this["Period"].SetValue<float>(value); } }
    }
    public class MaterialExpressionThinTranslucentMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionThinTranslucentMaterialOutput(nint addr) : base(addr) { }
        public MaterialExpressionThinTranslucentMaterialOutput() : base(0) { }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
    }
    public class MaterialExpressionTextureSampleParameterVolume : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameterVolume(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameterVolume() : base(0) { }
    }
    public class MaterialExpressionTextureSampleParameterSubUV : MaterialExpressionTextureSampleParameter2D
    {
        public MaterialExpressionTextureSampleParameterSubUV(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameterSubUV() : base(0) { }
        public bool bBlend { get { return this["bBlend"].Flag; } set { this["bBlend"].Flag = value; } }
    }
    public class MaterialExpressionTextureSampleParameterCube : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameterCube(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameterCube() : base(0) { }
    }
    public class MaterialExpressionTextureSampleParameter2DArray : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameter2DArray(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameter2DArray() : base(0) { }
    }
    public class MaterialExpressionTextureProperty : MaterialExpression
    {
        public MaterialExpressionTextureProperty(nint addr) : base(addr) { }
        public MaterialExpressionTextureProperty() : base(0) { }
        public ExpressionInput TextureObject { get { return this[nameof(TextureObject)].As<ExpressionInput>(); } set { this["TextureObject"] = value; } }
        public byte Property { get { return this["Property"].GetValue<byte>(); } set { this["Property"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTextureObjectParameter : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureObjectParameter(nint addr) : base(addr) { }
        public MaterialExpressionTextureObjectParameter() : base(0) { }
    }
    public class MaterialExpressionTextureObject : MaterialExpressionTextureBase
    {
        public MaterialExpressionTextureObject(nint addr) : base(addr) { }
        public MaterialExpressionTextureObject() : base(0) { }
    }
    public class MaterialExpressionTextureCoordinate : MaterialExpression
    {
        public MaterialExpressionTextureCoordinate(nint addr) : base(addr) { }
        public MaterialExpressionTextureCoordinate() : base(0) { }
        public int CoordinateIndex { get { return this["CoordinateIndex"].GetValue<int>(); } set { this["CoordinateIndex"].SetValue<int>(value); } }
        public float UTiling { get { return this["UTiling"].GetValue<float>(); } set { this["UTiling"].SetValue<float>(value); } }
        public float VTiling { get { return this["VTiling"].GetValue<float>(); } set { this["VTiling"].SetValue<float>(value); } }
        public bool UnMirrorU { get { return this["UnMirrorU"].Flag; } set { this["UnMirrorU"].Flag = value; } }
        public bool UnMirrorV { get { return this["UnMirrorV"].Flag; } set { this["UnMirrorV"].Flag = value; } }
    }
    public class MaterialExpressionTemporalSobol : MaterialExpression
    {
        public MaterialExpressionTemporalSobol(nint addr) : base(addr) { }
        public MaterialExpressionTemporalSobol() : base(0) { }
        public ExpressionInput Index { get { return this[nameof(Index)].As<ExpressionInput>(); } set { this["Index"] = value; } }
        public ExpressionInput Seed { get { return this[nameof(Seed)].As<ExpressionInput>(); } set { this["Seed"] = value; } }
        public uint ConstIndex { get { return this["ConstIndex"].GetValue<uint>(); } set { this["ConstIndex"].SetValue<uint>(value); } }
        public Vector2D ConstSeed { get { return this[nameof(ConstSeed)].As<Vector2D>(); } set { this["ConstSeed"] = value; } }
    }
    public class MaterialExpressionTangentOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionTangentOutput(nint addr) : base(addr) { }
        public MaterialExpressionTangentOutput() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionTangent : MaterialExpression
    {
        public MaterialExpressionTangent(nint addr) : base(addr) { }
        public MaterialExpressionTangent() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this["Period"].GetValue<float>(); } set { this["Period"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSubtract : MaterialExpression
    {
        public MaterialExpressionSubtract(nint addr) : base(addr) { }
        public MaterialExpressionSubtract() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionStep : MaterialExpression
    {
        public MaterialExpressionStep(nint addr) : base(addr) { }
        public MaterialExpressionStep() : base(0) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
        public float ConstY { get { return this["ConstY"].GetValue<float>(); } set { this["ConstY"].SetValue<float>(value); } }
        public float ConstX { get { return this["ConstX"].GetValue<float>(); } set { this["ConstX"].SetValue<float>(value); } }
    }
    public class MaterialExpressionStaticSwitchParameter : MaterialExpressionStaticBoolParameter
    {
        public MaterialExpressionStaticSwitchParameter(nint addr) : base(addr) { }
        public MaterialExpressionStaticSwitchParameter() : base(0) { }
    }
    public class MaterialExpressionStaticSwitch : MaterialExpression
    {
        public MaterialExpressionStaticSwitch(nint addr) : base(addr) { }
        public MaterialExpressionStaticSwitch() : base(0) { }
        public bool DefaultValue { get { return this["DefaultValue"].Flag; } set { this["DefaultValue"].Flag = value; } }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionStaticComponentMaskParameter : MaterialExpressionParameter
    {
        public MaterialExpressionStaticComponentMaskParameter(nint addr) : base(addr) { }
        public MaterialExpressionStaticComponentMaskParameter() : base(0) { }
        public bool DefaultR { get { return this["DefaultR"].Flag; } set { this["DefaultR"].Flag = value; } }
        public bool DefaultG { get { return this["DefaultG"].Flag; } set { this["DefaultG"].Flag = value; } }
        public bool DefaultB { get { return this["DefaultB"].Flag; } set { this["DefaultB"].Flag = value; } }
        public bool DefaultA { get { return this["DefaultA"].Flag; } set { this["DefaultA"].Flag = value; } }
    }
    public class MaterialExpressionStaticBoolParameter : MaterialExpressionParameter
    {
        public MaterialExpressionStaticBoolParameter(nint addr) : base(addr) { }
        public MaterialExpressionStaticBoolParameter() : base(0) { }
        public bool DefaultValue { get { return this["DefaultValue"].Flag; } set { this["DefaultValue"].Flag = value; } }
    }
    public class MaterialExpressionStaticBool : MaterialExpression
    {
        public MaterialExpressionStaticBool(nint addr) : base(addr) { }
        public MaterialExpressionStaticBool() : base(0) { }
        public bool Value { get { return this["Value"].Flag; } set { this["Value"].Flag = value; } }
    }
    public class MaterialExpressionSquareRoot : MaterialExpression
    {
        public MaterialExpressionSquareRoot(nint addr) : base(addr) { }
        public MaterialExpressionSquareRoot() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionSphericalParticleOpacity : MaterialExpression
    {
        public MaterialExpressionSphericalParticleOpacity(nint addr) : base(addr) { }
        public MaterialExpressionSphericalParticleOpacity() : base(0) { }
        public ExpressionInput Density { get { return this[nameof(Density)].As<ExpressionInput>(); } set { this["Density"] = value; } }
        public float ConstantDensity { get { return this["ConstantDensity"].GetValue<float>(); } set { this["ConstantDensity"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSphereMask : MaterialExpression
    {
        public MaterialExpressionSphereMask(nint addr) : base(addr) { }
        public MaterialExpressionSphereMask() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Radius { get { return this[nameof(Radius)].As<ExpressionInput>(); } set { this["Radius"] = value; } }
        public ExpressionInput Hardness { get { return this[nameof(Hardness)].As<ExpressionInput>(); } set { this["Hardness"] = value; } }
        public float AttenuationRadius { get { return this["AttenuationRadius"].GetValue<float>(); } set { this["AttenuationRadius"].SetValue<float>(value); } }
        public float HardnessPercent { get { return this["HardnessPercent"].GetValue<float>(); } set { this["HardnessPercent"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSpeedTree : MaterialExpression
    {
        public MaterialExpressionSpeedTree(nint addr) : base(addr) { }
        public MaterialExpressionSpeedTree() : base(0) { }
        public ExpressionInput GeometryInput { get { return this[nameof(GeometryInput)].As<ExpressionInput>(); } set { this["GeometryInput"] = value; } }
        public ExpressionInput WindInput { get { return this[nameof(WindInput)].As<ExpressionInput>(); } set { this["WindInput"] = value; } }
        public ExpressionInput LODInput { get { return this[nameof(LODInput)].As<ExpressionInput>(); } set { this["LODInput"] = value; } }
        public ExpressionInput ExtraBendWS { get { return this[nameof(ExtraBendWS)].As<ExpressionInput>(); } set { this["ExtraBendWS"] = value; } }
        public byte GeometryType { get { return this["GeometryType"].GetValue<byte>(); } set { this["GeometryType"].SetValue<byte>(value); } }
        public byte WindType { get { return this["WindType"].GetValue<byte>(); } set { this["WindType"].SetValue<byte>(value); } }
        public byte LODType { get { return this["LODType"].GetValue<byte>(); } set { this["LODType"].SetValue<byte>(value); } }
        public float BillboardThreshold { get { return this["BillboardThreshold"].GetValue<float>(); } set { this["BillboardThreshold"].SetValue<float>(value); } }
        public bool bAccurateWindVelocities { get { return this["bAccurateWindVelocities"].Flag; } set { this["bAccurateWindVelocities"].Flag = value; } }
    }
    public class MaterialExpressionSobol : MaterialExpression
    {
        public MaterialExpressionSobol(nint addr) : base(addr) { }
        public MaterialExpressionSobol() : base(0) { }
        public ExpressionInput Cell { get { return this[nameof(Cell)].As<ExpressionInput>(); } set { this["Cell"] = value; } }
        public ExpressionInput Index { get { return this[nameof(Index)].As<ExpressionInput>(); } set { this["Index"] = value; } }
        public ExpressionInput Seed { get { return this[nameof(Seed)].As<ExpressionInput>(); } set { this["Seed"] = value; } }
        public uint ConstIndex { get { return this["ConstIndex"].GetValue<uint>(); } set { this["ConstIndex"].SetValue<uint>(value); } }
        public Vector2D ConstSeed { get { return this[nameof(ConstSeed)].As<Vector2D>(); } set { this["ConstSeed"] = value; } }
    }
    public class MaterialExpressionSmoothStep : MaterialExpression
    {
        public MaterialExpressionSmoothStep(nint addr) : base(addr) { }
        public MaterialExpressionSmoothStep() : base(0) { }
        public ExpressionInput Min { get { return this[nameof(Min)].As<ExpressionInput>(); } set { this["Min"] = value; } }
        public ExpressionInput Max { get { return this[nameof(Max)].As<ExpressionInput>(); } set { this["Max"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
        public float ConstMin { get { return this["ConstMin"].GetValue<float>(); } set { this["ConstMin"].SetValue<float>(value); } }
        public float ConstMax { get { return this["ConstMax"].GetValue<float>(); } set { this["ConstMax"].SetValue<float>(value); } }
        public float ConstValue { get { return this["ConstValue"].GetValue<float>(); } set { this["ConstValue"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSkyAtmosphereViewLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereViewLuminance(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereViewLuminance() : base(0) { }
    }
    public class MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance() : base(0) { }
    }
    public class MaterialExpressionSkyAtmosphereAerialPerspective : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereAerialPerspective(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereAerialPerspective() : base(0) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereLightDiskLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightDiskLuminance(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereLightDiskLuminance() : base(0) { }
        public int LightIndex { get { return this["LightIndex"].GetValue<int>(); } set { this["LightIndex"].SetValue<int>(value); } }
    }
    public class MaterialExpressionSkyAtmosphereLightIlluminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightIlluminance(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereLightIlluminance() : base(0) { }
        public int LightIndex { get { return this["LightIndex"].GetValue<int>(); } set { this["LightIndex"].SetValue<int>(value); } }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereLightDirection : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightDirection(nint addr) : base(addr) { }
        public MaterialExpressionSkyAtmosphereLightDirection() : base(0) { }
        public int LightIndex { get { return this["LightIndex"].GetValue<int>(); } set { this["LightIndex"].SetValue<int>(value); } }
    }
    public class MaterialExpressionSkinningVertexOffsets : MaterialExpression
    {
        public MaterialExpressionSkinningVertexOffsets(nint addr) : base(addr) { }
        public MaterialExpressionSkinningVertexOffsets() : base(0) { }
    }
    public class MaterialExpressionSingleLayerWaterMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionSingleLayerWaterMaterialOutput(nint addr) : base(addr) { }
        public MaterialExpressionSingleLayerWaterMaterialOutput() : base(0) { }
        public ExpressionInput ScatteringCoefficients { get { return this[nameof(ScatteringCoefficients)].As<ExpressionInput>(); } set { this["ScatteringCoefficients"] = value; } }
        public ExpressionInput AbsorptionCoefficients { get { return this[nameof(AbsorptionCoefficients)].As<ExpressionInput>(); } set { this["AbsorptionCoefficients"] = value; } }
        public ExpressionInput PhaseG { get { return this[nameof(PhaseG)].As<ExpressionInput>(); } set { this["PhaseG"] = value; } }
        public ExpressionInput ColorScaleBehindWater { get { return this[nameof(ColorScaleBehindWater)].As<ExpressionInput>(); } set { this["ColorScaleBehindWater"] = value; } }
    }
    public class MaterialExpressionSine : MaterialExpression
    {
        public MaterialExpressionSine(nint addr) : base(addr) { }
        public MaterialExpressionSine() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this["Period"].GetValue<float>(); } set { this["Period"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSign : MaterialExpression
    {
        public MaterialExpressionSign(nint addr) : base(addr) { }
        public MaterialExpressionSign() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionShadowReplace : MaterialExpression
    {
        public MaterialExpressionShadowReplace(nint addr) : base(addr) { }
        public MaterialExpressionShadowReplace() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Shadow { get { return this[nameof(Shadow)].As<ExpressionInput>(); } set { this["Shadow"] = value; } }
    }
    public class MaterialExpressionShadingPathSwitch : MaterialExpression
    {
        public MaterialExpressionShadingPathSwitch(nint addr) : base(addr) { }
        public MaterialExpressionShadingPathSwitch() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Inputs { get { return this[nameof(Inputs)].As<ExpressionInput>(); } set { this["Inputs"] = value; } }
    }
    public class MaterialExpressionShadingModel : MaterialExpression
    {
        public MaterialExpressionShadingModel(nint addr) : base(addr) { }
        public MaterialExpressionShadingModel() : base(0) { }
        public byte ShadingModel { get { return this["ShadingModel"].GetValue<byte>(); } set { this["ShadingModel"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionShaderStageSwitch : MaterialExpression
    {
        public MaterialExpressionShaderStageSwitch(nint addr) : base(addr) { }
        public MaterialExpressionShaderStageSwitch() : base(0) { }
        public ExpressionInput PixelShader { get { return this[nameof(PixelShader)].As<ExpressionInput>(); } set { this["PixelShader"] = value; } }
        public ExpressionInput VertexShader { get { return this[nameof(VertexShader)].As<ExpressionInput>(); } set { this["VertexShader"] = value; } }
    }
    public class MaterialExpressionSetMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionSetMaterialAttributes(nint addr) : base(addr) { }
        public MaterialExpressionSetMaterialAttributes() : base(0) { }
        public Array<ExpressionInput> Inputs { get { return new Array<ExpressionInput>(this["Inputs"]); } set { this["Inputs"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> AttributeSetTypes { get { return new Array<SDK.Script.CoreUObject.Guid>(this["AttributeSetTypes"]); } set { this["AttributeSetTypes"] = value; } }
    }
    public class MaterialExpressionScreenPosition : MaterialExpression
    {
        public MaterialExpressionScreenPosition(nint addr) : base(addr) { }
        public MaterialExpressionScreenPosition() : base(0) { }
    }
    public class MaterialExpressionSceneTexture : MaterialExpression
    {
        public MaterialExpressionSceneTexture(nint addr) : base(addr) { }
        public MaterialExpressionSceneTexture() : base(0) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public byte SceneTextureId { get { return this["SceneTextureId"].GetValue<byte>(); } set { this["SceneTextureId"].SetValue<byte>(value); } }
        public bool bFiltered { get { return this["bFiltered"].Flag; } set { this["bFiltered"].Flag = value; } }
    }
    public class MaterialExpressionSceneTexelSize : MaterialExpression
    {
        public MaterialExpressionSceneTexelSize(nint addr) : base(addr) { }
        public MaterialExpressionSceneTexelSize() : base(0) { }
    }
    public class MaterialExpressionSceneDepthWithoutWater : MaterialExpression
    {
        public MaterialExpressionSceneDepthWithoutWater(nint addr) : base(addr) { }
        public MaterialExpressionSceneDepthWithoutWater() : base(0) { }
        public byte InputMode { get { return this["InputMode"].GetValue<byte>(); } set { this["InputMode"].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
        public float FallbackDepth { get { return this["FallbackDepth"].GetValue<float>(); } set { this["FallbackDepth"].SetValue<float>(value); } }
    }
    public class MaterialExpressionSceneDepth : MaterialExpression
    {
        public MaterialExpressionSceneDepth(nint addr) : base(addr) { }
        public MaterialExpressionSceneDepth() : base(0) { }
        public byte InputMode { get { return this["InputMode"].GetValue<byte>(); } set { this["InputMode"].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
    }
    public class MaterialExpressionSceneColor : MaterialExpression
    {
        public MaterialExpressionSceneColor(nint addr) : base(addr) { }
        public MaterialExpressionSceneColor() : base(0) { }
        public byte InputMode { get { return this["InputMode"].GetValue<byte>(); } set { this["InputMode"].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput OffsetFraction { get { return this[nameof(OffsetFraction)].As<ExpressionInput>(); } set { this["OffsetFraction"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
    }
    public class MaterialExpressionSaturate : MaterialExpression
    {
        public MaterialExpressionSaturate(nint addr) : base(addr) { }
        public MaterialExpressionSaturate() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionSamplePhysicsIntegerField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsIntegerField(nint addr) : base(addr) { }
        public MaterialExpressionSamplePhysicsIntegerField() : base(0) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this["FieldTarget"].GetValue<byte>(); } set { this["FieldTarget"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionSamplePhysicsScalarField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsScalarField(nint addr) : base(addr) { }
        public MaterialExpressionSamplePhysicsScalarField() : base(0) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this["FieldTarget"].GetValue<byte>(); } set { this["FieldTarget"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionSamplePhysicsVectorField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsVectorField(nint addr) : base(addr) { }
        public MaterialExpressionSamplePhysicsVectorField() : base(0) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this["FieldTarget"].GetValue<byte>(); } set { this["FieldTarget"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionRuntimeVirtualTextureSampleParameter : MaterialExpressionRuntimeVirtualTextureSample
    {
        public MaterialExpressionRuntimeVirtualTextureSampleParameter(nint addr) : base(addr) { }
        public MaterialExpressionRuntimeVirtualTextureSampleParameter() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
        public string Group { get { return this["Group"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MaterialExpressionRuntimeVirtualTextureSample : MaterialExpression
    {
        public MaterialExpressionRuntimeVirtualTextureSample(nint addr) : base(addr) { }
        public MaterialExpressionRuntimeVirtualTextureSample() : base(0) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public ExpressionInput MipValue { get { return this[nameof(MipValue)].As<ExpressionInput>(); } set { this["MipValue"] = value; } }
        public RuntimeVirtualTexture VirtualTexture { get { return this[nameof(VirtualTexture)].As<RuntimeVirtualTexture>(); } set { this["VirtualTexture"] = value; } }
        public ERuntimeVirtualTextureMaterialType MaterialType { get { return (ERuntimeVirtualTextureMaterialType)this["MaterialType"].GetValue<int>(); } set { this["MaterialType"].SetValue<int>((int)value); } }
        public bool bSinglePhysicalSpace { get { return this["bSinglePhysicalSpace"].Flag; } set { this["bSinglePhysicalSpace"].Flag = value; } }
        public bool bAdaptive { get { return this["bAdaptive"].Flag; } set { this["bAdaptive"].Flag = value; } }
        public byte MipValueMode { get { return this["MipValueMode"].GetValue<byte>(); } set { this["MipValueMode"].SetValue<byte>(value); } }
        public byte TextureAddressMode { get { return this["TextureAddressMode"].GetValue<byte>(); } set { this["TextureAddressMode"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionRuntimeVirtualTextureReplace : MaterialExpression
    {
        public MaterialExpressionRuntimeVirtualTextureReplace(nint addr) : base(addr) { }
        public MaterialExpressionRuntimeVirtualTextureReplace() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput VirtualTextureOutput { get { return this[nameof(VirtualTextureOutput)].As<ExpressionInput>(); } set { this["VirtualTextureOutput"] = value; } }
    }
    public class MaterialExpressionRuntimeVirtualTextureOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionRuntimeVirtualTextureOutput(nint addr) : base(addr) { }
        public MaterialExpressionRuntimeVirtualTextureOutput() : base(0) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput WorldHeight { get { return this[nameof(WorldHeight)].As<ExpressionInput>(); } set { this["WorldHeight"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
        public ExpressionInput mask { get { return this[nameof(mask)].As<ExpressionInput>(); } set { this["mask"] = value; } }
    }
    public class MaterialExpressionRound : MaterialExpression
    {
        public MaterialExpressionRound(nint addr) : base(addr) { }
        public MaterialExpressionRound() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionRotator : MaterialExpression
    {
        public MaterialExpressionRotator(nint addr) : base(addr) { }
        public MaterialExpressionRotator() : base(0) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Time { get { return this[nameof(Time)].As<ExpressionInput>(); } set { this["Time"] = value; } }
        public float CenterX { get { return this["CenterX"].GetValue<float>(); } set { this["CenterX"].SetValue<float>(value); } }
        public float CenterY { get { return this["CenterY"].GetValue<float>(); } set { this["CenterY"].SetValue<float>(value); } }
        public float Speed { get { return this["Speed"].GetValue<float>(); } set { this["Speed"].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this["ConstCoordinate"].GetValue<uint>(); } set { this["ConstCoordinate"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionRotateAboutAxis : MaterialExpression
    {
        public MaterialExpressionRotateAboutAxis(nint addr) : base(addr) { }
        public MaterialExpressionRotateAboutAxis() : base(0) { }
        public ExpressionInput NormalizedRotationAxis { get { return this[nameof(NormalizedRotationAxis)].As<ExpressionInput>(); } set { this["NormalizedRotationAxis"] = value; } }
        public ExpressionInput RotationAngle { get { return this[nameof(RotationAngle)].As<ExpressionInput>(); } set { this["RotationAngle"] = value; } }
        public ExpressionInput PivotPoint { get { return this[nameof(PivotPoint)].As<ExpressionInput>(); } set { this["PivotPoint"] = value; } }
        public ExpressionInput position { get { return this[nameof(position)].As<ExpressionInput>(); } set { this["position"] = value; } }
        public float Period { get { return this["Period"].GetValue<float>(); } set { this["Period"].SetValue<float>(value); } }
    }
    public class MaterialExpressionReroute : MaterialExpressionRerouteBase
    {
        public MaterialExpressionReroute(nint addr) : base(addr) { }
        public MaterialExpressionReroute() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionReflectionVectorWS : MaterialExpression
    {
        public MaterialExpressionReflectionVectorWS(nint addr) : base(addr) { }
        public MaterialExpressionReflectionVectorWS() : base(0) { }
        public ExpressionInput CustomWorldNormal { get { return this[nameof(CustomWorldNormal)].As<ExpressionInput>(); } set { this["CustomWorldNormal"] = value; } }
        public bool bNormalizeCustomWorldNormal { get { return this["bNormalizeCustomWorldNormal"].Flag; } set { this["bNormalizeCustomWorldNormal"].Flag = value; } }
    }
    public class MaterialExpressionReflectionCapturePassSwitch : MaterialExpression
    {
        public MaterialExpressionReflectionCapturePassSwitch(nint addr) : base(addr) { }
        public MaterialExpressionReflectionCapturePassSwitch() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Reflection { get { return this[nameof(Reflection)].As<ExpressionInput>(); } set { this["Reflection"] = value; } }
    }
    public class MaterialExpressionRayTracingQualitySwitch : MaterialExpression
    {
        public MaterialExpressionRayTracingQualitySwitch(nint addr) : base(addr) { }
        public MaterialExpressionRayTracingQualitySwitch() : base(0) { }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput RayTraced { get { return this[nameof(RayTraced)].As<ExpressionInput>(); } set { this["RayTraced"] = value; } }
    }
    public class MaterialExpressionQualitySwitch : MaterialExpression
    {
        public MaterialExpressionQualitySwitch(nint addr) : base(addr) { }
        public MaterialExpressionQualitySwitch() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Inputs { get { return this[nameof(Inputs)].As<ExpressionInput>(); } set { this["Inputs"] = value; } }
    }
    public class MaterialExpressionPreviousFrameSwitch : MaterialExpression
    {
        public MaterialExpressionPreviousFrameSwitch(nint addr) : base(addr) { }
        public MaterialExpressionPreviousFrameSwitch() : base(0) { }
        public ExpressionInput CurrentFrame { get { return this[nameof(CurrentFrame)].As<ExpressionInput>(); } set { this["CurrentFrame"] = value; } }
        public ExpressionInput PreviousFrame { get { return this[nameof(PreviousFrame)].As<ExpressionInput>(); } set { this["PreviousFrame"] = value; } }
    }
    public class MaterialExpressionPreSkinnedPosition : MaterialExpression
    {
        public MaterialExpressionPreSkinnedPosition(nint addr) : base(addr) { }
        public MaterialExpressionPreSkinnedPosition() : base(0) { }
    }
    public class MaterialExpressionPreSkinnedNormal : MaterialExpression
    {
        public MaterialExpressionPreSkinnedNormal(nint addr) : base(addr) { }
        public MaterialExpressionPreSkinnedNormal() : base(0) { }
    }
    public class MaterialExpressionPreSkinnedLocalBounds : MaterialExpression
    {
        public MaterialExpressionPreSkinnedLocalBounds(nint addr) : base(addr) { }
        public MaterialExpressionPreSkinnedLocalBounds() : base(0) { }
    }
    public class MaterialExpressionPrecomputedAOMask : MaterialExpression
    {
        public MaterialExpressionPrecomputedAOMask(nint addr) : base(addr) { }
        public MaterialExpressionPrecomputedAOMask() : base(0) { }
    }
    public class MaterialExpressionPower : MaterialExpression
    {
        public MaterialExpressionPower(nint addr) : base(addr) { }
        public MaterialExpressionPower() : base(0) { }
        public ExpressionInput Base { get { return this[nameof(Base)].As<ExpressionInput>(); } set { this["Base"] = value; } }
        public ExpressionInput Exponent { get { return this[nameof(Exponent)].As<ExpressionInput>(); } set { this["Exponent"] = value; } }
        public float ConstExponent { get { return this["ConstExponent"].GetValue<float>(); } set { this["ConstExponent"].SetValue<float>(value); } }
    }
    public class MaterialExpressionPixelNormalWS : MaterialExpression
    {
        public MaterialExpressionPixelNormalWS(nint addr) : base(addr) { }
        public MaterialExpressionPixelNormalWS() : base(0) { }
    }
    public class MaterialExpressionPixelDepth : MaterialExpression
    {
        public MaterialExpressionPixelDepth(nint addr) : base(addr) { }
        public MaterialExpressionPixelDepth() : base(0) { }
    }
    public class MaterialExpressionPerInstanceRandom : MaterialExpression
    {
        public MaterialExpressionPerInstanceRandom(nint addr) : base(addr) { }
        public MaterialExpressionPerInstanceRandom() : base(0) { }
    }
    public class MaterialExpressionPerInstanceFadeAmount : MaterialExpression
    {
        public MaterialExpressionPerInstanceFadeAmount(nint addr) : base(addr) { }
        public MaterialExpressionPerInstanceFadeAmount() : base(0) { }
    }
    public class MaterialExpressionPerInstanceCustomData : MaterialExpression
    {
        public MaterialExpressionPerInstanceCustomData(nint addr) : base(addr) { }
        public MaterialExpressionPerInstanceCustomData() : base(0) { }
        public ExpressionInput DefaultValue { get { return this[nameof(DefaultValue)].As<ExpressionInput>(); } set { this["DefaultValue"] = value; } }
        public float ConstDefaultValue { get { return this["ConstDefaultValue"].GetValue<float>(); } set { this["ConstDefaultValue"].SetValue<float>(value); } }
        public uint DataIndex { get { return this["DataIndex"].GetValue<uint>(); } set { this["DataIndex"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionParticleSubUVProperties : MaterialExpression
    {
        public MaterialExpressionParticleSubUVProperties(nint addr) : base(addr) { }
        public MaterialExpressionParticleSubUVProperties() : base(0) { }
    }
    public class MaterialExpressionParticleSubUV : MaterialExpressionTextureSample
    {
        public MaterialExpressionParticleSubUV(nint addr) : base(addr) { }
        public MaterialExpressionParticleSubUV() : base(0) { }
        public bool bBlend { get { return this["bBlend"].Flag; } set { this["bBlend"].Flag = value; } }
    }
    public class MaterialExpressionParticleSpeed : MaterialExpression
    {
        public MaterialExpressionParticleSpeed(nint addr) : base(addr) { }
        public MaterialExpressionParticleSpeed() : base(0) { }
    }
    public class MaterialExpressionParticleSize : MaterialExpression
    {
        public MaterialExpressionParticleSize(nint addr) : base(addr) { }
        public MaterialExpressionParticleSize() : base(0) { }
    }
    public class MaterialExpressionParticleRelativeTime : MaterialExpression
    {
        public MaterialExpressionParticleRelativeTime(nint addr) : base(addr) { }
        public MaterialExpressionParticleRelativeTime() : base(0) { }
    }
    public class MaterialExpressionParticleRandom : MaterialExpression
    {
        public MaterialExpressionParticleRandom(nint addr) : base(addr) { }
        public MaterialExpressionParticleRandom() : base(0) { }
    }
    public class MaterialExpressionParticleRadius : MaterialExpression
    {
        public MaterialExpressionParticleRadius(nint addr) : base(addr) { }
        public MaterialExpressionParticleRadius() : base(0) { }
    }
    public class MaterialExpressionParticlePositionWS : MaterialExpression
    {
        public MaterialExpressionParticlePositionWS(nint addr) : base(addr) { }
        public MaterialExpressionParticlePositionWS() : base(0) { }
    }
    public class MaterialExpressionParticleMotionBlurFade : MaterialExpression
    {
        public MaterialExpressionParticleMotionBlurFade(nint addr) : base(addr) { }
        public MaterialExpressionParticleMotionBlurFade() : base(0) { }
    }
    public class MaterialExpressionParticleMacroUV : MaterialExpression
    {
        public MaterialExpressionParticleMacroUV(nint addr) : base(addr) { }
        public MaterialExpressionParticleMacroUV() : base(0) { }
    }
    public class MaterialExpressionParticleDirection : MaterialExpression
    {
        public MaterialExpressionParticleDirection(nint addr) : base(addr) { }
        public MaterialExpressionParticleDirection() : base(0) { }
    }
    public class MaterialExpressionParticleColor : MaterialExpression
    {
        public MaterialExpressionParticleColor(nint addr) : base(addr) { }
        public MaterialExpressionParticleColor() : base(0) { }
    }
    public class MaterialExpressionPanner : MaterialExpression
    {
        public MaterialExpressionPanner(nint addr) : base(addr) { }
        public MaterialExpressionPanner() : base(0) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Time { get { return this[nameof(Time)].As<ExpressionInput>(); } set { this["Time"] = value; } }
        public ExpressionInput Speed { get { return this[nameof(Speed)].As<ExpressionInput>(); } set { this["Speed"] = value; } }
        public float SpeedX { get { return this["SpeedX"].GetValue<float>(); } set { this["SpeedX"].SetValue<float>(value); } }
        public float SpeedY { get { return this["SpeedY"].GetValue<float>(); } set { this["SpeedY"].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this["ConstCoordinate"].GetValue<uint>(); } set { this["ConstCoordinate"].SetValue<uint>(value); } }
        public bool bFractionalPart { get { return this["bFractionalPart"].Flag; } set { this["bFractionalPart"].Flag = value; } }
    }
    public class MaterialExpressionOneMinus : MaterialExpression
    {
        public MaterialExpressionOneMinus(nint addr) : base(addr) { }
        public MaterialExpressionOneMinus() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionObjectRadius : MaterialExpression
    {
        public MaterialExpressionObjectRadius(nint addr) : base(addr) { }
        public MaterialExpressionObjectRadius() : base(0) { }
    }
    public class MaterialExpressionObjectPositionWS : MaterialExpression
    {
        public MaterialExpressionObjectPositionWS(nint addr) : base(addr) { }
        public MaterialExpressionObjectPositionWS() : base(0) { }
    }
    public class MaterialExpressionObjectOrientation : MaterialExpression
    {
        public MaterialExpressionObjectOrientation(nint addr) : base(addr) { }
        public MaterialExpressionObjectOrientation() : base(0) { }
    }
    public class MaterialExpressionObjectBounds : MaterialExpression
    {
        public MaterialExpressionObjectBounds(nint addr) : base(addr) { }
        public MaterialExpressionObjectBounds() : base(0) { }
    }
    public class MaterialExpressionNormalize : MaterialExpression
    {
        public MaterialExpressionNormalize(nint addr) : base(addr) { }
        public MaterialExpressionNormalize() : base(0) { }
        public ExpressionInput VectorInput { get { return this[nameof(VectorInput)].As<ExpressionInput>(); } set { this["VectorInput"] = value; } }
    }
    public class MaterialExpressionNoise : MaterialExpression
    {
        public MaterialExpressionNoise(nint addr) : base(addr) { }
        public MaterialExpressionNoise() : base(0) { }
        public ExpressionInput position { get { return this[nameof(position)].As<ExpressionInput>(); } set { this["position"] = value; } }
        public ExpressionInput FilterWidth { get { return this[nameof(FilterWidth)].As<ExpressionInput>(); } set { this["FilterWidth"] = value; } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
        public int Quality { get { return this["Quality"].GetValue<int>(); } set { this["Quality"].SetValue<int>(value); } }
        public byte NoiseFunction { get { return this["NoiseFunction"].GetValue<byte>(); } set { this["NoiseFunction"].SetValue<byte>(value); } }
        public bool bTurbulence { get { return this["bTurbulence"].Flag; } set { this["bTurbulence"].Flag = value; } }
        public int Levels { get { return this["Levels"].GetValue<int>(); } set { this["Levels"].SetValue<int>(value); } }
        public float OutputMin { get { return this["OutputMin"].GetValue<float>(); } set { this["OutputMin"].SetValue<float>(value); } }
        public float OutputMax { get { return this["OutputMax"].GetValue<float>(); } set { this["OutputMax"].SetValue<float>(value); } }
        public float LevelScale { get { return this["LevelScale"].GetValue<float>(); } set { this["LevelScale"].SetValue<float>(value); } }
        public bool bTiling { get { return this["bTiling"].Flag; } set { this["bTiling"].Flag = value; } }
        public uint RepeatSize { get { return this["RepeatSize"].GetValue<uint>(); } set { this["RepeatSize"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionNamedRerouteUsage : MaterialExpressionNamedRerouteBase
    {
        public MaterialExpressionNamedRerouteUsage(nint addr) : base(addr) { }
        public MaterialExpressionNamedRerouteUsage() : base(0) { }
        public MaterialExpressionNamedRerouteDeclaration Declaration { get { return this[nameof(Declaration)].As<MaterialExpressionNamedRerouteDeclaration>(); } set { this["Declaration"] = value; } }
        public SDK.Script.CoreUObject.Guid DeclarationGuid { get { return this[nameof(DeclarationGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["DeclarationGuid"] = value; } }
    }
    public class MaterialExpressionNamedRerouteDeclaration : MaterialExpressionNamedRerouteBase
    {
        public MaterialExpressionNamedRerouteDeclaration(nint addr) : base(addr) { }
        public MaterialExpressionNamedRerouteDeclaration() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid VariableGuid { get { return this[nameof(VariableGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["VariableGuid"] = value; } }
    }
    public class MaterialExpressionNamedRerouteBase : MaterialExpressionRerouteBase
    {
        public MaterialExpressionNamedRerouteBase(nint addr) : base(addr) { }
        public MaterialExpressionNamedRerouteBase() : base(0) { }
    }
    public class MaterialExpressionRerouteBase : MaterialExpression
    {
        public MaterialExpressionRerouteBase(nint addr) : base(addr) { }
        public MaterialExpressionRerouteBase() : base(0) { }
    }
    public class MaterialExpressionMultiply : MaterialExpression
    {
        public MaterialExpressionMultiply(nint addr) : base(addr) { }
        public MaterialExpressionMultiply() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionMin : MaterialExpression
    {
        public MaterialExpressionMin(nint addr) : base(addr) { }
        public MaterialExpressionMin() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionMax : MaterialExpression
    {
        public MaterialExpressionMax(nint addr) : base(addr) { }
        public MaterialExpressionMax() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionMaterialProxyReplace : MaterialExpression
    {
        public MaterialExpressionMaterialProxyReplace(nint addr) : base(addr) { }
        public MaterialExpressionMaterialProxyReplace() : base(0) { }
        public ExpressionInput Realtime { get { return this[nameof(Realtime)].As<ExpressionInput>(); } set { this["Realtime"] = value; } }
        public ExpressionInput MaterialProxy { get { return this[nameof(MaterialProxy)].As<ExpressionInput>(); } set { this["MaterialProxy"] = value; } }
    }
    public class MaterialExpressionMaterialLayerOutput : MaterialExpressionFunctionOutput
    {
        public MaterialExpressionMaterialLayerOutput(nint addr) : base(addr) { }
        public MaterialExpressionMaterialLayerOutput() : base(0) { }
    }
    public class MaterialExpressionMaterialFunctionCall : MaterialExpression
    {
        public MaterialExpressionMaterialFunctionCall(nint addr) : base(addr) { }
        public MaterialExpressionMaterialFunctionCall() : base(0) { }
        public MaterialFunctionInterface MaterialFunction { get { return this[nameof(MaterialFunction)].As<MaterialFunctionInterface>(); } set { this["MaterialFunction"] = value; } }
        public MaterialParameterInfo FunctionParameterInfo { get { return this[nameof(FunctionParameterInfo)].As<MaterialParameterInfo>(); } set { this["FunctionParameterInfo"] = value; } }
    }
    public class MaterialExpressionMaterialAttributeLayers : MaterialExpression
    {
        public MaterialExpressionMaterialAttributeLayers(nint addr) : base(addr) { }
        public MaterialExpressionMaterialAttributeLayers() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
        public MaterialAttributesInput Input { get { return this[nameof(Input)].As<MaterialAttributesInput>(); } set { this["Input"] = value; } }
        public MaterialLayersFunctions DefaultLayers { get { return this[nameof(DefaultLayers)].As<MaterialLayersFunctions>(); } set { this["DefaultLayers"] = value; } }
        public Array<MaterialExpressionMaterialFunctionCall> LayerCallers { get { return new Array<MaterialExpressionMaterialFunctionCall>(this["LayerCallers"]); } set { this["LayerCallers"] = value; } }
        public int NumActiveLayerCallers { get { return this["NumActiveLayerCallers"].GetValue<int>(); } set { this["NumActiveLayerCallers"].SetValue<int>(value); } }
        public Array<MaterialExpressionMaterialFunctionCall> BlendCallers { get { return new Array<MaterialExpressionMaterialFunctionCall>(this["BlendCallers"]); } set { this["BlendCallers"] = value; } }
        public int NumActiveBlendCallers { get { return this["NumActiveBlendCallers"].GetValue<int>(); } set { this["NumActiveBlendCallers"].SetValue<int>(value); } }
        public bool bIsLayerGraphBuilt { get { return this["bIsLayerGraphBuilt"].Flag; } set { this["bIsLayerGraphBuilt"].Flag = value; } }
    }
    public class MaterialExpressionMapARPassthroughCameraUV : MaterialExpression
    {
        public MaterialExpressionMapARPassthroughCameraUV(nint addr) : base(addr) { }
        public MaterialExpressionMapARPassthroughCameraUV() : base(0) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
    }
    public class MaterialExpressionMakeMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionMakeMaterialAttributes(nint addr) : base(addr) { }
        public MaterialExpressionMakeMaterialAttributes() : base(0) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Anisotropy { get { return this[nameof(Anisotropy)].As<ExpressionInput>(); } set { this["Anisotropy"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
        public ExpressionInput opacityMask { get { return this[nameof(opacityMask)].As<ExpressionInput>(); } set { this["opacityMask"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput Tangent { get { return this[nameof(Tangent)].As<ExpressionInput>(); } set { this["Tangent"] = value; } }
        public ExpressionInput WorldPositionOffset { get { return this[nameof(WorldPositionOffset)].As<ExpressionInput>(); } set { this["WorldPositionOffset"] = value; } }
        public ExpressionInput WorldDisplacement { get { return this[nameof(WorldDisplacement)].As<ExpressionInput>(); } set { this["WorldDisplacement"] = value; } }
        public ExpressionInput TessellationMultiplier { get { return this[nameof(TessellationMultiplier)].As<ExpressionInput>(); } set { this["TessellationMultiplier"] = value; } }
        public ExpressionInput SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<ExpressionInput>(); } set { this["SubsurfaceColor"] = value; } }
        public ExpressionInput ClearCoat { get { return this[nameof(ClearCoat)].As<ExpressionInput>(); } set { this["ClearCoat"] = value; } }
        public ExpressionInput ClearCoatRoughness { get { return this[nameof(ClearCoatRoughness)].As<ExpressionInput>(); } set { this["ClearCoatRoughness"] = value; } }
        public ExpressionInput AmbientOcclusion { get { return this[nameof(AmbientOcclusion)].As<ExpressionInput>(); } set { this["AmbientOcclusion"] = value; } }
        public ExpressionInput Refraction { get { return this[nameof(Refraction)].As<ExpressionInput>(); } set { this["Refraction"] = value; } }
        public ExpressionInput CustomizedUVs { get { return this[nameof(CustomizedUVs)].As<ExpressionInput>(); } set { this["CustomizedUVs"] = value; } }
        public ExpressionInput PixelDepthOffset { get { return this[nameof(PixelDepthOffset)].As<ExpressionInput>(); } set { this["PixelDepthOffset"] = value; } }
        public ExpressionInput ShadingModel { get { return this[nameof(ShadingModel)].As<ExpressionInput>(); } set { this["ShadingModel"] = value; } }
    }
    public class MaterialExpressionLogarithm2 : MaterialExpression
    {
        public MaterialExpressionLogarithm2(nint addr) : base(addr) { }
        public MaterialExpressionLogarithm2() : base(0) { }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionLogarithm10 : MaterialExpression
    {
        public MaterialExpressionLogarithm10(nint addr) : base(addr) { }
        public MaterialExpressionLogarithm10() : base(0) { }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionLinearInterpolate : MaterialExpression
    {
        public MaterialExpressionLinearInterpolate(nint addr) : base(addr) { }
        public MaterialExpressionLinearInterpolate() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput alpha { get { return this[nameof(alpha)].As<ExpressionInput>(); } set { this["alpha"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
        public float ConstAlpha { get { return this["ConstAlpha"].GetValue<float>(); } set { this["ConstAlpha"].SetValue<float>(value); } }
    }
    public class MaterialExpressionLightVector : MaterialExpression
    {
        public MaterialExpressionLightVector(nint addr) : base(addr) { }
        public MaterialExpressionLightVector() : base(0) { }
    }
    public class MaterialExpressionLightmassReplace : MaterialExpression
    {
        public MaterialExpressionLightmassReplace(nint addr) : base(addr) { }
        public MaterialExpressionLightmassReplace() : base(0) { }
        public ExpressionInput Realtime { get { return this[nameof(Realtime)].As<ExpressionInput>(); } set { this["Realtime"] = value; } }
        public ExpressionInput Lightmass { get { return this[nameof(Lightmass)].As<ExpressionInput>(); } set { this["Lightmass"] = value; } }
    }
    public class MaterialExpressionLightmapUVs : MaterialExpression
    {
        public MaterialExpressionLightmapUVs(nint addr) : base(addr) { }
        public MaterialExpressionLightmapUVs() : base(0) { }
    }
    public class MaterialExpressionInverseLinearInterpolate : MaterialExpression
    {
        public MaterialExpressionInverseLinearInterpolate(nint addr) : base(addr) { }
        public MaterialExpressionInverseLinearInterpolate() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
        public float ConstValue { get { return this["ConstValue"].GetValue<float>(); } set { this["ConstValue"].SetValue<float>(value); } }
        public bool bClampResult { get { return this["bClampResult"].Flag; } set { this["bClampResult"].Flag = value; } }
    }
    public class MaterialExpressionIf : MaterialExpression
    {
        public MaterialExpressionIf(nint addr) : base(addr) { }
        public MaterialExpressionIf() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput AGreaterThanB { get { return this[nameof(AGreaterThanB)].As<ExpressionInput>(); } set { this["AGreaterThanB"] = value; } }
        public ExpressionInput AEqualsB { get { return this[nameof(AEqualsB)].As<ExpressionInput>(); } set { this["AEqualsB"] = value; } }
        public ExpressionInput ALessThanB { get { return this[nameof(ALessThanB)].As<ExpressionInput>(); } set { this["ALessThanB"] = value; } }
        public float EqualsThreshold { get { return this["EqualsThreshold"].GetValue<float>(); } set { this["EqualsThreshold"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
        public float ConstAEqualsB { get { return this["ConstAEqualsB"].GetValue<float>(); } set { this["ConstAEqualsB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionHairColor : MaterialExpression
    {
        public MaterialExpressionHairColor(nint addr) : base(addr) { }
        public MaterialExpressionHairColor() : base(0) { }
        public ExpressionInput Melanin { get { return this[nameof(Melanin)].As<ExpressionInput>(); } set { this["Melanin"] = value; } }
        public ExpressionInput Redness { get { return this[nameof(Redness)].As<ExpressionInput>(); } set { this["Redness"] = value; } }
        public ExpressionInput DyeColor { get { return this[nameof(DyeColor)].As<ExpressionInput>(); } set { this["DyeColor"] = value; } }
    }
    public class MaterialExpressionHairAttributes : MaterialExpression
    {
        public MaterialExpressionHairAttributes(nint addr) : base(addr) { }
        public MaterialExpressionHairAttributes() : base(0) { }
        public bool bUseTangentSpace { get { return this["bUseTangentSpace"].Flag; } set { this["bUseTangentSpace"].Flag = value; } }
    }
    public class MaterialExpressionGIReplace : MaterialExpression
    {
        public MaterialExpressionGIReplace(nint addr) : base(addr) { }
        public MaterialExpressionGIReplace() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput StaticIndirect { get { return this[nameof(StaticIndirect)].As<ExpressionInput>(); } set { this["StaticIndirect"] = value; } }
        public ExpressionInput DynamicIndirect { get { return this[nameof(DynamicIndirect)].As<ExpressionInput>(); } set { this["DynamicIndirect"] = value; } }
    }
    public class MaterialExpressionGetMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionGetMaterialAttributes(nint addr) : base(addr) { }
        public MaterialExpressionGetMaterialAttributes() : base(0) { }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> AttributeGetTypes { get { return new Array<SDK.Script.CoreUObject.Guid>(this["AttributeGetTypes"]); } set { this["AttributeGetTypes"] = value; } }
    }
    public class MaterialExpressionFunctionOutput : MaterialExpression
    {
        public MaterialExpressionFunctionOutput(nint addr) : base(addr) { }
        public MaterialExpressionFunctionOutput() : base(0) { }
        public string OutputName { get { return this["OutputName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public int SortPriority { get { return this["SortPriority"].GetValue<int>(); } set { this["SortPriority"].SetValue<int>(value); } }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public bool bLastPreviewed { get { return this["bLastPreviewed"].Flag; } set { this["bLastPreviewed"].Flag = value; } }
        public SDK.Script.CoreUObject.Guid ID { get { return this[nameof(ID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ID"] = value; } }
    }
    public class MaterialExpressionFunctionInput : MaterialExpression
    {
        public MaterialExpressionFunctionInput(nint addr) : base(addr) { }
        public MaterialExpressionFunctionInput() : base(0) { }
        public ExpressionInput Preview { get { return this[nameof(Preview)].As<ExpressionInput>(); } set { this["Preview"] = value; } }
        public string InputName { get { return this["InputName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ID { get { return this[nameof(ID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ID"] = value; } }
        public byte InputType { get { return this["InputType"].GetValue<byte>(); } set { this["InputType"].SetValue<byte>(value); } }
        public Vector4 PreviewValue { get { return this[nameof(PreviewValue)].As<Vector4>(); } set { this["PreviewValue"] = value; } }
        public bool bUsePreviewValueAsDefault { get { return this["bUsePreviewValueAsDefault"].Flag; } set { this["bUsePreviewValueAsDefault"].Flag = value; } }
        public int SortPriority { get { return this["SortPriority"].GetValue<int>(); } set { this["SortPriority"].SetValue<int>(value); } }
        public bool bCompilingFunctionPreview { get { return this["bCompilingFunctionPreview"].Flag; } set { this["bCompilingFunctionPreview"].Flag = value; } }
    }
    public class MaterialExpressionFresnel : MaterialExpression
    {
        public MaterialExpressionFresnel(nint addr) : base(addr) { }
        public MaterialExpressionFresnel() : base(0) { }
        public ExpressionInput ExponentIn { get { return this[nameof(ExponentIn)].As<ExpressionInput>(); } set { this["ExponentIn"] = value; } }
        public float Exponent { get { return this["Exponent"].GetValue<float>(); } set { this["Exponent"].SetValue<float>(value); } }
        public ExpressionInput BaseReflectFractionIn { get { return this[nameof(BaseReflectFractionIn)].As<ExpressionInput>(); } set { this["BaseReflectFractionIn"] = value; } }
        public float BaseReflectFraction { get { return this["BaseReflectFraction"].GetValue<float>(); } set { this["BaseReflectFraction"].SetValue<float>(value); } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
    }
    public class MaterialExpressionFrac : MaterialExpression
    {
        public MaterialExpressionFrac(nint addr) : base(addr) { }
        public MaterialExpressionFrac() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionFontSampleParameter : MaterialExpressionFontSample
    {
        public MaterialExpressionFontSampleParameter(nint addr) : base(addr) { }
        public MaterialExpressionFontSampleParameter() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
        public string Group { get { return this["Group"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MaterialExpressionFontSample : MaterialExpression
    {
        public MaterialExpressionFontSample(nint addr) : base(addr) { }
        public MaterialExpressionFontSample() : base(0) { }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public int FontTexturePage { get { return this["FontTexturePage"].GetValue<int>(); } set { this["FontTexturePage"].SetValue<int>(value); } }
    }
    public class MaterialExpressionFmod : MaterialExpression
    {
        public MaterialExpressionFmod(nint addr) : base(addr) { }
        public MaterialExpressionFmod() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionFloor : MaterialExpression
    {
        public MaterialExpressionFloor(nint addr) : base(addr) { }
        public MaterialExpressionFloor() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionFeatureLevelSwitch : MaterialExpression
    {
        public MaterialExpressionFeatureLevelSwitch(nint addr) : base(addr) { }
        public MaterialExpressionFeatureLevelSwitch() : base(0) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
    }
    public class MaterialExpressionEyeAdaptation : MaterialExpression
    {
        public MaterialExpressionEyeAdaptation(nint addr) : base(addr) { }
        public MaterialExpressionEyeAdaptation() : base(0) { }
    }
    public class MaterialExpressionDynamicParameter : MaterialExpression
    {
        public MaterialExpressionDynamicParameter(nint addr) : base(addr) { }
        public MaterialExpressionDynamicParameter() : base(0) { }
        public List<string> ParamNames { get { return this["ParamNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
        public uint ParameterIndex { get { return this["ParameterIndex"].GetValue<uint>(); } set { this["ParameterIndex"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionDotProduct : MaterialExpression
    {
        public MaterialExpressionDotProduct(nint addr) : base(addr) { }
        public MaterialExpressionDotProduct() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionDivide : MaterialExpression
    {
        public MaterialExpressionDivide(nint addr) : base(addr) { }
        public MaterialExpressionDivide() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionDistanceToNearestSurface : MaterialExpression
    {
        public MaterialExpressionDistanceToNearestSurface(nint addr) : base(addr) { }
        public MaterialExpressionDistanceToNearestSurface() : base(0) { }
        public ExpressionInput position { get { return this[nameof(position)].As<ExpressionInput>(); } set { this["position"] = value; } }
    }
    public class MaterialExpressionDistanceFieldsRenderingSwitch : MaterialExpression
    {
        public MaterialExpressionDistanceFieldsRenderingSwitch(nint addr) : base(addr) { }
        public MaterialExpressionDistanceFieldsRenderingSwitch() : base(0) { }
        public ExpressionInput No { get { return this[nameof(No)].As<ExpressionInput>(); } set { this["No"] = value; } }
        public ExpressionInput Yes { get { return this[nameof(Yes)].As<ExpressionInput>(); } set { this["Yes"] = value; } }
    }
    public class MaterialExpressionDistanceFieldGradient : MaterialExpression
    {
        public MaterialExpressionDistanceFieldGradient(nint addr) : base(addr) { }
        public MaterialExpressionDistanceFieldGradient() : base(0) { }
        public ExpressionInput position { get { return this[nameof(position)].As<ExpressionInput>(); } set { this["position"] = value; } }
    }
    public class MaterialExpressionDistanceCullFade : MaterialExpression
    {
        public MaterialExpressionDistanceCullFade(nint addr) : base(addr) { }
        public MaterialExpressionDistanceCullFade() : base(0) { }
    }
    public class MaterialExpressionDistance : MaterialExpression
    {
        public MaterialExpressionDistance(nint addr) : base(addr) { }
        public MaterialExpressionDistance() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionDesaturation : MaterialExpression
    {
        public MaterialExpressionDesaturation(nint addr) : base(addr) { }
        public MaterialExpressionDesaturation() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Fraction { get { return this[nameof(Fraction)].As<ExpressionInput>(); } set { this["Fraction"] = value; } }
        public LinearColor LuminanceFactors { get { return this[nameof(LuminanceFactors)].As<LinearColor>(); } set { this["LuminanceFactors"] = value; } }
    }
    public class MaterialExpressionDeriveNormalZ : MaterialExpression
    {
        public MaterialExpressionDeriveNormalZ(nint addr) : base(addr) { }
        public MaterialExpressionDeriveNormalZ() : base(0) { }
        public ExpressionInput InXY { get { return this[nameof(InXY)].As<ExpressionInput>(); } set { this["InXY"] = value; } }
    }
    public class MaterialExpressionDepthOfFieldFunction : MaterialExpression
    {
        public MaterialExpressionDepthOfFieldFunction(nint addr) : base(addr) { }
        public MaterialExpressionDepthOfFieldFunction() : base(0) { }
        public byte FunctionValue { get { return this["FunctionValue"].GetValue<byte>(); } set { this["FunctionValue"].SetValue<byte>(value); } }
        public ExpressionInput Depth { get { return this[nameof(Depth)].As<ExpressionInput>(); } set { this["Depth"] = value; } }
    }
    public class MaterialExpressionDepthFade : MaterialExpression
    {
        public MaterialExpressionDepthFade(nint addr) : base(addr) { }
        public MaterialExpressionDepthFade() : base(0) { }
        public ExpressionInput InOpacity { get { return this[nameof(InOpacity)].As<ExpressionInput>(); } set { this["InOpacity"] = value; } }
        public ExpressionInput FadeDistance { get { return this[nameof(FadeDistance)].As<ExpressionInput>(); } set { this["FadeDistance"] = value; } }
        public float OpacityDefault { get { return this["OpacityDefault"].GetValue<float>(); } set { this["OpacityDefault"].SetValue<float>(value); } }
        public float FadeDistanceDefault { get { return this["FadeDistanceDefault"].GetValue<float>(); } set { this["FadeDistanceDefault"].SetValue<float>(value); } }
    }
    public class MaterialExpressionDeltaTime : MaterialExpression
    {
        public MaterialExpressionDeltaTime(nint addr) : base(addr) { }
        public MaterialExpressionDeltaTime() : base(0) { }
    }
    public class MaterialExpressionDecalMipmapLevel : MaterialExpression
    {
        public MaterialExpressionDecalMipmapLevel(nint addr) : base(addr) { }
        public MaterialExpressionDecalMipmapLevel() : base(0) { }
        public ExpressionInput TextureSize { get { return this[nameof(TextureSize)].As<ExpressionInput>(); } set { this["TextureSize"] = value; } }
        public float ConstWidth { get { return this["ConstWidth"].GetValue<float>(); } set { this["ConstWidth"].SetValue<float>(value); } }
        public float ConstHeight { get { return this["ConstHeight"].GetValue<float>(); } set { this["ConstHeight"].SetValue<float>(value); } }
    }
    public class MaterialExpressionDecalLifetimeOpacity : MaterialExpression
    {
        public MaterialExpressionDecalLifetimeOpacity(nint addr) : base(addr) { }
        public MaterialExpressionDecalLifetimeOpacity() : base(0) { }
    }
    public class MaterialExpressionDecalDerivative : MaterialExpression
    {
        public MaterialExpressionDecalDerivative(nint addr) : base(addr) { }
        public MaterialExpressionDecalDerivative() : base(0) { }
    }
    public class MaterialExpressionDDY : MaterialExpression
    {
        public MaterialExpressionDDY(nint addr) : base(addr) { }
        public MaterialExpressionDDY() : base(0) { }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionDDX : MaterialExpression
    {
        public MaterialExpressionDDX(nint addr) : base(addr) { }
        public MaterialExpressionDDX() : base(0) { }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionCustom : MaterialExpression
    {
        public MaterialExpressionCustom(nint addr) : base(addr) { }
        public MaterialExpressionCustom() : base(0) { }
        public string Code { get { return this["Code"].ToString(); } set { /* String properties are read-only */ } }
        public byte OutputType { get { return this["OutputType"].GetValue<byte>(); } set { this["OutputType"].SetValue<byte>(value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public Array<CustomInput> Inputs { get { return new Array<CustomInput>(this["Inputs"]); } set { this["Inputs"] = value; } }
        public Array<CustomOutput> AdditionalOutputs { get { return new Array<CustomOutput>(this["AdditionalOutputs"]); } set { this["AdditionalOutputs"] = value; } }
        public Array<CustomDefine> AdditionalDefines { get { return new Array<CustomDefine>(this["AdditionalDefines"]); } set { this["AdditionalDefines"] = value; } }
        public List<string> IncludeFilePaths { get { return this["IncludeFilePaths"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class MaterialExpressionCurveAtlasRowParameter : MaterialExpressionScalarParameter
    {
        public MaterialExpressionCurveAtlasRowParameter(nint addr) : base(addr) { }
        public MaterialExpressionCurveAtlasRowParameter() : base(0) { }
        public CurveLinearColor Curve { get { return this[nameof(Curve)].As<CurveLinearColor>(); } set { this["Curve"] = value; } }
        public CurveLinearColorAtlas Atlas { get { return this[nameof(Atlas)].As<CurveLinearColorAtlas>(); } set { this["Atlas"] = value; } }
        public ExpressionInput InputTime { get { return this[nameof(InputTime)].As<ExpressionInput>(); } set { this["InputTime"] = value; } }
    }
    public class MaterialExpressionScalarParameter : MaterialExpressionParameter
    {
        public MaterialExpressionScalarParameter(nint addr) : base(addr) { }
        public MaterialExpressionScalarParameter() : base(0) { }
        public float DefaultValue { get { return this["DefaultValue"].GetValue<float>(); } set { this["DefaultValue"].SetValue<float>(value); } }
        public bool bUseCustomPrimitiveData { get { return this["bUseCustomPrimitiveData"].Flag; } set { this["bUseCustomPrimitiveData"].Flag = value; } }
        public byte PrimitiveDataIndex { get { return this["PrimitiveDataIndex"].GetValue<byte>(); } set { this["PrimitiveDataIndex"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionCrossProduct : MaterialExpression
    {
        public MaterialExpressionCrossProduct(nint addr) : base(addr) { }
        public MaterialExpressionCrossProduct() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionCosine : MaterialExpression
    {
        public MaterialExpressionCosine(nint addr) : base(addr) { }
        public MaterialExpressionCosine() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this["Period"].GetValue<float>(); } set { this["Period"].SetValue<float>(value); } }
    }
    public class MaterialExpressionConstantBiasScale : MaterialExpression
    {
        public MaterialExpressionConstantBiasScale(nint addr) : base(addr) { }
        public MaterialExpressionConstantBiasScale() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Bias { get { return this["Bias"].GetValue<float>(); } set { this["Bias"].SetValue<float>(value); } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
    }
    public class MaterialExpressionConstant4Vector : MaterialExpression
    {
        public MaterialExpressionConstant4Vector(nint addr) : base(addr) { }
        public MaterialExpressionConstant4Vector() : base(0) { }
        public LinearColor Constant { get { return this[nameof(Constant)].As<LinearColor>(); } set { this["Constant"] = value; } }
    }
    public class MaterialExpressionConstant3Vector : MaterialExpression
    {
        public MaterialExpressionConstant3Vector(nint addr) : base(addr) { }
        public MaterialExpressionConstant3Vector() : base(0) { }
        public LinearColor Constant { get { return this[nameof(Constant)].As<LinearColor>(); } set { this["Constant"] = value; } }
    }
    public class MaterialExpressionConstant2Vector : MaterialExpression
    {
        public MaterialExpressionConstant2Vector(nint addr) : base(addr) { }
        public MaterialExpressionConstant2Vector() : base(0) { }
        public float R { get { return this["R"].GetValue<float>(); } set { this["R"].SetValue<float>(value); } }
        public float G { get { return this["G"].GetValue<float>(); } set { this["G"].SetValue<float>(value); } }
    }
    public class MaterialExpressionConstant : MaterialExpression
    {
        public MaterialExpressionConstant(nint addr) : base(addr) { }
        public MaterialExpressionConstant() : base(0) { }
        public float R { get { return this["R"].GetValue<float>(); } set { this["R"].SetValue<float>(value); } }
    }
    public class MaterialExpressionComponentMask : MaterialExpression
    {
        public MaterialExpressionComponentMask(nint addr) : base(addr) { }
        public MaterialExpressionComponentMask() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public bool R { get { return this["R"].Flag; } set { this["R"].Flag = value; } }
        public bool G { get { return this["G"].Flag; } set { this["G"].Flag = value; } }
        public bool B { get { return this["B"].Flag; } set { this["B"].Flag = value; } }
        public bool A { get { return this["A"].Flag; } set { this["A"].Flag = value; } }
    }
    public class MaterialExpressionComment : MaterialExpression
    {
        public MaterialExpressionComment(nint addr) : base(addr) { }
        public MaterialExpressionComment() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public string Text { get { return this["Text"].ToString(); } set { /* String properties are read-only */ } }
        public LinearColor CommentColor { get { return this[nameof(CommentColor)].As<LinearColor>(); } set { this["CommentColor"] = value; } }
        public int FontSize { get { return this["FontSize"].GetValue<int>(); } set { this["FontSize"].SetValue<int>(value); } }
    }
    public class MaterialExpressionCollectionParameter : MaterialExpression
    {
        public MaterialExpressionCollectionParameter(nint addr) : base(addr) { }
        public MaterialExpressionCollectionParameter() : base(0) { }
        public MaterialParameterCollection Collection { get { return this[nameof(Collection)].As<MaterialParameterCollection>(); } set { this["Collection"] = value; } }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ParameterId { get { return this[nameof(ParameterId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ParameterId"] = value; } }
    }
    public class MaterialExpressionCloudSampleAttribute : MaterialExpression
    {
        public MaterialExpressionCloudSampleAttribute(nint addr) : base(addr) { }
        public MaterialExpressionCloudSampleAttribute() : base(0) { }
    }
    public class MaterialExpressionClearCoatNormalCustomOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionClearCoatNormalCustomOutput(nint addr) : base(addr) { }
        public MaterialExpressionClearCoatNormalCustomOutput() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionClamp : MaterialExpression
    {
        public MaterialExpressionClamp(nint addr) : base(addr) { }
        public MaterialExpressionClamp() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Min { get { return this[nameof(Min)].As<ExpressionInput>(); } set { this["Min"] = value; } }
        public ExpressionInput Max { get { return this[nameof(Max)].As<ExpressionInput>(); } set { this["Max"] = value; } }
        public byte ClampMode { get { return this["ClampMode"].GetValue<byte>(); } set { this["ClampMode"].SetValue<byte>(value); } }
        public float MinDefault { get { return this["MinDefault"].GetValue<float>(); } set { this["MinDefault"].SetValue<float>(value); } }
        public float MaxDefault { get { return this["MaxDefault"].GetValue<float>(); } set { this["MaxDefault"].SetValue<float>(value); } }
    }
    public class MaterialExpressionChannelMaskParameter : MaterialExpressionVectorParameter
    {
        public MaterialExpressionChannelMaskParameter(nint addr) : base(addr) { }
        public MaterialExpressionChannelMaskParameter() : base(0) { }
        public byte MaskChannel { get { return this["MaskChannel"].GetValue<byte>(); } set { this["MaskChannel"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionVectorParameter : MaterialExpressionParameter
    {
        public MaterialExpressionVectorParameter(nint addr) : base(addr) { }
        public MaterialExpressionVectorParameter() : base(0) { }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
        public bool bUseCustomPrimitiveData { get { return this["bUseCustomPrimitiveData"].Flag; } set { this["bUseCustomPrimitiveData"].Flag = value; } }
        public byte PrimitiveDataIndex { get { return this["PrimitiveDataIndex"].GetValue<byte>(); } set { this["PrimitiveDataIndex"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionParameter : MaterialExpression
    {
        public MaterialExpressionParameter(nint addr) : base(addr) { }
        public MaterialExpressionParameter() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class MaterialExpressionCeil : MaterialExpression
    {
        public MaterialExpressionCeil(nint addr) : base(addr) { }
        public MaterialExpressionCeil() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionCameraVectorWS : MaterialExpression
    {
        public MaterialExpressionCameraVectorWS(nint addr) : base(addr) { }
        public MaterialExpressionCameraVectorWS() : base(0) { }
    }
    public class MaterialExpressionCameraPositionWS : MaterialExpression
    {
        public MaterialExpressionCameraPositionWS(nint addr) : base(addr) { }
        public MaterialExpressionCameraPositionWS() : base(0) { }
    }
    public class MaterialExpressionBumpOffset : MaterialExpression
    {
        public MaterialExpressionBumpOffset(nint addr) : base(addr) { }
        public MaterialExpressionBumpOffset() : base(0) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Height { get { return this[nameof(Height)].As<ExpressionInput>(); } set { this["Height"] = value; } }
        public ExpressionInput HeightRatioInput { get { return this[nameof(HeightRatioInput)].As<ExpressionInput>(); } set { this["HeightRatioInput"] = value; } }
        public float HeightRatio { get { return this["HeightRatio"].GetValue<float>(); } set { this["HeightRatio"].SetValue<float>(value); } }
        public float ReferencePlane { get { return this["ReferencePlane"].GetValue<float>(); } set { this["ReferencePlane"].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this["ConstCoordinate"].GetValue<uint>(); } set { this["ConstCoordinate"].SetValue<uint>(value); } }
    }
    public class MaterialExpressionBreakMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionBreakMaterialAttributes(nint addr) : base(addr) { }
        public MaterialExpressionBreakMaterialAttributes() : base(0) { }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
    }
    public class MaterialExpressionBlendMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionBlendMaterialAttributes(nint addr) : base(addr) { }
        public MaterialExpressionBlendMaterialAttributes() : base(0) { }
        public MaterialAttributesInput A { get { return this[nameof(A)].As<MaterialAttributesInput>(); } set { this["A"] = value; } }
        public MaterialAttributesInput B { get { return this[nameof(B)].As<MaterialAttributesInput>(); } set { this["B"] = value; } }
        public ExpressionInput alpha { get { return this[nameof(alpha)].As<ExpressionInput>(); } set { this["alpha"] = value; } }
        public byte PixelAttributeBlendType { get { return this["PixelAttributeBlendType"].GetValue<byte>(); } set { this["PixelAttributeBlendType"].SetValue<byte>(value); } }
        public byte VertexAttributeBlendType { get { return this["VertexAttributeBlendType"].GetValue<byte>(); } set { this["VertexAttributeBlendType"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionBlackBody : MaterialExpression
    {
        public MaterialExpressionBlackBody(nint addr) : base(addr) { }
        public MaterialExpressionBlackBody() : base(0) { }
        public ExpressionInput Temp { get { return this[nameof(Temp)].As<ExpressionInput>(); } set { this["Temp"] = value; } }
    }
    public class MaterialExpressionBentNormalCustomOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionBentNormalCustomOutput(nint addr) : base(addr) { }
        public MaterialExpressionBentNormalCustomOutput() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionAtmosphericLightVector : MaterialExpression
    {
        public MaterialExpressionAtmosphericLightVector(nint addr) : base(addr) { }
        public MaterialExpressionAtmosphericLightVector() : base(0) { }
    }
    public class MaterialExpressionAtmosphericLightColor : MaterialExpression
    {
        public MaterialExpressionAtmosphericLightColor(nint addr) : base(addr) { }
        public MaterialExpressionAtmosphericLightColor() : base(0) { }
    }
    public class MaterialExpressionAtmosphericFogColor : MaterialExpression
    {
        public MaterialExpressionAtmosphericFogColor(nint addr) : base(addr) { }
        public MaterialExpressionAtmosphericFogColor() : base(0) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionArctangentFast : MaterialExpression
    {
        public MaterialExpressionArctangentFast(nint addr) : base(addr) { }
        public MaterialExpressionArctangentFast() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArctangent2Fast : MaterialExpression
    {
        public MaterialExpressionArctangent2Fast(nint addr) : base(addr) { }
        public MaterialExpressionArctangent2Fast() : base(0) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionArctangent2 : MaterialExpression
    {
        public MaterialExpressionArctangent2(nint addr) : base(addr) { }
        public MaterialExpressionArctangent2() : base(0) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionArctangent : MaterialExpression
    {
        public MaterialExpressionArctangent(nint addr) : base(addr) { }
        public MaterialExpressionArctangent() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArcsineFast : MaterialExpression
    {
        public MaterialExpressionArcsineFast(nint addr) : base(addr) { }
        public MaterialExpressionArcsineFast() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArcsine : MaterialExpression
    {
        public MaterialExpressionArcsine(nint addr) : base(addr) { }
        public MaterialExpressionArcsine() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArccosineFast : MaterialExpression
    {
        public MaterialExpressionArccosineFast(nint addr) : base(addr) { }
        public MaterialExpressionArccosineFast() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArccosine : MaterialExpression
    {
        public MaterialExpressionArccosine(nint addr) : base(addr) { }
        public MaterialExpressionArccosine() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionAppendVector : MaterialExpression
    {
        public MaterialExpressionAppendVector(nint addr) : base(addr) { }
        public MaterialExpressionAppendVector() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionAntialiasedTextureMask : MaterialExpressionTextureSampleParameter2D
    {
        public MaterialExpressionAntialiasedTextureMask(nint addr) : base(addr) { }
        public MaterialExpressionAntialiasedTextureMask() : base(0) { }
        public float Threshold { get { return this["Threshold"].GetValue<float>(); } set { this["Threshold"].SetValue<float>(value); } }
        public byte Channel { get { return this["Channel"].GetValue<byte>(); } set { this["Channel"].SetValue<byte>(value); } }
    }
    public class MaterialExpressionAdd : MaterialExpression
    {
        public MaterialExpressionAdd(nint addr) : base(addr) { }
        public MaterialExpressionAdd() : base(0) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this["ConstA"].GetValue<float>(); } set { this["ConstA"].SetValue<float>(value); } }
        public float ConstB { get { return this["ConstB"].GetValue<float>(); } set { this["ConstB"].SetValue<float>(value); } }
    }
    public class MaterialExpressionActorPositionWS : MaterialExpression
    {
        public MaterialExpressionActorPositionWS(nint addr) : base(addr) { }
        public MaterialExpressionActorPositionWS() : base(0) { }
    }
    public class MaterialExpressionAbs : MaterialExpression
    {
        public MaterialExpressionAbs(nint addr) : base(addr) { }
        public MaterialExpressionAbs() : base(0) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialBillboardComponent : PrimitiveComponent
    {
        public MaterialBillboardComponent(nint addr) : base(addr) { }
        public MaterialBillboardComponent() : base(0) { }
        public Array<MaterialSpriteElement> Elements { get { return new Array<MaterialSpriteElement>(this["Elements"]); } set { this["Elements"] = value; } }
        public void SetElements(UEObject NewElements) { Invoke("SetElements", NewElements); }
        public void _MaterialBillboardComponent(UEObject Elements) { Invoke("MaterialBillboardComponent", Elements); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Material : MaterialInterface
    {
        public Material(nint addr) : base(addr) { }
        public Material() : base(0) { }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public PhysicalMaterialMask PhysMaterialMask { get { return this[nameof(PhysMaterialMask)].As<PhysicalMaterialMask>(); } set { this["PhysMaterialMask"] = value; } }
        public PhysicalMaterial PhysicalMaterialMap { get { return this[nameof(PhysicalMaterialMap)].As<PhysicalMaterial>(); } set { this["PhysicalMaterialMap"] = value; } }
        public ScalarMaterialInput Metallic { get { return this[nameof(Metallic)].As<ScalarMaterialInput>(); } set { this["Metallic"] = value; } }
        public ScalarMaterialInput Specular { get { return this[nameof(Specular)].As<ScalarMaterialInput>(); } set { this["Specular"] = value; } }
        public ScalarMaterialInput Anisotropy { get { return this[nameof(Anisotropy)].As<ScalarMaterialInput>(); } set { this["Anisotropy"] = value; } }
        public VectorMaterialInput Normal { get { return this[nameof(Normal)].As<VectorMaterialInput>(); } set { this["Normal"] = value; } }
        public VectorMaterialInput Tangent { get { return this[nameof(Tangent)].As<VectorMaterialInput>(); } set { this["Tangent"] = value; } }
        public ColorMaterialInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ColorMaterialInput>(); } set { this["EmissiveColor"] = value; } }
        public byte MaterialDomain { get { return this["MaterialDomain"].GetValue<byte>(); } set { this["MaterialDomain"].SetValue<byte>(value); } }
        public byte BlendMode { get { return this["BlendMode"].GetValue<byte>(); } set { this["BlendMode"].SetValue<byte>(value); } }
        public byte DecalBlendMode { get { return this["DecalBlendMode"].GetValue<byte>(); } set { this["DecalBlendMode"].SetValue<byte>(value); } }
        public byte MaterialDecalResponse { get { return this["MaterialDecalResponse"].GetValue<byte>(); } set { this["MaterialDecalResponse"].SetValue<byte>(value); } }
        public byte ShadingModel { get { return this["ShadingModel"].GetValue<byte>(); } set { this["ShadingModel"].SetValue<byte>(value); } }
        public bool bCastDynamicShadowAsMasked { get { return this["bCastDynamicShadowAsMasked"].Flag; } set { this["bCastDynamicShadowAsMasked"].Flag = value; } }
        public MaterialShadingModelField ShadingModels { get { return this[nameof(ShadingModels)].As<MaterialShadingModelField>(); } set { this["ShadingModels"] = value; } }
        public float OpacityMaskClipValue { get { return this["OpacityMaskClipValue"].GetValue<float>(); } set { this["OpacityMaskClipValue"].SetValue<float>(value); } }
        public VectorMaterialInput WorldPositionOffset { get { return this[nameof(WorldPositionOffset)].As<VectorMaterialInput>(); } set { this["WorldPositionOffset"] = value; } }
        public ScalarMaterialInput Refraction { get { return this[nameof(Refraction)].As<ScalarMaterialInput>(); } set { this["Refraction"] = value; } }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
        public ScalarMaterialInput PixelDepthOffset { get { return this[nameof(PixelDepthOffset)].As<ScalarMaterialInput>(); } set { this["PixelDepthOffset"] = value; } }
        public ShadingModelMaterialInput ShadingModelFromMaterialExpression { get { return this[nameof(ShadingModelFromMaterialExpression)].As<ShadingModelMaterialInput>(); } set { this["ShadingModelFromMaterialExpression"] = value; } }
        public bool bEnableSeparateTranslucency { get { return this["bEnableSeparateTranslucency"].Flag; } set { this["bEnableSeparateTranslucency"].Flag = value; } }
        public bool bEnableResponsiveAA { get { return this["bEnableResponsiveAA"].Flag; } set { this["bEnableResponsiveAA"].Flag = value; } }
        public bool bScreenSpaceReflections { get { return this["bScreenSpaceReflections"].Flag; } set { this["bScreenSpaceReflections"].Flag = value; } }
        public bool bContactShadows { get { return this["bContactShadows"].Flag; } set { this["bContactShadows"].Flag = value; } }
        public bool TwoSided { get { return this["TwoSided"].Flag; } set { this["TwoSided"].Flag = value; } }
        public bool DitheredLODTransition { get { return this["DitheredLODTransition"].Flag; } set { this["DitheredLODTransition"].Flag = value; } }
        public bool DitherOpacityMask { get { return this["DitherOpacityMask"].Flag; } set { this["DitherOpacityMask"].Flag = value; } }
        public bool bAllowNegativeEmissiveColor { get { return this["bAllowNegativeEmissiveColor"].Flag; } set { this["bAllowNegativeEmissiveColor"].Flag = value; } }
        public byte TranslucencyLightingMode { get { return this["TranslucencyLightingMode"].GetValue<byte>(); } set { this["TranslucencyLightingMode"].SetValue<byte>(value); } }
        public bool bEnableMobileSeparateTranslucency { get { return this["bEnableMobileSeparateTranslucency"].Flag; } set { this["bEnableMobileSeparateTranslucency"].Flag = value; } }
        public int NumCustomizedUVs { get { return this["NumCustomizedUVs"].GetValue<int>(); } set { this["NumCustomizedUVs"].SetValue<int>(value); } }
        public float TranslucencyDirectionalLightingIntensity { get { return this["TranslucencyDirectionalLightingIntensity"].GetValue<float>(); } set { this["TranslucencyDirectionalLightingIntensity"].SetValue<float>(value); } }
        public float TranslucentShadowDensityScale { get { return this["TranslucentShadowDensityScale"].GetValue<float>(); } set { this["TranslucentShadowDensityScale"].SetValue<float>(value); } }
        public float TranslucentSelfShadowDensityScale { get { return this["TranslucentSelfShadowDensityScale"].GetValue<float>(); } set { this["TranslucentSelfShadowDensityScale"].SetValue<float>(value); } }
        public float TranslucentSelfShadowSecondDensityScale { get { return this["TranslucentSelfShadowSecondDensityScale"].GetValue<float>(); } set { this["TranslucentSelfShadowSecondDensityScale"].SetValue<float>(value); } }
        public float TranslucentSelfShadowSecondOpacity { get { return this["TranslucentSelfShadowSecondOpacity"].GetValue<float>(); } set { this["TranslucentSelfShadowSecondOpacity"].SetValue<float>(value); } }
        public float TranslucentBackscatteringExponent { get { return this["TranslucentBackscatteringExponent"].GetValue<float>(); } set { this["TranslucentBackscatteringExponent"].SetValue<float>(value); } }
        public LinearColor TranslucentMultipleScatteringExtinction { get { return this[nameof(TranslucentMultipleScatteringExtinction)].As<LinearColor>(); } set { this["TranslucentMultipleScatteringExtinction"] = value; } }
        public float TranslucentShadowStartOffset { get { return this["TranslucentShadowStartOffset"].GetValue<float>(); } set { this["TranslucentShadowStartOffset"].SetValue<float>(value); } }
        public bool bDisableDepthTest { get { return this["bDisableDepthTest"].Flag; } set { this["bDisableDepthTest"].Flag = value; } }
        public bool bWriteOnlyAlpha { get { return this["bWriteOnlyAlpha"].Flag; } set { this["bWriteOnlyAlpha"].Flag = value; } }
        public bool bGenerateSphericalParticleNormals { get { return this["bGenerateSphericalParticleNormals"].Flag; } set { this["bGenerateSphericalParticleNormals"].Flag = value; } }
        public bool bTangentSpaceNormal { get { return this["bTangentSpaceNormal"].Flag; } set { this["bTangentSpaceNormal"].Flag = value; } }
        public bool bUseEmissiveForDynamicAreaLighting { get { return this["bUseEmissiveForDynamicAreaLighting"].Flag; } set { this["bUseEmissiveForDynamicAreaLighting"].Flag = value; } }
        public bool bBlockGI { get { return this["bBlockGI"].Flag; } set { this["bBlockGI"].Flag = value; } }
        public bool bUsedAsSpecialEngineMaterial { get { return this["bUsedAsSpecialEngineMaterial"].Flag; } set { this["bUsedAsSpecialEngineMaterial"].Flag = value; } }
        public bool bUsedWithSkeletalMesh { get { return this["bUsedWithSkeletalMesh"].Flag; } set { this["bUsedWithSkeletalMesh"].Flag = value; } }
        public bool bUsedWithEditorCompositing { get { return this["bUsedWithEditorCompositing"].Flag; } set { this["bUsedWithEditorCompositing"].Flag = value; } }
        public bool bUsedWithParticleSprites { get { return this["bUsedWithParticleSprites"].Flag; } set { this["bUsedWithParticleSprites"].Flag = value; } }
        public bool bUsedWithBeamTrails { get { return this["bUsedWithBeamTrails"].Flag; } set { this["bUsedWithBeamTrails"].Flag = value; } }
        public bool bUsedWithMeshParticles { get { return this["bUsedWithMeshParticles"].Flag; } set { this["bUsedWithMeshParticles"].Flag = value; } }
        public bool bUsedWithNiagaraSprites { get { return this["bUsedWithNiagaraSprites"].Flag; } set { this["bUsedWithNiagaraSprites"].Flag = value; } }
        public bool bUsedWithNiagaraRibbons { get { return this["bUsedWithNiagaraRibbons"].Flag; } set { this["bUsedWithNiagaraRibbons"].Flag = value; } }
        public bool bUsedWithNiagaraMeshParticles { get { return this["bUsedWithNiagaraMeshParticles"].Flag; } set { this["bUsedWithNiagaraMeshParticles"].Flag = value; } }
        public bool bUsedWithGeometryCache { get { return this["bUsedWithGeometryCache"].Flag; } set { this["bUsedWithGeometryCache"].Flag = value; } }
        public bool bUsedWithStaticLighting { get { return this["bUsedWithStaticLighting"].Flag; } set { this["bUsedWithStaticLighting"].Flag = value; } }
        public bool bUsedWithMorphTargets { get { return this["bUsedWithMorphTargets"].Flag; } set { this["bUsedWithMorphTargets"].Flag = value; } }
        public bool bUsedWithSplineMeshes { get { return this["bUsedWithSplineMeshes"].Flag; } set { this["bUsedWithSplineMeshes"].Flag = value; } }
        public bool bUsedWithInstancedStaticMeshes { get { return this["bUsedWithInstancedStaticMeshes"].Flag; } set { this["bUsedWithInstancedStaticMeshes"].Flag = value; } }
        public bool bUsedWithGeometryCollections { get { return this["bUsedWithGeometryCollections"].Flag; } set { this["bUsedWithGeometryCollections"].Flag = value; } }
        public bool bUsesDistortion { get { return this["bUsesDistortion"].Flag; } set { this["bUsesDistortion"].Flag = value; } }
        public bool bUsedWithClothing { get { return this["bUsedWithClothing"].Flag; } set { this["bUsedWithClothing"].Flag = value; } }
        public bool bUsedWithWater { get { return this["bUsedWithWater"].Flag; } set { this["bUsedWithWater"].Flag = value; } }
        public bool bUsedWithHairStrands { get { return this["bUsedWithHairStrands"].Flag; } set { this["bUsedWithHairStrands"].Flag = value; } }
        public bool bUsedWithLidarPointCloud { get { return this["bUsedWithLidarPointCloud"].Flag; } set { this["bUsedWithLidarPointCloud"].Flag = value; } }
        public bool bUsedWithVirtualHeightfieldMesh { get { return this["bUsedWithVirtualHeightfieldMesh"].Flag; } set { this["bUsedWithVirtualHeightfieldMesh"].Flag = value; } }
        public bool bUsedWithUI { get { return this["bUsedWithUI"].Flag; } set { this["bUsedWithUI"].Flag = value; } }
        public bool bAutomaticallySetUsageInEditor { get { return this["bAutomaticallySetUsageInEditor"].Flag; } set { this["bAutomaticallySetUsageInEditor"].Flag = value; } }
        public bool bFullyRough { get { return this["bFullyRough"].Flag; } set { this["bFullyRough"].Flag = value; } }
        public bool bUseFullPrecision { get { return this["bUseFullPrecision"].Flag; } set { this["bUseFullPrecision"].Flag = value; } }
        public bool bUseLightmapDirectionality { get { return this["bUseLightmapDirectionality"].Flag; } set { this["bUseLightmapDirectionality"].Flag = value; } }
        public bool bUseAlphaToCoverage { get { return this["bUseAlphaToCoverage"].Flag; } set { this["bUseAlphaToCoverage"].Flag = value; } }
        public bool bForwardRenderUsePreintegratedGFForSimpleIBL { get { return this["bForwardRenderUsePreintegratedGFForSimpleIBL"].Flag; } set { this["bForwardRenderUsePreintegratedGFForSimpleIBL"].Flag = value; } }
        public bool bUseHQForwardReflections { get { return this["bUseHQForwardReflections"].Flag; } set { this["bUseHQForwardReflections"].Flag = value; } }
        public bool bForwardBlendsSkyLightCubemaps { get { return this["bForwardBlendsSkyLightCubemaps"].Flag; } set { this["bForwardBlendsSkyLightCubemaps"].Flag = value; } }
        public bool bUsePlanarForwardReflections { get { return this["bUsePlanarForwardReflections"].Flag; } set { this["bUsePlanarForwardReflections"].Flag = value; } }
        public bool bNormalCurvatureToRoughness { get { return this["bNormalCurvatureToRoughness"].Flag; } set { this["bNormalCurvatureToRoughness"].Flag = value; } }
        public byte D3D11TessellationMode { get { return this["D3D11TessellationMode"].GetValue<byte>(); } set { this["D3D11TessellationMode"].SetValue<byte>(value); } }
        public bool bEnableCrackFreeDisplacement { get { return this["bEnableCrackFreeDisplacement"].Flag; } set { this["bEnableCrackFreeDisplacement"].Flag = value; } }
        public bool bEnableAdaptiveTessellation { get { return this["bEnableAdaptiveTessellation"].Flag; } set { this["bEnableAdaptiveTessellation"].Flag = value; } }
        public bool AllowTranslucentCustomDepthWrites { get { return this["AllowTranslucentCustomDepthWrites"].Flag; } set { this["AllowTranslucentCustomDepthWrites"].Flag = value; } }
        public bool Wireframe { get { return this["Wireframe"].Flag; } set { this["Wireframe"].Flag = value; } }
        public bool WriteDepthToTranslucentMaterial { get { return this["WriteDepthToTranslucentMaterial"].Flag; } set { this["WriteDepthToTranslucentMaterial"].Flag = value; } }
        public byte ShadingRate { get { return this["ShadingRate"].GetValue<byte>(); } set { this["ShadingRate"].SetValue<byte>(value); } }
        public bool bCanMaskedBeAssumedOpaque { get { return this["bCanMaskedBeAssumedOpaque"].Flag; } set { this["bCanMaskedBeAssumedOpaque"].Flag = value; } }
        public bool bIsMasked { get { return this["bIsMasked"].Flag; } set { this["bIsMasked"].Flag = value; } }
        public bool bIsPreviewMaterial { get { return this["bIsPreviewMaterial"].Flag; } set { this["bIsPreviewMaterial"].Flag = value; } }
        public bool bIsFunctionPreviewMaterial { get { return this["bIsFunctionPreviewMaterial"].Flag; } set { this["bIsFunctionPreviewMaterial"].Flag = value; } }
        public bool bUseMaterialAttributes { get { return this["bUseMaterialAttributes"].Flag; } set { this["bUseMaterialAttributes"].Flag = value; } }
        public bool bCastRayTracedShadows { get { return this["bCastRayTracedShadows"].Flag; } set { this["bCastRayTracedShadows"].Flag = value; } }
        public bool bUseTranslucencyVertexFog { get { return this["bUseTranslucencyVertexFog"].Flag; } set { this["bUseTranslucencyVertexFog"].Flag = value; } }
        public bool bApplyCloudFogging { get { return this["bApplyCloudFogging"].Flag; } set { this["bApplyCloudFogging"].Flag = value; } }
        public bool bIsSky { get { return this["bIsSky"].Flag; } set { this["bIsSky"].Flag = value; } }
        public bool bComputeFogPerPixel { get { return this["bComputeFogPerPixel"].Flag; } set { this["bComputeFogPerPixel"].Flag = value; } }
        public bool bOutputTranslucentVelocity { get { return this["bOutputTranslucentVelocity"].Flag; } set { this["bOutputTranslucentVelocity"].Flag = value; } }
        public bool bAllowDevelopmentShaderCompile { get { return this["bAllowDevelopmentShaderCompile"].Flag; } set { this["bAllowDevelopmentShaderCompile"].Flag = value; } }
        public bool bIsMaterialEditorStatsMaterial { get { return this["bIsMaterialEditorStatsMaterial"].Flag; } set { this["bIsMaterialEditorStatsMaterial"].Flag = value; } }
        public byte BlendableLocation { get { return this["BlendableLocation"].GetValue<byte>(); } set { this["BlendableLocation"].SetValue<byte>(value); } }
        public bool BlendableOutputAlpha { get { return this["BlendableOutputAlpha"].Flag; } set { this["BlendableOutputAlpha"].Flag = value; } }
        public bool bEnableStencilTest { get { return this["bEnableStencilTest"].Flag; } set { this["bEnableStencilTest"].Flag = value; } }
        public byte StencilCompare { get { return this["StencilCompare"].GetValue<byte>(); } set { this["StencilCompare"].SetValue<byte>(value); } }
        public byte StencilRefValue { get { return this["StencilRefValue"].GetValue<byte>(); } set { this["StencilRefValue"].SetValue<byte>(value); } }
        public byte RefractionMode { get { return this["RefractionMode"].GetValue<byte>(); } set { this["RefractionMode"].SetValue<byte>(value); } }
        public int BlendablePriority { get { return this["BlendablePriority"].GetValue<int>(); } set { this["BlendablePriority"].SetValue<int>(value); } }
        public bool bIsBlendable { get { return this["bIsBlendable"].Flag; } set { this["bIsBlendable"].Flag = value; } }
        public uint UsageFlagWarnings { get { return this["UsageFlagWarnings"].GetValue<uint>(); } set { this["UsageFlagWarnings"].SetValue<uint>(value); } }
        public float RefractionDepthBias { get { return this["RefractionDepthBias"].GetValue<float>(); } set { this["RefractionDepthBias"].SetValue<float>(value); } }
        public SDK.Script.CoreUObject.Guid StateId { get { return this[nameof(StateId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["StateId"] = value; } }
        public float MaxDisplacement { get { return this["MaxDisplacement"].GetValue<float>(); } set { this["MaxDisplacement"].SetValue<float>(value); } }
        public MaterialCachedExpressionData CachedExpressionData { get { return this[nameof(CachedExpressionData)].As<MaterialCachedExpressionData>(); } set { this["CachedExpressionData"] = value; } }
    }
    public class MapBuildDataRegistry : UEObject
    {
        public MapBuildDataRegistry(nint addr) : base(addr) { }
        public MapBuildDataRegistry() : base(0) { }
        public byte LevelLightingQuality { get { return this["LevelLightingQuality"].GetValue<byte>(); } set { this["LevelLightingQuality"].SetValue<byte>(value); } }
    }
    public class LODSyncInterface : Interface
    {
        public LODSyncInterface(nint addr) : base(addr) { }
        public LODSyncInterface() : base(0) { }
    }
    public class LODSyncComponent : ActorComponent
    {
        public LODSyncComponent(nint addr) : base(addr) { }
        public LODSyncComponent() : base(0) { }
        public int NumLODs { get { return this["NumLODs"].GetValue<int>(); } set { this["NumLODs"].SetValue<int>(value); } }
        public int ForcedLOD { get { return this["ForcedLOD"].GetValue<int>(); } set { this["ForcedLOD"].SetValue<int>(value); } }
        public Array<ComponentSync> ComponentsToSync { get { return new Array<ComponentSync>(this["ComponentsToSync"]); } set { this["ComponentsToSync"] = value; } }
        public UEObject CustomLODMapping { get { return this["CustomLODMapping"]; } set { this["CustomLODMapping"] = value; } }
        public int CurrentLOD { get { return this["CurrentLOD"].GetValue<int>(); } set { this["CurrentLOD"].SetValue<int>(value); } }
        public int CurrentNumLODs { get { return this["CurrentNumLODs"].GetValue<int>(); } set { this["CurrentNumLODs"].SetValue<int>(value); } }
        public Array<PrimitiveComponent> DriveComponents { get { return new Array<PrimitiveComponent>(this["DriveComponents"]); } set { this["DriveComponents"] = value; } }
        public Array<PrimitiveComponent> SubComponents { get { return new Array<PrimitiveComponent>(this["SubComponents"]); } set { this["SubComponents"] = value; } }
        public UEObject GetLODSyncDebugText() { return InvokeUEObject("GetLODSyncDebugText"); }
        public void _LODSyncComponent(UEObject NumLODs, UEObject ForcedLOD, UEObject ComponentsToSync, UEObject CustomLODMapping, UEObject CurrentLOD, UEObject CurrentNumLODs, UEObject DriveComponents, UEObject SubComponents) { Invoke("LODSyncComponent", NumLODs, ForcedLOD, ComponentsToSync, CustomLODMapping, CurrentLOD, CurrentNumLODs, DriveComponents, SubComponents); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LODActor : Actor
    {
        public LODActor(nint addr) : base(addr) { }
        public LODActor() : base(0) { }
        public StaticMeshComponent StaticMeshComponent { get { return this[nameof(StaticMeshComponent)].As<StaticMeshComponent>(); } set { this["StaticMeshComponent"] = value; } }
        public UEObject InstancedStaticMeshComponents { get { return this["InstancedStaticMeshComponents"]; } set { this["InstancedStaticMeshComponents"] = value; } }
        public HLODProxy Proxy { get { return this[nameof(Proxy)].As<HLODProxy>(); } set { this["Proxy"] = value; } }
        public string Key { get { return this["Key"].ToString(); } set { /* String properties are read-only */ } }
        public float LODDrawDistance { get { return this["LODDrawDistance"].GetValue<float>(); } set { this["LODDrawDistance"].SetValue<float>(value); } }
        public int LODLevel { get { return this["LODLevel"].GetValue<int>(); } set { this["LODLevel"].SetValue<int>(value); } }
        public Array<Actor> SubActors { get { return new Array<Actor>(this["SubActors"]); } set { this["SubActors"] = value; } }
        public byte CachedNumHLODLevels { get { return this["CachedNumHLODLevels"].GetValue<byte>(); } set { this["CachedNumHLODLevels"].SetValue<byte>(value); } }
    }
    public class LocalPlayerSubsystem : Subsystem
    {
        public LocalPlayerSubsystem(nint addr) : base(addr) { }
        public LocalPlayerSubsystem() : base(0) { }
    }
    public class LocalLightComponent : LightComponent
    {
        public LocalLightComponent(nint addr) : base(addr) { }
        public LocalLightComponent() : base(0) { }
        public ELightUnits IntensityUnits { get { return (ELightUnits)this["IntensityUnits"].GetValue<int>(); } set { this["IntensityUnits"].SetValue<int>((int)value); } }
        public float Radius { get { return this["Radius"].GetValue<float>(); } set { this["Radius"].SetValue<float>(value); } }
        public float AttenuationRadius { get { return this["AttenuationRadius"].GetValue<float>(); } set { this["AttenuationRadius"].SetValue<float>(value); } }
        public LightmassPointLightSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPointLightSettings>(); } set { this["LightmassSettings"] = value; } }
        public void SetIntensityUnits(UEObject NewIntensityUnits) { Invoke("SetIntensityUnits", NewIntensityUnits); }
        public void _LocalLightComponent(UEObject IntensityUnits, UEObject Radius, UEObject AttenuationRadius, UEObject LightmassSettings) { Invoke("LocalLightComponent", IntensityUnits, Radius, AttenuationRadius, LightmassSettings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LineBatchComponent : PrimitiveComponent
    {
        public LineBatchComponent(nint addr) : base(addr) { }
        public LineBatchComponent() : base(0) { }
    }
    public class LightmassPrimitiveSettingsObject : UEObject
    {
        public LightmassPrimitiveSettingsObject(nint addr) : base(addr) { }
        public LightmassPrimitiveSettingsObject() : base(0) { }
        public LightmassPrimitiveSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPrimitiveSettings>(); } set { this["LightmassSettings"] = value; } }
    }
    public class LightmassPortalComponent : SceneComponent
    {
        public LightmassPortalComponent(nint addr) : base(addr) { }
        public LightmassPortalComponent() : base(0) { }
        public BoxComponent PreviewBox { get { return this[nameof(PreviewBox)].As<BoxComponent>(); } set { this["PreviewBox"] = value; } }
    }
    public class LightmassPortal : Actor
    {
        public LightmassPortal(nint addr) : base(addr) { }
        public LightmassPortal() : base(0) { }
        public LightmassPortalComponent PortalComponent { get { return this[nameof(PortalComponent)].As<LightmassPortalComponent>(); } set { this["PortalComponent"] = value; } }
    }
    public class LightmassImportanceVolume : Volume
    {
        public LightmassImportanceVolume(nint addr) : base(addr) { }
        public LightmassImportanceVolume() : base(0) { }
    }
    public class LightmassCharacterIndirectDetailVolume : Volume
    {
        public LightmassCharacterIndirectDetailVolume(nint addr) : base(addr) { }
        public LightmassCharacterIndirectDetailVolume() : base(0) { }
    }
    public class LightMapVirtualTexture2D : Texture2D
    {
        public LightMapVirtualTexture2D(nint addr) : base(addr) { }
        public LightMapVirtualTexture2D() : base(0) { }
        public List<byte> TypeToLayer { get { return this["TypeToLayer"].GetList<byte>(); } set { /* Arrays are read-only */ } }
    }
    public class LightMapTexture2D : Texture2D
    {
        public LightMapTexture2D(nint addr) : base(addr) { }
        public LightMapTexture2D() : base(0) { }
    }
    public class LightmappedSurfaceCollection : UEObject
    {
        public LightmappedSurfaceCollection(nint addr) : base(addr) { }
        public LightmappedSurfaceCollection() : base(0) { }
        public Model SourceModel { get { return this[nameof(SourceModel)].As<Model>(); } set { this["SourceModel"] = value; } }
        public List<int> Surfaces { get { return this["Surfaces"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class LevelStreamingVolume : Volume
    {
        public LevelStreamingVolume(nint addr) : base(addr) { }
        public LevelStreamingVolume() : base(0) { }
        public List<string> StreamingLevelNames { get { return this["StreamingLevelNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bEditorPreVisOnly { get { return this["bEditorPreVisOnly"].Flag; } set { this["bEditorPreVisOnly"].Flag = value; } }
        public bool bDisabled { get { return this["bDisabled"].Flag; } set { this["bDisabled"].Flag = value; } }
        public byte StreamingUsage { get { return this["StreamingUsage"].GetValue<byte>(); } set { this["StreamingUsage"].SetValue<byte>(value); } }
    }
    public class LevelStreamingPersistent : LevelStreaming
    {
        public LevelStreamingPersistent(nint addr) : base(addr) { }
        public LevelStreamingPersistent() : base(0) { }
    }
    public class LevelStreamingDynamic : LevelStreaming
    {
        public LevelStreamingDynamic(nint addr) : base(addr) { }
        public LevelStreamingDynamic() : base(0) { }
        public bool bInitiallyLoaded { get { return this["bInitiallyLoaded"].Flag; } set { this["bInitiallyLoaded"].Flag = value; } }
        public bool bInitiallyVisible { get { return this["bInitiallyVisible"].Flag; } set { this["bInitiallyVisible"].Flag = value; } }
        public UEObject LoadLevelInstanceBySoftObjectPtr(UEObject WorldContextObject, UEObject Level, UEObject Location, UEObject Rotation, UEObject bOutSuccess, UEObject OptionalLevelNameOverride) { return InvokeUEObject("LoadLevelInstanceBySoftObjectPtr", WorldContextObject, Level, Location, Rotation, bOutSuccess, OptionalLevelNameOverride); }
        public void _LevelStreamingDynamic(UEObject bInitiallyLoaded, UEObject bInitiallyVisible) { Invoke("LevelStreamingDynamic", bInitiallyLoaded, bInitiallyVisible); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LevelStreamingAlwaysLoaded : LevelStreaming
    {
        public LevelStreamingAlwaysLoaded(nint addr) : base(addr) { }
        public LevelStreamingAlwaysLoaded() : base(0) { }
    }
    public class LevelStreaming : UEObject
    {
        public LevelStreaming(nint addr) : base(addr) { }
        public LevelStreaming() : base(0) { }
        public UEObject WorldAsset { get { return this["WorldAsset"]; } set { this["WorldAsset"] = value; } }
        public string PackageNameToLoad { get { return this["PackageNameToLoad"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> LODPackageNames { get { return this["LODPackageNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public SDK.Script.CoreUObject.Transform LevelTransform { get { return this[nameof(LevelTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["LevelTransform"] = value; } }
        public int LevelLODIndex { get { return this["LevelLODIndex"].GetValue<int>(); } set { this["LevelLODIndex"].SetValue<int>(value); } }
        public int StreamingPriority { get { return this["StreamingPriority"].GetValue<int>(); } set { this["StreamingPriority"].SetValue<int>(value); } }
        public bool bShouldBeVisible { get { return this["bShouldBeVisible"].Flag; } set { this["bShouldBeVisible"].Flag = value; } }
        public bool bShouldBeLoaded { get { return this["bShouldBeLoaded"].Flag; } set { this["bShouldBeLoaded"].Flag = value; } }
        public bool bLocked { get { return this["bLocked"].Flag; } set { this["bLocked"].Flag = value; } }
        public bool bIsStatic { get { return this["bIsStatic"].Flag; } set { this["bIsStatic"].Flag = value; } }
        public bool bShouldBlockOnLoad { get { return this["bShouldBlockOnLoad"].Flag; } set { this["bShouldBlockOnLoad"].Flag = value; } }
        public bool bShouldBlockOnUnload { get { return this["bShouldBlockOnUnload"].Flag; } set { this["bShouldBlockOnUnload"].Flag = value; } }
        public bool bDisableDistanceStreaming { get { return this["bDisableDistanceStreaming"].Flag; } set { this["bDisableDistanceStreaming"].Flag = value; } }
        public bool bDrawOnLevelStatusMap { get { return this["bDrawOnLevelStatusMap"].Flag; } set { this["bDrawOnLevelStatusMap"].Flag = value; } }
        public LinearColor LevelColor { get { return this[nameof(LevelColor)].As<LinearColor>(); } set { this["LevelColor"] = value; } }
        public Array<LevelStreamingVolume> EditorStreamingVolumes { get { return new Array<LevelStreamingVolume>(this["EditorStreamingVolumes"]); } set { this["EditorStreamingVolumes"] = value; } }
        public float MinTimeBetweenVolumeUnloadRequests { get { return this["MinTimeBetweenVolumeUnloadRequests"].GetValue<float>(); } set { this["MinTimeBetweenVolumeUnloadRequests"].SetValue<float>(value); } }
        public UEObject OnLevelLoaded { get { return this["OnLevelLoaded"]; } set { this["OnLevelLoaded"] = value; } }
        public UEObject OnLevelUnloaded { get { return this["OnLevelUnloaded"]; } set { this["OnLevelUnloaded"] = value; } }
        public UEObject OnLevelShown { get { return this["OnLevelShown"]; } set { this["OnLevelShown"] = value; } }
        public UEObject OnLevelHidden { get { return this["OnLevelHidden"]; } set { this["OnLevelHidden"] = value; } }
        public Level LoadedLevel { get { return this[nameof(LoadedLevel)].As<Level>(); } set { this["LoadedLevel"] = value; } }
        public Level PendingUnloadLevel { get { return this[nameof(PendingUnloadLevel)].As<Level>(); } set { this["PendingUnloadLevel"] = value; } }
        public UEObject ShouldBeLoaded() { return InvokeUEObject("ShouldBeLoaded"); }
        public void _LevelStreaming(UEObject WorldAsset, UEObject PackageNameToLoad, UEObject LODPackageNames, UEObject LevelTransform, UEObject LevelLODIndex, UEObject StreamingPriority, UEObject bShouldBeVisible, UEObject bShouldBeLoaded, UEObject bLocked, UEObject bIsStatic, UEObject bShouldBlockOnLoad, UEObject bShouldBlockOnUnload, UEObject bDisableDistanceStreaming, UEObject bDrawOnLevelStatusMap, UEObject LevelColor, UEObject EditorStreamingVolumes, UEObject MinTimeBetweenVolumeUnloadRequests, UEObject OnLevelLoaded, UEObject OnLevelUnloaded, UEObject OnLevelShown, UEObject OnLevelHidden, UEObject LoadedLevel, UEObject PendingUnloadLevel) { Invoke("LevelStreaming", WorldAsset, PackageNameToLoad, LODPackageNames, LevelTransform, LevelLODIndex, StreamingPriority, bShouldBeVisible, bShouldBeLoaded, bLocked, bIsStatic, bShouldBlockOnLoad, bShouldBlockOnUnload, bDisableDistanceStreaming, bDrawOnLevelStatusMap, LevelColor, EditorStreamingVolumes, MinTimeBetweenVolumeUnloadRequests, OnLevelLoaded, OnLevelUnloaded, OnLevelShown, OnLevelHidden, LoadedLevel, PendingUnloadLevel); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LevelScriptBlueprint : Blueprint
    {
        public LevelScriptBlueprint(nint addr) : base(addr) { }
        public LevelScriptBlueprint() : base(0) { }
    }
    public class LevelScriptActor : Actor
    {
        public LevelScriptActor(nint addr) : base(addr) { }
        public LevelScriptActor() : base(0) { }
        public bool bInputEnabled { get { return this["bInputEnabled"].Flag; } set { this["bInputEnabled"].Flag = value; } }
        public void WorldOriginLocationChanged(UEObject OldOriginLocation, UEObject NewOriginLocation) { Invoke("WorldOriginLocationChanged", OldOriginLocation, NewOriginLocation); }
        public void _LevelScriptActor(UEObject bInputEnabled) { Invoke("LevelScriptActor", bInputEnabled); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LevelBounds : Actor
    {
        public LevelBounds(nint addr) : base(addr) { }
        public LevelBounds() : base(0) { }
        public BoxComponent BoxComponent { get { return this[nameof(BoxComponent)].As<BoxComponent>(); } set { this["BoxComponent"] = value; } }
        public bool bAutoUpdateBounds { get { return this["bAutoUpdateBounds"].Flag; } set { this["bAutoUpdateBounds"].Flag = value; } }
    }
    public class LevelActorContainer : UEObject
    {
        public LevelActorContainer(nint addr) : base(addr) { }
        public LevelActorContainer() : base(0) { }
        public Array<Actor> Actors { get { return new Array<Actor>(this["Actors"]); } set { this["Actors"] = value; } }
    }
    public class Level : UEObject
    {
        public Level(nint addr) : base(addr) { }
        public Level() : base(0) { }
        public World OwningWorld { get { return this[nameof(OwningWorld)].As<World>(); } set { this["OwningWorld"] = value; } }
        public Model Model { get { return this[nameof(Model)].As<Model>(); } set { this["Model"] = value; } }
        public Array<ModelComponent> ModelComponents { get { return new Array<ModelComponent>(this["ModelComponents"]); } set { this["ModelComponents"] = value; } }
        public LevelActorContainer ActorCluster { get { return this[nameof(ActorCluster)].As<LevelActorContainer>(); } set { this["ActorCluster"] = value; } }
        public int NumTextureStreamingUnbuiltComponents { get { return this["NumTextureStreamingUnbuiltComponents"].GetValue<int>(); } set { this["NumTextureStreamingUnbuiltComponents"].SetValue<int>(value); } }
        public int NumTextureStreamingDirtyResources { get { return this["NumTextureStreamingDirtyResources"].GetValue<int>(); } set { this["NumTextureStreamingDirtyResources"].SetValue<int>(value); } }
        public LevelScriptActor LevelScriptActor { get { return this[nameof(LevelScriptActor)].As<LevelScriptActor>(); } set { this["LevelScriptActor"] = value; } }
        public NavigationObjectBase NavListStart { get { return this[nameof(NavListStart)].As<NavigationObjectBase>(); } set { this["NavListStart"] = value; } }
        public NavigationObjectBase NavListEnd { get { return this[nameof(NavListEnd)].As<NavigationObjectBase>(); } set { this["NavListEnd"] = value; } }
        public Array<NavigationDataChunk> NavDataChunks { get { return new Array<NavigationDataChunk>(this["NavDataChunks"]); } set { this["NavDataChunks"] = value; } }
        public float LightmapTotalSize { get { return this["LightmapTotalSize"].GetValue<float>(); } set { this["LightmapTotalSize"].SetValue<float>(value); } }
        public float ShadowmapTotalSize { get { return this["ShadowmapTotalSize"].GetValue<float>(); } set { this["ShadowmapTotalSize"].SetValue<float>(value); } }
        public Array<Vector> StaticNavigableGeometry { get { return new Array<Vector>(this["StaticNavigableGeometry"]); } set { this["StaticNavigableGeometry"] = value; } }
        public Array<SDK.Script.CoreUObject.Guid> StreamingTextureGuids { get { return new Array<SDK.Script.CoreUObject.Guid>(this["StreamingTextureGuids"]); } set { this["StreamingTextureGuids"] = value; } }
        public SDK.Script.CoreUObject.Guid LevelBuildDataId { get { return this[nameof(LevelBuildDataId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LevelBuildDataId"] = value; } }
        public MapBuildDataRegistry MapBuildData { get { return this[nameof(MapBuildData)].As<MapBuildDataRegistry>(); } set { this["MapBuildData"] = value; } }
        public IntVector LightBuildLevelOffset { get { return this[nameof(LightBuildLevelOffset)].As<IntVector>(); } set { this["LightBuildLevelOffset"] = value; } }
        public bool bIsLightingScenario { get { return this["bIsLightingScenario"].Flag; } set { this["bIsLightingScenario"].Flag = value; } }
        public bool bTextureStreamingRotationChanged { get { return this["bTextureStreamingRotationChanged"].Flag; } set { this["bTextureStreamingRotationChanged"].Flag = value; } }
        public bool bStaticComponentsRegisteredInStreamingManager { get { return this["bStaticComponentsRegisteredInStreamingManager"].Flag; } set { this["bStaticComponentsRegisteredInStreamingManager"].Flag = value; } }
        public bool bIsVisible { get { return this["bIsVisible"].Flag; } set { this["bIsVisible"].Flag = value; } }
        public WorldSettings WorldSettings { get { return this[nameof(WorldSettings)].As<WorldSettings>(); } set { this["WorldSettings"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public Array<ReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors { get { return new Array<ReplicatedStaticActorDestructionInfo>(this["DestroyedReplicatedStaticActors"]); } set { this["DestroyedReplicatedStaticActors"] = value; } }
    }
    public class LevelPartitionInterface : Interface
    {
        public LevelPartitionInterface(nint addr) : base(addr) { }
        public LevelPartitionInterface() : base(0) { }
    }
    public class Layer : UEObject
    {
        public Layer(nint addr) : base(addr) { }
        public Layer() : base(0) { }
        public string LayerName { get { return this["LayerName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsVisible { get { return this["bIsVisible"].Flag; } set { this["bIsVisible"].Flag = value; } }
        public Array<LayerActorStats> ActorStats { get { return new Array<LayerActorStats>(this["ActorStats"]); } set { this["ActorStats"] = value; } }
    }
    public class KismetTextLibrary : UEObject
    {
        public KismetTextLibrary(nint addr) : base(addr) { }
        public KismetTextLibrary() : base(0) { }
        public UEObject TextTrimTrailing(UEObject InText) { return InvokeUEObject("TextTrimTrailing", InText); }
        public void _KismetTextLibrary() { Invoke("KismetTextLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetSystemLibrary : UEObject
    {
        public KismetSystemLibrary(nint addr) : base(addr) { }
        public KismetSystemLibrary() : base(0) { }
        public void UnregisterForRemoteNotifications() { Invoke("UnregisterForRemoteNotifications"); }
        public void _KismetSystemLibrary() { Invoke("KismetSystemLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetStringTableLibrary : UEObject
    {
        public KismetStringTableLibrary(nint addr) : base(addr) { }
        public KismetStringTableLibrary() : base(0) { }
        public UEObject IsRegisteredTableId(UEObject TableId) { return InvokeUEObject("IsRegisteredTableId", TableId); }
        public void _KismetStringTableLibrary() { Invoke("KismetStringTableLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetStringLibrary : UEObject
    {
        public KismetStringLibrary(nint addr) : base(addr) { }
        public KismetStringLibrary() : base(0) { }
        public UEObject TrimTrailing(UEObject SourceString) { return InvokeUEObject("TrimTrailing", SourceString); }
        public void _KismetStringLibrary() { Invoke("KismetStringLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetRenderingLibrary : UEObject
    {
        public KismetRenderingLibrary(nint addr) : base(addr) { }
        public KismetRenderingLibrary() : base(0) { }
        public void SetCastInsetShadowForAllAttachments(UEObject PrimitiveComponent, UEObject bCastInsetShadow, UEObject bLightAttachmentsAsGroup) { Invoke("SetCastInsetShadowForAllAttachments", PrimitiveComponent, bCastInsetShadow, bLightAttachmentsAsGroup); }
        public void _KismetRenderingLibrary() { Invoke("KismetRenderingLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetNodeHelperLibrary : UEObject
    {
        public KismetNodeHelperLibrary(nint addr) : base(addr) { }
        public KismetNodeHelperLibrary() : base(0) { }
        public void MarkBit(UEObject Data, UEObject Index) { Invoke("MarkBit", Data, Index); }
        public void _KismetNodeHelperLibrary() { Invoke("KismetNodeHelperLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetMathLibrary : UEObject
    {
        public KismetMathLibrary(nint addr) : base(addr) { }
        public KismetMathLibrary() : base(0) { }
        public UEObject Xor_IntInt(UEObject A, UEObject B) { return InvokeUEObject("Xor_IntInt", A, B); }
        public void _KismetMathLibrary() { Invoke("KismetMathLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetMaterialLibrary : UEObject
    {
        public KismetMaterialLibrary(nint addr) : base(addr) { }
        public KismetMaterialLibrary() : base(0) { }
        public void SetVectorParameterValue(UEObject WorldContextObject, UEObject Collection, UEObject ParameterName, UEObject ParameterValue) { Invoke("SetVectorParameterValue", WorldContextObject, Collection, ParameterName, ParameterValue); }
        public void _KismetMaterialLibrary() { Invoke("KismetMaterialLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetInternationalizationLibrary : UEObject
    {
        public KismetInternationalizationLibrary(nint addr) : base(addr) { }
        public KismetInternationalizationLibrary() : base(0) { }
        public UEObject SetCurrentLocale(UEObject Culture, UEObject SaveToConfig) { return InvokeUEObject("SetCurrentLocale", Culture, SaveToConfig); }
        public void _KismetInternationalizationLibrary() { Invoke("KismetInternationalizationLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetInputLibrary : UEObject
    {
        public KismetInputLibrary(nint addr) : base(addr) { }
        public KismetInputLibrary() : base(0) { }
        public UEObject PointerEvent_IsTouchEvent(UEObject Input) { return InvokeUEObject("PointerEvent_IsTouchEvent", Input); }
        public void _KismetInputLibrary() { Invoke("KismetInputLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetGuidLibrary : UEObject
    {
        public KismetGuidLibrary(nint addr) : base(addr) { }
        public KismetGuidLibrary() : base(0) { }
        public void Parse_StringToGuid(UEObject GuidString, UEObject OutGuid, UEObject Success) { Invoke("Parse_StringToGuid", GuidString, OutGuid, Success); }
        public void _KismetGuidLibrary() { Invoke("KismetGuidLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KismetArrayLibrary : UEObject
    {
        public KismetArrayLibrary(nint addr) : base(addr) { }
        public KismetArrayLibrary() : base(0) { }
        public void SetArrayPropertyByName(UEObject Object, UEObject PropertyName, UEObject Value) { Invoke("SetArrayPropertyByName", Object, PropertyName, Value); }
        public void _KismetArrayLibrary() { Invoke("KismetArrayLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class KillZVolume : PhysicsVolume
    {
        public KillZVolume(nint addr) : base(addr) { }
        public KillZVolume() : base(0) { }
    }
    public class IntSerialization : UEObject
    {
        public IntSerialization(nint addr) : base(addr) { }
        public IntSerialization() : base(0) { }
        public ushort UnsignedInt16Variable { get { return this["UnsignedInt16Variable"].GetValue<ushort>(); } set { this["UnsignedInt16Variable"].SetValue<ushort>(value); } }
        public uint UnsignedInt32Variable { get { return this["UnsignedInt32Variable"].GetValue<uint>(); } set { this["UnsignedInt32Variable"].SetValue<uint>(value); } }
        public ulong UnsignedInt64Variable { get { return this["UnsignedInt64Variable"].GetValue<ulong>(); } set { this["UnsignedInt64Variable"].SetValue<ulong>(value); } }
        public byte SignedInt8Variable { get { return this["SignedInt8Variable"].GetValue<byte>(); } set { this["SignedInt8Variable"].SetValue<byte>(value); } }
        public short SignedInt16Variable { get { return this["SignedInt16Variable"].GetValue<short>(); } set { this["SignedInt16Variable"].SetValue<short>(value); } }
        public long SignedInt64Variable { get { return this["SignedInt64Variable"].GetValue<long>(); } set { this["SignedInt64Variable"].SetValue<long>(value); } }
        public byte UnsignedInt8Variable { get { return this["UnsignedInt8Variable"].GetValue<byte>(); } set { this["UnsignedInt8Variable"].SetValue<byte>(value); } }
        public int SignedInt32Variable { get { return this["SignedInt32Variable"].GetValue<int>(); } set { this["SignedInt32Variable"].SetValue<int>(value); } }
    }
    public class InterpTrackVisibility : InterpTrack
    {
        public InterpTrackVisibility(nint addr) : base(addr) { }
        public InterpTrackVisibility() : base(0) { }
        public Array<VisibilityTrackKey> VisibilityTrack { get { return new Array<VisibilityTrackKey>(this["VisibilityTrack"]); } set { this["VisibilityTrack"] = value; } }
        public bool bFireEventsWhenForwards { get { return this["bFireEventsWhenForwards"].Flag; } set { this["bFireEventsWhenForwards"].Flag = value; } }
        public bool bFireEventsWhenBackwards { get { return this["bFireEventsWhenBackwards"].Flag; } set { this["bFireEventsWhenBackwards"].Flag = value; } }
        public bool bFireEventsWhenJumpingForwards { get { return this["bFireEventsWhenJumpingForwards"].Flag; } set { this["bFireEventsWhenJumpingForwards"].Flag = value; } }
    }
    public class InterpTrackVectorProp : InterpTrackVectorBase
    {
        public InterpTrackVectorProp(nint addr) : base(addr) { }
        public InterpTrackVectorProp() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackVectorMaterialParam : InterpTrackVectorBase
    {
        public InterpTrackVectorMaterialParam(nint addr) : base(addr) { }
        public InterpTrackVectorMaterialParam() : base(0) { }
        public Array<MaterialInterface> TargetMaterials { get { return new Array<MaterialInterface>(this["TargetMaterials"]); } set { this["TargetMaterials"] = value; } }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackToggle : InterpTrack
    {
        public InterpTrackToggle(nint addr) : base(addr) { }
        public InterpTrackToggle() : base(0) { }
        public Array<ToggleTrackKey> ToggleTrack { get { return new Array<ToggleTrackKey>(this["ToggleTrack"]); } set { this["ToggleTrack"] = value; } }
        public bool bActivateSystemEachUpdate { get { return this["bActivateSystemEachUpdate"].Flag; } set { this["bActivateSystemEachUpdate"].Flag = value; } }
        public bool bActivateWithJustAttachedFlag { get { return this["bActivateWithJustAttachedFlag"].Flag; } set { this["bActivateWithJustAttachedFlag"].Flag = value; } }
        public bool bFireEventsWhenForwards { get { return this["bFireEventsWhenForwards"].Flag; } set { this["bFireEventsWhenForwards"].Flag = value; } }
        public bool bFireEventsWhenBackwards { get { return this["bFireEventsWhenBackwards"].Flag; } set { this["bFireEventsWhenBackwards"].Flag = value; } }
        public bool bFireEventsWhenJumpingForwards { get { return this["bFireEventsWhenJumpingForwards"].Flag; } set { this["bFireEventsWhenJumpingForwards"].Flag = value; } }
    }
    public class InterpTrackSound : InterpTrackVectorBase
    {
        public InterpTrackSound(nint addr) : base(addr) { }
        public InterpTrackSound() : base(0) { }
        public Array<SoundTrackKey> Sounds { get { return new Array<SoundTrackKey>(this["Sounds"]); } set { this["Sounds"] = value; } }
        public bool bPlayOnReverse { get { return this["bPlayOnReverse"].Flag; } set { this["bPlayOnReverse"].Flag = value; } }
        public bool bContinueSoundOnMatineeEnd { get { return this["bContinueSoundOnMatineeEnd"].Flag; } set { this["bContinueSoundOnMatineeEnd"].Flag = value; } }
        public bool bSuppressSubtitles { get { return this["bSuppressSubtitles"].Flag; } set { this["bSuppressSubtitles"].Flag = value; } }
        public bool bTreatAsDialogue { get { return this["bTreatAsDialogue"].Flag; } set { this["bTreatAsDialogue"].Flag = value; } }
        public bool bAttach { get { return this["bAttach"].Flag; } set { this["bAttach"].Flag = value; } }
    }
    public class InterpTrackSlomo : InterpTrackFloatBase
    {
        public InterpTrackSlomo(nint addr) : base(addr) { }
        public InterpTrackSlomo() : base(0) { }
    }
    public class InterpTrackParticleReplay : InterpTrack
    {
        public InterpTrackParticleReplay(nint addr) : base(addr) { }
        public InterpTrackParticleReplay() : base(0) { }
        public Array<ParticleReplayTrackKey> TrackKeys { get { return new Array<ParticleReplayTrackKey>(this["TrackKeys"]); } set { this["TrackKeys"] = value; } }
    }
    public class InterpTrackMoveAxis : InterpTrackFloatBase
    {
        public InterpTrackMoveAxis(nint addr) : base(addr) { }
        public InterpTrackMoveAxis() : base(0) { }
        public byte MoveAxis { get { return this["MoveAxis"].GetValue<byte>(); } set { this["MoveAxis"].SetValue<byte>(value); } }
        public InterpLookupTrack LookupTrack { get { return this[nameof(LookupTrack)].As<InterpLookupTrack>(); } set { this["LookupTrack"] = value; } }
    }
    public class InterpTrackMove : InterpTrack
    {
        public InterpTrackMove(nint addr) : base(addr) { }
        public InterpTrackMove() : base(0) { }
        public InterpCurveVector PosTrack { get { return this[nameof(PosTrack)].As<InterpCurveVector>(); } set { this["PosTrack"] = value; } }
        public InterpCurveVector EulerTrack { get { return this[nameof(EulerTrack)].As<InterpCurveVector>(); } set { this["EulerTrack"] = value; } }
        public InterpLookupTrack LookupTrack { get { return this[nameof(LookupTrack)].As<InterpLookupTrack>(); } set { this["LookupTrack"] = value; } }
        public string LookAtGroupName { get { return this["LookAtGroupName"].ToString(); } set { /* String properties are read-only */ } }
        public float LinCurveTension { get { return this["LinCurveTension"].GetValue<float>(); } set { this["LinCurveTension"].SetValue<float>(value); } }
        public float AngCurveTension { get { return this["AngCurveTension"].GetValue<float>(); } set { this["AngCurveTension"].SetValue<float>(value); } }
        public bool bUseQuatInterpolation { get { return this["bUseQuatInterpolation"].Flag; } set { this["bUseQuatInterpolation"].Flag = value; } }
        public bool bShowArrowAtKeys { get { return this["bShowArrowAtKeys"].Flag; } set { this["bShowArrowAtKeys"].Flag = value; } }
        public bool bDisableMovement { get { return this["bDisableMovement"].Flag; } set { this["bDisableMovement"].Flag = value; } }
        public bool bShowTranslationOnCurveEd { get { return this["bShowTranslationOnCurveEd"].Flag; } set { this["bShowTranslationOnCurveEd"].Flag = value; } }
        public bool bShowRotationOnCurveEd { get { return this["bShowRotationOnCurveEd"].Flag; } set { this["bShowRotationOnCurveEd"].Flag = value; } }
        public bool bHide3DTrack { get { return this["bHide3DTrack"].Flag; } set { this["bHide3DTrack"].Flag = value; } }
        public byte RotMode { get { return this["RotMode"].GetValue<byte>(); } set { this["RotMode"].SetValue<byte>(value); } }
    }
    public class InterpTrackLinearColorProp : InterpTrackLinearColorBase
    {
        public InterpTrackLinearColorProp(nint addr) : base(addr) { }
        public InterpTrackLinearColorProp() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackLinearColorBase : InterpTrack
    {
        public InterpTrackLinearColorBase(nint addr) : base(addr) { }
        public InterpTrackLinearColorBase() : base(0) { }
        public InterpCurveLinearColor LinearColorTrack { get { return this[nameof(LinearColorTrack)].As<InterpCurveLinearColor>(); } set { this["LinearColorTrack"] = value; } }
        public float CurveTension { get { return this["CurveTension"].GetValue<float>(); } set { this["CurveTension"].SetValue<float>(value); } }
    }
    public class InterpTrackInstVisibility : InterpTrackInst
    {
        public InterpTrackInstVisibility(nint addr) : base(addr) { }
        public InterpTrackInstVisibility() : base(0) { }
        public byte Action { get { return this["Action"].GetValue<byte>(); } set { this["Action"].SetValue<byte>(value); } }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
    }
    public class InterpTrackInstVectorProp : InterpTrackInstProperty
    {
        public InterpTrackInstVectorProp(nint addr) : base(addr) { }
        public InterpTrackInstVectorProp() : base(0) { }
        public Vector ResetVector { get { return this[nameof(ResetVector)].As<Vector>(); } set { this["ResetVector"] = value; } }
    }
    public class InterpTrackInstVectorMaterialParam : InterpTrackInst
    {
        public InterpTrackInstVectorMaterialParam(nint addr) : base(addr) { }
        public InterpTrackInstVectorMaterialParam() : base(0) { }
        public Array<MaterialInstanceDynamic> MaterialInstances { get { return new Array<MaterialInstanceDynamic>(this["MaterialInstances"]); } set { this["MaterialInstances"] = value; } }
        public Array<Vector> ResetVectors { get { return new Array<Vector>(this["ResetVectors"]); } set { this["ResetVectors"] = value; } }
        public Array<PrimitiveMaterialRef> PrimitiveMaterialRefs { get { return new Array<PrimitiveMaterialRef>(this["PrimitiveMaterialRefs"]); } set { this["PrimitiveMaterialRefs"] = value; } }
        public InterpTrackVectorMaterialParam InstancedTrack { get { return this[nameof(InstancedTrack)].As<InterpTrackVectorMaterialParam>(); } set { this["InstancedTrack"] = value; } }
    }
    public class InterpTrackInstToggle : InterpTrackInst
    {
        public InterpTrackInstToggle(nint addr) : base(addr) { }
        public InterpTrackInstToggle() : base(0) { }
        public byte Action { get { return this["Action"].GetValue<byte>(); } set { this["Action"].SetValue<byte>(value); } }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
        public bool bSavedActiveState { get { return this["bSavedActiveState"].Flag; } set { this["bSavedActiveState"].Flag = value; } }
    }
    public class InterpTrackInstSound : InterpTrackInst
    {
        public InterpTrackInstSound(nint addr) : base(addr) { }
        public InterpTrackInstSound() : base(0) { }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
        public AudioComponent PlayAudioComp { get { return this[nameof(PlayAudioComp)].As<AudioComponent>(); } set { this["PlayAudioComp"] = value; } }
    }
    public class InterpTrackInstSlomo : InterpTrackInst
    {
        public InterpTrackInstSlomo(nint addr) : base(addr) { }
        public InterpTrackInstSlomo() : base(0) { }
        public float OldTimeDilation { get { return this["OldTimeDilation"].GetValue<float>(); } set { this["OldTimeDilation"].SetValue<float>(value); } }
    }
    public class InterpTrackInstParticleReplay : InterpTrackInst
    {
        public InterpTrackInstParticleReplay(nint addr) : base(addr) { }
        public InterpTrackInstParticleReplay() : base(0) { }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
    }
    public class InterpTrackInstMove : InterpTrackInst
    {
        public InterpTrackInstMove(nint addr) : base(addr) { }
        public InterpTrackInstMove() : base(0) { }
        public Vector ResetLocation { get { return this[nameof(ResetLocation)].As<Vector>(); } set { this["ResetLocation"] = value; } }
        public Rotator ResetRotation { get { return this[nameof(ResetRotation)].As<Rotator>(); } set { this["ResetRotation"] = value; } }
    }
    public class InterpTrackInstLinearColorProp : InterpTrackInstProperty
    {
        public InterpTrackInstLinearColorProp(nint addr) : base(addr) { }
        public InterpTrackInstLinearColorProp() : base(0) { }
        public LinearColor ResetColor { get { return this[nameof(ResetColor)].As<LinearColor>(); } set { this["ResetColor"] = value; } }
    }
    public class InterpTrackInstFloatProp : InterpTrackInstProperty
    {
        public InterpTrackInstFloatProp(nint addr) : base(addr) { }
        public InterpTrackInstFloatProp() : base(0) { }
        public float ResetFloat { get { return this["ResetFloat"].GetValue<float>(); } set { this["ResetFloat"].SetValue<float>(value); } }
    }
    public class InterpTrackInstFloatParticleParam : InterpTrackInst
    {
        public InterpTrackInstFloatParticleParam(nint addr) : base(addr) { }
        public InterpTrackInstFloatParticleParam() : base(0) { }
        public float ResetFloat { get { return this["ResetFloat"].GetValue<float>(); } set { this["ResetFloat"].SetValue<float>(value); } }
    }
    public class InterpTrackInstFloatMaterialParam : InterpTrackInst
    {
        public InterpTrackInstFloatMaterialParam(nint addr) : base(addr) { }
        public InterpTrackInstFloatMaterialParam() : base(0) { }
        public Array<MaterialInstanceDynamic> MaterialInstances { get { return new Array<MaterialInstanceDynamic>(this["MaterialInstances"]); } set { this["MaterialInstances"] = value; } }
        public List<float> ResetFloats { get { return this["ResetFloats"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<PrimitiveMaterialRef> PrimitiveMaterialRefs { get { return new Array<PrimitiveMaterialRef>(this["PrimitiveMaterialRefs"]); } set { this["PrimitiveMaterialRefs"] = value; } }
        public InterpTrackFloatMaterialParam InstancedTrack { get { return this[nameof(InstancedTrack)].As<InterpTrackFloatMaterialParam>(); } set { this["InstancedTrack"] = value; } }
    }
    public class InterpTrackInstFloatAnimBPParam : InterpTrackInst
    {
        public InterpTrackInstFloatAnimBPParam(nint addr) : base(addr) { }
        public InterpTrackInstFloatAnimBPParam() : base(0) { }
        public AnimInstance AnimScriptInstance { get { return this[nameof(AnimScriptInstance)].As<AnimInstance>(); } set { this["AnimScriptInstance"] = value; } }
        public float ResetFloat { get { return this["ResetFloat"].GetValue<float>(); } set { this["ResetFloat"].SetValue<float>(value); } }
    }
    public class InterpTrackInstFade : InterpTrackInst
    {
        public InterpTrackInstFade(nint addr) : base(addr) { }
        public InterpTrackInstFade() : base(0) { }
    }
    public class InterpTrackInstEvent : InterpTrackInst
    {
        public InterpTrackInstEvent(nint addr) : base(addr) { }
        public InterpTrackInstEvent() : base(0) { }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
    }
    public class InterpTrackInstDirector : InterpTrackInst
    {
        public InterpTrackInstDirector(nint addr) : base(addr) { }
        public InterpTrackInstDirector() : base(0) { }
        public Actor OldViewTarget { get { return this[nameof(OldViewTarget)].As<Actor>(); } set { this["OldViewTarget"] = value; } }
    }
    public class InterpTrackInstColorScale : InterpTrackInst
    {
        public InterpTrackInstColorScale(nint addr) : base(addr) { }
        public InterpTrackInstColorScale() : base(0) { }
    }
    public class InterpTrackInstColorProp : InterpTrackInstProperty
    {
        public InterpTrackInstColorProp(nint addr) : base(addr) { }
        public InterpTrackInstColorProp() : base(0) { }
        public Color ResetColor { get { return this[nameof(ResetColor)].As<Color>(); } set { this["ResetColor"] = value; } }
    }
    public class InterpTrackInstBoolProp : InterpTrackInstProperty
    {
        public InterpTrackInstBoolProp(nint addr) : base(addr) { }
        public InterpTrackInstBoolProp() : base(0) { }
        public bool ResetBool { get { return this["ResetBool"].Flag; } set { this["ResetBool"].Flag = value; } }
    }
    public class InterpTrackInstProperty : InterpTrackInst
    {
        public InterpTrackInstProperty(nint addr) : base(addr) { }
        public InterpTrackInstProperty() : base(0) { }
        public UEObject InterpProperty { get { return this["InterpProperty"]; } set { this["InterpProperty"] = value; } }
        public UEObject PropertyOuterObjectInst { get { return this[nameof(PropertyOuterObjectInst)]; } set { this["PropertyOuterObjectInst"] = value; } }
    }
    public class InterpTrackInstAudioMaster : InterpTrackInst
    {
        public InterpTrackInstAudioMaster(nint addr) : base(addr) { }
        public InterpTrackInstAudioMaster() : base(0) { }
    }
    public class InterpTrackInstAnimControl : InterpTrackInst
    {
        public InterpTrackInstAnimControl(nint addr) : base(addr) { }
        public InterpTrackInstAnimControl() : base(0) { }
        public float LastUpdatePosition { get { return this["LastUpdatePosition"].GetValue<float>(); } set { this["LastUpdatePosition"].SetValue<float>(value); } }
    }
    public class InterpTrackInst : UEObject
    {
        public InterpTrackInst(nint addr) : base(addr) { }
        public InterpTrackInst() : base(0) { }
    }
    public class InterpTrackFloatProp : InterpTrackFloatBase
    {
        public InterpTrackFloatProp(nint addr) : base(addr) { }
        public InterpTrackFloatProp() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackFloatParticleParam : InterpTrackFloatBase
    {
        public InterpTrackFloatParticleParam(nint addr) : base(addr) { }
        public InterpTrackFloatParticleParam() : base(0) { }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackFloatMaterialParam : InterpTrackFloatBase
    {
        public InterpTrackFloatMaterialParam(nint addr) : base(addr) { }
        public InterpTrackFloatMaterialParam() : base(0) { }
        public Array<MaterialInterface> TargetMaterials { get { return new Array<MaterialInterface>(this["TargetMaterials"]); } set { this["TargetMaterials"] = value; } }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackFloatAnimBPParam : InterpTrackFloatBase
    {
        public InterpTrackFloatAnimBPParam(nint addr) : base(addr) { }
        public InterpTrackFloatAnimBPParam() : base(0) { }
        public UEObject AnimBlueprintClass { get { return this["AnimBlueprintClass"]; } set { this["AnimBlueprintClass"] = value; } }
        public UEObject AnimClass { get { return this["AnimClass"]; } set { this["AnimClass"] = value; } }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackFade : InterpTrackFloatBase
    {
        public InterpTrackFade(nint addr) : base(addr) { }
        public InterpTrackFade() : base(0) { }
        public bool bPersistFade { get { return this["bPersistFade"].Flag; } set { this["bPersistFade"].Flag = value; } }
        public bool bFadeAudio { get { return this["bFadeAudio"].Flag; } set { this["bFadeAudio"].Flag = value; } }
        public LinearColor FadeColor { get { return this[nameof(FadeColor)].As<LinearColor>(); } set { this["FadeColor"] = value; } }
    }
    public class InterpTrackEvent : InterpTrack
    {
        public InterpTrackEvent(nint addr) : base(addr) { }
        public InterpTrackEvent() : base(0) { }
        public Array<EventTrackKey> EventTrack { get { return new Array<EventTrackKey>(this["EventTrack"]); } set { this["EventTrack"] = value; } }
        public bool bFireEventsWhenForwards { get { return this["bFireEventsWhenForwards"].Flag; } set { this["bFireEventsWhenForwards"].Flag = value; } }
        public bool bFireEventsWhenBackwards { get { return this["bFireEventsWhenBackwards"].Flag; } set { this["bFireEventsWhenBackwards"].Flag = value; } }
        public bool bFireEventsWhenJumpingForwards { get { return this["bFireEventsWhenJumpingForwards"].Flag; } set { this["bFireEventsWhenJumpingForwards"].Flag = value; } }
        public bool bUseCustomEventName { get { return this["bUseCustomEventName"].Flag; } set { this["bUseCustomEventName"].Flag = value; } }
    }
    public class InterpTrackDirector : InterpTrack
    {
        public InterpTrackDirector(nint addr) : base(addr) { }
        public InterpTrackDirector() : base(0) { }
        public Array<DirectorTrackCut> CutTrack { get { return new Array<DirectorTrackCut>(this["CutTrack"]); } set { this["CutTrack"] = value; } }
        public bool bSimulateCameraCutsOnClients { get { return this["bSimulateCameraCutsOnClients"].Flag; } set { this["bSimulateCameraCutsOnClients"].Flag = value; } }
    }
    public class InterpTrackColorScale : InterpTrackVectorBase
    {
        public InterpTrackColorScale(nint addr) : base(addr) { }
        public InterpTrackColorScale() : base(0) { }
    }
    public class InterpTrackColorProp : InterpTrackVectorBase
    {
        public InterpTrackColorProp(nint addr) : base(addr) { }
        public InterpTrackColorProp() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackBoolProp : InterpTrack
    {
        public InterpTrackBoolProp(nint addr) : base(addr) { }
        public InterpTrackBoolProp() : base(0) { }
        public Array<BoolTrackKey> BoolTrack { get { return new Array<BoolTrackKey>(this["BoolTrack"]); } set { this["BoolTrack"] = value; } }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpTrackAudioMaster : InterpTrackVectorBase
    {
        public InterpTrackAudioMaster(nint addr) : base(addr) { }
        public InterpTrackAudioMaster() : base(0) { }
    }
    public class InterpTrackVectorBase : InterpTrack
    {
        public InterpTrackVectorBase(nint addr) : base(addr) { }
        public InterpTrackVectorBase() : base(0) { }
        public InterpCurveVector VectorTrack { get { return this[nameof(VectorTrack)].As<InterpCurveVector>(); } set { this["VectorTrack"] = value; } }
        public float CurveTension { get { return this["CurveTension"].GetValue<float>(); } set { this["CurveTension"].SetValue<float>(value); } }
    }
    public class InterpTrackAnimControl : InterpTrackFloatBase
    {
        public InterpTrackAnimControl(nint addr) : base(addr) { }
        public InterpTrackAnimControl() : base(0) { }
        public string SlotName { get { return this["SlotName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<AnimControlTrackKey> AnimSeqs { get { return new Array<AnimControlTrackKey>(this["AnimSeqs"]); } set { this["AnimSeqs"] = value; } }
        public bool bSkipAnimNotifiers { get { return this["bSkipAnimNotifiers"].Flag; } set { this["bSkipAnimNotifiers"].Flag = value; } }
    }
    public class InterpTrackFloatBase : InterpTrack
    {
        public InterpTrackFloatBase(nint addr) : base(addr) { }
        public InterpTrackFloatBase() : base(0) { }
        public InterpCurveFloat FloatTrack { get { return this[nameof(FloatTrack)].As<InterpCurveFloat>(); } set { this["FloatTrack"] = value; } }
        public float CurveTension { get { return this["CurveTension"].GetValue<float>(); } set { this["CurveTension"].SetValue<float>(value); } }
    }
    public class InterpTrack : UEObject
    {
        public InterpTrack(nint addr) : base(addr) { }
        public InterpTrack() : base(0) { }
        public Array<InterpTrack> SubTracks { get { return new Array<InterpTrack>(this["SubTracks"]); } set { this["SubTracks"] = value; } }
        public UEObject TrackInstClass { get { return this["TrackInstClass"]; } set { this["TrackInstClass"] = value; } }
        public byte ActiveCondition { get { return this["ActiveCondition"].GetValue<byte>(); } set { this["ActiveCondition"].SetValue<byte>(value); } }
        public string TrackTitle { get { return this["TrackTitle"].ToString(); } set { /* String properties are read-only */ } }
        public bool bOnePerGroup { get { return this["bOnePerGroup"].Flag; } set { this["bOnePerGroup"].Flag = value; } }
        public bool bDirGroupOnly { get { return this["bDirGroupOnly"].Flag; } set { this["bDirGroupOnly"].Flag = value; } }
        public bool bDisableTrack { get { return this["bDisableTrack"].Flag; } set { this["bDisableTrack"].Flag = value; } }
        public bool bIsSelected { get { return this["bIsSelected"].Flag; } set { this["bIsSelected"].Flag = value; } }
        public bool bIsAnimControlTrack { get { return this["bIsAnimControlTrack"].Flag; } set { this["bIsAnimControlTrack"].Flag = value; } }
        public bool bSubTrackOnly { get { return this["bSubTrackOnly"].Flag; } set { this["bSubTrackOnly"].Flag = value; } }
        public bool bVisible { get { return this["bVisible"].Flag; } set { this["bVisible"].Flag = value; } }
        public bool bIsRecording { get { return this["bIsRecording"].Flag; } set { this["bIsRecording"].Flag = value; } }
    }
    public class InterpToMovementComponent : MovementComponent
    {
        public InterpToMovementComponent(nint addr) : base(addr) { }
        public InterpToMovementComponent() : base(0) { }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public bool bPauseOnImpact { get { return this["bPauseOnImpact"].Flag; } set { this["bPauseOnImpact"].Flag = value; } }
        public bool bSweep { get { return this["bSweep"].Flag; } set { this["bSweep"].Flag = value; } }
        public ETeleportType TeleportType { get { return (ETeleportType)this["TeleportType"].GetValue<int>(); } set { this["TeleportType"].SetValue<int>((int)value); } }
        public EInterpToBehaviourType BehaviourType { get { return (EInterpToBehaviourType)this["BehaviourType"].GetValue<int>(); } set { this["BehaviourType"].SetValue<int>((int)value); } }
        public bool bCheckIfStillInWorld { get { return this["bCheckIfStillInWorld"].Flag; } set { this["bCheckIfStillInWorld"].Flag = value; } }
        public bool bForceSubStepping { get { return this["bForceSubStepping"].Flag; } set { this["bForceSubStepping"].Flag = value; } }
        public UEObject OnInterpToReverse { get { return this["OnInterpToReverse"]; } set { this["OnInterpToReverse"] = value; } }
        public UEObject OnInterpToStop { get { return this["OnInterpToStop"]; } set { this["OnInterpToStop"] = value; } }
        public UEObject OnWaitBeginDelegate { get { return this["OnWaitBeginDelegate"]; } set { this["OnWaitBeginDelegate"] = value; } }
        public UEObject OnWaitEndDelegate { get { return this["OnWaitEndDelegate"]; } set { this["OnWaitEndDelegate"] = value; } }
        public UEObject OnResetDelegate { get { return this["OnResetDelegate"]; } set { this["OnResetDelegate"] = value; } }
        public float MaxSimulationTimeStep { get { return this["MaxSimulationTimeStep"].GetValue<float>(); } set { this["MaxSimulationTimeStep"].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this["MaxSimulationIterations"].GetValue<int>(); } set { this["MaxSimulationIterations"].SetValue<int>(value); } }
        public Array<InterpControlPoint> ControlPoints { get { return new Array<InterpControlPoint>(this["ControlPoints"]); } set { this["ControlPoints"] = value; } }
        public void StopSimulating(UEObject HitResult) { Invoke("StopSimulating", HitResult); }
        public void _InterpToMovementComponent(UEObject Duration, UEObject bPauseOnImpact, UEObject bSweep, UEObject TeleportType, UEObject BehaviourType, UEObject bCheckIfStillInWorld, UEObject bForceSubStepping, UEObject OnInterpToReverse, UEObject OnInterpToStop, UEObject OnWaitBeginDelegate, UEObject OnWaitEndDelegate, UEObject OnResetDelegate, UEObject MaxSimulationTimeStep, UEObject MaxSimulationIterations, UEObject ControlPoints) { Invoke("InterpToMovementComponent", Duration, bPauseOnImpact, bSweep, TeleportType, BehaviourType, bCheckIfStillInWorld, bForceSubStepping, OnInterpToReverse, OnInterpToStop, OnWaitBeginDelegate, OnWaitEndDelegate, OnResetDelegate, MaxSimulationTimeStep, MaxSimulationIterations, ControlPoints); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class InterpGroupInstDirector : InterpGroupInst
    {
        public InterpGroupInstDirector(nint addr) : base(addr) { }
        public InterpGroupInstDirector() : base(0) { }
    }
    public class InterpGroupInstCamera : InterpGroupInst
    {
        public InterpGroupInstCamera(nint addr) : base(addr) { }
        public InterpGroupInstCamera() : base(0) { }
    }
    public class InterpGroupInst : UEObject
    {
        public InterpGroupInst(nint addr) : base(addr) { }
        public InterpGroupInst() : base(0) { }
        public InterpGroup Group { get { return this[nameof(Group)].As<InterpGroup>(); } set { this["Group"] = value; } }
        public Actor GroupActor { get { return this[nameof(GroupActor)].As<Actor>(); } set { this["GroupActor"] = value; } }
        public Array<InterpTrackInst> TrackInst { get { return new Array<InterpTrackInst>(this["TrackInst"]); } set { this["TrackInst"] = value; } }
    }
    public class InterpGroupDirector : InterpGroup
    {
        public InterpGroupDirector(nint addr) : base(addr) { }
        public InterpGroupDirector() : base(0) { }
    }
    public class InterpGroupCamera : InterpGroup
    {
        public InterpGroupCamera(nint addr) : base(addr) { }
        public InterpGroupCamera() : base(0) { }
        public CameraAnim CameraAnimInst { get { return this[nameof(CameraAnimInst)].As<CameraAnim>(); } set { this["CameraAnimInst"] = value; } }
        public float CompressTolerance { get { return this["CompressTolerance"].GetValue<float>(); } set { this["CompressTolerance"].SetValue<float>(value); } }
    }
    public class InterpGroup : UEObject
    {
        public InterpGroup(nint addr) : base(addr) { }
        public InterpGroup() : base(0) { }
        public Array<InterpTrack> InterpTracks { get { return new Array<InterpTrack>(this["InterpTracks"]); } set { this["InterpTracks"] = value; } }
        public string GroupName { get { return this["GroupName"].ToString(); } set { /* String properties are read-only */ } }
        public Color GroupColor { get { return this[nameof(GroupColor)].As<Color>(); } set { this["GroupColor"] = value; } }
        public bool bCollapsed { get { return this["bCollapsed"].Flag; } set { this["bCollapsed"].Flag = value; } }
        public bool bVisible { get { return this["bVisible"].Flag; } set { this["bVisible"].Flag = value; } }
        public bool bIsFolder { get { return this["bIsFolder"].Flag; } set { this["bIsFolder"].Flag = value; } }
        public bool bIsParented { get { return this["bIsParented"].Flag; } set { this["bIsParented"].Flag = value; } }
        public bool bIsSelected { get { return this["bIsSelected"].Flag; } set { this["bIsSelected"].Flag = value; } }
    }
    public class InterpFilter_Custom : InterpFilter
    {
        public InterpFilter_Custom(nint addr) : base(addr) { }
        public InterpFilter_Custom() : base(0) { }
    }
    public class InterpFilter_Classes : InterpFilter
    {
        public InterpFilter_Classes(nint addr) : base(addr) { }
        public InterpFilter_Classes() : base(0) { }
    }
    public class InterpFilter : UEObject
    {
        public InterpFilter(nint addr) : base(addr) { }
        public InterpFilter() : base(0) { }
        public string Caption { get { return this["Caption"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InterpData : UEObject
    {
        public InterpData(nint addr) : base(addr) { }
        public InterpData() : base(0) { }
        public float InterpLength { get { return this["InterpLength"].GetValue<float>(); } set { this["InterpLength"].SetValue<float>(value); } }
        public float PathBuildTime { get { return this["PathBuildTime"].GetValue<float>(); } set { this["PathBuildTime"].SetValue<float>(value); } }
        public Array<InterpGroup> InterpGroups { get { return new Array<InterpGroup>(this["InterpGroups"]); } set { this["InterpGroups"] = value; } }
        public InterpCurveEdSetup CurveEdSetup { get { return this[nameof(CurveEdSetup)].As<InterpCurveEdSetup>(); } set { this["CurveEdSetup"] = value; } }
        public float EdSectionStart { get { return this["EdSectionStart"].GetValue<float>(); } set { this["EdSectionStart"].SetValue<float>(value); } }
        public float EdSectionEnd { get { return this["EdSectionEnd"].GetValue<float>(); } set { this["EdSectionEnd"].SetValue<float>(value); } }
        public bool bShouldBakeAndPrune { get { return this["bShouldBakeAndPrune"].Flag; } set { this["bShouldBakeAndPrune"].Flag = value; } }
        public InterpGroupDirector CachedDirectorGroup { get { return this[nameof(CachedDirectorGroup)].As<InterpGroupDirector>(); } set { this["CachedDirectorGroup"] = value; } }
        public List<string> AllEventNames { get { return this["AllEventNames"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class InterpCurveEdSetup : UEObject
    {
        public InterpCurveEdSetup(nint addr) : base(addr) { }
        public InterpCurveEdSetup() : base(0) { }
        public Array<CurveEdTab> Tabs { get { return new Array<CurveEdTab>(this["Tabs"]); } set { this["Tabs"] = value; } }
        public int ActiveTab { get { return this["ActiveTab"].GetValue<int>(); } set { this["ActiveTab"].SetValue<int>(value); } }
    }
    public class Interface_PreviewMeshProvider : Interface
    {
        public Interface_PreviewMeshProvider(nint addr) : base(addr) { }
        public Interface_PreviewMeshProvider() : base(0) { }
    }
    public class Interface_PostProcessVolume : Interface
    {
        public Interface_PostProcessVolume(nint addr) : base(addr) { }
        public Interface_PostProcessVolume() : base(0) { }
    }
    public class Interface_CollisionDataProvider : Interface
    {
        public Interface_CollisionDataProvider(nint addr) : base(addr) { }
        public Interface_CollisionDataProvider() : base(0) { }
    }
    public class BoneReferenceSkeletonProvider : Interface
    {
        public BoneReferenceSkeletonProvider(nint addr) : base(addr) { }
        public BoneReferenceSkeletonProvider() : base(0) { }
    }
    public class Interface_AssetUserData : Interface
    {
        public Interface_AssetUserData(nint addr) : base(addr) { }
        public Interface_AssetUserData() : base(0) { }
    }
    public class Interface_ActorSubobject : Interface
    {
        public Interface_ActorSubobject(nint addr) : base(addr) { }
        public Interface_ActorSubobject() : base(0) { }
    }
    public class InputVectorAxisDelegateBinding : InputAxisKeyDelegateBinding
    {
        public InputVectorAxisDelegateBinding(nint addr) : base(addr) { }
        public InputVectorAxisDelegateBinding() : base(0) { }
    }
    public class InputTouchDelegateBinding : InputDelegateBinding
    {
        public InputTouchDelegateBinding(nint addr) : base(addr) { }
        public InputTouchDelegateBinding() : base(0) { }
        public Array<BlueprintInputTouchDelegateBinding> InputTouchDelegateBindings { get { return new Array<BlueprintInputTouchDelegateBinding>(this["InputTouchDelegateBindings"]); } set { this["InputTouchDelegateBindings"] = value; } }
    }
    public class InputSettings : UEObject
    {
        public InputSettings(nint addr) : base(addr) { }
        public InputSettings() : base(0) { }
        public Array<InputAxisConfigEntry> AxisConfig { get { return new Array<InputAxisConfigEntry>(this["AxisConfig"]); } set { this["AxisConfig"] = value; } }
        public bool bAltEnterTogglesFullscreen { get { return this["bAltEnterTogglesFullscreen"].Flag; } set { this["bAltEnterTogglesFullscreen"].Flag = value; } }
        public bool bF11TogglesFullscreen { get { return this["bF11TogglesFullscreen"].Flag; } set { this["bF11TogglesFullscreen"].Flag = value; } }
        public bool bUseMouseForTouch { get { return this["bUseMouseForTouch"].Flag; } set { this["bUseMouseForTouch"].Flag = value; } }
        public bool bEnableMouseSmoothing { get { return this["bEnableMouseSmoothing"].Flag; } set { this["bEnableMouseSmoothing"].Flag = value; } }
        public bool bEnableFOVScaling { get { return this["bEnableFOVScaling"].Flag; } set { this["bEnableFOVScaling"].Flag = value; } }
        public bool bCaptureMouseOnLaunch { get { return this["bCaptureMouseOnLaunch"].Flag; } set { this["bCaptureMouseOnLaunch"].Flag = value; } }
        public bool bDefaultViewportMouseLock { get { return this["bDefaultViewportMouseLock"].Flag; } set { this["bDefaultViewportMouseLock"].Flag = value; } }
        public bool bAlwaysShowTouchInterface { get { return this["bAlwaysShowTouchInterface"].Flag; } set { this["bAlwaysShowTouchInterface"].Flag = value; } }
        public bool bShowConsoleOnFourFingerTap { get { return this["bShowConsoleOnFourFingerTap"].Flag; } set { this["bShowConsoleOnFourFingerTap"].Flag = value; } }
        public bool bEnableGestureRecognizer { get { return this["bEnableGestureRecognizer"].Flag; } set { this["bEnableGestureRecognizer"].Flag = value; } }
        public bool bUseAutocorrect { get { return this["bUseAutocorrect"].Flag; } set { this["bUseAutocorrect"].Flag = value; } }
        public List<string> ExcludedAutocorrectOS { get { return this["ExcludedAutocorrectOS"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ExcludedAutocorrectCultures { get { return this["ExcludedAutocorrectCultures"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ExcludedAutocorrectDeviceModels { get { return this["ExcludedAutocorrectDeviceModels"].GetStringList(); } set { /* Arrays are read-only */ } }
        public EMouseCaptureMode DefaultViewportMouseCaptureMode { get { return (EMouseCaptureMode)this["DefaultViewportMouseCaptureMode"].GetValue<int>(); } set { this["DefaultViewportMouseCaptureMode"].SetValue<int>((int)value); } }
        public EMouseLockMode DefaultViewportMouseLockMode { get { return (EMouseLockMode)this["DefaultViewportMouseLockMode"].GetValue<int>(); } set { this["DefaultViewportMouseLockMode"].SetValue<int>((int)value); } }
        public float FOVScale { get { return this["FOVScale"].GetValue<float>(); } set { this["FOVScale"].SetValue<float>(value); } }
        public float DoubleClickTime { get { return this["DoubleClickTime"].GetValue<float>(); } set { this["DoubleClickTime"].SetValue<float>(value); } }
        public Array<InputActionKeyMapping> ActionMappings { get { return new Array<InputActionKeyMapping>(this["ActionMappings"]); } set { this["ActionMappings"] = value; } }
        public Array<InputAxisKeyMapping> AxisMappings { get { return new Array<InputAxisKeyMapping>(this["AxisMappings"]); } set { this["AxisMappings"] = value; } }
        public Array<InputActionSpeechMapping> SpeechMappings { get { return new Array<InputActionSpeechMapping>(this["SpeechMappings"]); } set { this["SpeechMappings"] = value; } }
        public UEObject DefaultPlayerInputClass { get { return this["DefaultPlayerInputClass"]; } set { this["DefaultPlayerInputClass"] = value; } }
        public UEObject DefaultInputComponentClass { get { return this["DefaultInputComponentClass"]; } set { this["DefaultInputComponentClass"] = value; } }
        public Array<InputActionKeyMapping> DefaultActionMappings { get { return new Array<InputActionKeyMapping>(this["DefaultActionMappings"]); } set { this["DefaultActionMappings"] = value; } }
        public Array<InputAxisKeyMapping> DefaultAxisMappings { get { return new Array<InputAxisKeyMapping>(this["DefaultAxisMappings"]); } set { this["DefaultAxisMappings"] = value; } }
        public SoftObjectPath DefaultTouchInterface { get { return this[nameof(DefaultTouchInterface)].As<SoftObjectPath>(); } set { this["DefaultTouchInterface"] = value; } }
        public Key ConsoleKey { get { return this[nameof(ConsoleKey)].As<Key>(); } set { this["ConsoleKey"] = value; } }
        public Array<Key> ConsoleKeys { get { return new Array<Key>(this["ConsoleKeys"]); } set { this["ConsoleKeys"] = value; } }
        public UEObject OnBindingChangedDelegate { get { return this["OnBindingChangedDelegate"]; } set { this["OnBindingChangedDelegate"] = value; } }
        public UEObject OnBindingsResetDelegate { get { return this["OnBindingsResetDelegate"]; } set { this["OnBindingsResetDelegate"] = value; } }
        public void SaveKeyMappings() { Invoke("SaveKeyMappings"); }
        public void _InputSettings(UEObject AxisConfig, UEObject bAltEnterTogglesFullscreen, UEObject bF11TogglesFullscreen, UEObject bUseMouseForTouch, UEObject bEnableMouseSmoothing, UEObject bEnableFOVScaling, UEObject bCaptureMouseOnLaunch, UEObject bDefaultViewportMouseLock, UEObject bAlwaysShowTouchInterface, UEObject bShowConsoleOnFourFingerTap, UEObject bEnableGestureRecognizer, UEObject bUseAutocorrect, UEObject ExcludedAutocorrectOS, UEObject ExcludedAutocorrectCultures, UEObject ExcludedAutocorrectDeviceModels, UEObject DefaultViewportMouseCaptureMode, UEObject DefaultViewportMouseLockMode, UEObject FOVScale, UEObject DoubleClickTime, UEObject ActionMappings, UEObject AxisMappings, UEObject SpeechMappings, UEObject DefaultPlayerInputClass, UEObject DefaultInputComponentClass, UEObject DefaultActionMappings, UEObject DefaultAxisMappings, UEObject DefaultTouchInterface, UEObject ConsoleKey, UEObject ConsoleKeys, UEObject OnBindingChangedDelegate, UEObject OnBindingsResetDelegate) { Invoke("InputSettings", AxisConfig, bAltEnterTogglesFullscreen, bF11TogglesFullscreen, bUseMouseForTouch, bEnableMouseSmoothing, bEnableFOVScaling, bCaptureMouseOnLaunch, bDefaultViewportMouseLock, bAlwaysShowTouchInterface, bShowConsoleOnFourFingerTap, bEnableGestureRecognizer, bUseAutocorrect, ExcludedAutocorrectOS, ExcludedAutocorrectCultures, ExcludedAutocorrectDeviceModels, DefaultViewportMouseCaptureMode, DefaultViewportMouseLockMode, FOVScale, DoubleClickTime, ActionMappings, AxisMappings, SpeechMappings, DefaultPlayerInputClass, DefaultInputComponentClass, DefaultActionMappings, DefaultAxisMappings, DefaultTouchInterface, ConsoleKey, ConsoleKeys, OnBindingChangedDelegate, OnBindingsResetDelegate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class InputKeyDelegateBinding : InputDelegateBinding
    {
        public InputKeyDelegateBinding(nint addr) : base(addr) { }
        public InputKeyDelegateBinding() : base(0) { }
        public Array<BlueprintInputKeyDelegateBinding> InputKeyDelegateBindings { get { return new Array<BlueprintInputKeyDelegateBinding>(this["InputKeyDelegateBindings"]); } set { this["InputKeyDelegateBindings"] = value; } }
    }
    public class InputAxisKeyDelegateBinding : InputDelegateBinding
    {
        public InputAxisKeyDelegateBinding(nint addr) : base(addr) { }
        public InputAxisKeyDelegateBinding() : base(0) { }
        public Array<BlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings { get { return new Array<BlueprintInputAxisKeyDelegateBinding>(this["InputAxisKeyDelegateBindings"]); } set { this["InputAxisKeyDelegateBindings"] = value; } }
    }
    public class InputAxisDelegateBinding : InputDelegateBinding
    {
        public InputAxisDelegateBinding(nint addr) : base(addr) { }
        public InputAxisDelegateBinding() : base(0) { }
        public Array<BlueprintInputAxisDelegateBinding> InputAxisDelegateBindings { get { return new Array<BlueprintInputAxisDelegateBinding>(this["InputAxisDelegateBindings"]); } set { this["InputAxisDelegateBindings"] = value; } }
    }
    public class InputActionDelegateBinding : InputDelegateBinding
    {
        public InputActionDelegateBinding(nint addr) : base(addr) { }
        public InputActionDelegateBinding() : base(0) { }
        public Array<BlueprintInputActionDelegateBinding> InputActionDelegateBindings { get { return new Array<BlueprintInputActionDelegateBinding>(this["InputActionDelegateBindings"]); } set { this["InputActionDelegateBindings"] = value; } }
    }
    public class InputDelegateBinding : DynamicBlueprintBinding
    {
        public InputDelegateBinding(nint addr) : base(addr) { }
        public InputDelegateBinding() : base(0) { }
    }
    public class InheritableComponentHandler : UEObject
    {
        public InheritableComponentHandler(nint addr) : base(addr) { }
        public InheritableComponentHandler() : base(0) { }
        public Array<ComponentOverrideRecord> Records { get { return new Array<ComponentOverrideRecord>(this["Records"]); } set { this["Records"] = value; } }
        public Array<ActorComponent> UnnecessaryComponents { get { return new Array<ActorComponent>(this["UnnecessaryComponents"]); } set { this["UnnecessaryComponents"] = value; } }
    }
    public class InGameAdManager : PlatformInterfaceBase
    {
        public InGameAdManager(nint addr) : base(addr) { }
        public InGameAdManager() : base(0) { }
        public bool bShouldPauseWhileAdOpen { get { return this["bShouldPauseWhileAdOpen"].Flag; } set { this["bShouldPauseWhileAdOpen"].Flag = value; } }
        public Array<UEObject> ClickedBannerDelegates { get { return new Array<UEObject>(this["ClickedBannerDelegates"]); } set { this["ClickedBannerDelegates"] = value; } }
        public Array<UEObject> ClosedAdDelegates { get { return new Array<UEObject>(this["ClosedAdDelegates"]); } set { this["ClosedAdDelegates"] = value; } }
    }
    public class ImportantToggleSettingInterface : Interface
    {
        public ImportantToggleSettingInterface(nint addr) : base(addr) { }
        public ImportantToggleSettingInterface() : base(0) { }
    }
    public class ImportanceSamplingLibrary : UEObject
    {
        public ImportanceSamplingLibrary(nint addr) : base(addr) { }
        public ImportanceSamplingLibrary() : base(0) { }
        public UEObject RandomSobolFloat(UEObject Index, UEObject Dimension, UEObject Seed) { return InvokeUEObject("RandomSobolFloat", Index, Dimension, Seed); }
        public void _ImportanceSamplingLibrary() { Invoke("ImportanceSamplingLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class HLODProxyDesc : UEObject
    {
        public HLODProxyDesc(nint addr) : base(addr) { }
        public HLODProxyDesc() : base(0) { }
    }
    public class HLODProxy : UEObject
    {
        public HLODProxy(nint addr) : base(addr) { }
        public HLODProxy() : base(0) { }
        public Array<HLODProxyMesh> ProxyMeshes { get { return new Array<HLODProxyMesh>(this["ProxyMeshes"]); } set { this["ProxyMeshes"] = value; } }
        public UEObject HLODActors { get { return this["HLODActors"]; } set { this["HLODActors"] = value; } }
    }
    public class HLODEngineSubsystem : EngineSubsystem
    {
        public HLODEngineSubsystem(nint addr) : base(addr) { }
        public HLODEngineSubsystem() : base(0) { }
    }
    public class HealthSnapshotBlueprintLibrary : UEObject
    {
        public HealthSnapshotBlueprintLibrary(nint addr) : base(addr) { }
        public HealthSnapshotBlueprintLibrary() : base(0) { }
        public void StopPerformanceSnapshots() { Invoke("StopPerformanceSnapshots"); }
        public void _HealthSnapshotBlueprintLibrary() { Invoke("HealthSnapshotBlueprintLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class HapticFeedbackEffect_SoundWave : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_SoundWave(nint addr) : base(addr) { }
        public HapticFeedbackEffect_SoundWave() : base(0) { }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
    }
    public class HapticFeedbackEffect_Curve : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_Curve(nint addr) : base(addr) { }
        public HapticFeedbackEffect_Curve() : base(0) { }
        public HapticFeedbackDetails_Curve HapticDetails { get { return this[nameof(HapticDetails)].As<HapticFeedbackDetails_Curve>(); } set { this["HapticDetails"] = value; } }
    }
    public class HapticFeedbackEffect_Buffer : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_Buffer(nint addr) : base(addr) { }
        public HapticFeedbackEffect_Buffer() : base(0) { }
        public List<byte> Amplitudes { get { return this["Amplitudes"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public int SampleRate { get { return this["SampleRate"].GetValue<int>(); } set { this["SampleRate"].SetValue<int>(value); } }
    }
    public class HapticFeedbackEffect_Base : UEObject
    {
        public HapticFeedbackEffect_Base(nint addr) : base(addr) { }
        public HapticFeedbackEffect_Base() : base(0) { }
    }
    public class GeneratedMeshAreaLight : SpotLight
    {
        public GeneratedMeshAreaLight(nint addr) : base(addr) { }
        public GeneratedMeshAreaLight() : base(0) { }
    }
    public class SpotLight : Light
    {
        public SpotLight(nint addr) : base(addr) { }
        public SpotLight() : base(0) { }
        public SpotLightComponent SpotLightComponent { get { return this[nameof(SpotLightComponent)].As<SpotLightComponent>(); } set { this["SpotLightComponent"] = value; } }
        public void SetOuterConeAngle(UEObject NewOuterConeAngle) { Invoke("SetOuterConeAngle", NewOuterConeAngle); }
        public void _SpotLight(UEObject SpotLightComponent) { Invoke("SpotLight", SpotLightComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameSession : Info
    {
        public GameSession(nint addr) : base(addr) { }
        public GameSession() : base(0) { }
        public int MaxSpectators { get { return this["MaxSpectators"].GetValue<int>(); } set { this["MaxSpectators"].SetValue<int>(value); } }
        public int MaxPlayers { get { return this["MaxPlayers"].GetValue<int>(); } set { this["MaxPlayers"].SetValue<int>(value); } }
        public int MaxPartySize { get { return this["MaxPartySize"].GetValue<int>(); } set { this["MaxPartySize"].SetValue<int>(value); } }
        public byte MaxSplitscreensPerConnection { get { return this["MaxSplitscreensPerConnection"].GetValue<byte>(); } set { this["MaxSplitscreensPerConnection"].SetValue<byte>(value); } }
        public bool bRequiresPushToTalk { get { return this["bRequiresPushToTalk"].Flag; } set { this["bRequiresPushToTalk"].Flag = value; } }
        public string SessionName { get { return this["SessionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class GameplayStatics : UEObject
    {
        public GameplayStatics(nint addr) : base(addr) { }
        public GameplayStatics() : base(0) { }
        public void UnRetainAllSoundsInSoundClass(UEObject InSoundClass) { Invoke("UnRetainAllSoundsInSoundClass", InSoundClass); }
        public void _GameplayStatics() { Invoke("GameplayStatics"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameNetworkManager : Info
    {
        public GameNetworkManager(nint addr) : base(addr) { }
        public GameNetworkManager() : base(0) { }
        public float BadPacketLossThreshold { get { return this["BadPacketLossThreshold"].GetValue<float>(); } set { this["BadPacketLossThreshold"].SetValue<float>(value); } }
        public float SeverePacketLossThreshold { get { return this["SeverePacketLossThreshold"].GetValue<float>(); } set { this["SeverePacketLossThreshold"].SetValue<float>(value); } }
        public int BadPingThreshold { get { return this["BadPingThreshold"].GetValue<int>(); } set { this["BadPingThreshold"].SetValue<int>(value); } }
        public int SeverePingThreshold { get { return this["SeverePingThreshold"].GetValue<int>(); } set { this["SeverePingThreshold"].SetValue<int>(value); } }
        public int AdjustedNetSpeed { get { return this["AdjustedNetSpeed"].GetValue<int>(); } set { this["AdjustedNetSpeed"].SetValue<int>(value); } }
        public float LastNetSpeedUpdateTime { get { return this["LastNetSpeedUpdateTime"].GetValue<float>(); } set { this["LastNetSpeedUpdateTime"].SetValue<float>(value); } }
        public int TotalNetBandwidth { get { return this["TotalNetBandwidth"].GetValue<int>(); } set { this["TotalNetBandwidth"].SetValue<int>(value); } }
        public int MinDynamicBandwidth { get { return this["MinDynamicBandwidth"].GetValue<int>(); } set { this["MinDynamicBandwidth"].SetValue<int>(value); } }
        public int MaxDynamicBandwidth { get { return this["MaxDynamicBandwidth"].GetValue<int>(); } set { this["MaxDynamicBandwidth"].SetValue<int>(value); } }
        public bool bIsStandbyCheckingEnabled { get { return this["bIsStandbyCheckingEnabled"].Flag; } set { this["bIsStandbyCheckingEnabled"].Flag = value; } }
        public bool bHasStandbyCheatTriggered { get { return this["bHasStandbyCheatTriggered"].Flag; } set { this["bHasStandbyCheatTriggered"].Flag = value; } }
        public float StandbyRxCheatTime { get { return this["StandbyRxCheatTime"].GetValue<float>(); } set { this["StandbyRxCheatTime"].SetValue<float>(value); } }
        public float StandbyTxCheatTime { get { return this["StandbyTxCheatTime"].GetValue<float>(); } set { this["StandbyTxCheatTime"].SetValue<float>(value); } }
        public float PercentMissingForRxStandby { get { return this["PercentMissingForRxStandby"].GetValue<float>(); } set { this["PercentMissingForRxStandby"].SetValue<float>(value); } }
        public float PercentMissingForTxStandby { get { return this["PercentMissingForTxStandby"].GetValue<float>(); } set { this["PercentMissingForTxStandby"].SetValue<float>(value); } }
        public float PercentForBadPing { get { return this["PercentForBadPing"].GetValue<float>(); } set { this["PercentForBadPing"].SetValue<float>(value); } }
        public float JoinInProgressStandbyWaitTime { get { return this["JoinInProgressStandbyWaitTime"].GetValue<float>(); } set { this["JoinInProgressStandbyWaitTime"].SetValue<float>(value); } }
        public float MoveRepSize { get { return this["MoveRepSize"].GetValue<float>(); } set { this["MoveRepSize"].SetValue<float>(value); } }
        public float MAXPOSITIONERRORSQUARED { get { return this["MAXPOSITIONERRORSQUARED"].GetValue<float>(); } set { this["MAXPOSITIONERRORSQUARED"].SetValue<float>(value); } }
        public float MAXNEARZEROVELOCITYSQUARED { get { return this["MAXNEARZEROVELOCITYSQUARED"].GetValue<float>(); } set { this["MAXNEARZEROVELOCITYSQUARED"].SetValue<float>(value); } }
        public float CLIENTADJUSTUPDATECOST { get { return this["CLIENTADJUSTUPDATECOST"].GetValue<float>(); } set { this["CLIENTADJUSTUPDATECOST"].SetValue<float>(value); } }
        public float MAXCLIENTUPDATEINTERVAL { get { return this["MAXCLIENTUPDATEINTERVAL"].GetValue<float>(); } set { this["MAXCLIENTUPDATEINTERVAL"].SetValue<float>(value); } }
        public float MaxClientForcedUpdateDuration { get { return this["MaxClientForcedUpdateDuration"].GetValue<float>(); } set { this["MaxClientForcedUpdateDuration"].SetValue<float>(value); } }
        public float ServerForcedUpdateHitchThreshold { get { return this["ServerForcedUpdateHitchThreshold"].GetValue<float>(); } set { this["ServerForcedUpdateHitchThreshold"].SetValue<float>(value); } }
        public float ServerForcedUpdateHitchCooldown { get { return this["ServerForcedUpdateHitchCooldown"].GetValue<float>(); } set { this["ServerForcedUpdateHitchCooldown"].SetValue<float>(value); } }
        public float MaxMoveDeltaTime { get { return this["MaxMoveDeltaTime"].GetValue<float>(); } set { this["MaxMoveDeltaTime"].SetValue<float>(value); } }
        public float MaxClientSmoothingDeltaTime { get { return this["MaxClientSmoothingDeltaTime"].GetValue<float>(); } set { this["MaxClientSmoothingDeltaTime"].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTime { get { return this["ClientNetSendMoveDeltaTime"].GetValue<float>(); } set { this["ClientNetSendMoveDeltaTime"].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTimeThrottled { get { return this["ClientNetSendMoveDeltaTimeThrottled"].GetValue<float>(); } set { this["ClientNetSendMoveDeltaTimeThrottled"].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTimeStationary { get { return this["ClientNetSendMoveDeltaTimeStationary"].GetValue<float>(); } set { this["ClientNetSendMoveDeltaTimeStationary"].SetValue<float>(value); } }
        public int ClientNetSendMoveThrottleAtNetSpeed { get { return this["ClientNetSendMoveThrottleAtNetSpeed"].GetValue<int>(); } set { this["ClientNetSendMoveThrottleAtNetSpeed"].SetValue<int>(value); } }
        public int ClientNetSendMoveThrottleOverPlayerCount { get { return this["ClientNetSendMoveThrottleOverPlayerCount"].GetValue<int>(); } set { this["ClientNetSendMoveThrottleOverPlayerCount"].SetValue<int>(value); } }
        public bool ClientAuthorativePosition { get { return this["ClientAuthorativePosition"].Flag; } set { this["ClientAuthorativePosition"].Flag = value; } }
        public float ClientErrorUpdateRateLimit { get { return this["ClientErrorUpdateRateLimit"].GetValue<float>(); } set { this["ClientErrorUpdateRateLimit"].SetValue<float>(value); } }
        public float ClientNetCamUpdateDeltaTime { get { return this["ClientNetCamUpdateDeltaTime"].GetValue<float>(); } set { this["ClientNetCamUpdateDeltaTime"].SetValue<float>(value); } }
        public float ClientNetCamUpdatePositionLimit { get { return this["ClientNetCamUpdatePositionLimit"].GetValue<float>(); } set { this["ClientNetCamUpdatePositionLimit"].SetValue<float>(value); } }
        public bool bMovementTimeDiscrepancyDetection { get { return this["bMovementTimeDiscrepancyDetection"].Flag; } set { this["bMovementTimeDiscrepancyDetection"].Flag = value; } }
        public bool bMovementTimeDiscrepancyResolution { get { return this["bMovementTimeDiscrepancyResolution"].Flag; } set { this["bMovementTimeDiscrepancyResolution"].Flag = value; } }
        public float MovementTimeDiscrepancyMaxTimeMargin { get { return this["MovementTimeDiscrepancyMaxTimeMargin"].GetValue<float>(); } set { this["MovementTimeDiscrepancyMaxTimeMargin"].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyMinTimeMargin { get { return this["MovementTimeDiscrepancyMinTimeMargin"].GetValue<float>(); } set { this["MovementTimeDiscrepancyMinTimeMargin"].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyResolutionRate { get { return this["MovementTimeDiscrepancyResolutionRate"].GetValue<float>(); } set { this["MovementTimeDiscrepancyResolutionRate"].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyDriftAllowance { get { return this["MovementTimeDiscrepancyDriftAllowance"].GetValue<float>(); } set { this["MovementTimeDiscrepancyDriftAllowance"].SetValue<float>(value); } }
        public bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution { get { return this["bMovementTimeDiscrepancyForceCorrectionsDuringResolution"].Flag; } set { this["bMovementTimeDiscrepancyForceCorrectionsDuringResolution"].Flag = value; } }
        public bool bUseDistanceBasedRelevancy { get { return this["bUseDistanceBasedRelevancy"].Flag; } set { this["bUseDistanceBasedRelevancy"].Flag = value; } }
    }
    public class GameEngine : Engine
    {
        public GameEngine(nint addr) : base(addr) { }
        public GameEngine() : base(0) { }
        public float MaxDeltaTime { get { return this["MaxDeltaTime"].GetValue<float>(); } set { this["MaxDeltaTime"].SetValue<float>(value); } }
        public float ServerFlushLogInterval { get { return this["ServerFlushLogInterval"].GetValue<float>(); } set { this["ServerFlushLogInterval"].SetValue<float>(value); } }
        public GameInstance GameInstance { get { return this[nameof(GameInstance)].As<GameInstance>(); } set { this["GameInstance"] = value; } }
    }
    public class ForceFeedbackEffect : UEObject
    {
        public ForceFeedbackEffect(nint addr) : base(addr) { }
        public ForceFeedbackEffect() : base(0) { }
        public Array<ForceFeedbackChannelDetails> ChannelDetails { get { return new Array<ForceFeedbackChannelDetails>(this["ChannelDetails"]); } set { this["ChannelDetails"] = value; } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
    }
    public class ForceFeedbackComponent : SceneComponent
    {
        public ForceFeedbackComponent(nint addr) : base(addr) { }
        public ForceFeedbackComponent() : base(0) { }
        public ForceFeedbackEffect ForceFeedbackEffect { get { return this[nameof(ForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["ForceFeedbackEffect"] = value; } }
        public bool bAutoDestroy { get { return this["bAutoDestroy"].Flag; } set { this["bAutoDestroy"].Flag = value; } }
        public bool bStopWhenOwnerDestroyed { get { return this["bStopWhenOwnerDestroyed"].Flag; } set { this["bStopWhenOwnerDestroyed"].Flag = value; } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this["bIgnoreTimeDilation"].Flag; } set { this["bIgnoreTimeDilation"].Flag = value; } }
        public bool bOverrideAttenuation { get { return this["bOverrideAttenuation"].Flag; } set { this["bOverrideAttenuation"].Flag = value; } }
        public float IntensityMultiplier { get { return this["IntensityMultiplier"].GetValue<float>(); } set { this["IntensityMultiplier"].SetValue<float>(value); } }
        public ForceFeedbackAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<ForceFeedbackAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public ForceFeedbackAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<ForceFeedbackAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public UEObject OnForceFeedbackFinished { get { return this["OnForceFeedbackFinished"]; } set { this["OnForceFeedbackFinished"] = value; } }
        public void Stop() { Invoke("Stop"); }
        public void _ForceFeedbackComponent(UEObject ForceFeedbackEffect, UEObject bAutoDestroy, UEObject bStopWhenOwnerDestroyed, UEObject bLooping, UEObject bIgnoreTimeDilation, UEObject bOverrideAttenuation, UEObject IntensityMultiplier, UEObject AttenuationSettings, UEObject AttenuationOverrides, UEObject OnForceFeedbackFinished) { Invoke("ForceFeedbackComponent", ForceFeedbackEffect, bAutoDestroy, bStopWhenOwnerDestroyed, bLooping, bIgnoreTimeDilation, bOverrideAttenuation, IntensityMultiplier, AttenuationSettings, AttenuationOverrides, OnForceFeedbackFinished); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ForceFeedbackAttenuation : UEObject
    {
        public ForceFeedbackAttenuation(nint addr) : base(addr) { }
        public ForceFeedbackAttenuation() : base(0) { }
        public ForceFeedbackAttenuationSettings Attenuation { get { return this[nameof(Attenuation)].As<ForceFeedbackAttenuationSettings>(); } set { this["Attenuation"] = value; } }
    }
    public class FontImportOptions : UEObject
    {
        public FontImportOptions(nint addr) : base(addr) { }
        public FontImportOptions() : base(0) { }
        public FontImportOptionsData Data { get { return this[nameof(Data)].As<FontImportOptionsData>(); } set { this["Data"] = value; } }
    }
    public class FontFace : UEObject
    {
        public FontFace(nint addr) : base(addr) { }
        public FontFace() : base(0) { }
        public string SourceFilename { get { return this["SourceFilename"].ToString(); } set { /* String properties are read-only */ } }
        public EFontHinting Hinting { get { return (EFontHinting)this["Hinting"].GetValue<int>(); } set { this["Hinting"].SetValue<int>((int)value); } }
        public EFontLoadingPolicy LoadingPolicy { get { return (EFontLoadingPolicy)this["LoadingPolicy"].GetValue<int>(); } set { this["LoadingPolicy"].SetValue<int>((int)value); } }
        public EFontLayoutMethod LayoutMethod { get { return (EFontLayoutMethod)this["LayoutMethod"].GetValue<int>(); } set { this["LayoutMethod"].SetValue<int>((int)value); } }
    }
    public class Font : UEObject
    {
        public Font(nint addr) : base(addr) { }
        public Font() : base(0) { }
        public EFontCacheType FontCacheType { get { return (EFontCacheType)this["FontCacheType"].GetValue<int>(); } set { this["FontCacheType"].SetValue<int>((int)value); } }
        public Array<FontCharacter> Characters { get { return new Array<FontCharacter>(this["Characters"]); } set { this["Characters"] = value; } }
        public Array<Texture2D> Textures { get { return new Array<Texture2D>(this["Textures"]); } set { this["Textures"] = value; } }
        public int IsRemapped { get { return this["IsRemapped"].GetValue<int>(); } set { this["IsRemapped"].SetValue<int>(value); } }
        public float EmScale { get { return this["EmScale"].GetValue<float>(); } set { this["EmScale"].SetValue<float>(value); } }
        public float Ascent { get { return this["Ascent"].GetValue<float>(); } set { this["Ascent"].SetValue<float>(value); } }
        public float Descent { get { return this["Descent"].GetValue<float>(); } set { this["Descent"].SetValue<float>(value); } }
        public float Leading { get { return this["Leading"].GetValue<float>(); } set { this["Leading"].SetValue<float>(value); } }
        public int Kerning { get { return this["Kerning"].GetValue<int>(); } set { this["Kerning"].SetValue<int>(value); } }
        public FontImportOptionsData ImportOptions { get { return this[nameof(ImportOptions)].As<FontImportOptionsData>(); } set { this["ImportOptions"] = value; } }
        public int NumCharacters { get { return this["NumCharacters"].GetValue<int>(); } set { this["NumCharacters"].SetValue<int>(value); } }
        public List<int> MaxCharHeight { get { return this["MaxCharHeight"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public float ScalingFactor { get { return this["ScalingFactor"].GetValue<float>(); } set { this["ScalingFactor"].SetValue<float>(value); } }
        public int LegacyFontSize { get { return this["LegacyFontSize"].GetValue<int>(); } set { this["LegacyFontSize"].SetValue<int>(value); } }
        public string LegacyFontName { get { return this["LegacyFontName"].ToString(); } set { /* String properties are read-only */ } }
        public CompositeFont CompositeFont { get { return this[nameof(CompositeFont)].As<CompositeFont>(); } set { this["CompositeFont"] = value; } }
    }
    public class FloatingPawnMovement : PawnMovementComponent
    {
        public FloatingPawnMovement(nint addr) : base(addr) { }
        public FloatingPawnMovement() : base(0) { }
        public float MaxSpeed { get { return this["MaxSpeed"].GetValue<float>(); } set { this["MaxSpeed"].SetValue<float>(value); } }
        public float Acceleration { get { return this["Acceleration"].GetValue<float>(); } set { this["Acceleration"].SetValue<float>(value); } }
        public float Deceleration { get { return this["Deceleration"].GetValue<float>(); } set { this["Deceleration"].SetValue<float>(value); } }
        public float TurningBoost { get { return this["TurningBoost"].GetValue<float>(); } set { this["TurningBoost"].SetValue<float>(value); } }
        public bool bPositionCorrected { get { return this["bPositionCorrected"].Flag; } set { this["bPositionCorrected"].Flag = value; } }
    }
    public class Exporter : UEObject
    {
        public Exporter(nint addr) : base(addr) { }
        public Exporter() : base(0) { }
        public UEObject SupportedClass { get { return this["SupportedClass"]; } set { this["SupportedClass"] = value; } }
        public UEObject ExportRootScope { get { return this[nameof(ExportRootScope)]; } set { this["ExportRootScope"] = value; } }
        public List<string> FormatExtension { get { return this["FormatExtension"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> FormatDescription { get { return this["FormatDescription"].GetStringList(); } set { /* Arrays are read-only */ } }
        public int PreferredFormatIndex { get { return this["PreferredFormatIndex"].GetValue<int>(); } set { this["PreferredFormatIndex"].SetValue<int>(value); } }
        public int TextIndent { get { return this["TextIndent"].GetValue<int>(); } set { this["TextIndent"].SetValue<int>(value); } }
        public bool bText { get { return this["bText"].Flag; } set { this["bText"].Flag = value; } }
        public bool bSelectedOnly { get { return this["bSelectedOnly"].Flag; } set { this["bSelectedOnly"].Flag = value; } }
        public bool bForceFileOperations { get { return this["bForceFileOperations"].Flag; } set { this["bForceFileOperations"].Flag = value; } }
        public AssetExportTask ExportTask { get { return this[nameof(ExportTask)].As<AssetExportTask>(); } set { this["ExportTask"] = value; } }
        public UEObject ScriptRunAssetExportTask(UEObject Task) { return InvokeUEObject("ScriptRunAssetExportTask", Task); }
        public void _Exporter(UEObject SupportedClass, UEObject ExportRootScope, UEObject FormatExtension, UEObject FormatDescription, UEObject PreferredFormatIndex, UEObject TextIndent, UEObject bText, UEObject bSelectedOnly, UEObject bForceFileOperations, UEObject ExportTask) { Invoke("Exporter", SupportedClass, ExportRootScope, FormatExtension, FormatDescription, PreferredFormatIndex, TextIndent, bText, bSelectedOnly, bForceFileOperations, ExportTask); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ExponentialHeightFogComponent : SceneComponent
    {
        public ExponentialHeightFogComponent(nint addr) : base(addr) { }
        public ExponentialHeightFogComponent() : base(0) { }
        public float FogDensity { get { return this["FogDensity"].GetValue<float>(); } set { this["FogDensity"].SetValue<float>(value); } }
        public float FogHeightFalloff { get { return this["FogHeightFalloff"].GetValue<float>(); } set { this["FogHeightFalloff"].SetValue<float>(value); } }
        public ExponentialHeightFogData SecondFogData { get { return this[nameof(SecondFogData)].As<ExponentialHeightFogData>(); } set { this["SecondFogData"] = value; } }
        public LinearColor FogInscatteringColor { get { return this[nameof(FogInscatteringColor)].As<LinearColor>(); } set { this["FogInscatteringColor"] = value; } }
        public TextureCube InscatteringColorCubemap { get { return this[nameof(InscatteringColorCubemap)].As<TextureCube>(); } set { this["InscatteringColorCubemap"] = value; } }
        public float InscatteringColorCubemapAngle { get { return this["InscatteringColorCubemapAngle"].GetValue<float>(); } set { this["InscatteringColorCubemapAngle"].SetValue<float>(value); } }
        public LinearColor InscatteringTextureTint { get { return this[nameof(InscatteringTextureTint)].As<LinearColor>(); } set { this["InscatteringTextureTint"] = value; } }
        public float FullyDirectionalInscatteringColorDistance { get { return this["FullyDirectionalInscatteringColorDistance"].GetValue<float>(); } set { this["FullyDirectionalInscatteringColorDistance"].SetValue<float>(value); } }
        public float NonDirectionalInscatteringColorDistance { get { return this["NonDirectionalInscatteringColorDistance"].GetValue<float>(); } set { this["NonDirectionalInscatteringColorDistance"].SetValue<float>(value); } }
        public float DirectionalInscatteringExponent { get { return this["DirectionalInscatteringExponent"].GetValue<float>(); } set { this["DirectionalInscatteringExponent"].SetValue<float>(value); } }
        public float DirectionalInscatteringStartDistance { get { return this["DirectionalInscatteringStartDistance"].GetValue<float>(); } set { this["DirectionalInscatteringStartDistance"].SetValue<float>(value); } }
        public LinearColor DirectionalInscatteringColor { get { return this[nameof(DirectionalInscatteringColor)].As<LinearColor>(); } set { this["DirectionalInscatteringColor"] = value; } }
        public float FogMaxOpacity { get { return this["FogMaxOpacity"].GetValue<float>(); } set { this["FogMaxOpacity"].SetValue<float>(value); } }
        public float StartDistance { get { return this["StartDistance"].GetValue<float>(); } set { this["StartDistance"].SetValue<float>(value); } }
        public float FogCutoffDistance { get { return this["FogCutoffDistance"].GetValue<float>(); } set { this["FogCutoffDistance"].SetValue<float>(value); } }
        public bool bEnableVolumetricFog { get { return this["bEnableVolumetricFog"].Flag; } set { this["bEnableVolumetricFog"].Flag = value; } }
        public float VolumetricFogScatteringDistribution { get { return this["VolumetricFogScatteringDistribution"].GetValue<float>(); } set { this["VolumetricFogScatteringDistribution"].SetValue<float>(value); } }
        public Color VolumetricFogAlbedo { get { return this[nameof(VolumetricFogAlbedo)].As<Color>(); } set { this["VolumetricFogAlbedo"] = value; } }
        public LinearColor VolumetricFogEmissive { get { return this[nameof(VolumetricFogEmissive)].As<LinearColor>(); } set { this["VolumetricFogEmissive"] = value; } }
        public float VolumetricFogExtinctionScale { get { return this["VolumetricFogExtinctionScale"].GetValue<float>(); } set { this["VolumetricFogExtinctionScale"].SetValue<float>(value); } }
        public float VolumetricFogDistance { get { return this["VolumetricFogDistance"].GetValue<float>(); } set { this["VolumetricFogDistance"].SetValue<float>(value); } }
        public float VolumetricFogStaticLightingScatteringIntensity { get { return this["VolumetricFogStaticLightingScatteringIntensity"].GetValue<float>(); } set { this["VolumetricFogStaticLightingScatteringIntensity"].SetValue<float>(value); } }
        public bool bOverrideLightColorsWithFogInscatteringColors { get { return this["bOverrideLightColorsWithFogInscatteringColors"].Flag; } set { this["bOverrideLightColorsWithFogInscatteringColors"].Flag = value; } }
        public void SetVolumetricFogScatteringDistribution(UEObject NewValue) { Invoke("SetVolumetricFogScatteringDistribution", NewValue); }
        public void _ExponentialHeightFogComponent(UEObject FogDensity, UEObject FogHeightFalloff, UEObject SecondFogData, UEObject FogInscatteringColor, UEObject InscatteringColorCubemap, UEObject InscatteringColorCubemapAngle, UEObject InscatteringTextureTint, UEObject FullyDirectionalInscatteringColorDistance, UEObject NonDirectionalInscatteringColorDistance, UEObject DirectionalInscatteringExponent, UEObject DirectionalInscatteringStartDistance, UEObject DirectionalInscatteringColor, UEObject FogMaxOpacity, UEObject StartDistance, UEObject FogCutoffDistance, UEObject bEnableVolumetricFog, UEObject VolumetricFogScatteringDistribution, UEObject VolumetricFogAlbedo, UEObject VolumetricFogEmissive, UEObject VolumetricFogExtinctionScale, UEObject VolumetricFogDistance, UEObject VolumetricFogStaticLightingScatteringIntensity, UEObject bOverrideLightColorsWithFogInscatteringColors) { Invoke("ExponentialHeightFogComponent", FogDensity, FogHeightFalloff, SecondFogData, FogInscatteringColor, InscatteringColorCubemap, InscatteringColorCubemapAngle, InscatteringTextureTint, FullyDirectionalInscatteringColorDistance, NonDirectionalInscatteringColorDistance, DirectionalInscatteringExponent, DirectionalInscatteringStartDistance, DirectionalInscatteringColor, FogMaxOpacity, StartDistance, FogCutoffDistance, bEnableVolumetricFog, VolumetricFogScatteringDistribution, VolumetricFogAlbedo, VolumetricFogEmissive, VolumetricFogExtinctionScale, VolumetricFogDistance, VolumetricFogStaticLightingScatteringIntensity, bOverrideLightColorsWithFogInscatteringColors); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ExponentialHeightFog : Info
    {
        public ExponentialHeightFog(nint addr) : base(addr) { }
        public ExponentialHeightFog() : base(0) { }
        public ExponentialHeightFogComponent Component { get { return this[nameof(Component)].As<ExponentialHeightFogComponent>(); } set { this["Component"] = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public void OnRep_bEnabled() { Invoke("OnRep_bEnabled"); }
        public void _ExponentialHeightFog(UEObject Component, UEObject bEnabled) { Invoke("ExponentialHeightFog", Component, bEnabled); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class EngineTypes : UEObject
    {
        public EngineTypes(nint addr) : base(addr) { }
        public EngineTypes() : base(0) { }
    }
    public class EngineMessage : LocalMessage
    {
        public EngineMessage(nint addr) : base(addr) { }
        public EngineMessage() : base(0) { }
        public string FailedPlaceMessage { get { return this["FailedPlaceMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string MaxedOutMessage { get { return this["MaxedOutMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string EnteredMessage { get { return this["EnteredMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string LeftMessage { get { return this["LeftMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string GlobalNameChange { get { return this["GlobalNameChange"].ToString(); } set { /* String properties are read-only */ } }
        public string SpecEnteredMessage { get { return this["SpecEnteredMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string NewPlayerMessage { get { return this["NewPlayerMessage"].ToString(); } set { /* String properties are read-only */ } }
        public string NewSpecMessage { get { return this["NewSpecMessage"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class LocalMessage : UEObject
    {
        public LocalMessage(nint addr) : base(addr) { }
        public LocalMessage() : base(0) { }
    }
    public class EngineHandlerComponentFactory : HandlerComponentFactory
    {
        public EngineHandlerComponentFactory(nint addr) : base(addr) { }
        public EngineHandlerComponentFactory() : base(0) { }
    }
    public class EngineBaseTypes : UEObject
    {
        public EngineBaseTypes(nint addr) : base(addr) { }
        public EngineBaseTypes() : base(0) { }
    }
    public class ViewModeUtils : UEObject
    {
        public ViewModeUtils(nint addr) : base(addr) { }
        public ViewModeUtils() : base(0) { }
    }
    public class EmitterCameraLensEffectBase : Emitter
    {
        public EmitterCameraLensEffectBase(nint addr) : base(addr) { }
        public EmitterCameraLensEffectBase() : base(0) { }
        public UEObject PS_CameraEffect { get { return this[nameof(PS_CameraEffect)]; } set { this["PS_CameraEffect"] = value; } }
        public UEObject PS_CameraEffectNonExtremeContent { get { return this[nameof(PS_CameraEffectNonExtremeContent)]; } set { this["PS_CameraEffectNonExtremeContent"] = value; } }
        public PlayerCameraManager BaseCamera { get { return this[nameof(BaseCamera)].As<PlayerCameraManager>(); } set { this["BaseCamera"] = value; } }
        public SDK.Script.CoreUObject.Transform RelativeTransform { get { return this[nameof(RelativeTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["RelativeTransform"] = value; } }
        public float BaseFOV { get { return this["BaseFOV"].GetValue<float>(); } set { this["BaseFOV"].SetValue<float>(value); } }
        public bool bAllowMultipleInstances { get { return this["bAllowMultipleInstances"].Flag; } set { this["bAllowMultipleInstances"].Flag = value; } }
        public bool bResetWhenRetriggered { get { return this["bResetWhenRetriggered"].Flag; } set { this["bResetWhenRetriggered"].Flag = value; } }
        public Array<UEObject> EmittersToTreatAsSame { get { return new Array<UEObject>(this["EmittersToTreatAsSame"]); } set { this["EmittersToTreatAsSame"] = value; } }
        public float DistFromCamera { get { return this["DistFromCamera"].GetValue<float>(); } set { this["DistFromCamera"].SetValue<float>(value); } }
    }
    public class Emitter : Actor
    {
        public Emitter(nint addr) : base(addr) { }
        public Emitter() : base(0) { }
        public ParticleSystemComponent ParticleSystemComponent { get { return this[nameof(ParticleSystemComponent)].As<ParticleSystemComponent>(); } set { this["ParticleSystemComponent"] = value; } }
        public bool bDestroyOnSystemFinish { get { return this["bDestroyOnSystemFinish"].Flag; } set { this["bDestroyOnSystemFinish"].Flag = value; } }
        public bool bPostUpdateTickGroup { get { return this["bPostUpdateTickGroup"].Flag; } set { this["bPostUpdateTickGroup"].Flag = value; } }
        public bool bCurrentlyActive { get { return this["bCurrentlyActive"].Flag; } set { this["bCurrentlyActive"].Flag = value; } }
        public UEObject OnParticleSpawn { get { return this["OnParticleSpawn"]; } set { this["OnParticleSpawn"] = value; } }
        public UEObject OnParticleBurst { get { return this["OnParticleBurst"]; } set { this["OnParticleBurst"] = value; } }
        public UEObject OnParticleDeath { get { return this["OnParticleDeath"]; } set { this["OnParticleDeath"] = value; } }
        public UEObject OnParticleCollide { get { return this["OnParticleCollide"]; } set { this["OnParticleCollide"] = value; } }
        public void ToggleActive() { Invoke("ToggleActive"); }
        public void _Emitter(UEObject ParticleSystemComponent, UEObject bDestroyOnSystemFinish, UEObject bPostUpdateTickGroup, UEObject bCurrentlyActive, UEObject OnParticleSpawn, UEObject OnParticleBurst, UEObject OnParticleDeath, UEObject OnParticleCollide) { Invoke("Emitter", ParticleSystemComponent, bDestroyOnSystemFinish, bPostUpdateTickGroup, bCurrentlyActive, OnParticleSpawn, OnParticleBurst, OnParticleDeath, OnParticleCollide); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class EdGraphSchema : UEObject
    {
        public EdGraphSchema(nint addr) : base(addr) { }
        public EdGraphSchema() : base(0) { }
    }
    public class EdGraphPin_Deprecated : UEObject
    {
        public EdGraphPin_Deprecated(nint addr) : base(addr) { }
        public EdGraphPin_Deprecated() : base(0) { }
        public string PinName { get { return this["PinName"].ToString(); } set { /* String properties are read-only */ } }
        public string PinToolTip { get { return this["PinToolTip"].ToString(); } set { /* String properties are read-only */ } }
        public byte Direction { get { return this["Direction"].GetValue<byte>(); } set { this["Direction"].SetValue<byte>(value); } }
        public EdGraphPinType PinType { get { return this[nameof(PinType)].As<EdGraphPinType>(); } set { this["PinType"] = value; } }
        public string DefaultValue { get { return this["DefaultValue"].ToString(); } set { /* String properties are read-only */ } }
        public string AutogeneratedDefaultValue { get { return this["AutogeneratedDefaultValue"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject DefaultObject { get { return this[nameof(DefaultObject)]; } set { this["DefaultObject"] = value; } }
        public string DefaultTextValue { get { return this["DefaultTextValue"].ToString(); } set { /* String properties are read-only */ } }
        public Array<EdGraphPin_Deprecated> LinkedTo { get { return new Array<EdGraphPin_Deprecated>(this["LinkedTo"]); } set { this["LinkedTo"] = value; } }
        public Array<EdGraphPin_Deprecated> SubPins { get { return new Array<EdGraphPin_Deprecated>(this["SubPins"]); } set { this["SubPins"] = value; } }
        public EdGraphPin_Deprecated ParentPin { get { return this[nameof(ParentPin)].As<EdGraphPin_Deprecated>(); } set { this["ParentPin"] = value; } }
        public EdGraphPin_Deprecated ReferencePassThroughConnection { get { return this[nameof(ReferencePassThroughConnection)].As<EdGraphPin_Deprecated>(); } set { this["ReferencePassThroughConnection"] = value; } }
    }
    public class EdGraphNode_Documentation : EdGraphNode
    {
        public EdGraphNode_Documentation(nint addr) : base(addr) { }
        public EdGraphNode_Documentation() : base(0) { }
        public string Link { get { return this["Link"].ToString(); } set { /* String properties are read-only */ } }
        public string Excerpt { get { return this["Excerpt"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class EdGraphNode : UEObject
    {
        public EdGraphNode(nint addr) : base(addr) { }
        public EdGraphNode() : base(0) { }
        public Array<EdGraphPin_Deprecated> DeprecatedPins { get { return new Array<EdGraphPin_Deprecated>(this["DeprecatedPins"]); } set { this["DeprecatedPins"] = value; } }
        public int NodePosX { get { return this["NodePosX"].GetValue<int>(); } set { this["NodePosX"].SetValue<int>(value); } }
        public int NodePosY { get { return this["NodePosY"].GetValue<int>(); } set { this["NodePosY"].SetValue<int>(value); } }
        public int NodeWidth { get { return this["NodeWidth"].GetValue<int>(); } set { this["NodeWidth"].SetValue<int>(value); } }
        public int NodeHeight { get { return this["NodeHeight"].GetValue<int>(); } set { this["NodeHeight"].SetValue<int>(value); } }
        public byte AdvancedPinDisplay { get { return this["AdvancedPinDisplay"].GetValue<byte>(); } set { this["AdvancedPinDisplay"].SetValue<byte>(value); } }
        public ENodeEnabledState EnabledState { get { return (ENodeEnabledState)this["EnabledState"].GetValue<int>(); } set { this["EnabledState"].SetValue<int>((int)value); } }
        public bool bDisplayAsDisabled { get { return this["bDisplayAsDisabled"].Flag; } set { this["bDisplayAsDisabled"].Flag = value; } }
        public bool bUserSetEnabledState { get { return this["bUserSetEnabledState"].Flag; } set { this["bUserSetEnabledState"].Flag = value; } }
        public bool bIsNodeEnabled { get { return this["bIsNodeEnabled"].Flag; } set { this["bIsNodeEnabled"].Flag = value; } }
        public bool bHasCompilerMessage { get { return this["bHasCompilerMessage"].Flag; } set { this["bHasCompilerMessage"].Flag = value; } }
        public string NodeComment { get { return this["NodeComment"].ToString(); } set { /* String properties are read-only */ } }
        public int ErrorType { get { return this["ErrorType"].GetValue<int>(); } set { this["ErrorType"].SetValue<int>(value); } }
        public string ErrorMsg { get { return this["ErrorMsg"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid NodeGuid { get { return this[nameof(NodeGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["NodeGuid"] = value; } }
    }
    public class GraphNodeContextMenuContext : UEObject
    {
        public GraphNodeContextMenuContext(nint addr) : base(addr) { }
        public GraphNodeContextMenuContext() : base(0) { }
        public Blueprint Blueprint { get { return this[nameof(Blueprint)].As<Blueprint>(); } set { this["Blueprint"] = value; } }
        public EdGraph Graph { get { return this[nameof(Graph)].As<EdGraph>(); } set { this["Graph"] = value; } }
        public EdGraphNode Node { get { return this[nameof(Node)].As<EdGraphNode>(); } set { this["Node"] = value; } }
        public bool bIsDebugging { get { return this["bIsDebugging"].Flag; } set { this["bIsDebugging"].Flag = value; } }
    }
    public class EdGraph : UEObject
    {
        public EdGraph(nint addr) : base(addr) { }
        public EdGraph() : base(0) { }
        public UEObject Schema { get { return this["Schema"]; } set { this["Schema"] = value; } }
        public Array<EdGraphNode> Nodes { get { return new Array<EdGraphNode>(this["Nodes"]); } set { this["Nodes"] = value; } }
        public bool bEditable { get { return this["bEditable"].Flag; } set { this["bEditable"].Flag = value; } }
        public bool bAllowDeletion { get { return this["bAllowDeletion"].Flag; } set { this["bAllowDeletion"].Flag = value; } }
        public bool bAllowRenaming { get { return this["bAllowRenaming"].Flag; } set { this["bAllowRenaming"].Flag = value; } }
    }
    public class DrawSphereComponent : SphereComponent
    {
        public DrawSphereComponent(nint addr) : base(addr) { }
        public DrawSphereComponent() : base(0) { }
    }
    public class DrawFrustumComponent : PrimitiveComponent
    {
        public DrawFrustumComponent(nint addr) : base(addr) { }
        public DrawFrustumComponent() : base(0) { }
        public Color FrustumColor { get { return this[nameof(FrustumColor)].As<Color>(); } set { this["FrustumColor"] = value; } }
        public float FrustumAngle { get { return this["FrustumAngle"].GetValue<float>(); } set { this["FrustumAngle"].SetValue<float>(value); } }
        public float FrustumAspectRatio { get { return this["FrustumAspectRatio"].GetValue<float>(); } set { this["FrustumAspectRatio"].SetValue<float>(value); } }
        public float FrustumStartDist { get { return this["FrustumStartDist"].GetValue<float>(); } set { this["FrustumStartDist"].SetValue<float>(value); } }
        public float FrustumEndDist { get { return this["FrustumEndDist"].GetValue<float>(); } set { this["FrustumEndDist"].SetValue<float>(value); } }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
    }
    public class DPICustomScalingRule : UEObject
    {
        public DPICustomScalingRule(nint addr) : base(addr) { }
        public DPICustomScalingRule() : base(0) { }
    }
    public class DocumentationActor : Actor
    {
        public DocumentationActor(nint addr) : base(addr) { }
        public DocumentationActor() : base(0) { }
    }
    public class DistributionVectorUniformCurve : DistributionVector
    {
        public DistributionVectorUniformCurve(nint addr) : base(addr) { }
        public DistributionVectorUniformCurve() : base(0) { }
        public InterpCurveTwoVectors ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveTwoVectors>(); } set { this["ConstantCurve"] = value; } }
        public bool bLockAxes1 { get { return this["bLockAxes1"].Flag; } set { this["bLockAxes1"].Flag = value; } }
        public bool bLockAxes2 { get { return this["bLockAxes2"].Flag; } set { this["bLockAxes2"].Flag = value; } }
        public byte LockedAxes { get { return this["LockedAxes"].GetValue<byte>(); } set { this["LockedAxes"].SetValue<byte>(value); } }
        public byte MirrorFlags { get { return this["MirrorFlags"].GetValue<byte>(); } set { this["MirrorFlags"].SetValue<byte>(value); } }
        public bool bUseExtremes { get { return this["bUseExtremes"].Flag; } set { this["bUseExtremes"].Flag = value; } }
    }
    public class DistributionVectorUniform : DistributionVector
    {
        public DistributionVectorUniform(nint addr) : base(addr) { }
        public DistributionVectorUniform() : base(0) { }
        public Vector Max { get { return this[nameof(Max)].As<Vector>(); } set { this["Max"] = value; } }
        public Vector Min { get { return this[nameof(Min)].As<Vector>(); } set { this["Min"] = value; } }
        public bool bLockAxes { get { return this["bLockAxes"].Flag; } set { this["bLockAxes"].Flag = value; } }
        public byte LockedAxes { get { return this["LockedAxes"].GetValue<byte>(); } set { this["LockedAxes"].SetValue<byte>(value); } }
        public byte MirrorFlags { get { return this["MirrorFlags"].GetValue<byte>(); } set { this["MirrorFlags"].SetValue<byte>(value); } }
        public bool bUseExtremes { get { return this["bUseExtremes"].Flag; } set { this["bUseExtremes"].Flag = value; } }
    }
    public class DistributionVectorParticleParameter : DistributionVectorParameterBase
    {
        public DistributionVectorParticleParameter(nint addr) : base(addr) { }
        public DistributionVectorParticleParameter() : base(0) { }
    }
    public class DistributionVectorParameterBase : DistributionVectorConstant
    {
        public DistributionVectorParameterBase(nint addr) : base(addr) { }
        public DistributionVectorParameterBase() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector MinInput { get { return this[nameof(MinInput)].As<Vector>(); } set { this["MinInput"] = value; } }
        public Vector MaxInput { get { return this[nameof(MaxInput)].As<Vector>(); } set { this["MaxInput"] = value; } }
        public Vector MinOutput { get { return this[nameof(MinOutput)].As<Vector>(); } set { this["MinOutput"] = value; } }
        public Vector MaxOutput { get { return this[nameof(MaxOutput)].As<Vector>(); } set { this["MaxOutput"] = value; } }
        public byte ParamModes { get { return this["ParamModes"].GetValue<byte>(); } set { this["ParamModes"].SetValue<byte>(value); } }
    }
    public class DistributionVectorConstantCurve : DistributionVector
    {
        public DistributionVectorConstantCurve(nint addr) : base(addr) { }
        public DistributionVectorConstantCurve() : base(0) { }
        public InterpCurveVector ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveVector>(); } set { this["ConstantCurve"] = value; } }
        public bool bLockAxes { get { return this["bLockAxes"].Flag; } set { this["bLockAxes"].Flag = value; } }
        public byte LockedAxes { get { return this["LockedAxes"].GetValue<byte>(); } set { this["LockedAxes"].SetValue<byte>(value); } }
    }
    public class DistributionVectorConstant : DistributionVector
    {
        public DistributionVectorConstant(nint addr) : base(addr) { }
        public DistributionVectorConstant() : base(0) { }
        public Vector Constant { get { return this[nameof(Constant)].As<Vector>(); } set { this["Constant"] = value; } }
        public bool bLockAxes { get { return this["bLockAxes"].Flag; } set { this["bLockAxes"].Flag = value; } }
        public byte LockedAxes { get { return this["LockedAxes"].GetValue<byte>(); } set { this["LockedAxes"].SetValue<byte>(value); } }
    }
    public class DistributionVector : Distribution
    {
        public DistributionVector(nint addr) : base(addr) { }
        public DistributionVector() : base(0) { }
        public bool bCanBeBaked { get { return this["bCanBeBaked"].Flag; } set { this["bCanBeBaked"].Flag = value; } }
        public bool bIsDirty { get { return this["bIsDirty"].Flag; } set { this["bIsDirty"].Flag = value; } }
        public bool bBakedDataSuccesfully { get { return this["bBakedDataSuccesfully"].Flag; } set { this["bBakedDataSuccesfully"].Flag = value; } }
    }
    public class DistributionFloatUniformCurve : DistributionFloat
    {
        public DistributionFloatUniformCurve(nint addr) : base(addr) { }
        public DistributionFloatUniformCurve() : base(0) { }
        public InterpCurveVector2D ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveVector2D>(); } set { this["ConstantCurve"] = value; } }
    }
    public class DistributionFloatUniform : DistributionFloat
    {
        public DistributionFloatUniform(nint addr) : base(addr) { }
        public DistributionFloatUniform() : base(0) { }
        public float Min { get { return this["Min"].GetValue<float>(); } set { this["Min"].SetValue<float>(value); } }
        public float Max { get { return this["Max"].GetValue<float>(); } set { this["Max"].SetValue<float>(value); } }
    }
    public class DistributionFloatParticleParameter : DistributionFloatParameterBase
    {
        public DistributionFloatParticleParameter(nint addr) : base(addr) { }
        public DistributionFloatParticleParameter() : base(0) { }
    }
    public class DistributionFloatParameterBase : DistributionFloatConstant
    {
        public DistributionFloatParameterBase(nint addr) : base(addr) { }
        public DistributionFloatParameterBase() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public float MinInput { get { return this["MinInput"].GetValue<float>(); } set { this["MinInput"].SetValue<float>(value); } }
        public float MaxInput { get { return this["MaxInput"].GetValue<float>(); } set { this["MaxInput"].SetValue<float>(value); } }
        public float MinOutput { get { return this["MinOutput"].GetValue<float>(); } set { this["MinOutput"].SetValue<float>(value); } }
        public float MaxOutput { get { return this["MaxOutput"].GetValue<float>(); } set { this["MaxOutput"].SetValue<float>(value); } }
        public byte ParamMode { get { return this["ParamMode"].GetValue<byte>(); } set { this["ParamMode"].SetValue<byte>(value); } }
    }
    public class DistributionFloatConstantCurve : DistributionFloat
    {
        public DistributionFloatConstantCurve(nint addr) : base(addr) { }
        public DistributionFloatConstantCurve() : base(0) { }
        public InterpCurveFloat ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveFloat>(); } set { this["ConstantCurve"] = value; } }
    }
    public class DistributionFloatConstant : DistributionFloat
    {
        public DistributionFloatConstant(nint addr) : base(addr) { }
        public DistributionFloatConstant() : base(0) { }
        public float Constant { get { return this["Constant"].GetValue<float>(); } set { this["Constant"].SetValue<float>(value); } }
    }
    public class DistributionFloat : Distribution
    {
        public DistributionFloat(nint addr) : base(addr) { }
        public DistributionFloat() : base(0) { }
        public bool bCanBeBaked { get { return this["bCanBeBaked"].Flag; } set { this["bCanBeBaked"].Flag = value; } }
        public bool bBakedDataSuccesfully { get { return this["bBakedDataSuccesfully"].Flag; } set { this["bBakedDataSuccesfully"].Flag = value; } }
    }
    public class Distribution : UEObject
    {
        public Distribution(nint addr) : base(addr) { }
        public Distribution() : base(0) { }
    }
    public class DirectionalLightComponent : LightComponent
    {
        public DirectionalLightComponent(nint addr) : base(addr) { }
        public DirectionalLightComponent() : base(0) { }
        public float ShadowCascadeBiasDistribution { get { return this["ShadowCascadeBiasDistribution"].GetValue<float>(); } set { this["ShadowCascadeBiasDistribution"].SetValue<float>(value); } }
        public bool bEnableLightShaftOcclusion { get { return this["bEnableLightShaftOcclusion"].Flag; } set { this["bEnableLightShaftOcclusion"].Flag = value; } }
        public float OcclusionMaskDarkness { get { return this["OcclusionMaskDarkness"].GetValue<float>(); } set { this["OcclusionMaskDarkness"].SetValue<float>(value); } }
        public float OcclusionDepthRange { get { return this["OcclusionDepthRange"].GetValue<float>(); } set { this["OcclusionDepthRange"].SetValue<float>(value); } }
        public Vector LightShaftOverrideDirection { get { return this[nameof(LightShaftOverrideDirection)].As<Vector>(); } set { this["LightShaftOverrideDirection"] = value; } }
        public float WholeSceneDynamicShadowRadius { get { return this["WholeSceneDynamicShadowRadius"].GetValue<float>(); } set { this["WholeSceneDynamicShadowRadius"].SetValue<float>(value); } }
        public float DynamicShadowDistanceMovableLight { get { return this["DynamicShadowDistanceMovableLight"].GetValue<float>(); } set { this["DynamicShadowDistanceMovableLight"].SetValue<float>(value); } }
        public float DynamicShadowDistanceStationaryLight { get { return this["DynamicShadowDistanceStationaryLight"].GetValue<float>(); } set { this["DynamicShadowDistanceStationaryLight"].SetValue<float>(value); } }
        public int DynamicShadowCascades { get { return this["DynamicShadowCascades"].GetValue<int>(); } set { this["DynamicShadowCascades"].SetValue<int>(value); } }
        public float CascadeDistributionExponent { get { return this["CascadeDistributionExponent"].GetValue<float>(); } set { this["CascadeDistributionExponent"].SetValue<float>(value); } }
        public float CascadeTransitionFraction { get { return this["CascadeTransitionFraction"].GetValue<float>(); } set { this["CascadeTransitionFraction"].SetValue<float>(value); } }
        public float ShadowDistanceFadeoutFraction { get { return this["ShadowDistanceFadeoutFraction"].GetValue<float>(); } set { this["ShadowDistanceFadeoutFraction"].SetValue<float>(value); } }
        public bool bUseInsetShadowsForMovableObjects { get { return this["bUseInsetShadowsForMovableObjects"].Flag; } set { this["bUseInsetShadowsForMovableObjects"].Flag = value; } }
        public int FarShadowCascadeCount { get { return this["FarShadowCascadeCount"].GetValue<int>(); } set { this["FarShadowCascadeCount"].SetValue<int>(value); } }
        public float FarShadowDistance { get { return this["FarShadowDistance"].GetValue<float>(); } set { this["FarShadowDistance"].SetValue<float>(value); } }
        public float DistanceFieldShadowDistance { get { return this["DistanceFieldShadowDistance"].GetValue<float>(); } set { this["DistanceFieldShadowDistance"].SetValue<float>(value); } }
        public float LightSourceAngle { get { return this["LightSourceAngle"].GetValue<float>(); } set { this["LightSourceAngle"].SetValue<float>(value); } }
        public float LightSourceSoftAngle { get { return this["LightSourceSoftAngle"].GetValue<float>(); } set { this["LightSourceSoftAngle"].SetValue<float>(value); } }
        public float ShadowSourceAngleFactor { get { return this["ShadowSourceAngleFactor"].GetValue<float>(); } set { this["ShadowSourceAngleFactor"].SetValue<float>(value); } }
        public float TraceDistance { get { return this["TraceDistance"].GetValue<float>(); } set { this["TraceDistance"].SetValue<float>(value); } }
        public bool bUsedAsAtmosphereSunLight { get { return this["bUsedAsAtmosphereSunLight"].Flag; } set { this["bUsedAsAtmosphereSunLight"].Flag = value; } }
        public int AtmosphereSunLightIndex { get { return this["AtmosphereSunLightIndex"].GetValue<int>(); } set { this["AtmosphereSunLightIndex"].SetValue<int>(value); } }
        public LinearColor AtmosphereSunDiskColorScale { get { return this[nameof(AtmosphereSunDiskColorScale)].As<LinearColor>(); } set { this["AtmosphereSunDiskColorScale"] = value; } }
        public bool bPerPixelAtmosphereTransmittance { get { return this["bPerPixelAtmosphereTransmittance"].Flag; } set { this["bPerPixelAtmosphereTransmittance"].Flag = value; } }
        public bool bCastShadowsOnClouds { get { return this["bCastShadowsOnClouds"].Flag; } set { this["bCastShadowsOnClouds"].Flag = value; } }
        public bool bCastShadowsOnAtmosphere { get { return this["bCastShadowsOnAtmosphere"].Flag; } set { this["bCastShadowsOnAtmosphere"].Flag = value; } }
        public bool bCastCloudShadows { get { return this["bCastCloudShadows"].Flag; } set { this["bCastCloudShadows"].Flag = value; } }
        public float CloudShadowStrength { get { return this["CloudShadowStrength"].GetValue<float>(); } set { this["CloudShadowStrength"].SetValue<float>(value); } }
        public float CloudShadowOnAtmosphereStrength { get { return this["CloudShadowOnAtmosphereStrength"].GetValue<float>(); } set { this["CloudShadowOnAtmosphereStrength"].SetValue<float>(value); } }
        public float CloudShadowOnSurfaceStrength { get { return this["CloudShadowOnSurfaceStrength"].GetValue<float>(); } set { this["CloudShadowOnSurfaceStrength"].SetValue<float>(value); } }
        public float CloudShadowDepthBias { get { return this["CloudShadowDepthBias"].GetValue<float>(); } set { this["CloudShadowDepthBias"].SetValue<float>(value); } }
        public float CloudShadowExtent { get { return this["CloudShadowExtent"].GetValue<float>(); } set { this["CloudShadowExtent"].SetValue<float>(value); } }
        public float CloudShadowMapResolutionScale { get { return this["CloudShadowMapResolutionScale"].GetValue<float>(); } set { this["CloudShadowMapResolutionScale"].SetValue<float>(value); } }
        public float CloudShadowRaySampleCountScale { get { return this["CloudShadowRaySampleCountScale"].GetValue<float>(); } set { this["CloudShadowRaySampleCountScale"].SetValue<float>(value); } }
        public LinearColor CloudScatteredLuminanceScale { get { return this[nameof(CloudScatteredLuminanceScale)].As<LinearColor>(); } set { this["CloudScatteredLuminanceScale"] = value; } }
        public LightmassDirectionalLightSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassDirectionalLightSettings>(); } set { this["LightmassSettings"] = value; } }
        public bool bCastModulatedShadows { get { return this["bCastModulatedShadows"].Flag; } set { this["bCastModulatedShadows"].Flag = value; } }
        public Color ModulatedShadowColor { get { return this[nameof(ModulatedShadowColor)].As<Color>(); } set { this["ModulatedShadowColor"] = value; } }
        public float ShadowAmount { get { return this["ShadowAmount"].GetValue<float>(); } set { this["ShadowAmount"].SetValue<float>(value); } }
        public void SetShadowDistanceFadeoutFraction(UEObject NewValue) { Invoke("SetShadowDistanceFadeoutFraction", NewValue); }
        public void _DirectionalLightComponent(UEObject ShadowCascadeBiasDistribution, UEObject bEnableLightShaftOcclusion, UEObject OcclusionMaskDarkness, UEObject OcclusionDepthRange, UEObject LightShaftOverrideDirection, UEObject WholeSceneDynamicShadowRadius, UEObject DynamicShadowDistanceMovableLight, UEObject DynamicShadowDistanceStationaryLight, UEObject DynamicShadowCascades, UEObject CascadeDistributionExponent, UEObject CascadeTransitionFraction, UEObject ShadowDistanceFadeoutFraction, UEObject bUseInsetShadowsForMovableObjects, UEObject FarShadowCascadeCount, UEObject FarShadowDistance, UEObject DistanceFieldShadowDistance, UEObject LightSourceAngle, UEObject LightSourceSoftAngle, UEObject ShadowSourceAngleFactor, UEObject TraceDistance, UEObject bUsedAsAtmosphereSunLight, UEObject AtmosphereSunLightIndex, UEObject AtmosphereSunDiskColorScale, UEObject bPerPixelAtmosphereTransmittance, UEObject bCastShadowsOnClouds, UEObject bCastShadowsOnAtmosphere, UEObject bCastCloudShadows, UEObject CloudShadowStrength, UEObject CloudShadowOnAtmosphereStrength, UEObject CloudShadowOnSurfaceStrength, UEObject CloudShadowDepthBias, UEObject CloudShadowExtent, UEObject CloudShadowMapResolutionScale, UEObject CloudShadowRaySampleCountScale, UEObject CloudScatteredLuminanceScale, UEObject LightmassSettings, UEObject bCastModulatedShadows, UEObject ModulatedShadowColor, UEObject ShadowAmount) { Invoke("DirectionalLightComponent", ShadowCascadeBiasDistribution, bEnableLightShaftOcclusion, OcclusionMaskDarkness, OcclusionDepthRange, LightShaftOverrideDirection, WholeSceneDynamicShadowRadius, DynamicShadowDistanceMovableLight, DynamicShadowDistanceStationaryLight, DynamicShadowCascades, CascadeDistributionExponent, CascadeTransitionFraction, ShadowDistanceFadeoutFraction, bUseInsetShadowsForMovableObjects, FarShadowCascadeCount, FarShadowDistance, DistanceFieldShadowDistance, LightSourceAngle, LightSourceSoftAngle, ShadowSourceAngleFactor, TraceDistance, bUsedAsAtmosphereSunLight, AtmosphereSunLightIndex, AtmosphereSunDiskColorScale, bPerPixelAtmosphereTransmittance, bCastShadowsOnClouds, bCastShadowsOnAtmosphere, bCastCloudShadows, CloudShadowStrength, CloudShadowOnAtmosphereStrength, CloudShadowOnSurfaceStrength, CloudShadowDepthBias, CloudShadowExtent, CloudShadowMapResolutionScale, CloudShadowRaySampleCountScale, CloudScatteredLuminanceScale, LightmassSettings, bCastModulatedShadows, ModulatedShadowColor, ShadowAmount); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LightComponent : LightComponentBase
    {
        public LightComponent(nint addr) : base(addr) { }
        public LightComponent() : base(0) { }
        public float Temperature { get { return this["Temperature"].GetValue<float>(); } set { this["Temperature"].SetValue<float>(value); } }
        public float MaxDrawDistance { get { return this["MaxDrawDistance"].GetValue<float>(); } set { this["MaxDrawDistance"].SetValue<float>(value); } }
        public float MaxDistanceFadeRange { get { return this["MaxDistanceFadeRange"].GetValue<float>(); } set { this["MaxDistanceFadeRange"].SetValue<float>(value); } }
        public bool bUseTemperature { get { return this["bUseTemperature"].Flag; } set { this["bUseTemperature"].Flag = value; } }
        public int ShadowMapChannel { get { return this["ShadowMapChannel"].GetValue<int>(); } set { this["ShadowMapChannel"].SetValue<int>(value); } }
        public float MinRoughness { get { return this["MinRoughness"].GetValue<float>(); } set { this["MinRoughness"].SetValue<float>(value); } }
        public float SpecularScale { get { return this["SpecularScale"].GetValue<float>(); } set { this["SpecularScale"].SetValue<float>(value); } }
        public float ShadowResolutionScale { get { return this["ShadowResolutionScale"].GetValue<float>(); } set { this["ShadowResolutionScale"].SetValue<float>(value); } }
        public float ShadowBias { get { return this["ShadowBias"].GetValue<float>(); } set { this["ShadowBias"].SetValue<float>(value); } }
        public float ShadowSlopeBias { get { return this["ShadowSlopeBias"].GetValue<float>(); } set { this["ShadowSlopeBias"].SetValue<float>(value); } }
        public float ShadowSharpen { get { return this["ShadowSharpen"].GetValue<float>(); } set { this["ShadowSharpen"].SetValue<float>(value); } }
        public float ContactShadowLength { get { return this["ContactShadowLength"].GetValue<float>(); } set { this["ContactShadowLength"].SetValue<float>(value); } }
        public bool ContactShadowLengthInWS { get { return this["ContactShadowLengthInWS"].Flag; } set { this["ContactShadowLengthInWS"].Flag = value; } }
        public bool InverseSquaredFalloff { get { return this["InverseSquaredFalloff"].Flag; } set { this["InverseSquaredFalloff"].Flag = value; } }
        public bool CastTranslucentShadows { get { return this["CastTranslucentShadows"].Flag; } set { this["CastTranslucentShadows"].Flag = value; } }
        public bool bCastShadowsFromCinematicObjectsOnly { get { return this["bCastShadowsFromCinematicObjectsOnly"].Flag; } set { this["bCastShadowsFromCinematicObjectsOnly"].Flag = value; } }
        public bool bAffectDynamicIndirectLighting { get { return this["bAffectDynamicIndirectLighting"].Flag; } set { this["bAffectDynamicIndirectLighting"].Flag = value; } }
        public bool bForceCachedShadowsForMovablePrimitives { get { return this["bForceCachedShadowsForMovablePrimitives"].Flag; } set { this["bForceCachedShadowsForMovablePrimitives"].Flag = value; } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public MaterialInterface LightFunctionMaterial { get { return this[nameof(LightFunctionMaterial)].As<MaterialInterface>(); } set { this["LightFunctionMaterial"] = value; } }
        public Vector LightFunctionScale { get { return this[nameof(LightFunctionScale)].As<Vector>(); } set { this["LightFunctionScale"] = value; } }
        public TextureLightProfile IESTexture { get { return this[nameof(IESTexture)].As<TextureLightProfile>(); } set { this["IESTexture"] = value; } }
        public bool bUseIESBrightness { get { return this["bUseIESBrightness"].Flag; } set { this["bUseIESBrightness"].Flag = value; } }
        public float IESBrightnessScale { get { return this["IESBrightnessScale"].GetValue<float>(); } set { this["IESBrightnessScale"].SetValue<float>(value); } }
        public float LightFunctionFadeDistance { get { return this["LightFunctionFadeDistance"].GetValue<float>(); } set { this["LightFunctionFadeDistance"].SetValue<float>(value); } }
        public float DisabledBrightness { get { return this["DisabledBrightness"].GetValue<float>(); } set { this["DisabledBrightness"].SetValue<float>(value); } }
        public bool bEnableLightShaftBloom { get { return this["bEnableLightShaftBloom"].Flag; } set { this["bEnableLightShaftBloom"].Flag = value; } }
        public float BloomScale { get { return this["BloomScale"].GetValue<float>(); } set { this["BloomScale"].SetValue<float>(value); } }
        public float BloomThreshold { get { return this["BloomThreshold"].GetValue<float>(); } set { this["BloomThreshold"].SetValue<float>(value); } }
        public float BloomMaxBrightness { get { return this["BloomMaxBrightness"].GetValue<float>(); } set { this["BloomMaxBrightness"].SetValue<float>(value); } }
        public Color BloomTint { get { return this[nameof(BloomTint)].As<Color>(); } set { this["BloomTint"] = value; } }
        public bool bUseRayTracedDistanceFieldShadows { get { return this["bUseRayTracedDistanceFieldShadows"].Flag; } set { this["bUseRayTracedDistanceFieldShadows"].Flag = value; } }
        public float RayStartOffsetDepthScale { get { return this["RayStartOffsetDepthScale"].GetValue<float>(); } set { this["RayStartOffsetDepthScale"].SetValue<float>(value); } }
        public void SetVolumetricScatteringIntensity(UEObject NewIntensity) { Invoke("SetVolumetricScatteringIntensity", NewIntensity); }
        public void _LightComponent(UEObject Temperature, UEObject MaxDrawDistance, UEObject MaxDistanceFadeRange, UEObject bUseTemperature, UEObject ShadowMapChannel, UEObject MinRoughness, UEObject SpecularScale, UEObject ShadowResolutionScale, UEObject ShadowBias, UEObject ShadowSlopeBias, UEObject ShadowSharpen, UEObject ContactShadowLength, UEObject ContactShadowLengthInWS, UEObject InverseSquaredFalloff, UEObject CastTranslucentShadows, UEObject bCastShadowsFromCinematicObjectsOnly, UEObject bAffectDynamicIndirectLighting, UEObject bForceCachedShadowsForMovablePrimitives, UEObject LightingChannels, UEObject LightFunctionMaterial, UEObject LightFunctionScale, UEObject IESTexture, UEObject bUseIESBrightness, UEObject IESBrightnessScale, UEObject LightFunctionFadeDistance, UEObject DisabledBrightness, UEObject bEnableLightShaftBloom, UEObject BloomScale, UEObject BloomThreshold, UEObject BloomMaxBrightness, UEObject BloomTint, UEObject bUseRayTracedDistanceFieldShadows, UEObject RayStartOffsetDepthScale) { Invoke("LightComponent", Temperature, MaxDrawDistance, MaxDistanceFadeRange, bUseTemperature, ShadowMapChannel, MinRoughness, SpecularScale, ShadowResolutionScale, ShadowBias, ShadowSlopeBias, ShadowSharpen, ContactShadowLength, ContactShadowLengthInWS, InverseSquaredFalloff, CastTranslucentShadows, bCastShadowsFromCinematicObjectsOnly, bAffectDynamicIndirectLighting, bForceCachedShadowsForMovablePrimitives, LightingChannels, LightFunctionMaterial, LightFunctionScale, IESTexture, bUseIESBrightness, IESBrightnessScale, LightFunctionFadeDistance, DisabledBrightness, bEnableLightShaftBloom, BloomScale, BloomThreshold, BloomMaxBrightness, BloomTint, bUseRayTracedDistanceFieldShadows, RayStartOffsetDepthScale); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class LightComponentBase : SceneComponent
    {
        public LightComponentBase(nint addr) : base(addr) { }
        public LightComponentBase() : base(0) { }
        public SDK.Script.CoreUObject.Guid LightGuid { get { return this[nameof(LightGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LightGuid"] = value; } }
        public float Brightness { get { return this["Brightness"].GetValue<float>(); } set { this["Brightness"].SetValue<float>(value); } }
        public float Intensity { get { return this["Intensity"].GetValue<float>(); } set { this["Intensity"].SetValue<float>(value); } }
        public Color LightColor { get { return this[nameof(LightColor)].As<Color>(); } set { this["LightColor"] = value; } }
        public bool bAffectsWorld { get { return this["bAffectsWorld"].Flag; } set { this["bAffectsWorld"].Flag = value; } }
        public bool CastShadows { get { return this["CastShadows"].Flag; } set { this["CastShadows"].Flag = value; } }
        public bool CastStaticShadows { get { return this["CastStaticShadows"].Flag; } set { this["CastStaticShadows"].Flag = value; } }
        public bool CastDynamicShadows { get { return this["CastDynamicShadows"].Flag; } set { this["CastDynamicShadows"].Flag = value; } }
        public bool bAffectTranslucentLighting { get { return this["bAffectTranslucentLighting"].Flag; } set { this["bAffectTranslucentLighting"].Flag = value; } }
        public bool bAffectVolumeLighting { get { return this["bAffectVolumeLighting"].Flag; } set { this["bAffectVolumeLighting"].Flag = value; } }
        public bool bTransmission { get { return this["bTransmission"].Flag; } set { this["bTransmission"].Flag = value; } }
        public bool bCastVolumetricShadow { get { return this["bCastVolumetricShadow"].Flag; } set { this["bCastVolumetricShadow"].Flag = value; } }
        public bool bCastDeepShadow { get { return this["bCastDeepShadow"].Flag; } set { this["bCastDeepShadow"].Flag = value; } }
        public bool bCastRaytracedShadow { get { return this["bCastRaytracedShadow"].Flag; } set { this["bCastRaytracedShadow"].Flag = value; } }
        public bool bAffectReflection { get { return this["bAffectReflection"].Flag; } set { this["bAffectReflection"].Flag = value; } }
        public bool bAffectGlobalIllumination { get { return this["bAffectGlobalIllumination"].Flag; } set { this["bAffectGlobalIllumination"].Flag = value; } }
        public float DeepShadowLayerDistribution { get { return this["DeepShadowLayerDistribution"].GetValue<float>(); } set { this["DeepShadowLayerDistribution"].SetValue<float>(value); } }
        public float IndirectLightingIntensity { get { return this["IndirectLightingIntensity"].GetValue<float>(); } set { this["IndirectLightingIntensity"].SetValue<float>(value); } }
        public float VolumetricScatteringIntensity { get { return this["VolumetricScatteringIntensity"].GetValue<float>(); } set { this["VolumetricScatteringIntensity"].SetValue<float>(value); } }
        public int SamplesPerPixel { get { return this["SamplesPerPixel"].GetValue<int>(); } set { this["SamplesPerPixel"].SetValue<int>(value); } }
        public void SetSamplesPerPixel(UEObject NewValue) { Invoke("SetSamplesPerPixel", NewValue); }
        public void _LightComponentBase(UEObject LightGuid, UEObject Brightness, UEObject Intensity, UEObject LightColor, UEObject bAffectsWorld, UEObject CastShadows, UEObject CastStaticShadows, UEObject CastDynamicShadows, UEObject bAffectTranslucentLighting, UEObject bAffectVolumeLighting, UEObject bTransmission, UEObject bCastVolumetricShadow, UEObject bCastDeepShadow, UEObject bCastRaytracedShadow, UEObject bAffectReflection, UEObject bAffectGlobalIllumination, UEObject DeepShadowLayerDistribution, UEObject IndirectLightingIntensity, UEObject VolumetricScatteringIntensity, UEObject SamplesPerPixel) { Invoke("LightComponentBase", LightGuid, Brightness, Intensity, LightColor, bAffectsWorld, CastShadows, CastStaticShadows, CastDynamicShadows, bAffectTranslucentLighting, bAffectVolumeLighting, bTransmission, bCastVolumetricShadow, bCastDeepShadow, bCastRaytracedShadow, bAffectReflection, bAffectGlobalIllumination, DeepShadowLayerDistribution, IndirectLightingIntensity, VolumetricScatteringIntensity, SamplesPerPixel); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DirectionalLight : Light
    {
        public DirectionalLight(nint addr) : base(addr) { }
        public DirectionalLight() : base(0) { }
    }
    public class Light : Actor
    {
        public Light(nint addr) : base(addr) { }
        public Light() : base(0) { }
        public LightComponent LightComponent { get { return this[nameof(LightComponent)].As<LightComponent>(); } set { this["LightComponent"] = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public void ToggleEnabled() { Invoke("ToggleEnabled"); }
        public void _Light(UEObject LightComponent, UEObject bEnabled) { Invoke("Light", LightComponent, bEnabled); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DialogueWave : UEObject
    {
        public DialogueWave(nint addr) : base(addr) { }
        public DialogueWave() : base(0) { }
        public bool bMature { get { return this["bMature"].Flag; } set { this["bMature"].Flag = value; } }
        public bool bOverride_SubtitleOverride { get { return this["bOverride_SubtitleOverride"].Flag; } set { this["bOverride_SubtitleOverride"].Flag = value; } }
        public string SpokenText { get { return this["SpokenText"].ToString(); } set { /* String properties are read-only */ } }
        public string SubtitleOverride { get { return this["SubtitleOverride"].ToString(); } set { /* String properties are read-only */ } }
        public Array<DialogueContextMapping> ContextMappings { get { return new Array<DialogueContextMapping>(this["ContextMappings"]); } set { this["ContextMappings"] = value; } }
        public SDK.Script.CoreUObject.Guid LocalizationGUID { get { return this[nameof(LocalizationGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LocalizationGUID"] = value; } }
    }
    public class DialogueVoice : UEObject
    {
        public DialogueVoice(nint addr) : base(addr) { }
        public DialogueVoice() : base(0) { }
        public byte Gender { get { return this["Gender"].GetValue<byte>(); } set { this["Gender"].SetValue<byte>(value); } }
        public byte Plurality { get { return this["Plurality"].GetValue<byte>(); } set { this["Plurality"].SetValue<byte>(value); } }
        public SDK.Script.CoreUObject.Guid LocalizationGUID { get { return this[nameof(LocalizationGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LocalizationGUID"] = value; } }
    }
    public class DialogueSoundWaveProxy : SoundBase
    {
        public DialogueSoundWaveProxy(nint addr) : base(addr) { }
        public DialogueSoundWaveProxy() : base(0) { }
    }
    public class DeviceProfileManager : UEObject
    {
        public DeviceProfileManager(nint addr) : base(addr) { }
        public DeviceProfileManager() : base(0) { }
        public Array<UEObject> Profiles { get { return new Array<UEObject>(this["Profiles"]); } set { this["Profiles"] = value; } }
    }
    public class DeviceProfileFragment : UEObject
    {
        public DeviceProfileFragment(nint addr) : base(addr) { }
        public DeviceProfileFragment() : base(0) { }
    }
    public class DeviceProfile : TextureLODSettings
    {
        public DeviceProfile(nint addr) : base(addr) { }
        public DeviceProfile() : base(0) { }
        public string DeviceType { get { return this["DeviceType"].ToString(); } set { /* String properties are read-only */ } }
        public string BaseProfileName { get { return this["BaseProfileName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Parent { get { return this[nameof(Parent)]; } set { this["Parent"] = value; } }
        public List<string> CVars { get { return this["CVars"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class TextureLODSettings : UEObject
    {
        public TextureLODSettings(nint addr) : base(addr) { }
        public TextureLODSettings() : base(0) { }
        public Array<TextureLODGroup> TextureLODGroups { get { return new Array<TextureLODGroup>(this["TextureLODGroups"]); } set { this["TextureLODGroups"] = value; } }
    }
    public class DestructibleInterface : Interface
    {
        public DestructibleInterface(nint addr) : base(addr) { }
        public DestructibleInterface() : base(0) { }
    }
    public class DemoPendingNetGame : PendingNetGame
    {
        public DemoPendingNetGame(nint addr) : base(addr) { }
        public DemoPendingNetGame() : base(0) { }
    }
    public class PendingNetGame : UEObject
    {
        public PendingNetGame(nint addr) : base(addr) { }
        public PendingNetGame() : base(0) { }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
    }
    public class DemoNetDriver : NetDriver
    {
        public DemoNetDriver(nint addr) : base(addr) { }
        public DemoNetDriver() : base(0) { }
        public UEObject RollbackNetStartupActors { get { return this["RollbackNetStartupActors"]; } set { this["RollbackNetStartupActors"] = value; } }
        public float CheckpointSaveMaxMSPerFrame { get { return this["CheckpointSaveMaxMSPerFrame"].GetValue<float>(); } set { this["CheckpointSaveMaxMSPerFrame"].SetValue<float>(value); } }
        public Array<MulticastRecordOptions> MulticastRecordOptions { get { return new Array<MulticastRecordOptions>(this["MulticastRecordOptions"]); } set { this["MulticastRecordOptions"] = value; } }
        public bool bIsLocalReplay { get { return this["bIsLocalReplay"].Flag; } set { this["bIsLocalReplay"].Flag = value; } }
        public Array<PlayerController> SpectatorControllers { get { return new Array<PlayerController>(this["SpectatorControllers"]); } set { this["SpectatorControllers"] = value; } }
    }
    public class DemoNetConnection : NetConnection
    {
        public DemoNetConnection(nint addr) : base(addr) { }
        public DemoNetConnection() : base(0) { }
    }
    public class DefaultPhysicsVolume : PhysicsVolume
    {
        public DefaultPhysicsVolume(nint addr) : base(addr) { }
        public DefaultPhysicsVolume() : base(0) { }
    }
    public class DecalComponent : SceneComponent
    {
        public DecalComponent(nint addr) : base(addr) { }
        public DecalComponent() : base(0) { }
        public MaterialInterface DecalMaterial { get { return this[nameof(DecalMaterial)].As<MaterialInterface>(); } set { this["DecalMaterial"] = value; } }
        public int SortOrder { get { return this["SortOrder"].GetValue<int>(); } set { this["SortOrder"].SetValue<int>(value); } }
        public float FadeScreenSize { get { return this["FadeScreenSize"].GetValue<float>(); } set { this["FadeScreenSize"].SetValue<float>(value); } }
        public float FadeStartDelay { get { return this["FadeStartDelay"].GetValue<float>(); } set { this["FadeStartDelay"].SetValue<float>(value); } }
        public float FadeDuration { get { return this["FadeDuration"].GetValue<float>(); } set { this["FadeDuration"].SetValue<float>(value); } }
        public float FadeInDuration { get { return this["FadeInDuration"].GetValue<float>(); } set { this["FadeInDuration"].SetValue<float>(value); } }
        public float FadeInStartDelay { get { return this["FadeInStartDelay"].GetValue<float>(); } set { this["FadeInStartDelay"].SetValue<float>(value); } }
        public bool bDestroyOwnerAfterFade { get { return this["bDestroyOwnerAfterFade"].Flag; } set { this["bDestroyOwnerAfterFade"].Flag = value; } }
        public Vector DecalSize { get { return this[nameof(DecalSize)].As<Vector>(); } set { this["DecalSize"] = value; } }
        public void SetSortOrder(UEObject Value) { Invoke("SetSortOrder", Value); }
        public void _DecalComponent(UEObject DecalMaterial, UEObject SortOrder, UEObject FadeScreenSize, UEObject FadeStartDelay, UEObject FadeDuration, UEObject FadeInDuration, UEObject FadeInStartDelay, UEObject bDestroyOwnerAfterFade, UEObject DecalSize) { Invoke("DecalComponent", DecalMaterial, SortOrder, FadeScreenSize, FadeStartDelay, FadeDuration, FadeInDuration, FadeInStartDelay, bDestroyOwnerAfterFade, DecalSize); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DecalActor : Actor
    {
        public DecalActor(nint addr) : base(addr) { }
        public DecalActor() : base(0) { }
        public DecalComponent Decal { get { return this[nameof(Decal)].As<DecalComponent>(); } set { this["Decal"] = value; } }
        public void SetDecalMaterial(UEObject NewDecalMaterial) { Invoke("SetDecalMaterial", NewDecalMaterial); }
        public void _DecalActor(UEObject Decal) { Invoke("DecalActor", Decal); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DebugDrawService : UEObject
    {
        public DebugDrawService(nint addr) : base(addr) { }
        public DebugDrawService() : base(0) { }
    }
    public class DebugCameraHUD : HUD
    {
        public DebugCameraHUD(nint addr) : base(addr) { }
        public DebugCameraHUD() : base(0) { }
    }
    public class DebugCameraControllerSettings : UEObject
    {
        public DebugCameraControllerSettings(nint addr) : base(addr) { }
        public DebugCameraControllerSettings() : base(0) { }
        public Array<DebugCameraControllerSettingsViewModeIndex> CycleViewModes { get { return new Array<DebugCameraControllerSettingsViewModeIndex>(this["CycleViewModes"]); } set { this["CycleViewModes"] = value; } }
    }
    public class DebugCameraController : PlayerController
    {
        public DebugCameraController(nint addr) : base(addr) { }
        public DebugCameraController() : base(0) { }
        public bool bShowSelectedInfo { get { return this["bShowSelectedInfo"].Flag; } set { this["bShowSelectedInfo"].Flag = value; } }
        public bool bIsFrozenRendering { get { return this["bIsFrozenRendering"].Flag; } set { this["bIsFrozenRendering"].Flag = value; } }
        public bool bIsOrbitingSelectedActor { get { return this["bIsOrbitingSelectedActor"].Flag; } set { this["bIsOrbitingSelectedActor"].Flag = value; } }
        public bool bOrbitPivotUseCenter { get { return this["bOrbitPivotUseCenter"].Flag; } set { this["bOrbitPivotUseCenter"].Flag = value; } }
        public bool bEnableBufferVisualization { get { return this["bEnableBufferVisualization"].Flag; } set { this["bEnableBufferVisualization"].Flag = value; } }
        public bool bEnableBufferVisualizationFullMode { get { return this["bEnableBufferVisualizationFullMode"].Flag; } set { this["bEnableBufferVisualizationFullMode"].Flag = value; } }
        public bool bIsBufferVisualizationInputSetup { get { return this["bIsBufferVisualizationInputSetup"].Flag; } set { this["bIsBufferVisualizationInputSetup"].Flag = value; } }
        public bool bLastDisplayEnabled { get { return this["bLastDisplayEnabled"].Flag; } set { this["bLastDisplayEnabled"].Flag = value; } }
        public DrawFrustumComponent DrawFrustum { get { return this[nameof(DrawFrustum)].As<DrawFrustumComponent>(); } set { this["DrawFrustum"] = value; } }
        public Actor SelectedActor { get { return this[nameof(SelectedActor)].As<Actor>(); } set { this["SelectedActor"] = value; } }
        public PrimitiveComponent SelectedComponent { get { return this[nameof(SelectedComponent)].As<PrimitiveComponent>(); } set { this["SelectedComponent"] = value; } }
        public HitResult SelectedHitPoint { get { return this[nameof(SelectedHitPoint)].As<HitResult>(); } set { this["SelectedHitPoint"] = value; } }
        public PlayerController OriginalControllerRef { get { return this[nameof(OriginalControllerRef)].As<PlayerController>(); } set { this["OriginalControllerRef"] = value; } }
        public Player OriginalPlayer { get { return this[nameof(OriginalPlayer)].As<Player>(); } set { this["OriginalPlayer"] = value; } }
        public float SpeedScale { get { return this["SpeedScale"].GetValue<float>(); } set { this["SpeedScale"].SetValue<float>(value); } }
        public float InitialMaxSpeed { get { return this["InitialMaxSpeed"].GetValue<float>(); } set { this["InitialMaxSpeed"].SetValue<float>(value); } }
        public float InitialAccel { get { return this["InitialAccel"].GetValue<float>(); } set { this["InitialAccel"].SetValue<float>(value); } }
        public float InitialDecel { get { return this["InitialDecel"].GetValue<float>(); } set { this["InitialDecel"].SetValue<float>(value); } }
        public void ToggleDisplay() { Invoke("ToggleDisplay"); }
        public void _DebugCameraController(UEObject bShowSelectedInfo, UEObject bIsFrozenRendering, UEObject bIsOrbitingSelectedActor, UEObject bOrbitPivotUseCenter, UEObject bEnableBufferVisualization, UEObject bEnableBufferVisualizationFullMode, UEObject bIsBufferVisualizationInputSetup, UEObject bLastDisplayEnabled, UEObject DrawFrustum, UEObject SelectedActor, UEObject SelectedComponent, UEObject SelectedHitPoint, UEObject OriginalControllerRef, UEObject OriginalPlayer, UEObject SpeedScale, UEObject InitialMaxSpeed, UEObject InitialAccel, UEObject InitialDecel) { Invoke("DebugCameraController", bShowSelectedInfo, bIsFrozenRendering, bIsOrbitingSelectedActor, bOrbitPivotUseCenter, bEnableBufferVisualization, bEnableBufferVisualizationFullMode, bIsBufferVisualizationInputSetup, bLastDisplayEnabled, DrawFrustum, SelectedActor, SelectedComponent, SelectedHitPoint, OriginalControllerRef, OriginalPlayer, SpeedScale, InitialMaxSpeed, InitialAccel, InitialDecel); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DataTableFunctionLibrary : UEObject
    {
        public DataTableFunctionLibrary(nint addr) : base(addr) { }
        public DataTableFunctionLibrary() : base(0) { }
        public void GetDataTableRowNames(UEObject Table, UEObject OutRowNames) { Invoke("GetDataTableRowNames", Table, OutRowNames); }
        public void _DataTableFunctionLibrary() { Invoke("DataTableFunctionLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DataDrivenConsoleVariableSettings : UEObject
    {
        public DataDrivenConsoleVariableSettings(nint addr) : base(addr) { }
        public DataDrivenConsoleVariableSettings() : base(0) { }
        public Array<DataDrivenConsoleVariable> CVarsArray { get { return new Array<DataDrivenConsoleVariable>(this["CVarsArray"]); } set { this["CVarsArray"] = value; } }
    }
    public class DataDrivenCVarEngineSubsystem : EngineSubsystem
    {
        public DataDrivenCVarEngineSubsystem(nint addr) : base(addr) { }
        public DataDrivenCVarEngineSubsystem() : base(0) { }
        public UEObject OnDataDrivenCVarDelegate { get { return this["OnDataDrivenCVarDelegate"]; } set { this["OnDataDrivenCVarDelegate"] = value; } }
    }
    public class DamageType : UEObject
    {
        public DamageType(nint addr) : base(addr) { }
        public DamageType() : base(0) { }
        public bool bCausedByWorld { get { return this["bCausedByWorld"].Flag; } set { this["bCausedByWorld"].Flag = value; } }
        public bool bScaleMomentumByMass { get { return this["bScaleMomentumByMass"].Flag; } set { this["bScaleMomentumByMass"].Flag = value; } }
        public bool bRadialDamageVelChange { get { return this["bRadialDamageVelChange"].Flag; } set { this["bRadialDamageVelChange"].Flag = value; } }
        public float DamageImpulse { get { return this["DamageImpulse"].GetValue<float>(); } set { this["DamageImpulse"].SetValue<float>(value); } }
        public float DestructibleImpulse { get { return this["DestructibleImpulse"].GetValue<float>(); } set { this["DestructibleImpulse"].SetValue<float>(value); } }
        public float DestructibleDamageSpreadScale { get { return this["DestructibleDamageSpreadScale"].GetValue<float>(); } set { this["DestructibleDamageSpreadScale"].SetValue<float>(value); } }
        public float DamageFalloff { get { return this["DamageFalloff"].GetValue<float>(); } set { this["DamageFalloff"].SetValue<float>(value); } }
    }
    public class CurveSourceInterface : Interface
    {
        public CurveSourceInterface(nint addr) : base(addr) { }
        public CurveSourceInterface() : base(0) { }
        public UEObject GetCurveValue(UEObject CurveName) { return InvokeUEObject("GetCurveValue", CurveName); }
        public void _CurveSourceInterface() { Invoke("CurveSourceInterface"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CurveLinearColorAtlas : Texture2D
    {
        public CurveLinearColorAtlas(nint addr) : base(addr) { }
        public CurveLinearColorAtlas() : base(0) { }
        public uint TextureSize { get { return this["TextureSize"].GetValue<uint>(); } set { this["TextureSize"].SetValue<uint>(value); } }
        public bool bSquareResolution { get { return this["bSquareResolution"].Flag; } set { this["bSquareResolution"].Flag = value; } }
        public uint TextureHeight { get { return this["TextureHeight"].GetValue<uint>(); } set { this["TextureHeight"].SetValue<uint>(value); } }
        public Array<CurveLinearColor> GradientCurves { get { return new Array<CurveLinearColor>(this["GradientCurves"]); } set { this["GradientCurves"] = value; } }
        public UEObject GetCurvePosition(UEObject InCurve, UEObject position) { return InvokeUEObject("GetCurvePosition", InCurve, position); }
        public void _CurveLinearColorAtlas(UEObject TextureSize, UEObject bSquareResolution, UEObject TextureHeight, UEObject GradientCurves) { Invoke("CurveLinearColorAtlas", TextureSize, bSquareResolution, TextureHeight, GradientCurves); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Texture2D : Texture
    {
        public Texture2D(nint addr) : base(addr) { }
        public Texture2D() : base(0) { }
        public int LevelIndex { get { return this["LevelIndex"].GetValue<int>(); } set { this["LevelIndex"].SetValue<int>(value); } }
        public int FirstResourceMemMip { get { return this["FirstResourceMemMip"].GetValue<int>(); } set { this["FirstResourceMemMip"].SetValue<int>(value); } }
        public bool bTemporarilyDisableStreaming { get { return this["bTemporarilyDisableStreaming"].Flag; } set { this["bTemporarilyDisableStreaming"].Flag = value; } }
        public byte AddressX { get { return this["AddressX"].GetValue<byte>(); } set { this["AddressX"].SetValue<byte>(value); } }
        public byte AddressY { get { return this["AddressY"].GetValue<byte>(); } set { this["AddressY"].SetValue<byte>(value); } }
        public IntPoint ImportedSize { get { return this[nameof(ImportedSize)].As<IntPoint>(); } set { this["ImportedSize"] = value; } }
        public UEObject Blueprint_GetSizeY() { return InvokeUEObject("Blueprint_GetSizeY"); }
        public void _Texture2D(UEObject LevelIndex, UEObject FirstResourceMemMip, UEObject bTemporarilyDisableStreaming, UEObject AddressX, UEObject AddressY, UEObject ImportedSize) { Invoke("Texture2D", LevelIndex, FirstResourceMemMip, bTemporarilyDisableStreaming, AddressX, AddressY, ImportedSize); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CurveLinearColor : CurveBase
    {
        public CurveLinearColor(nint addr) : base(addr) { }
        public CurveLinearColor() : base(0) { }
        public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
        public float AdjustHue { get { return this["AdjustHue"].GetValue<float>(); } set { this["AdjustHue"].SetValue<float>(value); } }
        public float AdjustSaturation { get { return this["AdjustSaturation"].GetValue<float>(); } set { this["AdjustSaturation"].SetValue<float>(value); } }
        public float AdjustBrightness { get { return this["AdjustBrightness"].GetValue<float>(); } set { this["AdjustBrightness"].SetValue<float>(value); } }
        public float AdjustBrightnessCurve { get { return this["AdjustBrightnessCurve"].GetValue<float>(); } set { this["AdjustBrightnessCurve"].SetValue<float>(value); } }
        public float AdjustVibrance { get { return this["AdjustVibrance"].GetValue<float>(); } set { this["AdjustVibrance"].SetValue<float>(value); } }
        public float AdjustMinAlpha { get { return this["AdjustMinAlpha"].GetValue<float>(); } set { this["AdjustMinAlpha"].SetValue<float>(value); } }
        public float AdjustMaxAlpha { get { return this["AdjustMaxAlpha"].GetValue<float>(); } set { this["AdjustMaxAlpha"].SetValue<float>(value); } }
        public UEObject GetUnadjustedLinearColorValue(UEObject InTime) { return InvokeUEObject("GetUnadjustedLinearColorValue", InTime); }
        public void _CurveLinearColor(UEObject FloatCurves, UEObject AdjustHue, UEObject AdjustSaturation, UEObject AdjustBrightness, UEObject AdjustBrightnessCurve, UEObject AdjustVibrance, UEObject AdjustMinAlpha, UEObject AdjustMaxAlpha) { Invoke("CurveLinearColor", FloatCurves, AdjustHue, AdjustSaturation, AdjustBrightness, AdjustBrightnessCurve, AdjustVibrance, AdjustMinAlpha, AdjustMaxAlpha); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CurveFloat : CurveBase
    {
        public CurveFloat(nint addr) : base(addr) { }
        public CurveFloat() : base(0) { }
        public RichCurve FloatCurve { get { return this[nameof(FloatCurve)].As<RichCurve>(); } set { this["FloatCurve"] = value; } }
        public bool bIsEventCurve { get { return this["bIsEventCurve"].Flag; } set { this["bIsEventCurve"].Flag = value; } }
        public UEObject GetFloatValue(UEObject InTime) { return InvokeUEObject("GetFloatValue", InTime); }
        public void _CurveFloat(UEObject FloatCurve, UEObject bIsEventCurve) { Invoke("CurveFloat", FloatCurve, bIsEventCurve); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CurveEdPresetCurve : UEObject
    {
        public CurveEdPresetCurve(nint addr) : base(addr) { }
        public CurveEdPresetCurve() : base(0) { }
    }
    public class CullDistanceVolume : Volume
    {
        public CullDistanceVolume(nint addr) : base(addr) { }
        public CullDistanceVolume() : base(0) { }
        public Array<CullDistanceSizePair> CullDistances { get { return new Array<CullDistanceSizePair>(this["CullDistances"]); } set { this["CullDistances"] = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
    }
    public class GarbageCollectionSettings : UEObject
    {
        public GarbageCollectionSettings(nint addr) : base(addr) { }
        public GarbageCollectionSettings() : base(0) { }
        public float TimeBetweenPurgingPendingKillObjects { get { return this["TimeBetweenPurgingPendingKillObjects"].GetValue<float>(); } set { this["TimeBetweenPurgingPendingKillObjects"].SetValue<float>(value); } }
        public bool FlushStreamingOnGC { get { return this["FlushStreamingOnGC"].Flag; } set { this["FlushStreamingOnGC"].Flag = value; } }
        public bool AllowParallelGC { get { return this["AllowParallelGC"].Flag; } set { this["AllowParallelGC"].Flag = value; } }
        public bool IncrementalBeginDestroyEnabled { get { return this["IncrementalBeginDestroyEnabled"].Flag; } set { this["IncrementalBeginDestroyEnabled"].Flag = value; } }
        public bool MultithreadedDestructionEnabled { get { return this["MultithreadedDestructionEnabled"].Flag; } set { this["MultithreadedDestructionEnabled"].Flag = value; } }
        public bool CreateGCClusters { get { return this["CreateGCClusters"].Flag; } set { this["CreateGCClusters"].Flag = value; } }
        public bool AssetClusteringEnabled { get { return this["AssetClusteringEnabled"].Flag; } set { this["AssetClusteringEnabled"].Flag = value; } }
        public bool ActorClusteringEnabled { get { return this["ActorClusteringEnabled"].Flag; } set { this["ActorClusteringEnabled"].Flag = value; } }
        public bool BlueprintClusteringEnabled { get { return this["BlueprintClusteringEnabled"].Flag; } set { this["BlueprintClusteringEnabled"].Flag = value; } }
        public bool UseDisregardForGCOnDedicatedServers { get { return this["UseDisregardForGCOnDedicatedServers"].Flag; } set { this["UseDisregardForGCOnDedicatedServers"].Flag = value; } }
        public int MinGCClusterSize { get { return this["MinGCClusterSize"].GetValue<int>(); } set { this["MinGCClusterSize"].SetValue<int>(value); } }
        public int NumRetriesBeforeForcingGC { get { return this["NumRetriesBeforeForcingGC"].GetValue<int>(); } set { this["NumRetriesBeforeForcingGC"].SetValue<int>(value); } }
        public int MaxObjectsNotConsideredByGC { get { return this["MaxObjectsNotConsideredByGC"].GetValue<int>(); } set { this["MaxObjectsNotConsideredByGC"].SetValue<int>(value); } }
        public int SizeOfPermanentObjectPool { get { return this["SizeOfPermanentObjectPool"].GetValue<int>(); } set { this["SizeOfPermanentObjectPool"].SetValue<int>(value); } }
        public int MaxObjectsInGame { get { return this["MaxObjectsInGame"].GetValue<int>(); } set { this["MaxObjectsInGame"].SetValue<int>(value); } }
        public int MaxObjectsInEditor { get { return this["MaxObjectsInEditor"].GetValue<int>(); } set { this["MaxObjectsInEditor"].SetValue<int>(value); } }
    }
    public class StreamingSettings : UEObject
    {
        public StreamingSettings(nint addr) : base(addr) { }
        public StreamingSettings() : base(0) { }
        public bool AsyncLoadingThreadEnabled { get { return this["AsyncLoadingThreadEnabled"].Flag; } set { this["AsyncLoadingThreadEnabled"].Flag = value; } }
        public bool WarnIfTimeLimitExceeded { get { return this["WarnIfTimeLimitExceeded"].Flag; } set { this["WarnIfTimeLimitExceeded"].Flag = value; } }
        public float TimeLimitExceededMultiplier { get { return this["TimeLimitExceededMultiplier"].GetValue<float>(); } set { this["TimeLimitExceededMultiplier"].SetValue<float>(value); } }
        public float TimeLimitExceededMinTime { get { return this["TimeLimitExceededMinTime"].GetValue<float>(); } set { this["TimeLimitExceededMinTime"].SetValue<float>(value); } }
        public int MinBulkDataSizeForAsyncLoading { get { return this["MinBulkDataSizeForAsyncLoading"].GetValue<int>(); } set { this["MinBulkDataSizeForAsyncLoading"].SetValue<int>(value); } }
        public bool UseBackgroundLevelStreaming { get { return this["UseBackgroundLevelStreaming"].Flag; } set { this["UseBackgroundLevelStreaming"].Flag = value; } }
        public bool AsyncLoadingUseFullTimeLimit { get { return this["AsyncLoadingUseFullTimeLimit"].Flag; } set { this["AsyncLoadingUseFullTimeLimit"].Flag = value; } }
        public float AsyncLoadingTimeLimit { get { return this["AsyncLoadingTimeLimit"].GetValue<float>(); } set { this["AsyncLoadingTimeLimit"].SetValue<float>(value); } }
        public float PriorityAsyncLoadingExtraTime { get { return this["PriorityAsyncLoadingExtraTime"].GetValue<float>(); } set { this["PriorityAsyncLoadingExtraTime"].SetValue<float>(value); } }
        public float LevelStreamingActorsUpdateTimeLimit { get { return this["LevelStreamingActorsUpdateTimeLimit"].GetValue<float>(); } set { this["LevelStreamingActorsUpdateTimeLimit"].SetValue<float>(value); } }
        public float PriorityLevelStreamingActorsUpdateExtraTime { get { return this["PriorityLevelStreamingActorsUpdateExtraTime"].GetValue<float>(); } set { this["PriorityLevelStreamingActorsUpdateExtraTime"].SetValue<float>(value); } }
        public int LevelStreamingComponentsRegistrationGranularity { get { return this["LevelStreamingComponentsRegistrationGranularity"].GetValue<int>(); } set { this["LevelStreamingComponentsRegistrationGranularity"].SetValue<int>(value); } }
        public float LevelStreamingUnregisterComponentsTimeLimit { get { return this["LevelStreamingUnregisterComponentsTimeLimit"].GetValue<float>(); } set { this["LevelStreamingUnregisterComponentsTimeLimit"].SetValue<float>(value); } }
        public int LevelStreamingComponentsUnregistrationGranularity { get { return this["LevelStreamingComponentsUnregistrationGranularity"].GetValue<int>(); } set { this["LevelStreamingComponentsUnregistrationGranularity"].SetValue<int>(value); } }
        public bool FlushStreamingOnExit { get { return this["FlushStreamingOnExit"].Flag; } set { this["FlushStreamingOnExit"].Flag = value; } }
        public bool EventDrivenLoaderEnabled { get { return this["EventDrivenLoaderEnabled"].Flag; } set { this["EventDrivenLoaderEnabled"].Flag = value; } }
    }
    public class ControlChannel : Channel
    {
        public ControlChannel(nint addr) : base(addr) { }
        public ControlChannel() : base(0) { }
    }
    public class Console : UEObject
    {
        public Console(nint addr) : base(addr) { }
        public Console() : base(0) { }
        public LocalPlayer ConsoleTargetPlayer { get { return this[nameof(ConsoleTargetPlayer)].As<LocalPlayer>(); } set { this["ConsoleTargetPlayer"] = value; } }
        public Texture2D DefaultTexture_Black { get { return this[nameof(DefaultTexture_Black)].As<Texture2D>(); } set { this["DefaultTexture_Black"] = value; } }
        public Texture2D DefaultTexture_White { get { return this[nameof(DefaultTexture_White)].As<Texture2D>(); } set { this["DefaultTexture_White"] = value; } }
        public List<string> HistoryBuffer { get { return this["HistoryBuffer"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class CompositeDataTable : DataTable
    {
        public CompositeDataTable(nint addr) : base(addr) { }
        public CompositeDataTable() : base(0) { }
        public Array<DataTable> ParentTables { get { return new Array<DataTable>(this["ParentTables"]); } set { this["ParentTables"] = value; } }
        public Array<DataTable> OldParentTables { get { return new Array<DataTable>(this["OldParentTables"]); } set { this["OldParentTables"] = value; } }
    }
    public class DataTable : UEObject
    {
        public DataTable(nint addr) : base(addr) { }
        public DataTable() : base(0) { }
        public ScriptStruct RowStruct { get { return this[nameof(RowStruct)].As<ScriptStruct>(); } set { this["RowStruct"] = value; } }
        public bool bStripFromClientBuilds { get { return this["bStripFromClientBuilds"].Flag; } set { this["bStripFromClientBuilds"].Flag = value; } }
        public bool bIgnoreExtraFields { get { return this["bIgnoreExtraFields"].Flag; } set { this["bIgnoreExtraFields"].Flag = value; } }
        public bool bIgnoreMissingFields { get { return this["bIgnoreMissingFields"].Flag; } set { this["bIgnoreMissingFields"].Flag = value; } }
        public string ImportKeyField { get { return this["ImportKeyField"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class CompositeCurveTable : CurveTable
    {
        public CompositeCurveTable(nint addr) : base(addr) { }
        public CompositeCurveTable() : base(0) { }
        public Array<CurveTable> ParentTables { get { return new Array<CurveTable>(this["ParentTables"]); } set { this["ParentTables"] = value; } }
        public Array<CurveTable> OldParentTables { get { return new Array<CurveTable>(this["OldParentTables"]); } set { this["OldParentTables"] = value; } }
    }
    public class CurveTable : UEObject
    {
        public CurveTable(nint addr) : base(addr) { }
        public CurveTable() : base(0) { }
    }
    public class ActorComponentInstanceDataTransientOuter : UEObject
    {
        public ActorComponentInstanceDataTransientOuter(nint addr) : base(addr) { }
        public ActorComponentInstanceDataTransientOuter() : base(0) { }
    }
    public class ComponentDelegateBinding : DynamicBlueprintBinding
    {
        public ComponentDelegateBinding(nint addr) : base(addr) { }
        public ComponentDelegateBinding() : base(0) { }
        public Array<BlueprintComponentDelegateBinding> ComponentDelegateBindings { get { return new Array<BlueprintComponentDelegateBinding>(this["ComponentDelegateBindings"]); } set { this["ComponentDelegateBindings"] = value; } }
    }
    public class CollisionProfile : UEObject
    {
        public CollisionProfile(nint addr) : base(addr) { }
        public CollisionProfile() : base(0) { }
        public Array<CollisionResponseTemplate> Profiles { get { return new Array<CollisionResponseTemplate>(this["Profiles"]); } set { this["Profiles"] = value; } }
        public Array<CustomChannelSetup> DefaultChannelResponses { get { return new Array<CustomChannelSetup>(this["DefaultChannelResponses"]); } set { this["DefaultChannelResponses"] = value; } }
        public Array<CustomProfile> EditProfiles { get { return new Array<CustomProfile>(this["EditProfiles"]); } set { this["EditProfiles"] = value; } }
        public Array<Redirector> ProfileRedirects { get { return new Array<Redirector>(this["ProfileRedirects"]); } set { this["ProfileRedirects"] = value; } }
        public Array<Redirector> CollisionChannelRedirects { get { return new Array<Redirector>(this["CollisionChannelRedirects"]); } set { this["CollisionChannelRedirects"] = value; } }
    }
    public class CloudStorageBase : PlatformInterfaceBase
    {
        public CloudStorageBase(nint addr) : base(addr) { }
        public CloudStorageBase() : base(0) { }
        public List<string> LocalCloudFiles { get { return this["LocalCloudFiles"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bSuppressDelegateCalls { get { return this["bSuppressDelegateCalls"].Flag; } set { this["bSuppressDelegateCalls"].Flag = value; } }
    }
    public class PlatformInterfaceBase : UEObject
    {
        public PlatformInterfaceBase(nint addr) : base(addr) { }
        public PlatformInterfaceBase() : base(0) { }
        public Array<DelegateArray> AllDelegates { get { return new Array<DelegateArray>(this["AllDelegates"]); } set { this["AllDelegates"] = value; } }
    }
    public class ChildConnection : NetConnection
    {
        public ChildConnection(nint addr) : base(addr) { }
        public ChildConnection() : base(0) { }
        public NetConnection Parent { get { return this[nameof(Parent)].As<NetConnection>(); } set { this["Parent"] = value; } }
    }
    public class ChildActorComponent : SceneComponent
    {
        public ChildActorComponent(nint addr) : base(addr) { }
        public ChildActorComponent() : base(0) { }
        public UEObject ChildActorClass { get { return this["ChildActorClass"]; } set { this["ChildActorClass"] = value; } }
        public Actor ChildActor { get { return this[nameof(ChildActor)].As<Actor>(); } set { this["ChildActor"] = value; } }
        public Actor ChildActorTemplate { get { return this[nameof(ChildActorTemplate)].As<Actor>(); } set { this["ChildActorTemplate"] = value; } }
        public void SetChildActorClass(UEObject InClass) { Invoke("SetChildActorClass", InClass); }
        public void _ChildActorComponent(UEObject ChildActorClass, UEObject ChildActor, UEObject ChildActorTemplate) { Invoke("ChildActorComponent", ChildActorClass, ChildActor, ChildActorTemplate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CheckBoxStyleAsset : UEObject
    {
        public CheckBoxStyleAsset(nint addr) : base(addr) { }
        public CheckBoxStyleAsset() : base(0) { }
        public CheckBoxStyle CheckBoxStyle { get { return this[nameof(CheckBoxStyle)].As<CheckBoxStyle>(); } set { this["CheckBoxStyle"] = value; } }
    }
    public class CheatManagerExtension : UEObject
    {
        public CheatManagerExtension(nint addr) : base(addr) { }
        public CheatManagerExtension() : base(0) { }
    }
    public class CapsuleComponent : ShapeComponent
    {
        public CapsuleComponent(nint addr) : base(addr) { }
        public CapsuleComponent() : base(0) { }
        public float CapsuleHalfHeight { get { return this["CapsuleHalfHeight"].GetValue<float>(); } set { this["CapsuleHalfHeight"].SetValue<float>(value); } }
        public float CapsuleRadius { get { return this["CapsuleRadius"].GetValue<float>(); } set { this["CapsuleRadius"].SetValue<float>(value); } }
        public void SetCapsuleSize(UEObject InRadius, UEObject InHalfHeight, UEObject bUpdateOverlaps) { Invoke("SetCapsuleSize", InRadius, InHalfHeight, bUpdateOverlaps); }
        public void _CapsuleComponent(UEObject CapsuleHalfHeight, UEObject CapsuleRadius) { Invoke("CapsuleComponent", CapsuleHalfHeight, CapsuleRadius); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CanvasRenderTarget2D : TextureRenderTarget2D
    {
        public CanvasRenderTarget2D(nint addr) : base(addr) { }
        public CanvasRenderTarget2D() : base(0) { }
        public UEObject OnCanvasRenderTargetUpdate { get { return this["OnCanvasRenderTargetUpdate"]; } set { this["OnCanvasRenderTargetUpdate"] = value; } }
        public UEObject World { get { return this["World"]; } set { this["World"] = value; } }
        public bool bShouldClearRenderTargetOnReceiveUpdate { get { return this["bShouldClearRenderTargetOnReceiveUpdate"].Flag; } set { this["bShouldClearRenderTargetOnReceiveUpdate"].Flag = value; } }
        public void UpdateResource() { Invoke("UpdateResource"); }
        public void _CanvasRenderTarget2D(UEObject OnCanvasRenderTargetUpdate, UEObject World, UEObject bShouldClearRenderTargetOnReceiveUpdate) { Invoke("CanvasRenderTarget2D", OnCanvasRenderTargetUpdate, World, bShouldClearRenderTargetOnReceiveUpdate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TextureRenderTarget2D : TextureRenderTarget
    {
        public TextureRenderTarget2D(nint addr) : base(addr) { }
        public TextureRenderTarget2D() : base(0) { }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte AddressX { get { return this["AddressX"].GetValue<byte>(); } set { this["AddressX"].SetValue<byte>(value); } }
        public byte AddressY { get { return this["AddressY"].GetValue<byte>(); } set { this["AddressY"].SetValue<byte>(value); } }
        public bool bForceLinearGamma { get { return this["bForceLinearGamma"].Flag; } set { this["bForceLinearGamma"].Flag = value; } }
        public bool bHDR { get { return this["bHDR"].Flag; } set { this["bHDR"].Flag = value; } }
        public bool bGPUSharedFlag { get { return this["bGPUSharedFlag"].Flag; } set { this["bGPUSharedFlag"].Flag = value; } }
        public byte RenderTargetFormat { get { return this["RenderTargetFormat"].GetValue<byte>(); } set { this["RenderTargetFormat"].SetValue<byte>(value); } }
        public bool bAutoGenerateMips { get { return this["bAutoGenerateMips"].Flag; } set { this["bAutoGenerateMips"].Flag = value; } }
        public byte MipsSamplerFilter { get { return this["MipsSamplerFilter"].GetValue<byte>(); } set { this["MipsSamplerFilter"].SetValue<byte>(value); } }
        public byte MipsAddressU { get { return this["MipsAddressU"].GetValue<byte>(); } set { this["MipsAddressU"].SetValue<byte>(value); } }
        public byte MipsAddressV { get { return this["MipsAddressV"].GetValue<byte>(); } set { this["MipsAddressV"].SetValue<byte>(value); } }
        public byte OverrideFormat { get { return this["OverrideFormat"].GetValue<byte>(); } set { this["OverrideFormat"].SetValue<byte>(value); } }
    }
    public class TextureRenderTarget : Texture
    {
        public TextureRenderTarget(nint addr) : base(addr) { }
        public TextureRenderTarget() : base(0) { }
        public float TargetGamma { get { return this["TargetGamma"].GetValue<float>(); } set { this["TargetGamma"].SetValue<float>(value); } }
    }
    public class Canvas : UEObject
    {
        public Canvas(nint addr) : base(addr) { }
        public Canvas() : base(0) { }
        public float OrgX { get { return this["OrgX"].GetValue<float>(); } set { this["OrgX"].SetValue<float>(value); } }
        public float OrgY { get { return this["OrgY"].GetValue<float>(); } set { this["OrgY"].SetValue<float>(value); } }
        public float ClipX { get { return this["ClipX"].GetValue<float>(); } set { this["ClipX"].SetValue<float>(value); } }
        public float ClipY { get { return this["ClipY"].GetValue<float>(); } set { this["ClipY"].SetValue<float>(value); } }
        public Color DrawColor { get { return this[nameof(DrawColor)].As<Color>(); } set { this["DrawColor"] = value; } }
        public bool bCenterX { get { return this["bCenterX"].Flag; } set { this["bCenterX"].Flag = value; } }
        public bool bCenterY { get { return this["bCenterY"].Flag; } set { this["bCenterY"].Flag = value; } }
        public bool bNoSmooth { get { return this["bNoSmooth"].Flag; } set { this["bNoSmooth"].Flag = value; } }
        public int SizeX { get { return this["SizeX"].GetValue<int>(); } set { this["SizeX"].SetValue<int>(value); } }
        public int SizeY { get { return this["SizeY"].GetValue<int>(); } set { this["SizeY"].SetValue<int>(value); } }
        public Plane ColorModulate { get { return this[nameof(ColorModulate)].As<Plane>(); } set { this["ColorModulate"] = value; } }
        public Texture2D DefaultTexture { get { return this[nameof(DefaultTexture)].As<Texture2D>(); } set { this["DefaultTexture"] = value; } }
        public Texture2D GradientTexture0 { get { return this[nameof(GradientTexture0)].As<Texture2D>(); } set { this["GradientTexture0"] = value; } }
        public ReporterGraph ReporterGraph { get { return this[nameof(ReporterGraph)].As<ReporterGraph>(); } set { this["ReporterGraph"] = value; } }
        public UEObject K2_TextSize(UEObject RenderFont, UEObject RenderText, UEObject Scale) { return InvokeUEObject("K2_TextSize", RenderFont, RenderText, Scale); }
        public void _Canvas(UEObject OrgX, UEObject OrgY, UEObject ClipX, UEObject ClipY, UEObject DrawColor, UEObject bCenterX, UEObject bCenterY, UEObject bNoSmooth, UEObject SizeX, UEObject SizeY, UEObject ColorModulate, UEObject DefaultTexture, UEObject GradientTexture0, UEObject ReporterGraph) { Invoke("Canvas", OrgX, OrgY, ClipX, ClipY, DrawColor, bCenterX, bCenterY, bNoSmooth, SizeX, SizeY, ColorModulate, DefaultTexture, GradientTexture0, ReporterGraph); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraShakeSourceComponent : SceneComponent
    {
        public CameraShakeSourceComponent(nint addr) : base(addr) { }
        public CameraShakeSourceComponent() : base(0) { }
        public ECameraShakeAttenuation Attenuation { get { return (ECameraShakeAttenuation)this["Attenuation"].GetValue<int>(); } set { this["Attenuation"].SetValue<int>((int)value); } }
        public float InnerAttenuationRadius { get { return this["InnerAttenuationRadius"].GetValue<float>(); } set { this["InnerAttenuationRadius"].SetValue<float>(value); } }
        public float OuterAttenuationRadius { get { return this["OuterAttenuationRadius"].GetValue<float>(); } set { this["OuterAttenuationRadius"].SetValue<float>(value); } }
        public UEObject CameraShake { get { return this["CameraShake"]; } set { this["CameraShake"] = value; } }
        public bool bAutoStart { get { return this["bAutoStart"].Flag; } set { this["bAutoStart"].Flag = value; } }
        public void StopAllCameraShakesOfType(UEObject InCameraShake, UEObject bImmediately) { Invoke("StopAllCameraShakesOfType", InCameraShake, bImmediately); }
        public void _CameraShakeSourceComponent(UEObject Attenuation, UEObject InnerAttenuationRadius, UEObject OuterAttenuationRadius, UEObject CameraShake, UEObject bAutoStart) { Invoke("CameraShakeSourceComponent", Attenuation, InnerAttenuationRadius, OuterAttenuationRadius, CameraShake, bAutoStart); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraShakeSourceActor : Actor
    {
        public CameraShakeSourceActor(nint addr) : base(addr) { }
        public CameraShakeSourceActor() : base(0) { }
        public CameraShakeSourceComponent CameraShakeSourceComponent { get { return this[nameof(CameraShakeSourceComponent)].As<CameraShakeSourceComponent>(); } set { this["CameraShakeSourceComponent"] = value; } }
    }
    public class CameraModifier_CameraShake : CameraModifier
    {
        public CameraModifier_CameraShake(nint addr) : base(addr) { }
        public CameraModifier_CameraShake() : base(0) { }
        public Array<ActiveCameraShakeInfo> ActiveShakes { get { return new Array<ActiveCameraShakeInfo>(this["ActiveShakes"]); } set { this["ActiveShakes"] = value; } }
        public UEObject ExpiredPooledShakesMap { get { return this["ExpiredPooledShakesMap"]; } set { this["ExpiredPooledShakesMap"] = value; } }
        public float SplitScreenShakeScale { get { return this["SplitScreenShakeScale"].GetValue<float>(); } set { this["SplitScreenShakeScale"].SetValue<float>(value); } }
    }
    public class CameraModifier : UEObject
    {
        public CameraModifier(nint addr) : base(addr) { }
        public CameraModifier() : base(0) { }
        public bool bDebug { get { return this["bDebug"].Flag; } set { this["bDebug"].Flag = value; } }
        public bool bExclusive { get { return this["bExclusive"].Flag; } set { this["bExclusive"].Flag = value; } }
        public byte Priority { get { return this["Priority"].GetValue<byte>(); } set { this["Priority"].SetValue<byte>(value); } }
        public PlayerCameraManager CameraOwner { get { return this[nameof(CameraOwner)].As<PlayerCameraManager>(); } set { this["CameraOwner"] = value; } }
        public float AlphaInTime { get { return this["AlphaInTime"].GetValue<float>(); } set { this["AlphaInTime"].SetValue<float>(value); } }
        public float AlphaOutTime { get { return this["AlphaOutTime"].GetValue<float>(); } set { this["AlphaOutTime"].SetValue<float>(value); } }
        public float alpha { get { return this["alpha"].GetValue<float>(); } set { this["alpha"].SetValue<float>(value); } }
        public UEObject IsDisabled() { return InvokeUEObject("IsDisabled"); }
        public void _CameraModifier(UEObject bDebug, UEObject bExclusive, UEObject Priority, UEObject CameraOwner, UEObject AlphaInTime, UEObject AlphaOutTime, UEObject alpha) { Invoke("CameraModifier", bDebug, bExclusive, Priority, CameraOwner, AlphaInTime, AlphaOutTime, alpha); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraBlockingVolume : Volume
    {
        public CameraBlockingVolume(nint addr) : base(addr) { }
        public CameraBlockingVolume() : base(0) { }
    }
    public class CameraAnimInst : UEObject
    {
        public CameraAnimInst(nint addr) : base(addr) { }
        public CameraAnimInst() : base(0) { }
        public CameraAnim CamAnim { get { return this[nameof(CamAnim)].As<CameraAnim>(); } set { this["CamAnim"] = value; } }
        public InterpGroupInst InterpGroupInst { get { return this[nameof(InterpGroupInst)].As<InterpGroupInst>(); } set { this["InterpGroupInst"] = value; } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public InterpTrackMove MoveTrack { get { return this[nameof(MoveTrack)].As<InterpTrackMove>(); } set { this["MoveTrack"] = value; } }
        public InterpTrackInstMove MoveInst { get { return this[nameof(MoveInst)].As<InterpTrackInstMove>(); } set { this["MoveInst"] = value; } }
        public ECameraShakePlaySpace PlaySpace { get { return (ECameraShakePlaySpace)this["PlaySpace"].GetValue<int>(); } set { this["PlaySpace"].SetValue<int>((int)value); } }
        public void Stop(UEObject bImmediate) { Invoke("Stop", bImmediate); }
        public void _CameraAnimInst(UEObject CamAnim, UEObject InterpGroupInst, UEObject PlayRate, UEObject MoveTrack, UEObject MoveInst, UEObject PlaySpace) { Invoke("CameraAnimInst", CamAnim, InterpGroupInst, PlayRate, MoveTrack, MoveInst, PlaySpace); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraAnim : UEObject
    {
        public CameraAnim(nint addr) : base(addr) { }
        public CameraAnim() : base(0) { }
        public InterpGroup CameraInterpGroup { get { return this[nameof(CameraInterpGroup)].As<InterpGroup>(); } set { this["CameraInterpGroup"] = value; } }
        public float AnimLength { get { return this["AnimLength"].GetValue<float>(); } set { this["AnimLength"].SetValue<float>(value); } }
        public Box BoundingBox { get { return this[nameof(BoundingBox)].As<Box>(); } set { this["BoundingBox"] = value; } }
        public bool bRelativeToInitialTransform { get { return this["bRelativeToInitialTransform"].Flag; } set { this["bRelativeToInitialTransform"].Flag = value; } }
        public bool bRelativeToInitialFOV { get { return this["bRelativeToInitialFOV"].Flag; } set { this["bRelativeToInitialFOV"].Flag = value; } }
        public float BaseFOV { get { return this["BaseFOV"].GetValue<float>(); } set { this["BaseFOV"].SetValue<float>(value); } }
        public PostProcessSettings BasePostProcessSettings { get { return this[nameof(BasePostProcessSettings)].As<PostProcessSettings>(); } set { this["BasePostProcessSettings"] = value; } }
        public float BasePostProcessBlendWeight { get { return this["BasePostProcessBlendWeight"].GetValue<float>(); } set { this["BasePostProcessBlendWeight"].SetValue<float>(value); } }
    }
    public class ButtonStyleAsset : UEObject
    {
        public ButtonStyleAsset(nint addr) : base(addr) { }
        public ButtonStyleAsset() : base(0) { }
        public ButtonStyle ButtonStyle { get { return this[nameof(ButtonStyle)].As<ButtonStyle>(); } set { this["ButtonStyle"] = value; } }
    }
    public class BrushShape : Brush
    {
        public BrushShape(nint addr) : base(addr) { }
        public BrushShape() : base(0) { }
    }
    public class BrushComponent : PrimitiveComponent
    {
        public BrushComponent(nint addr) : base(addr) { }
        public BrushComponent() : base(0) { }
        public Model Brush { get { return this[nameof(Brush)].As<Model>(); } set { this["Brush"] = value; } }
        public BodySetup BrushBodySetup { get { return this[nameof(BrushBodySetup)].As<BodySetup>(); } set { this["BrushBodySetup"] = value; } }
    }
    public class BrushBuilder : UEObject
    {
        public BrushBuilder(nint addr) : base(addr) { }
        public BrushBuilder() : base(0) { }
        public string BitmapFilename { get { return this["BitmapFilename"].ToString(); } set { /* String properties are read-only */ } }
        public string ToolTip { get { return this["ToolTip"].ToString(); } set { /* String properties are read-only */ } }
        public bool NotifyBadParams { get { return this["NotifyBadParams"].Flag; } set { this["NotifyBadParams"].Flag = value; } }
        public Array<Vector> Vertices { get { return new Array<Vector>(this["Vertices"]); } set { this["Vertices"] = value; } }
        public Array<BuilderPoly> Polys { get { return new Array<BuilderPoly>(this["Polys"]); } set { this["Polys"] = value; } }
        public string Layer { get { return this["Layer"].ToString(); } set { /* String properties are read-only */ } }
        public bool MergeCoplanars { get { return this["MergeCoplanars"].Flag; } set { this["MergeCoplanars"].Flag = value; } }
    }
    public class Breakpoint : UEObject
    {
        public Breakpoint(nint addr) : base(addr) { }
        public Breakpoint() : base(0) { }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public EdGraphNode Node { get { return this[nameof(Node)].As<EdGraphNode>(); } set { this["Node"] = value; } }
        public bool bStepOnce { get { return this["bStepOnce"].Flag; } set { this["bStepOnce"].Flag = value; } }
        public bool bStepOnce_WasPreviouslyDisabled { get { return this["bStepOnce_WasPreviouslyDisabled"].Flag; } set { this["bStepOnce_WasPreviouslyDisabled"].Flag = value; } }
        public bool bStepOnce_RemoveAfterHit { get { return this["bStepOnce_RemoveAfterHit"].Flag; } set { this["bStepOnce_RemoveAfterHit"].Flag = value; } }
    }
    public class BoxReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public BoxReflectionCaptureComponent(nint addr) : base(addr) { }
        public BoxReflectionCaptureComponent() : base(0) { }
        public float BoxTransitionDistance { get { return this["BoxTransitionDistance"].GetValue<float>(); } set { this["BoxTransitionDistance"].SetValue<float>(value); } }
        public BoxComponent PreviewInfluenceBox { get { return this[nameof(PreviewInfluenceBox)].As<BoxComponent>(); } set { this["PreviewInfluenceBox"] = value; } }
        public BoxComponent PreviewCaptureBox { get { return this[nameof(PreviewCaptureBox)].As<BoxComponent>(); } set { this["PreviewCaptureBox"] = value; } }
    }
    public class ReflectionCaptureComponent : SceneComponent
    {
        public ReflectionCaptureComponent(nint addr) : base(addr) { }
        public ReflectionCaptureComponent() : base(0) { }
        public BillboardComponent CaptureOffsetComponent { get { return this[nameof(CaptureOffsetComponent)].As<BillboardComponent>(); } set { this["CaptureOffsetComponent"] = value; } }
        public EReflectionSourceType ReflectionSourceType { get { return (EReflectionSourceType)this["ReflectionSourceType"].GetValue<int>(); } set { this["ReflectionSourceType"].SetValue<int>((int)value); } }
        public EMobileReflectionCompression MobileReflectionCompression { get { return (EMobileReflectionCompression)this["MobileReflectionCompression"].GetValue<int>(); } set { this["MobileReflectionCompression"].SetValue<int>((int)value); } }
        public TextureCube Cubemap { get { return this[nameof(Cubemap)].As<TextureCube>(); } set { this["Cubemap"] = value; } }
        public float SourceCubemapAngle { get { return this["SourceCubemapAngle"].GetValue<float>(); } set { this["SourceCubemapAngle"].SetValue<float>(value); } }
        public float Brightness { get { return this["Brightness"].GetValue<float>(); } set { this["Brightness"].SetValue<float>(value); } }
        public bool bModifyMaxValueRGBM { get { return this["bModifyMaxValueRGBM"].Flag; } set { this["bModifyMaxValueRGBM"].Flag = value; } }
        public float MaxValueRGBM { get { return this["MaxValueRGBM"].GetValue<float>(); } set { this["MaxValueRGBM"].SetValue<float>(value); } }
        public Vector CaptureOffset { get { return this[nameof(CaptureOffset)].As<Vector>(); } set { this["CaptureOffset"] = value; } }
        public SDK.Script.CoreUObject.Guid MapBuildDataId { get { return this[nameof(MapBuildDataId)].As<SDK.Script.CoreUObject.Guid>(); } set { this["MapBuildDataId"] = value; } }
        public TextureCube CachedEncodedHDRCubemap { get { return this[nameof(CachedEncodedHDRCubemap)].As<TextureCube>(); } set { this["CachedEncodedHDRCubemap"] = value; } }
    }
    public class BoxReflectionCapture : ReflectionCapture
    {
        public BoxReflectionCapture(nint addr) : base(addr) { }
        public BoxReflectionCapture() : base(0) { }
    }
    public class ReflectionCapture : Actor
    {
        public ReflectionCapture(nint addr) : base(addr) { }
        public ReflectionCapture() : base(0) { }
        public ReflectionCaptureComponent CaptureComponent { get { return this[nameof(CaptureComponent)].As<ReflectionCaptureComponent>(); } set { this["CaptureComponent"] = value; } }
    }
    public class BoundsCopyComponent : ActorComponent
    {
        public BoundsCopyComponent(nint addr) : base(addr) { }
        public BoundsCopyComponent() : base(0) { }
        public UEObject BoundsSourceActor { get { return this["BoundsSourceActor"]; } set { this["BoundsSourceActor"] = value; } }
        public bool bUseCollidingComponentsForSourceBounds { get { return this["bUseCollidingComponentsForSourceBounds"].Flag; } set { this["bUseCollidingComponentsForSourceBounds"].Flag = value; } }
        public bool bKeepOwnBoundsScale { get { return this["bKeepOwnBoundsScale"].Flag; } set { this["bKeepOwnBoundsScale"].Flag = value; } }
        public bool bUseCollidingComponentsForOwnBounds { get { return this["bUseCollidingComponentsForOwnBounds"].Flag; } set { this["bUseCollidingComponentsForOwnBounds"].Flag = value; } }
        public SDK.Script.CoreUObject.Transform PostTransform { get { return this[nameof(PostTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["PostTransform"] = value; } }
        public bool bCopyXBounds { get { return this["bCopyXBounds"].Flag; } set { this["bCopyXBounds"].Flag = value; } }
        public bool bCopyYBounds { get { return this["bCopyYBounds"].Flag; } set { this["bCopyYBounds"].Flag = value; } }
        public bool bCopyZBounds { get { return this["bCopyZBounds"].Flag; } set { this["bCopyZBounds"].Flag = value; } }
    }
    public class BookMark2D : BookmarkBase
    {
        public BookMark2D(nint addr) : base(addr) { }
        public BookMark2D() : base(0) { }
        public float Zoom2D { get { return this["Zoom2D"].GetValue<float>(); } set { this["Zoom2D"].SetValue<float>(value); } }
        public IntPoint Location { get { return this[nameof(Location)].As<IntPoint>(); } set { this["Location"] = value; } }
    }
    public class BookMark : BookmarkBase
    {
        public BookMark(nint addr) : base(addr) { }
        public BookMark() : base(0) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public List<string> HiddenLevels { get { return this["HiddenLevels"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class BookmarkBase : UEObject
    {
        public BookmarkBase(nint addr) : base(addr) { }
        public BookmarkBase() : base(0) { }
    }
    public class BoneMaskFilter : UEObject
    {
        public BoneMaskFilter(nint addr) : base(addr) { }
        public BoneMaskFilter() : base(0) { }
        public Array<InputBlendPose> BlendPoses { get { return new Array<InputBlendPose>(this["BlendPoses"]); } set { this["BlendPoses"] = value; } }
    }
    public class BodySetup : BodySetupCore
    {
        public BodySetup(nint addr) : base(addr) { }
        public BodySetup() : base(0) { }
        public KAggregateGeom AggGeom { get { return this[nameof(AggGeom)].As<KAggregateGeom>(); } set { this["AggGeom"] = value; } }
        public bool bAlwaysFullAnimWeight { get { return this["bAlwaysFullAnimWeight"].Flag; } set { this["bAlwaysFullAnimWeight"].Flag = value; } }
        public bool bConsiderForBounds { get { return this["bConsiderForBounds"].Flag; } set { this["bConsiderForBounds"].Flag = value; } }
        public bool bMeshCollideAll { get { return this["bMeshCollideAll"].Flag; } set { this["bMeshCollideAll"].Flag = value; } }
        public bool bDoubleSidedGeometry { get { return this["bDoubleSidedGeometry"].Flag; } set { this["bDoubleSidedGeometry"].Flag = value; } }
        public bool bGenerateNonMirroredCollision { get { return this["bGenerateNonMirroredCollision"].Flag; } set { this["bGenerateNonMirroredCollision"].Flag = value; } }
        public bool bSharedCookedData { get { return this["bSharedCookedData"].Flag; } set { this["bSharedCookedData"].Flag = value; } }
        public bool bGenerateMirroredCollision { get { return this["bGenerateMirroredCollision"].Flag; } set { this["bGenerateMirroredCollision"].Flag = value; } }
        public bool bSupportUVsAndFaceRemap { get { return this["bSupportUVsAndFaceRemap"].Flag; } set { this["bSupportUVsAndFaceRemap"].Flag = value; } }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public WalkableSlopeOverride WalkableSlopeOverride { get { return this[nameof(WalkableSlopeOverride)].As<WalkableSlopeOverride>(); } set { this["WalkableSlopeOverride"] = value; } }
        public BodyInstance DefaultInstance { get { return this[nameof(DefaultInstance)].As<BodyInstance>(); } set { this["DefaultInstance"] = value; } }
        public Vector BuildScale3D { get { return this[nameof(BuildScale3D)].As<Vector>(); } set { this["BuildScale3D"] = value; } }
    }
    public class BlueprintSetLibrary : UEObject
    {
        public BlueprintSetLibrary(nint addr) : base(addr) { }
        public BlueprintSetLibrary() : base(0) { }
        public void SetSetPropertyByName(UEObject Object, UEObject PropertyName, UEObject Value) { Invoke("SetSetPropertyByName", Object, PropertyName, Value); }
        public void _BlueprintSetLibrary() { Invoke("BlueprintSetLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class BlueprintPlatformLibrary : UEObject
    {
        public BlueprintPlatformLibrary(nint addr) : base(addr) { }
        public BlueprintPlatformLibrary() : base(0) { }
        public UEObject ScheduleLocalNotificationFromNow(UEObject inSecondsFromNow, UEObject Title, UEObject Body, UEObject Action, UEObject ActivationEvent) { return InvokeUEObject("ScheduleLocalNotificationFromNow", inSecondsFromNow, Title, Body, Action, ActivationEvent); }
        public void _BlueprintPlatformLibrary() { Invoke("BlueprintPlatformLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlatformGameInstance : GameInstance
    {
        public PlatformGameInstance(nint addr) : base(addr) { }
        public PlatformGameInstance() : base(0) { }
        public UEObject ApplicationWillDeactivateDelegate { get { return this["ApplicationWillDeactivateDelegate"]; } set { this["ApplicationWillDeactivateDelegate"] = value; } }
        public UEObject ApplicationHasReactivatedDelegate { get { return this["ApplicationHasReactivatedDelegate"]; } set { this["ApplicationHasReactivatedDelegate"] = value; } }
        public UEObject ApplicationWillEnterBackgroundDelegate { get { return this["ApplicationWillEnterBackgroundDelegate"]; } set { this["ApplicationWillEnterBackgroundDelegate"] = value; } }
        public UEObject ApplicationHasEnteredForegroundDelegate { get { return this["ApplicationHasEnteredForegroundDelegate"]; } set { this["ApplicationHasEnteredForegroundDelegate"] = value; } }
        public UEObject ApplicationWillTerminateDelegate { get { return this["ApplicationWillTerminateDelegate"]; } set { this["ApplicationWillTerminateDelegate"] = value; } }
        public UEObject ApplicationShouldUnloadResourcesDelegate { get { return this["ApplicationShouldUnloadResourcesDelegate"]; } set { this["ApplicationShouldUnloadResourcesDelegate"] = value; } }
        public UEObject ApplicationReceivedStartupArgumentsDelegate { get { return this["ApplicationReceivedStartupArgumentsDelegate"]; } set { this["ApplicationReceivedStartupArgumentsDelegate"] = value; } }
        public UEObject ApplicationRegisteredForRemoteNotificationsDelegate { get { return this["ApplicationRegisteredForRemoteNotificationsDelegate"]; } set { this["ApplicationRegisteredForRemoteNotificationsDelegate"] = value; } }
        public UEObject ApplicationRegisteredForUserNotificationsDelegate { get { return this["ApplicationRegisteredForUserNotificationsDelegate"]; } set { this["ApplicationRegisteredForUserNotificationsDelegate"] = value; } }
        public UEObject ApplicationFailedToRegisterForRemoteNotificationsDelegate { get { return this["ApplicationFailedToRegisterForRemoteNotificationsDelegate"]; } set { this["ApplicationFailedToRegisterForRemoteNotificationsDelegate"] = value; } }
        public UEObject ApplicationReceivedRemoteNotificationDelegate { get { return this["ApplicationReceivedRemoteNotificationDelegate"]; } set { this["ApplicationReceivedRemoteNotificationDelegate"] = value; } }
        public UEObject ApplicationReceivedLocalNotificationDelegate { get { return this["ApplicationReceivedLocalNotificationDelegate"]; } set { this["ApplicationReceivedLocalNotificationDelegate"] = value; } }
        public UEObject ApplicationReceivedScreenOrientationChangedNotificationDelegate { get { return this["ApplicationReceivedScreenOrientationChangedNotificationDelegate"]; } set { this["ApplicationReceivedScreenOrientationChangedNotificationDelegate"] = value; } }
    }
    public class BlueprintPathsLibrary : UEObject
    {
        public BlueprintPathsLibrary(nint addr) : base(addr) { }
        public BlueprintPathsLibrary() : base(0) { }
        public UEObject VideoCaptureDir() { return InvokeUEObject("VideoCaptureDir"); }
        public void _BlueprintPathsLibrary() { Invoke("BlueprintPathsLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class BlueprintMapLibrary : UEObject
    {
        public BlueprintMapLibrary(nint addr) : base(addr) { }
        public BlueprintMapLibrary() : base(0) { }
        public void SetMapPropertyByName(UEObject Object, UEObject PropertyName, UEObject Value) { Invoke("SetMapPropertyByName", Object, PropertyName, Value); }
        public void _BlueprintMapLibrary() { Invoke("BlueprintMapLibrary"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class BlueprintExtension : UEObject
    {
        public BlueprintExtension(nint addr) : base(addr) { }
        public BlueprintExtension() : base(0) { }
    }
    public class BlockingVolume : Volume
    {
        public BlockingVolume(nint addr) : base(addr) { }
        public BlockingVolume() : base(0) { }
    }
    public class BlendProfile : UEObject
    {
        public BlendProfile(nint addr) : base(addr) { }
        public BlendProfile() : base(0) { }
        public Skeleton OwningSkeleton { get { return this[nameof(OwningSkeleton)].As<Skeleton>(); } set { this["OwningSkeleton"] = value; } }
        public Array<BlendProfileBoneEntry> ProfileEntries { get { return new Array<BlendProfileBoneEntry>(this["ProfileEntries"]); } set { this["ProfileEntries"] = value; } }
    }
    public class Skeleton : UEObject
    {
        public Skeleton(nint addr) : base(addr) { }
        public Skeleton() : base(0) { }
        public Array<BoneNode> BoneTree { get { return new Array<BoneNode>(this["BoneTree"]); } set { this["BoneTree"] = value; } }
        public Array<SDK.Script.CoreUObject.Transform> RefLocalPoses { get { return new Array<SDK.Script.CoreUObject.Transform>(this["RefLocalPoses"]); } set { this["RefLocalPoses"] = value; } }
        public SDK.Script.CoreUObject.Guid VirtualBoneGuid { get { return this[nameof(VirtualBoneGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["VirtualBoneGuid"] = value; } }
        public Array<VirtualBone> VirtualBones { get { return new Array<VirtualBone>(this["VirtualBones"]); } set { this["VirtualBones"] = value; } }
        public Array<SkeletalMeshSocket> Sockets { get { return new Array<SkeletalMeshSocket>(this["Sockets"]); } set { this["Sockets"] = value; } }
        public SmartNameContainer SmartNames { get { return this[nameof(SmartNames)].As<SmartNameContainer>(); } set { this["SmartNames"] = value; } }
        public Array<BlendProfile> BlendProfiles { get { return new Array<BlendProfile>(this["BlendProfiles"]); } set { this["BlendProfiles"] = value; } }
        public Array<AnimSlotGroup> SlotGroups { get { return new Array<AnimSlotGroup>(this["SlotGroups"]); } set { this["SlotGroups"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
    }
    public class BlendableInterface : Interface
    {
        public BlendableInterface(nint addr) : base(addr) { }
        public BlendableInterface() : base(0) { }
    }
    public class BillboardComponent : PrimitiveComponent
    {
        public BillboardComponent(nint addr) : base(addr) { }
        public BillboardComponent() : base(0) { }
        public Texture2D Sprite { get { return this[nameof(Sprite)].As<Texture2D>(); } set { this["Sprite"] = value; } }
        public bool bIsScreenSizeScaled { get { return this["bIsScreenSizeScaled"].Flag; } set { this["bIsScreenSizeScaled"].Flag = value; } }
        public float ScreenSize { get { return this["ScreenSize"].GetValue<float>(); } set { this["ScreenSize"].SetValue<float>(value); } }
        public float U { get { return this["U"].GetValue<float>(); } set { this["U"].SetValue<float>(value); } }
        public float UL { get { return this["UL"].GetValue<float>(); } set { this["UL"].SetValue<float>(value); } }
        public float V { get { return this["V"].GetValue<float>(); } set { this["V"].SetValue<float>(value); } }
        public float VL { get { return this["VL"].GetValue<float>(); } set { this["VL"].SetValue<float>(value); } }
        public void SetUV(UEObject NewU, UEObject NewUL, UEObject NewV, UEObject NewVL) { Invoke("SetUV", NewU, NewUL, NewV, NewVL); }
        public void _BillboardComponent(UEObject Sprite, UEObject bIsScreenSizeScaled, UEObject ScreenSize, UEObject U, UEObject UL, UEObject V, UEObject VL) { Invoke("BillboardComponent", Sprite, bIsScreenSizeScaled, ScreenSize, U, UL, V, VL); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class BandwidthTestActor : Actor
    {
        public BandwidthTestActor(nint addr) : base(addr) { }
        public BandwidthTestActor() : base(0) { }
        public BandwidthTestGenerator BandwidthGenerator { get { return this[nameof(BandwidthGenerator)].As<BandwidthTestGenerator>(); } set { this["BandwidthGenerator"] = value; } }
    }
    public class AvoidanceManager : UEObject
    {
        public AvoidanceManager(nint addr) : base(addr) { }
        public AvoidanceManager() : base(0) { }
        public float DefaultTimeToLive { get { return this["DefaultTimeToLive"].GetValue<float>(); } set { this["DefaultTimeToLive"].SetValue<float>(value); } }
        public float LockTimeAfterAvoid { get { return this["LockTimeAfterAvoid"].GetValue<float>(); } set { this["LockTimeAfterAvoid"].SetValue<float>(value); } }
        public float LockTimeAfterClean { get { return this["LockTimeAfterClean"].GetValue<float>(); } set { this["LockTimeAfterClean"].SetValue<float>(value); } }
        public float DeltaTimeToPredict { get { return this["DeltaTimeToPredict"].GetValue<float>(); } set { this["DeltaTimeToPredict"].SetValue<float>(value); } }
        public float ArtificialRadiusExpansion { get { return this["ArtificialRadiusExpansion"].GetValue<float>(); } set { this["ArtificialRadiusExpansion"].SetValue<float>(value); } }
        public float TestHeightDifference { get { return this["TestHeightDifference"].GetValue<float>(); } set { this["TestHeightDifference"].SetValue<float>(value); } }
        public float HeightCheckMargin { get { return this["HeightCheckMargin"].GetValue<float>(); } set { this["HeightCheckMargin"].SetValue<float>(value); } }
        public UEObject RegisterMovementComponent(UEObject MovementComp, UEObject AvoidanceWeight) { return InvokeUEObject("RegisterMovementComponent", MovementComp, AvoidanceWeight); }
        public void _AvoidanceManager(UEObject DefaultTimeToLive, UEObject LockTimeAfterAvoid, UEObject LockTimeAfterClean, UEObject DeltaTimeToPredict, UEObject ArtificialRadiusExpansion, UEObject TestHeightDifference, UEObject HeightCheckMargin) { Invoke("AvoidanceManager", DefaultTimeToLive, LockTimeAfterAvoid, LockTimeAfterClean, DeltaTimeToPredict, ArtificialRadiusExpansion, TestHeightDifference, HeightCheckMargin); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AutomationTestSettings : UEObject
    {
        public AutomationTestSettings(nint addr) : base(addr) { }
        public AutomationTestSettings() : base(0) { }
        public List<string> EngineTestModules { get { return this["EngineTestModules"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> EditorTestModules { get { return this["EditorTestModules"].GetStringList(); } set { /* Arrays are read-only */ } }
        public SoftObjectPath AutomationTestmap { get { return this[nameof(AutomationTestmap)].As<SoftObjectPath>(); } set { this["AutomationTestmap"] = value; } }
        public Array<EditorMapPerformanceTestDefinition> EditorPerformanceTestMaps { get { return new Array<EditorMapPerformanceTestDefinition>(this["EditorPerformanceTestMaps"]); } set { this["EditorPerformanceTestMaps"] = value; } }
        public Array<SoftObjectPath> AssetsToOpen { get { return new Array<SoftObjectPath>(this["AssetsToOpen"]); } set { this["AssetsToOpen"] = value; } }
        public List<string> MapsToPIETest { get { return this["MapsToPIETest"].GetStringList(); } set { /* Arrays are read-only */ } }
        public BuildPromotionTestSettings BuildPromotionTest { get { return this[nameof(BuildPromotionTest)].As<BuildPromotionTestSettings>(); } set { this["BuildPromotionTest"] = value; } }
        public MaterialEditorPromotionSettings MaterialEditorPromotionTest { get { return this[nameof(MaterialEditorPromotionTest)].As<MaterialEditorPromotionSettings>(); } set { this["MaterialEditorPromotionTest"] = value; } }
        public ParticleEditorPromotionSettings ParticleEditorPromotionTest { get { return this[nameof(ParticleEditorPromotionTest)].As<ParticleEditorPromotionSettings>(); } set { this["ParticleEditorPromotionTest"] = value; } }
        public BlueprintEditorPromotionSettings BlueprintEditorPromotionTest { get { return this[nameof(BlueprintEditorPromotionTest)].As<BlueprintEditorPromotionSettings>(); } set { this["BlueprintEditorPromotionTest"] = value; } }
        public List<string> TestLevelFolders { get { return this["TestLevelFolders"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<ExternalToolDefinition> ExternalTools { get { return new Array<ExternalToolDefinition>(this["ExternalTools"]); } set { this["ExternalTools"] = value; } }
        public Array<EditorImportExportTestDefinition> ImportExportTestDefinitions { get { return new Array<EditorImportExportTestDefinition>(this["ImportExportTestDefinitions"]); } set { this["ImportExportTestDefinitions"] = value; } }
        public Array<LaunchOnTestSettings> LaunchOnSettings { get { return new Array<LaunchOnTestSettings>(this["LaunchOnSettings"]); } set { this["LaunchOnSettings"] = value; } }
        public IntPoint DefaultScreenshotResolution { get { return this[nameof(DefaultScreenshotResolution)].As<IntPoint>(); } set { this["DefaultScreenshotResolution"] = value; } }
        public float PIETestDuration { get { return this["PIETestDuration"].GetValue<float>(); } set { this["PIETestDuration"].SetValue<float>(value); } }
    }
    public class AutoDestroySubsystem : TickableWorldSubsystem
    {
        public AutoDestroySubsystem(nint addr) : base(addr) { }
        public AutoDestroySubsystem() : base(0) { }
        public Array<Actor> ActorsToPoll { get { return new Array<Actor>(this["ActorsToPoll"]); } set { this["ActorsToPoll"] = value; } }
        public void OnActorEndPlay(UEObject Actor, UEObject EndPlayReason) { Invoke("OnActorEndPlay", Actor, EndPlayReason); }
        public void _AutoDestroySubsystem(UEObject ActorsToPoll) { Invoke("AutoDestroySubsystem", ActorsToPoll); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AudioVolume : Volume
    {
        public AudioVolume(nint addr) : base(addr) { }
        public AudioVolume() : base(0) { }
        public float Priority { get { return this["Priority"].GetValue<float>(); } set { this["Priority"].SetValue<float>(value); } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public ReverbSettings Settings { get { return this[nameof(Settings)].As<ReverbSettings>(); } set { this["Settings"] = value; } }
        public InteriorSettings AmbientZoneSettings { get { return this[nameof(AmbientZoneSettings)].As<InteriorSettings>(); } set { this["AmbientZoneSettings"] = value; } }
        public Array<AudioVolumeSubmixSendSettings> SubmixSendSettings { get { return new Array<AudioVolumeSubmixSendSettings>(this["SubmixSendSettings"]); } set { this["SubmixSendSettings"] = value; } }
        public Array<AudioVolumeSubmixOverrideSettings> SubmixOverrideSettings { get { return new Array<AudioVolumeSubmixOverrideSettings>(this["SubmixOverrideSettings"]); } set { this["SubmixOverrideSettings"] = value; } }
        public Array<AudioPortal> AudioVolumePortals { get { return new Array<AudioPortal>(this["AudioVolumePortals"]); } set { this["AudioVolumePortals"] = value; } }
        public void SetSubmixSendSettings(UEObject NewSubmixSendSettings) { Invoke("SetSubmixSendSettings", NewSubmixSendSettings); }
        public void _AudioVolume(UEObject Priority, UEObject bEnabled, UEObject Settings, UEObject AmbientZoneSettings, UEObject SubmixSendSettings, UEObject SubmixOverrideSettings, UEObject AudioVolumePortals) { Invoke("AudioVolume", Priority, bEnabled, Settings, AmbientZoneSettings, SubmixSendSettings, SubmixOverrideSettings, AudioVolumePortals); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AudioPortal : Actor
    {
        public AudioPortal(nint addr) : base(addr) { }
        public AudioPortal() : base(0) { }
        public Vector Extent { get { return this[nameof(Extent)].As<Vector>(); } set { this["Extent"] = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public BoxComponent BoxComponent { get { return this[nameof(BoxComponent)].As<BoxComponent>(); } set { this["BoxComponent"] = value; } }
        public void SetEnabled(UEObject bNewEnabled) { Invoke("SetEnabled", bNewEnabled); }
        public void _AudioPortal(UEObject Extent, UEObject bEnabled, UEObject BoxComponent) { Invoke("AudioPortal", Extent, bEnabled, BoxComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AudioSettings : UEObject
    {
        public AudioSettings(nint addr) : base(addr) { }
        public AudioSettings() : base(0) { }
        public SoftObjectPath DefaultSoundClassName { get { return this[nameof(DefaultSoundClassName)].As<SoftObjectPath>(); } set { this["DefaultSoundClassName"] = value; } }
        public SoftObjectPath DefaultMediaSoundClassName { get { return this[nameof(DefaultMediaSoundClassName)].As<SoftObjectPath>(); } set { this["DefaultMediaSoundClassName"] = value; } }
        public SoftObjectPath DefaultSoundConcurrencyName { get { return this[nameof(DefaultSoundConcurrencyName)].As<SoftObjectPath>(); } set { this["DefaultSoundConcurrencyName"] = value; } }
        public SoftObjectPath DefaultBaseSoundMix { get { return this[nameof(DefaultBaseSoundMix)].As<SoftObjectPath>(); } set { this["DefaultBaseSoundMix"] = value; } }
        public SoftObjectPath VoiPSoundClass { get { return this[nameof(VoiPSoundClass)].As<SoftObjectPath>(); } set { this["VoiPSoundClass"] = value; } }
        public SoftObjectPath MasterSubmix { get { return this[nameof(MasterSubmix)].As<SoftObjectPath>(); } set { this["MasterSubmix"] = value; } }
        public SoftObjectPath BaseDefaultSubmix { get { return this[nameof(BaseDefaultSubmix)].As<SoftObjectPath>(); } set { this["BaseDefaultSubmix"] = value; } }
        public SoftObjectPath ReverbSubmix { get { return this[nameof(ReverbSubmix)].As<SoftObjectPath>(); } set { this["ReverbSubmix"] = value; } }
        public SoftObjectPath EQSubmix { get { return this[nameof(EQSubmix)].As<SoftObjectPath>(); } set { this["EQSubmix"] = value; } }
        public EVoiceSampleRate VoiPSampleRate { get { return (EVoiceSampleRate)this["VoiPSampleRate"].GetValue<int>(); } set { this["VoiPSampleRate"].SetValue<int>((int)value); } }
        public float DefaultReverbSendLevel { get { return this["DefaultReverbSendLevel"].GetValue<float>(); } set { this["DefaultReverbSendLevel"].SetValue<float>(value); } }
        public int MaximumConcurrentStreams { get { return this["MaximumConcurrentStreams"].GetValue<int>(); } set { this["MaximumConcurrentStreams"].SetValue<int>(value); } }
        public float GlobalMinPitchScale { get { return this["GlobalMinPitchScale"].GetValue<float>(); } set { this["GlobalMinPitchScale"].SetValue<float>(value); } }
        public float GlobalMaxPitchScale { get { return this["GlobalMaxPitchScale"].GetValue<float>(); } set { this["GlobalMaxPitchScale"].SetValue<float>(value); } }
        public Array<AudioQualitySettings> QualityLevels { get { return new Array<AudioQualitySettings>(this["QualityLevels"]); } set { this["QualityLevels"] = value; } }
        public bool bAllowPlayWhenSilent { get { return this["bAllowPlayWhenSilent"].Flag; } set { this["bAllowPlayWhenSilent"].Flag = value; } }
        public bool bDisableMasterEQ { get { return this["bDisableMasterEQ"].Flag; } set { this["bDisableMasterEQ"].Flag = value; } }
        public bool bAllowCenterChannel3DPanning { get { return this["bAllowCenterChannel3DPanning"].Flag; } set { this["bAllowCenterChannel3DPanning"].Flag = value; } }
        public uint NumStoppingSources { get { return this["NumStoppingSources"].GetValue<uint>(); } set { this["NumStoppingSources"].SetValue<uint>(value); } }
        public EPanningMethod PanningMethod { get { return (EPanningMethod)this["PanningMethod"].GetValue<int>(); } set { this["PanningMethod"].SetValue<int>((int)value); } }
        public EMonoChannelUpmixMethod MonoChannelUpmixMethod { get { return (EMonoChannelUpmixMethod)this["MonoChannelUpmixMethod"].GetValue<int>(); } set { this["MonoChannelUpmixMethod"].SetValue<int>((int)value); } }
        public string DialogueFilenameFormat { get { return this["DialogueFilenameFormat"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SoundDebugEntry> DebugSounds { get { return new Array<SoundDebugEntry>(this["DebugSounds"]); } set { this["DebugSounds"] = value; } }
        public Array<DefaultAudioBusSettings> DefaultAudioBuses { get { return new Array<DefaultAudioBusSettings>(this["DefaultAudioBuses"]); } set { this["DefaultAudioBuses"] = value; } }
        public SoundClass DefaultSoundClass { get { return this[nameof(DefaultSoundClass)].As<SoundClass>(); } set { this["DefaultSoundClass"] = value; } }
        public SoundClass DefaultMediaSoundClass { get { return this[nameof(DefaultMediaSoundClass)].As<SoundClass>(); } set { this["DefaultMediaSoundClass"] = value; } }
        public SoundConcurrency DefaultSoundConcurrency { get { return this[nameof(DefaultSoundConcurrency)].As<SoundConcurrency>(); } set { this["DefaultSoundConcurrency"] = value; } }
    }
    public class AudioBus : UEObject
    {
        public AudioBus(nint addr) : base(addr) { }
        public AudioBus() : base(0) { }
        public EAudioBusChannels AudioBusChannels { get { return (EAudioBusChannels)this["AudioBusChannels"].GetValue<int>(); } set { this["AudioBusChannels"].SetValue<int>((int)value); } }
    }
    public class AtmosphericFogComponent : SceneComponent
    {
        public AtmosphericFogComponent(nint addr) : base(addr) { }
        public AtmosphericFogComponent() : base(0) { }
        public float SunMultiplier { get { return this["SunMultiplier"].GetValue<float>(); } set { this["SunMultiplier"].SetValue<float>(value); } }
        public float FogMultiplier { get { return this["FogMultiplier"].GetValue<float>(); } set { this["FogMultiplier"].SetValue<float>(value); } }
        public float DensityMultiplier { get { return this["DensityMultiplier"].GetValue<float>(); } set { this["DensityMultiplier"].SetValue<float>(value); } }
        public float DensityOffset { get { return this["DensityOffset"].GetValue<float>(); } set { this["DensityOffset"].SetValue<float>(value); } }
        public float DistanceScale { get { return this["DistanceScale"].GetValue<float>(); } set { this["DistanceScale"].SetValue<float>(value); } }
        public float AltitudeScale { get { return this["AltitudeScale"].GetValue<float>(); } set { this["AltitudeScale"].SetValue<float>(value); } }
        public float DistanceOffset { get { return this["DistanceOffset"].GetValue<float>(); } set { this["DistanceOffset"].SetValue<float>(value); } }
        public float GroundOffset { get { return this["GroundOffset"].GetValue<float>(); } set { this["GroundOffset"].SetValue<float>(value); } }
        public float StartDistance { get { return this["StartDistance"].GetValue<float>(); } set { this["StartDistance"].SetValue<float>(value); } }
        public float SunDiscScale { get { return this["SunDiscScale"].GetValue<float>(); } set { this["SunDiscScale"].SetValue<float>(value); } }
        public float DefaultBrightness { get { return this["DefaultBrightness"].GetValue<float>(); } set { this["DefaultBrightness"].SetValue<float>(value); } }
        public Color DefaultLightColor { get { return this[nameof(DefaultLightColor)].As<Color>(); } set { this["DefaultLightColor"] = value; } }
        public bool bDisableSunDisk { get { return this["bDisableSunDisk"].Flag; } set { this["bDisableSunDisk"].Flag = value; } }
        public bool bAtmosphereAffectsSunIlluminance { get { return this["bAtmosphereAffectsSunIlluminance"].Flag; } set { this["bAtmosphereAffectsSunIlluminance"].Flag = value; } }
        public bool bDisableGroundScattering { get { return this["bDisableGroundScattering"].Flag; } set { this["bDisableGroundScattering"].Flag = value; } }
        public AtmospherePrecomputeParameters PrecomputeParams { get { return this[nameof(PrecomputeParams)].As<AtmospherePrecomputeParameters>(); } set { this["PrecomputeParams"] = value; } }
        public Texture2D TransmittanceTexture { get { return this[nameof(TransmittanceTexture)].As<Texture2D>(); } set { this["TransmittanceTexture"] = value; } }
        public Texture2D IrradianceTexture { get { return this[nameof(IrradianceTexture)].As<Texture2D>(); } set { this["IrradianceTexture"] = value; } }
        public void StartPrecompute() { Invoke("StartPrecompute"); }
        public void _AtmosphericFogComponent(UEObject SunMultiplier, UEObject FogMultiplier, UEObject DensityMultiplier, UEObject DensityOffset, UEObject DistanceScale, UEObject AltitudeScale, UEObject DistanceOffset, UEObject GroundOffset, UEObject StartDistance, UEObject SunDiscScale, UEObject DefaultBrightness, UEObject DefaultLightColor, UEObject bDisableSunDisk, UEObject bAtmosphereAffectsSunIlluminance, UEObject bDisableGroundScattering, UEObject PrecomputeParams, UEObject TransmittanceTexture, UEObject IrradianceTexture) { Invoke("AtmosphericFogComponent", SunMultiplier, FogMultiplier, DensityMultiplier, DensityOffset, DistanceScale, AltitudeScale, DistanceOffset, GroundOffset, StartDistance, SunDiscScale, DefaultBrightness, DefaultLightColor, bDisableSunDisk, bAtmosphereAffectsSunIlluminance, bDisableGroundScattering, PrecomputeParams, TransmittanceTexture, IrradianceTexture); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AtmosphericFog : Info
    {
        public AtmosphericFog(nint addr) : base(addr) { }
        public AtmosphericFog() : base(0) { }
        public AtmosphericFogComponent AtmosphericFogComponent { get { return this[nameof(AtmosphericFogComponent)].As<AtmosphericFogComponent>(); } set { this["AtmosphericFogComponent"] = value; } }
    }
    public class AsyncActionChangePrimaryAssetBundles : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionChangePrimaryAssetBundles(nint addr) : base(addr) { }
        public AsyncActionChangePrimaryAssetBundles() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public UEObject AsyncChangeBundleStateForPrimaryAssetList(UEObject WorldContextObject, UEObject PrimaryAssetList, UEObject AddBundles, UEObject RemoveBundles) { return InvokeUEObject("AsyncChangeBundleStateForPrimaryAssetList", WorldContextObject, PrimaryAssetList, AddBundles, RemoveBundles); }
        public void _AsyncActionChangePrimaryAssetBundles(UEObject Completed) { Invoke("AsyncActionChangePrimaryAssetBundles", Completed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AsyncActionLoadPrimaryAssetClassList : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetClassList(nint addr) : base(addr) { }
        public AsyncActionLoadPrimaryAssetClassList() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public UEObject AsyncLoadPrimaryAssetClassList(UEObject WorldContextObject, UEObject PrimaryAssetList, UEObject LoadBundles) { return InvokeUEObject("AsyncLoadPrimaryAssetClassList", WorldContextObject, PrimaryAssetList, LoadBundles); }
        public void _AsyncActionLoadPrimaryAssetClassList(UEObject Completed) { Invoke("AsyncActionLoadPrimaryAssetClassList", Completed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AsyncActionLoadPrimaryAssetList : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetList(nint addr) : base(addr) { }
        public AsyncActionLoadPrimaryAssetList() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public UEObject AsyncLoadPrimaryAssetList(UEObject WorldContextObject, UEObject PrimaryAssetList, UEObject LoadBundles) { return InvokeUEObject("AsyncLoadPrimaryAssetList", WorldContextObject, PrimaryAssetList, LoadBundles); }
        public void _AsyncActionLoadPrimaryAssetList(UEObject Completed) { Invoke("AsyncActionLoadPrimaryAssetList", Completed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AsyncActionLoadPrimaryAssetClass : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetClass(nint addr) : base(addr) { }
        public AsyncActionLoadPrimaryAssetClass() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public UEObject AsyncLoadPrimaryAssetClass(UEObject WorldContextObject, UEObject PrimaryAsset, UEObject LoadBundles) { return InvokeUEObject("AsyncLoadPrimaryAssetClass", WorldContextObject, PrimaryAsset, LoadBundles); }
        public void _AsyncActionLoadPrimaryAssetClass(UEObject Completed) { Invoke("AsyncActionLoadPrimaryAssetClass", Completed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AsyncActionLoadPrimaryAsset : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAsset(nint addr) : base(addr) { }
        public AsyncActionLoadPrimaryAsset() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public UEObject AsyncLoadPrimaryAsset(UEObject WorldContextObject, UEObject PrimaryAsset, UEObject LoadBundles) { return InvokeUEObject("AsyncLoadPrimaryAsset", WorldContextObject, PrimaryAsset, LoadBundles); }
        public void _AsyncActionLoadPrimaryAsset(UEObject Completed) { Invoke("AsyncActionLoadPrimaryAsset", Completed); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AsyncActionLoadPrimaryAssetBase : BlueprintAsyncActionBase
    {
        public AsyncActionLoadPrimaryAssetBase(nint addr) : base(addr) { }
        public AsyncActionLoadPrimaryAssetBase() : base(0) { }
    }
    public class AsyncActionHandleSaveGame : BlueprintAsyncActionBase
    {
        public AsyncActionHandleSaveGame(nint addr) : base(addr) { }
        public AsyncActionHandleSaveGame() : base(0) { }
        public UEObject Completed { get { return this["Completed"]; } set { this["Completed"] = value; } }
        public SaveGame SaveGameObject { get { return this[nameof(SaveGameObject)].As<SaveGame>(); } set { this["SaveGameObject"] = value; } }
        public UEObject AsyncSaveGameToSlot(UEObject WorldContextObject, UEObject SaveGameObject, UEObject SlotName, UEObject UserIndex) { return InvokeUEObject("AsyncSaveGameToSlot", WorldContextObject, SaveGameObject, SlotName, UserIndex); }
        public void _AsyncActionHandleSaveGame(UEObject Completed, UEObject SaveGameObject) { Invoke("AsyncActionHandleSaveGame", Completed, SaveGameObject); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ShadowOverrideInterface : Interface
    {
        public ShadowOverrideInterface(nint addr) : base(addr) { }
        public ShadowOverrideInterface() : base(0) { }
    }
    public class AssetMappingTable : UEObject
    {
        public AssetMappingTable(nint addr) : base(addr) { }
        public AssetMappingTable() : base(0) { }
        public Array<AssetMapping> MappedAssets { get { return new Array<AssetMapping>(this["MappedAssets"]); } set { this["MappedAssets"] = value; } }
    }
    public class AssetManagerSettings : UEObject
    {
        public AssetManagerSettings(nint addr) : base(addr) { }
        public AssetManagerSettings() : base(0) { }
        public Array<PrimaryAssetTypeInfo> PrimaryAssetTypesToScan { get { return new Array<PrimaryAssetTypeInfo>(this["PrimaryAssetTypesToScan"]); } set { this["PrimaryAssetTypesToScan"] = value; } }
        public Array<DirectoryPath> DirectoriesToExclude { get { return new Array<DirectoryPath>(this["DirectoriesToExclude"]); } set { this["DirectoriesToExclude"] = value; } }
        public Array<PrimaryAssetRulesOverride> PrimaryAssetRules { get { return new Array<PrimaryAssetRulesOverride>(this["PrimaryAssetRules"]); } set { this["PrimaryAssetRules"] = value; } }
        public Array<PrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules { get { return new Array<PrimaryAssetRulesCustomOverride>(this["CustomPrimaryAssetRules"]); } set { this["CustomPrimaryAssetRules"] = value; } }
        public bool bOnlyCookProductionAssets { get { return this["bOnlyCookProductionAssets"].Flag; } set { this["bOnlyCookProductionAssets"].Flag = value; } }
        public bool bShouldManagerDetermineTypeAndName { get { return this["bShouldManagerDetermineTypeAndName"].Flag; } set { this["bShouldManagerDetermineTypeAndName"].Flag = value; } }
        public bool bShouldGuessTypeAndNameInEditor { get { return this["bShouldGuessTypeAndNameInEditor"].Flag; } set { this["bShouldGuessTypeAndNameInEditor"].Flag = value; } }
        public bool bShouldAcquireMissingChunksOnLoad { get { return this["bShouldAcquireMissingChunksOnLoad"].Flag; } set { this["bShouldAcquireMissingChunksOnLoad"].Flag = value; } }
        public Array<AssetManagerRedirect> PrimaryAssetIdRedirects { get { return new Array<AssetManagerRedirect>(this["PrimaryAssetIdRedirects"]); } set { this["PrimaryAssetIdRedirects"] = value; } }
        public Array<AssetManagerRedirect> PrimaryAssetTypeRedirects { get { return new Array<AssetManagerRedirect>(this["PrimaryAssetTypeRedirects"]); } set { this["PrimaryAssetTypeRedirects"] = value; } }
        public Array<AssetManagerRedirect> AssetPathRedirects { get { return new Array<AssetManagerRedirect>(this["AssetPathRedirects"]); } set { this["AssetPathRedirects"] = value; } }
        public UEObject MetaDataTagsForAssetRegistry { get { return this["MetaDataTagsForAssetRegistry"]; } set { this["MetaDataTagsForAssetRegistry"] = value; } }
    }
    public class AssetManager : UEObject
    {
        public AssetManager(nint addr) : base(addr) { }
        public AssetManager() : base(0) { }
        public Array<UEObject> ObjectReferenceList { get { return new Array<UEObject>(this["ObjectReferenceList"]); } set { this["ObjectReferenceList"] = value; } }
        public bool bIsGlobalAsyncScanEnvironment { get { return this["bIsGlobalAsyncScanEnvironment"].Flag; } set { this["bIsGlobalAsyncScanEnvironment"].Flag = value; } }
        public bool bShouldGuessTypeAndName { get { return this["bShouldGuessTypeAndName"].Flag; } set { this["bShouldGuessTypeAndName"].Flag = value; } }
        public bool bShouldUseSynchronousLoad { get { return this["bShouldUseSynchronousLoad"].Flag; } set { this["bShouldUseSynchronousLoad"].Flag = value; } }
        public bool bIsLoadingFromPakFiles { get { return this["bIsLoadingFromPakFiles"].Flag; } set { this["bIsLoadingFromPakFiles"].Flag = value; } }
        public bool bShouldAcquireMissingChunksOnLoad { get { return this["bShouldAcquireMissingChunksOnLoad"].Flag; } set { this["bShouldAcquireMissingChunksOnLoad"].Flag = value; } }
        public bool bOnlyCookProductionAssets { get { return this["bOnlyCookProductionAssets"].Flag; } set { this["bOnlyCookProductionAssets"].Flag = value; } }
        public bool bIsBulkScanning { get { return this["bIsBulkScanning"].Flag; } set { this["bIsBulkScanning"].Flag = value; } }
        public bool bIsPrimaryAssetDirectoryCurrent { get { return this["bIsPrimaryAssetDirectoryCurrent"].Flag; } set { this["bIsPrimaryAssetDirectoryCurrent"].Flag = value; } }
        public bool bIsManagementDatabaseCurrent { get { return this["bIsManagementDatabaseCurrent"].Flag; } set { this["bIsManagementDatabaseCurrent"].Flag = value; } }
        public bool bUpdateManagementDatabaseAfterScan { get { return this["bUpdateManagementDatabaseAfterScan"].Flag; } set { this["bUpdateManagementDatabaseAfterScan"].Flag = value; } }
        public bool bIncludeOnlyOnDiskAssets { get { return this["bIncludeOnlyOnDiskAssets"].Flag; } set { this["bIncludeOnlyOnDiskAssets"].Flag = value; } }
        public bool bHasCompletedInitialScan { get { return this["bHasCompletedInitialScan"].Flag; } set { this["bHasCompletedInitialScan"].Flag = value; } }
        public int NumberOfSpawnedNotifications { get { return this["NumberOfSpawnedNotifications"].GetValue<int>(); } set { this["NumberOfSpawnedNotifications"].SetValue<int>(value); } }
    }
    public class AssetExportTask : UEObject
    {
        public AssetExportTask(nint addr) : base(addr) { }
        public AssetExportTask() : base(0) { }
        public UEObject Object { get { return this[nameof(Object)]; } set { this["Object"] = value; } }
        public Exporter Exporter { get { return this[nameof(Exporter)].As<Exporter>(); } set { this["Exporter"] = value; } }
        public string Filename { get { return this["Filename"].ToString(); } set { /* String properties are read-only */ } }
        public bool bSelected { get { return this["bSelected"].Flag; } set { this["bSelected"].Flag = value; } }
        public bool bReplaceIdentical { get { return this["bReplaceIdentical"].Flag; } set { this["bReplaceIdentical"].Flag = value; } }
        public bool bPrompt { get { return this["bPrompt"].Flag; } set { this["bPrompt"].Flag = value; } }
        public bool bAutomated { get { return this["bAutomated"].Flag; } set { this["bAutomated"].Flag = value; } }
        public bool bUseFileArchive { get { return this["bUseFileArchive"].Flag; } set { this["bUseFileArchive"].Flag = value; } }
        public bool bWriteEmptyFiles { get { return this["bWriteEmptyFiles"].Flag; } set { this["bWriteEmptyFiles"].Flag = value; } }
        public Array<UEObject> IgnoreObjectList { get { return new Array<UEObject>(this["IgnoreObjectList"]); } set { this["IgnoreObjectList"] = value; } }
        public UEObject Options { get { return this[nameof(Options)]; } set { this["Options"] = value; } }
        public List<string> Errors { get { return this["Errors"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class ArrowComponent : PrimitiveComponent
    {
        public ArrowComponent(nint addr) : base(addr) { }
        public ArrowComponent() : base(0) { }
        public Color ArrowColor { get { return this[nameof(ArrowColor)].As<Color>(); } set { this["ArrowColor"] = value; } }
        public float ArrowSize { get { return this["ArrowSize"].GetValue<float>(); } set { this["ArrowSize"].SetValue<float>(value); } }
        public float ArrowLength { get { return this["ArrowLength"].GetValue<float>(); } set { this["ArrowLength"].SetValue<float>(value); } }
        public float ScreenSize { get { return this["ScreenSize"].GetValue<float>(); } set { this["ScreenSize"].SetValue<float>(value); } }
        public bool bIsScreenSizeScaled { get { return this["bIsScreenSizeScaled"].Flag; } set { this["bIsScreenSizeScaled"].Flag = value; } }
        public bool bTreatAsASprite { get { return this["bTreatAsASprite"].Flag; } set { this["bTreatAsASprite"].Flag = value; } }
        public void SetArrowColor(UEObject NewColor) { Invoke("SetArrowColor", NewColor); }
        public void _ArrowComponent(UEObject ArrowColor, UEObject ArrowSize, UEObject ArrowLength, UEObject ScreenSize, UEObject bIsScreenSizeScaled, UEObject bTreatAsASprite) { Invoke("ArrowComponent", ArrowColor, ArrowSize, ArrowLength, ScreenSize, bIsScreenSizeScaled, bTreatAsASprite); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimStreamable : AnimSequenceBase
    {
        public AnimStreamable(nint addr) : base(addr) { }
        public AnimStreamable() : base(0) { }
        public int NumFrames { get { return this["NumFrames"].GetValue<int>(); } set { this["NumFrames"].SetValue<int>(value); } }
        public EAnimInterpolationType Interpolation { get { return (EAnimInterpolationType)this["Interpolation"].GetValue<int>(); } set { this["Interpolation"].SetValue<int>((int)value); } }
        public string RetargetSource { get { return this["RetargetSource"].ToString(); } set { /* String properties are read-only */ } }
        public AnimBoneCompressionSettings BoneCompressionSettings { get { return this[nameof(BoneCompressionSettings)].As<AnimBoneCompressionSettings>(); } set { this["BoneCompressionSettings"] = value; } }
        public AnimCurveCompressionSettings CurveCompressionSettings { get { return this[nameof(CurveCompressionSettings)].As<AnimCurveCompressionSettings>(); } set { this["CurveCompressionSettings"] = value; } }
        public bool bEnableRootMotion { get { return this["bEnableRootMotion"].Flag; } set { this["bEnableRootMotion"].Flag = value; } }
        public byte RootMotionRootLock { get { return this["RootMotionRootLock"].GetValue<byte>(); } set { this["RootMotionRootLock"].SetValue<byte>(value); } }
        public bool bForceRootLock { get { return this["bForceRootLock"].Flag; } set { this["bForceRootLock"].Flag = value; } }
        public bool bUseNormalizedRootMotionScale { get { return this["bUseNormalizedRootMotionScale"].Flag; } set { this["bUseNormalizedRootMotionScale"].Flag = value; } }
    }
    public class AnimStateMachineTypes : UEObject
    {
        public AnimStateMachineTypes(nint addr) : base(addr) { }
        public AnimStateMachineTypes() : base(0) { }
    }
    public class AnimSingleNodeInstance : AnimInstance
    {
        public AnimSingleNodeInstance(nint addr) : base(addr) { }
        public AnimSingleNodeInstance() : base(0) { }
        public AnimationAsset CurrentAsset { get { return this[nameof(CurrentAsset)].As<AnimationAsset>(); } set { this["CurrentAsset"] = value; } }
        public UEObject PostEvaluateAnimEvent { get { return this["PostEvaluateAnimEvent"]; } set { this["PostEvaluateAnimEvent"] = value; } }
        public void StopAnim() { Invoke("StopAnim"); }
        public void _AnimSingleNodeInstance(UEObject CurrentAsset, UEObject PostEvaluateAnimEvent) { Invoke("AnimSingleNodeInstance", CurrentAsset, PostEvaluateAnimEvent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimSet : UEObject
    {
        public AnimSet(nint addr) : base(addr) { }
        public AnimSet() : base(0) { }
        public bool bAnimRotationOnly { get { return this["bAnimRotationOnly"].Flag; } set { this["bAnimRotationOnly"].Flag = value; } }
        public List<string> TrackBoneNames { get { return this["TrackBoneNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<AnimSetMeshLinkup> LinkupCache { get { return new Array<AnimSetMeshLinkup>(this["LinkupCache"]); } set { this["LinkupCache"] = value; } }
        public List<byte> BoneUseAnimTranslation { get { return this["BoneUseAnimTranslation"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> ForceUseMeshTranslation { get { return this["ForceUseMeshTranslation"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<string> UseTranslationBoneNames { get { return this["UseTranslationBoneNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ForceMeshTranslationBoneNames { get { return this["ForceMeshTranslationBoneNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public string PreviewSkelMeshName { get { return this["PreviewSkelMeshName"].ToString(); } set { /* String properties are read-only */ } }
        public string BestRatioSkelMeshName { get { return this["BestRatioSkelMeshName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimSequence : AnimSequenceBase
    {
        public AnimSequence(nint addr) : base(addr) { }
        public AnimSequence() : base(0) { }
        public int NumFrames { get { return this["NumFrames"].GetValue<int>(); } set { this["NumFrames"].SetValue<int>(value); } }
        public Array<TrackToSkeletonMap> TrackToSkeletonMapTable { get { return new Array<TrackToSkeletonMap>(this["TrackToSkeletonMapTable"]); } set { this["TrackToSkeletonMapTable"] = value; } }
        public AnimBoneCompressionSettings BoneCompressionSettings { get { return this[nameof(BoneCompressionSettings)].As<AnimBoneCompressionSettings>(); } set { this["BoneCompressionSettings"] = value; } }
        public AnimCurveCompressionSettings CurveCompressionSettings { get { return this[nameof(CurveCompressionSettings)].As<AnimCurveCompressionSettings>(); } set { this["CurveCompressionSettings"] = value; } }
        public byte AdditiveAnimType { get { return this["AdditiveAnimType"].GetValue<byte>(); } set { this["AdditiveAnimType"].SetValue<byte>(value); } }
        public byte RefPoseType { get { return this["RefPoseType"].GetValue<byte>(); } set { this["RefPoseType"].SetValue<byte>(value); } }
        public AnimSequence RefPoseSeq { get { return this[nameof(RefPoseSeq)].As<AnimSequence>(); } set { this["RefPoseSeq"] = value; } }
        public int RefFrameIndex { get { return this["RefFrameIndex"].GetValue<int>(); } set { this["RefFrameIndex"].SetValue<int>(value); } }
        public string RetargetSource { get { return this["RetargetSource"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SDK.Script.CoreUObject.Transform> RetargetSourceAssetReferencePose { get { return new Array<SDK.Script.CoreUObject.Transform>(this["RetargetSourceAssetReferencePose"]); } set { this["RetargetSourceAssetReferencePose"] = value; } }
        public EAnimInterpolationType Interpolation { get { return (EAnimInterpolationType)this["Interpolation"].GetValue<int>(); } set { this["Interpolation"].SetValue<int>((int)value); } }
        public bool bEnableRootMotion { get { return this["bEnableRootMotion"].Flag; } set { this["bEnableRootMotion"].Flag = value; } }
        public byte RootMotionRootLock { get { return this["RootMotionRootLock"].GetValue<byte>(); } set { this["RootMotionRootLock"].SetValue<byte>(value); } }
        public bool bForceRootLock { get { return this["bForceRootLock"].Flag; } set { this["bForceRootLock"].Flag = value; } }
        public bool bUseNormalizedRootMotionScale { get { return this["bUseNormalizedRootMotionScale"].Flag; } set { this["bUseNormalizedRootMotionScale"].Flag = value; } }
        public bool bRootMotionSettingsCopiedFromMontage { get { return this["bRootMotionSettingsCopiedFromMontage"].Flag; } set { this["bRootMotionSettingsCopiedFromMontage"].Flag = value; } }
        public Array<AnimSyncMarker> AuthoredSyncMarkers { get { return new Array<AnimSyncMarker>(this["AuthoredSyncMarkers"]); } set { this["AuthoredSyncMarkers"] = value; } }
        public Array<BakedCustomAttributePerBoneData> BakedPerBoneCustomAttributeData { get { return new Array<BakedCustomAttributePerBoneData>(this["BakedPerBoneCustomAttributeData"]); } set { this["BakedPerBoneCustomAttributeData"] = value; } }
    }
    public class AnimNotifyState_Trail : AnimNotifyState
    {
        public AnimNotifyState_Trail(nint addr) : base(addr) { }
        public AnimNotifyState_Trail() : base(0) { }
        public UEObject PSTemplate { get { return this[nameof(PSTemplate)]; } set { this["PSTemplate"] = value; } }
        public string FirstSocketName { get { return this["FirstSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public string SecondSocketName { get { return this["SecondSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public byte WidthScaleMode { get { return this["WidthScaleMode"].GetValue<byte>(); } set { this["WidthScaleMode"].SetValue<byte>(value); } }
        public string WidthScaleCurve { get { return this["WidthScaleCurve"].ToString(); } set { /* String properties are read-only */ } }
        public bool bRecycleSpawnedSystems { get { return this["bRecycleSpawnedSystems"].Flag; } set { this["bRecycleSpawnedSystems"].Flag = value; } }
        public UEObject OverridePSTemplate(UEObject MeshComp, UEObject Animation) { return InvokeUEObject("OverridePSTemplate", MeshComp, Animation); }
        public void _AnimNotifyState_Trail(UEObject PSTemplate, UEObject FirstSocketName, UEObject SecondSocketName, UEObject WidthScaleMode, UEObject WidthScaleCurve, UEObject bRecycleSpawnedSystems) { Invoke("AnimNotifyState_Trail", PSTemplate, FirstSocketName, SecondSocketName, WidthScaleMode, WidthScaleCurve, bRecycleSpawnedSystems); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimNotifyState_TimedParticleEffect : AnimNotifyState
    {
        public AnimNotifyState_TimedParticleEffect(nint addr) : base(addr) { }
        public AnimNotifyState_TimedParticleEffect() : base(0) { }
        public UEObject PSTemplate { get { return this[nameof(PSTemplate)]; } set { this["PSTemplate"] = value; } }
        public string SocketName { get { return this["SocketName"].ToString(); } set { /* String properties are read-only */ } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool bDestroyAtEnd { get { return this["bDestroyAtEnd"].Flag; } set { this["bDestroyAtEnd"].Flag = value; } }
        public bool bRenderWithCustomFOV { get { return this["bRenderWithCustomFOV"].Flag; } set { this["bRenderWithCustomFOV"].Flag = value; } }
    }
    public class AnimNotifyState_DisableRootMotion : AnimNotifyState
    {
        public AnimNotifyState_DisableRootMotion(nint addr) : base(addr) { }
        public AnimNotifyState_DisableRootMotion() : base(0) { }
    }
    public class AnimNotify_ResumeClothingSimulation : AnimNotify
    {
        public AnimNotify_ResumeClothingSimulation(nint addr) : base(addr) { }
        public AnimNotify_ResumeClothingSimulation() : base(0) { }
    }
    public class AnimNotify_ResetDynamics : AnimNotify
    {
        public AnimNotify_ResetDynamics(nint addr) : base(addr) { }
        public AnimNotify_ResetDynamics() : base(0) { }
    }
    public class AnimNotify_ResetClothingSimulation : AnimNotify
    {
        public AnimNotify_ResetClothingSimulation(nint addr) : base(addr) { }
        public AnimNotify_ResetClothingSimulation() : base(0) { }
    }
    public class AnimNotify_PlaySound : AnimNotify
    {
        public AnimNotify_PlaySound(nint addr) : base(addr) { }
        public AnimNotify_PlaySound() : base(0) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public float VolumeMultiplier { get { return this["VolumeMultiplier"].GetValue<float>(); } set { this["VolumeMultiplier"].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this["PitchMultiplier"].GetValue<float>(); } set { this["PitchMultiplier"].SetValue<float>(value); } }
        public bool bFollow { get { return this["bFollow"].Flag; } set { this["bFollow"].Flag = value; } }
        public string AttachName { get { return this["AttachName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNotify_PlayParticleEffect : AnimNotify
    {
        public AnimNotify_PlayParticleEffect(nint addr) : base(addr) { }
        public AnimNotify_PlayParticleEffect() : base(0) { }
        public UEObject PSTemplate { get { return this[nameof(PSTemplate)]; } set { this["PSTemplate"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public bool bRenderWithCustomFOV { get { return this["bRenderWithCustomFOV"].Flag; } set { this["bRenderWithCustomFOV"].Flag = value; } }
        public bool Attached { get { return this["Attached"].Flag; } set { this["Attached"].Flag = value; } }
        public string SocketName { get { return this["SocketName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNotify_PauseClothingSimulation : AnimNotify
    {
        public AnimNotify_PauseClothingSimulation(nint addr) : base(addr) { }
        public AnimNotify_PauseClothingSimulation() : base(0) { }
    }
    public class AnimMontage : AnimCompositeBase
    {
        public AnimMontage(nint addr) : base(addr) { }
        public AnimMontage() : base(0) { }
        public AlphaBlend BlendIn { get { return this[nameof(BlendIn)].As<AlphaBlend>(); } set { this["BlendIn"] = value; } }
        public float BlendInTime { get { return this["BlendInTime"].GetValue<float>(); } set { this["BlendInTime"].SetValue<float>(value); } }
        public AlphaBlend BlendOut { get { return this[nameof(BlendOut)].As<AlphaBlend>(); } set { this["BlendOut"] = value; } }
        public float BlendOutTime { get { return this["BlendOutTime"].GetValue<float>(); } set { this["BlendOutTime"].SetValue<float>(value); } }
        public float BlendOutTriggerTime { get { return this["BlendOutTriggerTime"].GetValue<float>(); } set { this["BlendOutTriggerTime"].SetValue<float>(value); } }
        public string SyncGroup { get { return this["SyncGroup"].ToString(); } set { /* String properties are read-only */ } }
        public int SyncSlotIndex { get { return this["SyncSlotIndex"].GetValue<int>(); } set { this["SyncSlotIndex"].SetValue<int>(value); } }
        public MarkerSyncData MarkerData { get { return this[nameof(MarkerData)].As<MarkerSyncData>(); } set { this["MarkerData"] = value; } }
        public Array<CompositeSection> CompositeSections { get { return new Array<CompositeSection>(this["CompositeSections"]); } set { this["CompositeSections"] = value; } }
        public Array<SlotAnimationTrack> SlotAnimTracks { get { return new Array<SlotAnimationTrack>(this["SlotAnimTracks"]); } set { this["SlotAnimTracks"] = value; } }
        public Array<BranchingPoint> BranchingPoints { get { return new Array<BranchingPoint>(this["BranchingPoints"]); } set { this["BranchingPoints"] = value; } }
        public bool bEnableRootMotionTranslation { get { return this["bEnableRootMotionTranslation"].Flag; } set { this["bEnableRootMotionTranslation"].Flag = value; } }
        public bool bEnableRootMotionRotation { get { return this["bEnableRootMotionRotation"].Flag; } set { this["bEnableRootMotionRotation"].Flag = value; } }
        public bool bEnableAutoBlendOut { get { return this["bEnableAutoBlendOut"].Flag; } set { this["bEnableAutoBlendOut"].Flag = value; } }
        public byte RootMotionRootLock { get { return this["RootMotionRootLock"].GetValue<byte>(); } set { this["RootMotionRootLock"].SetValue<byte>(value); } }
        public Array<BranchingPointMarker> BranchingPointMarkers { get { return new Array<BranchingPointMarker>(this["BranchingPointMarkers"]); } set { this["BranchingPointMarkers"] = value; } }
        public List<int> BranchingPointStateNotifyIndices { get { return this["BranchingPointStateNotifyIndices"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public TimeStretchCurve TimeStretchCurve { get { return this[nameof(TimeStretchCurve)].As<TimeStretchCurve>(); } set { this["TimeStretchCurve"] = value; } }
        public string TimeStretchCurveName { get { return this["TimeStretchCurveName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GetDefaultBlendOutTime() { return InvokeUEObject("GetDefaultBlendOutTime"); }
        public void _AnimMontage(UEObject BlendIn, UEObject BlendInTime, UEObject BlendOut, UEObject BlendOutTime, UEObject BlendOutTriggerTime, UEObject SyncGroup, UEObject SyncSlotIndex, UEObject MarkerData, UEObject CompositeSections, UEObject SlotAnimTracks, UEObject BranchingPoints, UEObject bEnableRootMotionTranslation, UEObject bEnableRootMotionRotation, UEObject bEnableAutoBlendOut, UEObject RootMotionRootLock, UEObject BranchingPointMarkers, UEObject BranchingPointStateNotifyIndices, UEObject TimeStretchCurve, UEObject TimeStretchCurveName) { Invoke("AnimMontage", BlendIn, BlendInTime, BlendOut, BlendOutTime, BlendOutTriggerTime, SyncGroup, SyncSlotIndex, MarkerData, CompositeSections, SlotAnimTracks, BranchingPoints, bEnableRootMotionTranslation, bEnableRootMotionRotation, bEnableAutoBlendOut, RootMotionRootLock, BranchingPointMarkers, BranchingPointStateNotifyIndices, TimeStretchCurve, TimeStretchCurveName); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimMetaData : UEObject
    {
        public AnimMetaData(nint addr) : base(addr) { }
        public AnimMetaData() : base(0) { }
    }
    public class AnimLayerInterface : Interface
    {
        public AnimLayerInterface(nint addr) : base(addr) { }
        public AnimLayerInterface() : base(0) { }
    }
    public class AnimCurveCompressionSettings : UEObject
    {
        public AnimCurveCompressionSettings(nint addr) : base(addr) { }
        public AnimCurveCompressionSettings() : base(0) { }
        public AnimCurveCompressionCodec Codec { get { return this[nameof(Codec)].As<AnimCurveCompressionCodec>(); } set { this["Codec"] = value; } }
    }
    public class AnimCurveCompressionCodec_UniformlySampled : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_UniformlySampled(nint addr) : base(addr) { }
        public AnimCurveCompressionCodec_UniformlySampled() : base(0) { }
    }
    public class AnimCurveCompressionCodec_UniformIndexable : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_UniformIndexable(nint addr) : base(addr) { }
        public AnimCurveCompressionCodec_UniformIndexable() : base(0) { }
    }
    public class AnimCurveCompressionCodec_CompressedRichCurve : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_CompressedRichCurve(nint addr) : base(addr) { }
        public AnimCurveCompressionCodec_CompressedRichCurve() : base(0) { }
    }
    public class AnimCurveCompressionCodec : UEObject
    {
        public AnimCurveCompressionCodec(nint addr) : base(addr) { }
        public AnimCurveCompressionCodec() : base(0) { }
    }
    public class AnimCompress_RemoveTrivialKeys : AnimCompress
    {
        public AnimCompress_RemoveTrivialKeys(nint addr) : base(addr) { }
        public AnimCompress_RemoveTrivialKeys() : base(0) { }
        public float MaxPosDiff { get { return this["MaxPosDiff"].GetValue<float>(); } set { this["MaxPosDiff"].SetValue<float>(value); } }
        public float MaxAngleDiff { get { return this["MaxAngleDiff"].GetValue<float>(); } set { this["MaxAngleDiff"].SetValue<float>(value); } }
        public float MaxScaleDiff { get { return this["MaxScaleDiff"].GetValue<float>(); } set { this["MaxScaleDiff"].SetValue<float>(value); } }
    }
    public class AnimCompress_RemoveEverySecondKey : AnimCompress
    {
        public AnimCompress_RemoveEverySecondKey(nint addr) : base(addr) { }
        public AnimCompress_RemoveEverySecondKey() : base(0) { }
        public int MinKeys { get { return this["MinKeys"].GetValue<int>(); } set { this["MinKeys"].SetValue<int>(value); } }
        public bool bStartAtSecondKey { get { return this["bStartAtSecondKey"].Flag; } set { this["bStartAtSecondKey"].Flag = value; } }
    }
    public class AnimCompress_PerTrackCompression : AnimCompress_RemoveLinearKeys
    {
        public AnimCompress_PerTrackCompression(nint addr) : base(addr) { }
        public AnimCompress_PerTrackCompression() : base(0) { }
        public float MaxZeroingThreshold { get { return this["MaxZeroingThreshold"].GetValue<float>(); } set { this["MaxZeroingThreshold"].SetValue<float>(value); } }
        public float MaxPosDiffBitwise { get { return this["MaxPosDiffBitwise"].GetValue<float>(); } set { this["MaxPosDiffBitwise"].SetValue<float>(value); } }
        public float MaxAngleDiffBitwise { get { return this["MaxAngleDiffBitwise"].GetValue<float>(); } set { this["MaxAngleDiffBitwise"].SetValue<float>(value); } }
        public float MaxScaleDiffBitwise { get { return this["MaxScaleDiffBitwise"].GetValue<float>(); } set { this["MaxScaleDiffBitwise"].SetValue<float>(value); } }
        public List<byte> AllowedRotationFormats { get { return this["AllowedRotationFormats"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> AllowedTranslationFormats { get { return this["AllowedTranslationFormats"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> AllowedScaleFormats { get { return this["AllowedScaleFormats"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public bool bResampleAnimation { get { return this["bResampleAnimation"].Flag; } set { this["bResampleAnimation"].Flag = value; } }
        public float ResampledFramerate { get { return this["ResampledFramerate"].GetValue<float>(); } set { this["ResampledFramerate"].SetValue<float>(value); } }
        public int MinKeysForResampling { get { return this["MinKeysForResampling"].GetValue<int>(); } set { this["MinKeysForResampling"].SetValue<int>(value); } }
        public bool bUseAdaptiveError { get { return this["bUseAdaptiveError"].Flag; } set { this["bUseAdaptiveError"].Flag = value; } }
        public bool bUseOverrideForEndEffectors { get { return this["bUseOverrideForEndEffectors"].Flag; } set { this["bUseOverrideForEndEffectors"].Flag = value; } }
        public int TrackHeightBias { get { return this["TrackHeightBias"].GetValue<int>(); } set { this["TrackHeightBias"].SetValue<int>(value); } }
        public float ParentingDivisor { get { return this["ParentingDivisor"].GetValue<float>(); } set { this["ParentingDivisor"].SetValue<float>(value); } }
        public float ParentingDivisorExponent { get { return this["ParentingDivisorExponent"].GetValue<float>(); } set { this["ParentingDivisorExponent"].SetValue<float>(value); } }
        public bool bUseAdaptiveError2 { get { return this["bUseAdaptiveError2"].Flag; } set { this["bUseAdaptiveError2"].Flag = value; } }
        public float RotationErrorSourceRatio { get { return this["RotationErrorSourceRatio"].GetValue<float>(); } set { this["RotationErrorSourceRatio"].SetValue<float>(value); } }
        public float TranslationErrorSourceRatio { get { return this["TranslationErrorSourceRatio"].GetValue<float>(); } set { this["TranslationErrorSourceRatio"].SetValue<float>(value); } }
        public float ScaleErrorSourceRatio { get { return this["ScaleErrorSourceRatio"].GetValue<float>(); } set { this["ScaleErrorSourceRatio"].SetValue<float>(value); } }
        public float MaxErrorPerTrackRatio { get { return this["MaxErrorPerTrackRatio"].GetValue<float>(); } set { this["MaxErrorPerTrackRatio"].SetValue<float>(value); } }
        public float PerturbationProbeSize { get { return this["PerturbationProbeSize"].GetValue<float>(); } set { this["PerturbationProbeSize"].SetValue<float>(value); } }
    }
    public class AnimCompress_RemoveLinearKeys : AnimCompress
    {
        public AnimCompress_RemoveLinearKeys(nint addr) : base(addr) { }
        public AnimCompress_RemoveLinearKeys() : base(0) { }
        public float MaxPosDiff { get { return this["MaxPosDiff"].GetValue<float>(); } set { this["MaxPosDiff"].SetValue<float>(value); } }
        public float MaxAngleDiff { get { return this["MaxAngleDiff"].GetValue<float>(); } set { this["MaxAngleDiff"].SetValue<float>(value); } }
        public float MaxScaleDiff { get { return this["MaxScaleDiff"].GetValue<float>(); } set { this["MaxScaleDiff"].SetValue<float>(value); } }
        public float MaxEffectorDiff { get { return this["MaxEffectorDiff"].GetValue<float>(); } set { this["MaxEffectorDiff"].SetValue<float>(value); } }
        public float MinEffectorDiff { get { return this["MinEffectorDiff"].GetValue<float>(); } set { this["MinEffectorDiff"].SetValue<float>(value); } }
        public float EffectorDiffSocket { get { return this["EffectorDiffSocket"].GetValue<float>(); } set { this["EffectorDiffSocket"].SetValue<float>(value); } }
        public float ParentKeyScale { get { return this["ParentKeyScale"].GetValue<float>(); } set { this["ParentKeyScale"].SetValue<float>(value); } }
        public bool bRetarget { get { return this["bRetarget"].Flag; } set { this["bRetarget"].Flag = value; } }
        public bool bActuallyFilterLinearKeys { get { return this["bActuallyFilterLinearKeys"].Flag; } set { this["bActuallyFilterLinearKeys"].Flag = value; } }
    }
    public class AnimCompress_LeastDestructive : AnimCompress_BitwiseCompressOnly
    {
        public AnimCompress_LeastDestructive(nint addr) : base(addr) { }
        public AnimCompress_LeastDestructive() : base(0) { }
    }
    public class AnimCompress_BitwiseCompressOnly : AnimCompress
    {
        public AnimCompress_BitwiseCompressOnly(nint addr) : base(addr) { }
        public AnimCompress_BitwiseCompressOnly() : base(0) { }
    }
    public class AnimCompress : AnimBoneCompressionCodec
    {
        public AnimCompress(nint addr) : base(addr) { }
        public AnimCompress() : base(0) { }
        public bool bNeedsSkeleton { get { return this["bNeedsSkeleton"].Flag; } set { this["bNeedsSkeleton"].Flag = value; } }
        public byte TranslationCompressionFormat { get { return this["TranslationCompressionFormat"].GetValue<byte>(); } set { this["TranslationCompressionFormat"].SetValue<byte>(value); } }
        public byte RotationCompressionFormat { get { return this["RotationCompressionFormat"].GetValue<byte>(); } set { this["RotationCompressionFormat"].SetValue<byte>(value); } }
        public byte ScaleCompressionFormat { get { return this["ScaleCompressionFormat"].GetValue<byte>(); } set { this["ScaleCompressionFormat"].SetValue<byte>(value); } }
    }
    public class AnimComposite : AnimCompositeBase
    {
        public AnimComposite(nint addr) : base(addr) { }
        public AnimComposite() : base(0) { }
        public AnimTrack AnimationTrack { get { return this[nameof(AnimationTrack)].As<AnimTrack>(); } set { this["AnimationTrack"] = value; } }
    }
    public class AnimCompositeBase : AnimSequenceBase
    {
        public AnimCompositeBase(nint addr) : base(addr) { }
        public AnimCompositeBase() : base(0) { }
    }
    public class AnimSequenceBase : AnimationAsset
    {
        public AnimSequenceBase(nint addr) : base(addr) { }
        public AnimSequenceBase() : base(0) { }
        public Array<AnimNotifyEvent> Notifies { get { return new Array<AnimNotifyEvent>(this["Notifies"]); } set { this["Notifies"] = value; } }
        public float SequenceLength { get { return this["SequenceLength"].GetValue<float>(); } set { this["SequenceLength"].SetValue<float>(value); } }
        public float RateScale { get { return this["RateScale"].GetValue<float>(); } set { this["RateScale"].SetValue<float>(value); } }
        public RawCurveTracks RawCurveData { get { return this[nameof(RawCurveData)].As<RawCurveTracks>(); } set { this["RawCurveData"] = value; } }
        public UEObject GetPlayLength() { return InvokeUEObject("GetPlayLength"); }
        public void _AnimSequenceBase(UEObject Notifies, UEObject SequenceLength, UEObject RateScale, UEObject RawCurveData) { Invoke("AnimSequenceBase", Notifies, SequenceLength, RateScale, RawCurveData); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimClassInterface : Interface
    {
        public AnimClassInterface(nint addr) : base(addr) { }
        public AnimClassInterface() : base(0) { }
    }
    public class AnimClassData : UEObject
    {
        public AnimClassData(nint addr) : base(addr) { }
        public AnimClassData() : base(0) { }
        public Array<BakedAnimationStateMachine> BakedStateMachines { get { return new Array<BakedAnimationStateMachine>(this["BakedStateMachines"]); } set { this["BakedStateMachines"] = value; } }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimNotifyEvent> AnimNotifies { get { return new Array<AnimNotifyEvent>(this["AnimNotifies"]); } set { this["AnimNotifies"] = value; } }
        public UEObject OrderedSavedPoseIndicesMap { get { return this["OrderedSavedPoseIndicesMap"]; } set { this["OrderedSavedPoseIndicesMap"] = value; } }
        public Array<AnimBlueprintFunction> AnimBlueprintFunctions { get { return new Array<AnimBlueprintFunction>(this["AnimBlueprintFunctions"]); } set { this["AnimBlueprintFunctions"] = value; } }
        public Array<AnimBlueprintFunctionData> AnimBlueprintFunctionData { get { return new Array<AnimBlueprintFunctionData>(this["AnimBlueprintFunctionData"]); } set { this["AnimBlueprintFunctionData"] = value; } }
        public Array<UEObject> AnimNodeProperties { get { return new Array<UEObject>(this["AnimNodeProperties"]); } set { this["AnimNodeProperties"] = value; } }
        public Array<UEObject> LinkedAnimGraphNodeProperties { get { return new Array<UEObject>(this["LinkedAnimGraphNodeProperties"]); } set { this["LinkedAnimGraphNodeProperties"] = value; } }
        public Array<UEObject> LinkedAnimLayerNodeProperties { get { return new Array<UEObject>(this["LinkedAnimLayerNodeProperties"]); } set { this["LinkedAnimLayerNodeProperties"] = value; } }
        public Array<UEObject> PreUpdateNodeProperties { get { return new Array<UEObject>(this["PreUpdateNodeProperties"]); } set { this["PreUpdateNodeProperties"] = value; } }
        public Array<UEObject> DynamicResetNodeProperties { get { return new Array<UEObject>(this["DynamicResetNodeProperties"]); } set { this["DynamicResetNodeProperties"] = value; } }
        public Array<UEObject> StateMachineNodeProperties { get { return new Array<UEObject>(this["StateMachineNodeProperties"]); } set { this["StateMachineNodeProperties"] = value; } }
        public Array<UEObject> InitializationNodeProperties { get { return new Array<UEObject>(this["InitializationNodeProperties"]); } set { this["InitializationNodeProperties"] = value; } }
        public UEObject GraphNameAssetPlayers { get { return this["GraphNameAssetPlayers"]; } set { this["GraphNameAssetPlayers"] = value; } }
        public List<string> SyncGroupNames { get { return this["SyncGroupNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<ExposedValueHandler> EvaluateGraphExposedInputs { get { return new Array<ExposedValueHandler>(this["EvaluateGraphExposedInputs"]); } set { this["EvaluateGraphExposedInputs"] = value; } }
        public UEObject GraphBlendOptions { get { return this["GraphBlendOptions"]; } set { this["GraphBlendOptions"] = value; } }
        public PropertyAccessLibrary PropertyAccessLibrary { get { return this[nameof(PropertyAccessLibrary)].As<PropertyAccessLibrary>(); } set { this["PropertyAccessLibrary"] = value; } }
    }
    public class AnimBoneCompressionSettings : UEObject
    {
        public AnimBoneCompressionSettings(nint addr) : base(addr) { }
        public AnimBoneCompressionSettings() : base(0) { }
        public Array<AnimBoneCompressionCodec> Codecs { get { return new Array<AnimBoneCompressionCodec>(this["Codecs"]); } set { this["Codecs"] = value; } }
    }
    public class AnimBoneCompressionCodec : UEObject
    {
        public AnimBoneCompressionCodec(nint addr) : base(addr) { }
        public AnimBoneCompressionCodec() : base(0) { }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimBlueprintGeneratedClass : BlueprintGeneratedClass
    {
        public AnimBlueprintGeneratedClass(nint addr) : base(addr) { }
        public AnimBlueprintGeneratedClass() : base(0) { }
        public Array<BakedAnimationStateMachine> BakedStateMachines { get { return new Array<BakedAnimationStateMachine>(this["BakedStateMachines"]); } set { this["BakedStateMachines"] = value; } }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimNotifyEvent> AnimNotifies { get { return new Array<AnimNotifyEvent>(this["AnimNotifies"]); } set { this["AnimNotifies"] = value; } }
        public UEObject OrderedSavedPoseIndicesMap { get { return this["OrderedSavedPoseIndicesMap"]; } set { this["OrderedSavedPoseIndicesMap"] = value; } }
        public List<string> SyncGroupNames { get { return this["SyncGroupNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<ExposedValueHandler> EvaluateGraphExposedInputs { get { return new Array<ExposedValueHandler>(this["EvaluateGraphExposedInputs"]); } set { this["EvaluateGraphExposedInputs"] = value; } }
        public UEObject GraphAssetPlayerInformation { get { return this["GraphAssetPlayerInformation"]; } set { this["GraphAssetPlayerInformation"] = value; } }
        public UEObject GraphBlendOptions { get { return this["GraphBlendOptions"]; } set { this["GraphBlendOptions"] = value; } }
        public PropertyAccessLibrary PropertyAccessLibrary { get { return this[nameof(PropertyAccessLibrary)].As<PropertyAccessLibrary>(); } set { this["PropertyAccessLibrary"] = value; } }
    }
    public class AnimBlueprint : Blueprint
    {
        public AnimBlueprint(nint addr) : base(addr) { }
        public AnimBlueprint() : base(0) { }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimGroupInfo> Groups { get { return new Array<AnimGroupInfo>(this["Groups"]); } set { this["Groups"] = value; } }
        public bool bUseMultiThreadedAnimationUpdate { get { return this["bUseMultiThreadedAnimationUpdate"].Flag; } set { this["bUseMultiThreadedAnimationUpdate"].Flag = value; } }
        public bool bWarnAboutBlueprintUsage { get { return this["bWarnAboutBlueprintUsage"].Flag; } set { this["bWarnAboutBlueprintUsage"].Flag = value; } }
    }
    public class AnimationSettings : UEObject
    {
        public AnimationSettings(nint addr) : base(addr) { }
        public AnimationSettings() : base(0) { }
        public int CompressCommandletVersion { get { return this["CompressCommandletVersion"].GetValue<int>(); } set { this["CompressCommandletVersion"].SetValue<int>(value); } }
        public List<string> KeyEndEffectorsMatchNameArray { get { return this["KeyEndEffectorsMatchNameArray"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool ForceRecompression { get { return this["ForceRecompression"].Flag; } set { this["ForceRecompression"].Flag = value; } }
        public bool bForceBelowThreshold { get { return this["bForceBelowThreshold"].Flag; } set { this["bForceBelowThreshold"].Flag = value; } }
        public bool bFirstRecompressUsingCurrentOrDefault { get { return this["bFirstRecompressUsingCurrentOrDefault"].Flag; } set { this["bFirstRecompressUsingCurrentOrDefault"].Flag = value; } }
        public bool bRaiseMaxErrorToExisting { get { return this["bRaiseMaxErrorToExisting"].Flag; } set { this["bRaiseMaxErrorToExisting"].Flag = value; } }
        public bool bEnablePerformanceLog { get { return this["bEnablePerformanceLog"].Flag; } set { this["bEnablePerformanceLog"].Flag = value; } }
        public bool bStripAnimationDataOnDedicatedServer { get { return this["bStripAnimationDataOnDedicatedServer"].Flag; } set { this["bStripAnimationDataOnDedicatedServer"].Flag = value; } }
        public bool bTickAnimationOnSkeletalMeshInit { get { return this["bTickAnimationOnSkeletalMeshInit"].Flag; } set { this["bTickAnimationOnSkeletalMeshInit"].Flag = value; } }
        public Array<CustomAttributeSetting> BoneCustomAttributesNames { get { return new Array<CustomAttributeSetting>(this["BoneCustomAttributesNames"]); } set { this["BoneCustomAttributesNames"] = value; } }
        public List<string> BoneNamesWithCustomAttributes { get { return this["BoneNamesWithCustomAttributes"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject AttributeBlendModes { get { return this["AttributeBlendModes"]; } set { this["AttributeBlendModes"] = value; } }
        public ECustomAttributeBlendType DefaultAttributeBlendMode { get { return (ECustomAttributeBlendType)this["DefaultAttributeBlendMode"].GetValue<int>(); } set { this["DefaultAttributeBlendMode"].SetValue<int>((int)value); } }
    }
    public class AmbientSound : Actor
    {
        public AmbientSound(nint addr) : base(addr) { }
        public AmbientSound() : base(0) { }
        public AudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponent>(); } set { this["AudioComponent"] = value; } }
        public void Stop() { Invoke("Stop"); }
        public void _AmbientSound(UEObject AudioComponent) { Invoke("AmbientSound", AudioComponent); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AimOffsetBlendSpace1D : BlendSpace1D
    {
        public AimOffsetBlendSpace1D(nint addr) : base(addr) { }
        public AimOffsetBlendSpace1D() : base(0) { }
    }
    public class BlendSpace1D : BlendSpaceBase
    {
        public BlendSpace1D(nint addr) : base(addr) { }
        public BlendSpace1D() : base(0) { }
        public bool bScaleAnimation { get { return this["bScaleAnimation"].Flag; } set { this["bScaleAnimation"].Flag = value; } }
    }
    public class AimOffsetBlendSpace : BlendSpace
    {
        public AimOffsetBlendSpace(nint addr) : base(addr) { }
        public AimOffsetBlendSpace() : base(0) { }
    }
    public class BlendSpace : BlendSpaceBase
    {
        public BlendSpace(nint addr) : base(addr) { }
        public BlendSpace() : base(0) { }
        public byte AxisToScaleAnimation { get { return this["AxisToScaleAnimation"].GetValue<byte>(); } set { this["AxisToScaleAnimation"].SetValue<byte>(value); } }
    }
    public class BlendSpaceBase : AnimationAsset
    {
        public BlendSpaceBase(nint addr) : base(addr) { }
        public BlendSpaceBase() : base(0) { }
        public bool bRotationBlendInMeshSpace { get { return this["bRotationBlendInMeshSpace"].Flag; } set { this["bRotationBlendInMeshSpace"].Flag = value; } }
        public float AnimLength { get { return this["AnimLength"].GetValue<float>(); } set { this["AnimLength"].SetValue<float>(value); } }
        public InterpolationParameter InterpolationParam { get { return this[nameof(InterpolationParam)].As<InterpolationParameter>(); } set { this["InterpolationParam"] = value; } }
        public float TargetWeightInterpolationSpeedPerSec { get { return this["TargetWeightInterpolationSpeedPerSec"].GetValue<float>(); } set { this["TargetWeightInterpolationSpeedPerSec"].SetValue<float>(value); } }
        public byte NotifyTriggerMode { get { return this["NotifyTriggerMode"].GetValue<byte>(); } set { this["NotifyTriggerMode"].SetValue<byte>(value); } }
        public Array<PerBoneInterpolation> PerBoneBlend { get { return new Array<PerBoneInterpolation>(this["PerBoneBlend"]); } set { this["PerBoneBlend"] = value; } }
        public int SampleIndexWithMarkers { get { return this["SampleIndexWithMarkers"].GetValue<int>(); } set { this["SampleIndexWithMarkers"].SetValue<int>(value); } }
        public Array<BlendSample> SampleData { get { return new Array<BlendSample>(this["SampleData"]); } set { this["SampleData"] = value; } }
        public Array<EditorElement> GridSamples { get { return new Array<EditorElement>(this["GridSamples"]); } set { this["GridSamples"] = value; } }
        public BlendParameter BlendParameters { get { return this[nameof(BlendParameters)].As<BlendParameter>(); } set { this["BlendParameters"] = value; } }
    }
    public class AnimationAsset : UEObject
    {
        public AnimationAsset(nint addr) : base(addr) { }
        public AnimationAsset() : base(0) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public Array<AnimMetaData> MetaData { get { return new Array<AnimMetaData>(this["MetaData"]); } set { this["MetaData"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
    }
    public class ActorChannel : Channel
    {
        public ActorChannel(nint addr) : base(addr) { }
        public ActorChannel() : base(0) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Array<UEObject> CreateSubObjects { get { return new Array<UEObject>(this["CreateSubObjects"]); } set { this["CreateSubObjects"] = value; } }
    }
    public class Channel : UEObject
    {
        public Channel(nint addr) : base(addr) { }
        public Channel() : base(0) { }
        public NetConnection Connection { get { return this[nameof(Connection)].As<NetConnection>(); } set { this["Connection"] = value; } }
    }
    public class Model : UEObject
    {
        public Model(nint addr) : base(addr) { }
        public Model() : base(0) { }
    }
    public class SoundWaveProcedural : SoundWave
    {
        public SoundWaveProcedural(nint addr) : base(addr) { }
        public SoundWaveProcedural() : base(0) { }
    }
    public class SoundWave : SoundBase
    {
        public SoundWave(nint addr) : base(addr) { }
        public SoundWave() : base(0) { }
        public int CompressionQuality { get { return this["CompressionQuality"].GetValue<int>(); } set { this["CompressionQuality"].SetValue<int>(value); } }
        public int StreamingPriority { get { return this["StreamingPriority"].GetValue<int>(); } set { this["StreamingPriority"].SetValue<int>(value); } }
        public ESoundwaveSampleRateSettings SampleRateQuality { get { return (ESoundwaveSampleRateSettings)this["SampleRateQuality"].GetValue<int>(); } set { this["SampleRateQuality"].SetValue<int>((int)value); } }
        public byte SoundGroup { get { return this["SoundGroup"].GetValue<byte>(); } set { this["SoundGroup"].SetValue<byte>(value); } }
        public bool bLooping { get { return this["bLooping"].Flag; } set { this["bLooping"].Flag = value; } }
        public bool bStreaming { get { return this["bStreaming"].Flag; } set { this["bStreaming"].Flag = value; } }
        public bool bSeekableStreaming { get { return this["bSeekableStreaming"].Flag; } set { this["bSeekableStreaming"].Flag = value; } }
        public ESoundWaveLoadingBehavior LoadingBehavior { get { return (ESoundWaveLoadingBehavior)this["LoadingBehavior"].GetValue<int>(); } set { this["LoadingBehavior"].SetValue<int>((int)value); } }
        public bool bMature { get { return this["bMature"].Flag; } set { this["bMature"].Flag = value; } }
        public bool bManualWordWrap { get { return this["bManualWordWrap"].Flag; } set { this["bManualWordWrap"].Flag = value; } }
        public bool bSingleLine { get { return this["bSingleLine"].Flag; } set { this["bSingleLine"].Flag = value; } }
        public bool bIsAmbisonics { get { return this["bIsAmbisonics"].Flag; } set { this["bIsAmbisonics"].Flag = value; } }
        public SoundModulationDefaultRoutingSettings ModulationSettings { get { return this[nameof(ModulationSettings)].As<SoundModulationDefaultRoutingSettings>(); } set { this["ModulationSettings"] = value; } }
        public List<float> FrequenciesToAnalyze { get { return this["FrequenciesToAnalyze"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<SoundWaveSpectralTimeData> CookedSpectralTimeData { get { return new Array<SoundWaveSpectralTimeData>(this["CookedSpectralTimeData"]); } set { this["CookedSpectralTimeData"] = value; } }
        public Array<SoundWaveEnvelopeTimeData> CookedEnvelopeTimeData { get { return new Array<SoundWaveEnvelopeTimeData>(this["CookedEnvelopeTimeData"]); } set { this["CookedEnvelopeTimeData"] = value; } }
        public int InitialChunkSize { get { return this["InitialChunkSize"].GetValue<int>(); } set { this["InitialChunkSize"].SetValue<int>(value); } }
        public string SpokenText { get { return this["SpokenText"].ToString(); } set { /* String properties are read-only */ } }
        public float SubtitlePriority { get { return this["SubtitlePriority"].GetValue<float>(); } set { this["SubtitlePriority"].SetValue<float>(value); } }
        public float Volume { get { return this["Volume"].GetValue<float>(); } set { this["Volume"].SetValue<float>(value); } }
        public float Pitch { get { return this["Pitch"].GetValue<float>(); } set { this["Pitch"].SetValue<float>(value); } }
        public int NumChannels { get { return this["NumChannels"].GetValue<int>(); } set { this["NumChannels"].SetValue<int>(value); } }
        public int SampleRate { get { return this["SampleRate"].GetValue<int>(); } set { this["SampleRate"].SetValue<int>(value); } }
        public Array<SubtitleCue> Subtitles { get { return new Array<SubtitleCue>(this["Subtitles"]); } set { this["Subtitles"] = value; } }
        public CurveTable Curves { get { return this[nameof(Curves)].As<CurveTable>(); } set { this["Curves"] = value; } }
        public CurveTable InternalCurves { get { return this[nameof(InternalCurves)].As<CurveTable>(); } set { this["InternalCurves"] = value; } }
    }
    public class SoundBase : UEObject
    {
        public SoundBase(nint addr) : base(addr) { }
        public SoundBase() : base(0) { }
        public SoundClass SoundClassObject { get { return this[nameof(SoundClassObject)].As<SoundClass>(); } set { this["SoundClassObject"] = value; } }
        public bool bDebug { get { return this["bDebug"].Flag; } set { this["bDebug"].Flag = value; } }
        public bool bOverrideConcurrency { get { return this["bOverrideConcurrency"].Flag; } set { this["bOverrideConcurrency"].Flag = value; } }
        public bool bEnableBusSends { get { return this["bEnableBusSends"].Flag; } set { this["bEnableBusSends"].Flag = value; } }
        public bool bEnableBaseSubmix { get { return this["bEnableBaseSubmix"].Flag; } set { this["bEnableBaseSubmix"].Flag = value; } }
        public bool bEnableSubmixSends { get { return this["bEnableSubmixSends"].Flag; } set { this["bEnableSubmixSends"].Flag = value; } }
        public bool bHasDelayNode { get { return this["bHasDelayNode"].Flag; } set { this["bHasDelayNode"].Flag = value; } }
        public bool bHasConcatenatorNode { get { return this["bHasConcatenatorNode"].Flag; } set { this["bHasConcatenatorNode"].Flag = value; } }
        public bool bBypassVolumeScaleForPriority { get { return this["bBypassVolumeScaleForPriority"].Flag; } set { this["bBypassVolumeScaleForPriority"].Flag = value; } }
        public EVirtualizationMode VirtualizationMode { get { return (EVirtualizationMode)this["VirtualizationMode"].GetValue<int>(); } set { this["VirtualizationMode"].SetValue<int>((int)value); } }
        public UEObject ConcurrencySet { get { return this["ConcurrencySet"]; } set { this["ConcurrencySet"] = value; } }
        public SoundConcurrencySettings ConcurrencyOverrides { get { return this[nameof(ConcurrencyOverrides)].As<SoundConcurrencySettings>(); } set { this["ConcurrencyOverrides"] = value; } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public float MaxDistance { get { return this["MaxDistance"].GetValue<float>(); } set { this["MaxDistance"].SetValue<float>(value); } }
        public float TotalSamples { get { return this["TotalSamples"].GetValue<float>(); } set { this["TotalSamples"].SetValue<float>(value); } }
        public float Priority { get { return this["Priority"].GetValue<float>(); } set { this["Priority"].SetValue<float>(value); } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundSubmixBase SoundSubmixObject { get { return this[nameof(SoundSubmixObject)].As<SoundSubmixBase>(); } set { this["SoundSubmixObject"] = value; } }
        public Array<SoundSubmixSendInfo> SoundSubmixSends { get { return new Array<SoundSubmixSendInfo>(this["SoundSubmixSends"]); } set { this["SoundSubmixSends"] = value; } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
        public Array<SoundSourceBusSendInfo> BusSends { get { return new Array<SoundSourceBusSendInfo>(this["BusSends"]); } set { this["BusSends"] = value; } }
        public Array<SoundSourceBusSendInfo> PreEffectBusSends { get { return new Array<SoundSourceBusSendInfo>(this["PreEffectBusSends"]); } set { this["PreEffectBusSends"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
    }
    public class CameraComponent : SceneComponent
    {
        public CameraComponent(nint addr) : base(addr) { }
        public CameraComponent() : base(0) { }
        public float FieldOfView { get { return this["FieldOfView"].GetValue<float>(); } set { this["FieldOfView"].SetValue<float>(value); } }
        public float OrthoWidth { get { return this["OrthoWidth"].GetValue<float>(); } set { this["OrthoWidth"].SetValue<float>(value); } }
        public float OrthoNearClipPlane { get { return this["OrthoNearClipPlane"].GetValue<float>(); } set { this["OrthoNearClipPlane"].SetValue<float>(value); } }
        public float OrthoFarClipPlane { get { return this["OrthoFarClipPlane"].GetValue<float>(); } set { this["OrthoFarClipPlane"].SetValue<float>(value); } }
        public float AspectRatio { get { return this["AspectRatio"].GetValue<float>(); } set { this["AspectRatio"].SetValue<float>(value); } }
        public bool bConstrainAspectRatio { get { return this["bConstrainAspectRatio"].Flag; } set { this["bConstrainAspectRatio"].Flag = value; } }
        public bool bUseFieldOfViewForLOD { get { return this["bUseFieldOfViewForLOD"].Flag; } set { this["bUseFieldOfViewForLOD"].Flag = value; } }
        public bool bLockToHmd { get { return this["bLockToHmd"].Flag; } set { this["bLockToHmd"].Flag = value; } }
        public bool bUsePawnControlRotation { get { return this["bUsePawnControlRotation"].Flag; } set { this["bUsePawnControlRotation"].Flag = value; } }
        public byte ProjectionMode { get { return this["ProjectionMode"].GetValue<byte>(); } set { this["ProjectionMode"].SetValue<byte>(value); } }
        public float PostProcessBlendWeight { get { return this["PostProcessBlendWeight"].GetValue<float>(); } set { this["PostProcessBlendWeight"].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public void SetUseFieldOfViewForLOD(UEObject bInUseFieldOfViewForLOD) { Invoke("SetUseFieldOfViewForLOD", bInUseFieldOfViewForLOD); }
        public void _CameraComponent(UEObject FieldOfView, UEObject OrthoWidth, UEObject OrthoNearClipPlane, UEObject OrthoFarClipPlane, UEObject AspectRatio, UEObject bConstrainAspectRatio, UEObject bUseFieldOfViewForLOD, UEObject bLockToHmd, UEObject bUsePawnControlRotation, UEObject ProjectionMode, UEObject PostProcessBlendWeight, UEObject PostProcessSettings) { Invoke("CameraComponent", FieldOfView, OrthoWidth, OrthoNearClipPlane, OrthoFarClipPlane, AspectRatio, bConstrainAspectRatio, bUseFieldOfViewForLOD, bLockToHmd, bUsePawnControlRotation, ProjectionMode, PostProcessBlendWeight, PostProcessSettings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraActor : Actor
    {
        public CameraActor(nint addr) : base(addr) { }
        public CameraActor() : base(0) { }
        public byte AutoActivateForPlayer { get { return this["AutoActivateForPlayer"].GetValue<byte>(); } set { this["AutoActivateForPlayer"].SetValue<byte>(value); } }
        public CameraComponent CameraComponent { get { return this[nameof(CameraComponent)].As<CameraComponent>(); } set { this["CameraComponent"] = value; } }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
        public bool bConstrainAspectRatio { get { return this["bConstrainAspectRatio"].Flag; } set { this["bConstrainAspectRatio"].Flag = value; } }
        public float AspectRatio { get { return this["AspectRatio"].GetValue<float>(); } set { this["AspectRatio"].SetValue<float>(value); } }
        public float FOVAngle { get { return this["FOVAngle"].GetValue<float>(); } set { this["FOVAngle"].SetValue<float>(value); } }
        public float PostProcessBlendWeight { get { return this["PostProcessBlendWeight"].GetValue<float>(); } set { this["PostProcessBlendWeight"].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public UEObject GetAutoActivatePlayerIndex() { return InvokeUEObject("GetAutoActivatePlayerIndex"); }
        public void _CameraActor(UEObject AutoActivateForPlayer, UEObject CameraComponent, UEObject SceneComponent, UEObject bConstrainAspectRatio, UEObject AspectRatio, UEObject FOVAngle, UEObject PostProcessBlendWeight, UEObject PostProcessSettings) { Invoke("CameraActor", AutoActivateForPlayer, CameraComponent, SceneComponent, bConstrainAspectRatio, AspectRatio, FOVAngle, PostProcessBlendWeight, PostProcessSettings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class DynamicBlueprintBinding : UEObject
    {
        public DynamicBlueprintBinding(nint addr) : base(addr) { }
        public DynamicBlueprintBinding() : base(0) { }
    }
    public class TimecodeProvider : UEObject
    {
        public TimecodeProvider(nint addr) : base(addr) { }
        public TimecodeProvider() : base(0) { }
        public float FrameDelay { get { return this["FrameDelay"].GetValue<float>(); } set { this["FrameDelay"].SetValue<float>(value); } }
        public UEObject GetTimecode() { return InvokeUEObject("GetTimecode"); }
        public void _TimecodeProvider(UEObject FrameDelay) { Invoke("TimecodeProvider", FrameDelay); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class EngineCustomTimeStep : UEObject
    {
        public EngineCustomTimeStep(nint addr) : base(addr) { }
        public EngineCustomTimeStep() : base(0) { }
    }
    public class MaterialExpressionCustomOutput : MaterialExpression
    {
        public MaterialExpressionCustomOutput(nint addr) : base(addr) { }
        public MaterialExpressionCustomOutput() : base(0) { }
    }
    public class MaterialInstanceConstant : MaterialInstance
    {
        public MaterialInstanceConstant(nint addr) : base(addr) { }
        public MaterialInstanceConstant() : base(0) { }
        public PhysicalMaterialMask PhysMaterialMask { get { return this[nameof(PhysMaterialMask)].As<PhysicalMaterialMask>(); } set { this["PhysMaterialMask"] = value; } }
        public UEObject K2_GetVectorParameterValue(UEObject ParameterName) { return InvokeUEObject("K2_GetVectorParameterValue", ParameterName); }
        public void _MaterialInstanceConstant(UEObject PhysMaterialMask) { Invoke("MaterialInstanceConstant", PhysMaterialMask); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MaterialInstance : MaterialInterface
    {
        public MaterialInstance(nint addr) : base(addr) { }
        public MaterialInstance() : base(0) { }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public PhysicalMaterial PhysicalMaterialMap { get { return this[nameof(PhysicalMaterialMap)].As<PhysicalMaterial>(); } set { this["PhysicalMaterialMap"] = value; } }
        public MaterialInterface Parent { get { return this[nameof(Parent)].As<MaterialInterface>(); } set { this["Parent"] = value; } }
        public bool bHasStaticPermutationResource { get { return this["bHasStaticPermutationResource"].Flag; } set { this["bHasStaticPermutationResource"].Flag = value; } }
        public bool bOverrideSubsurfaceProfile { get { return this["bOverrideSubsurfaceProfile"].Flag; } set { this["bOverrideSubsurfaceProfile"].Flag = value; } }
        public Array<ScalarParameterValue> ScalarParameterValues { get { return new Array<ScalarParameterValue>(this["ScalarParameterValues"]); } set { this["ScalarParameterValues"] = value; } }
        public Array<VectorParameterValue> VectorParameterValues { get { return new Array<VectorParameterValue>(this["VectorParameterValues"]); } set { this["VectorParameterValues"] = value; } }
        public Array<TextureParameterValue> TextureParameterValues { get { return new Array<TextureParameterValue>(this["TextureParameterValues"]); } set { this["TextureParameterValues"] = value; } }
        public Array<RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues { get { return new Array<RuntimeVirtualTextureParameterValue>(this["RuntimeVirtualTextureParameterValues"]); } set { this["RuntimeVirtualTextureParameterValues"] = value; } }
        public Array<FontParameterValue> FontParameterValues { get { return new Array<FontParameterValue>(this["FontParameterValues"]); } set { this["FontParameterValues"] = value; } }
        public MaterialInstanceBasePropertyOverrides BasePropertyOverrides { get { return this[nameof(BasePropertyOverrides)].As<MaterialInstanceBasePropertyOverrides>(); } set { this["BasePropertyOverrides"] = value; } }
        public StaticParameterSet StaticParameters { get { return this[nameof(StaticParameters)].As<StaticParameterSet>(); } set { this["StaticParameters"] = value; } }
        public MaterialCachedParameters CachedLayerParameters { get { return this[nameof(CachedLayerParameters)].As<MaterialCachedParameters>(); } set { this["CachedLayerParameters"] = value; } }
        public Array<UEObject> CachedReferencedTextures { get { return new Array<UEObject>(this["CachedReferencedTextures"]); } set { this["CachedReferencedTextures"] = value; } }
    }
    public class MaterialInterface : UEObject
    {
        public MaterialInterface(nint addr) : base(addr) { }
        public MaterialInterface() : base(0) { }
        public SubsurfaceProfile SubsurfaceProfile { get { return this[nameof(SubsurfaceProfile)].As<SubsurfaceProfile>(); } set { this["SubsurfaceProfile"] = value; } }
        public LightmassMaterialInterfaceSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassMaterialInterfaceSettings>(); } set { this["LightmassSettings"] = value; } }
        public Array<MaterialTextureInfo> TextureStreamingData { get { return new Array<MaterialTextureInfo>(this["TextureStreamingData"]); } set { this["TextureStreamingData"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public void SetForceMipLevelsToBeResident(UEObject OverrideForceMiplevelsToBeResident, UEObject bForceMiplevelsToBeResidentValue, UEObject ForceDuration, UEObject CinematicTextureGroups, UEObject bFastResponse) { Invoke("SetForceMipLevelsToBeResident", OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups, bFastResponse); }
        public void _MaterialInterface(UEObject SubsurfaceProfile, UEObject LightmassSettings, UEObject TextureStreamingData, UEObject AssetUserData) { Invoke("MaterialInterface", SubsurfaceProfile, LightmassSettings, TextureStreamingData, AssetUserData); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StaticMeshActor : Actor
    {
        public StaticMeshActor(nint addr) : base(addr) { }
        public StaticMeshActor() : base(0) { }
        public StaticMeshComponent StaticMeshComponent { get { return this[nameof(StaticMeshComponent)].As<StaticMeshComponent>(); } set { this["StaticMeshComponent"] = value; } }
        public bool bStaticMeshReplicateMovement { get { return this["bStaticMeshReplicateMovement"].Flag; } set { this["bStaticMeshReplicateMovement"].Flag = value; } }
        public ENavDataGatheringMode NavigationGeometryGatheringMode { get { return (ENavDataGatheringMode)this["NavigationGeometryGatheringMode"].GetValue<int>(); } set { this["NavigationGeometryGatheringMode"].SetValue<int>((int)value); } }
        public void SetMobility(UEObject InMobility) { Invoke("SetMobility", InMobility); }
        public void _StaticMeshActor(UEObject StaticMeshComponent, UEObject bStaticMeshReplicateMovement, UEObject NavigationGeometryGatheringMode) { Invoke("StaticMeshActor", StaticMeshComponent, bStaticMeshReplicateMovement, NavigationGeometryGatheringMode); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class HierarchicalInstancedStaticMeshComponent : InstancedStaticMeshComponent
    {
        public HierarchicalInstancedStaticMeshComponent(nint addr) : base(addr) { }
        public HierarchicalInstancedStaticMeshComponent() : base(0) { }
        public List<int> SortedInstances { get { return this["SortedInstances"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public int NumBuiltInstances { get { return this["NumBuiltInstances"].GetValue<int>(); } set { this["NumBuiltInstances"].SetValue<int>(value); } }
        public Box BuiltInstanceBounds { get { return this[nameof(BuiltInstanceBounds)].As<Box>(); } set { this["BuiltInstanceBounds"] = value; } }
        public Box UnbuiltInstanceBounds { get { return this[nameof(UnbuiltInstanceBounds)].As<Box>(); } set { this["UnbuiltInstanceBounds"] = value; } }
        public Array<Box> UnbuiltInstanceBoundsList { get { return new Array<Box>(this["UnbuiltInstanceBoundsList"]); } set { this["UnbuiltInstanceBoundsList"] = value; } }
        public bool bEnableDensityScaling { get { return this["bEnableDensityScaling"].Flag; } set { this["bEnableDensityScaling"].Flag = value; } }
        public int OcclusionLayerNumNodes { get { return this["OcclusionLayerNumNodes"].GetValue<int>(); } set { this["OcclusionLayerNumNodes"].SetValue<int>(value); } }
        public BoxSphereBounds CacheMeshExtendedBounds { get { return this[nameof(CacheMeshExtendedBounds)].As<BoxSphereBounds>(); } set { this["CacheMeshExtendedBounds"] = value; } }
        public bool bDisableCollision { get { return this["bDisableCollision"].Flag; } set { this["bDisableCollision"].Flag = value; } }
        public int InstanceCountToRender { get { return this["InstanceCountToRender"].GetValue<int>(); } set { this["InstanceCountToRender"].SetValue<int>(value); } }
        public UEObject RemoveInstances(UEObject InstancesToRemove) { return InvokeUEObject("RemoveInstances", InstancesToRemove); }
        public void _HierarchicalInstancedStaticMeshComponent(UEObject SortedInstances, UEObject NumBuiltInstances, UEObject BuiltInstanceBounds, UEObject UnbuiltInstanceBounds, UEObject UnbuiltInstanceBoundsList, UEObject bEnableDensityScaling, UEObject OcclusionLayerNumNodes, UEObject CacheMeshExtendedBounds, UEObject bDisableCollision, UEObject InstanceCountToRender) { Invoke("HierarchicalInstancedStaticMeshComponent", SortedInstances, NumBuiltInstances, BuiltInstanceBounds, UnbuiltInstanceBounds, UnbuiltInstanceBoundsList, bEnableDensityScaling, OcclusionLayerNumNodes, CacheMeshExtendedBounds, bDisableCollision, InstanceCountToRender); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class InstancedStaticMeshComponent : StaticMeshComponent
    {
        public InstancedStaticMeshComponent(nint addr) : base(addr) { }
        public InstancedStaticMeshComponent() : base(0) { }
        public Array<InstancedStaticMeshInstanceData> PerInstanceSMData { get { return new Array<InstancedStaticMeshInstanceData>(this["PerInstanceSMData"]); } set { this["PerInstanceSMData"] = value; } }
        public int NumCustomDataFloats { get { return this["NumCustomDataFloats"].GetValue<int>(); } set { this["NumCustomDataFloats"].SetValue<int>(value); } }
        public List<float> PerInstanceSMCustomData { get { return this["PerInstanceSMCustomData"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public int InstancingRandomSeed { get { return this["InstancingRandomSeed"].GetValue<int>(); } set { this["InstancingRandomSeed"].SetValue<int>(value); } }
        public int InstanceStartCullDistance { get { return this["InstanceStartCullDistance"].GetValue<int>(); } set { this["InstanceStartCullDistance"].SetValue<int>(value); } }
        public int InstanceEndCullDistance { get { return this["InstanceEndCullDistance"].GetValue<int>(); } set { this["InstanceEndCullDistance"].SetValue<int>(value); } }
        public List<int> InstanceReorderTable { get { return this["InstanceReorderTable"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public int NumPendingLightmaps { get { return this["NumPendingLightmaps"].GetValue<int>(); } set { this["NumPendingLightmaps"].SetValue<int>(value); } }
        public Array<InstancedStaticMeshMappingInfo> CachedMappings { get { return new Array<InstancedStaticMeshMappingInfo>(this["CachedMappings"]); } set { this["CachedMappings"] = value; } }
        public UEObject UpdateInstanceTransform(UEObject InstanceIndex, UEObject NewInstanceTransform, UEObject bWorldSpace, UEObject bMarkRenderStateDirty, UEObject bTeleport) { return InvokeUEObject("UpdateInstanceTransform", InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport); }
        public void _InstancedStaticMeshComponent(UEObject PerInstanceSMData, UEObject NumCustomDataFloats, UEObject PerInstanceSMCustomData, UEObject InstancingRandomSeed, UEObject InstanceStartCullDistance, UEObject InstanceEndCullDistance, UEObject InstanceReorderTable, UEObject NumPendingLightmaps, UEObject CachedMappings) { Invoke("InstancedStaticMeshComponent", PerInstanceSMData, NumCustomDataFloats, PerInstanceSMCustomData, InstancingRandomSeed, InstanceStartCullDistance, InstanceEndCullDistance, InstanceReorderTable, NumPendingLightmaps, CachedMappings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StaticMeshComponent : MeshComponent
    {
        public StaticMeshComponent(nint addr) : base(addr) { }
        public StaticMeshComponent() : base(0) { }
        public UEObject AreaClass { get { return this["AreaClass"]; } set { this["AreaClass"] = value; } }
        public int ForcedLodModel { get { return this["ForcedLodModel"].GetValue<int>(); } set { this["ForcedLodModel"].SetValue<int>(value); } }
        public int PreviousLODLevel { get { return this["PreviousLODLevel"].GetValue<int>(); } set { this["PreviousLODLevel"].SetValue<int>(value); } }
        public int MinLOD { get { return this["MinLOD"].GetValue<int>(); } set { this["MinLOD"].SetValue<int>(value); } }
        public int SubDivisionStepSize { get { return this["SubDivisionStepSize"].GetValue<int>(); } set { this["SubDivisionStepSize"].SetValue<int>(value); } }
        public bool bForceDynamicShadowOnUltraSettings { get { return this["bForceDynamicShadowOnUltraSettings"].Flag; } set { this["bForceDynamicShadowOnUltraSettings"].Flag = value; } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public Color WireframeColorOverride { get { return this[nameof(WireframeColorOverride)].As<Color>(); } set { this["WireframeColorOverride"] = value; } }
        public bool bEvaluateWorldPositionOffset { get { return this["bEvaluateWorldPositionOffset"].Flag; } set { this["bEvaluateWorldPositionOffset"].Flag = value; } }
        public bool bOverrideWireframeColor { get { return this["bOverrideWireframeColor"].Flag; } set { this["bOverrideWireframeColor"].Flag = value; } }
        public bool bOverrideMinLod { get { return this["bOverrideMinLod"].Flag; } set { this["bOverrideMinLod"].Flag = value; } }
        public bool bOverrideNavigationExport { get { return this["bOverrideNavigationExport"].Flag; } set { this["bOverrideNavigationExport"].Flag = value; } }
        public bool bForceNavigationObstacle { get { return this["bForceNavigationObstacle"].Flag; } set { this["bForceNavigationObstacle"].Flag = value; } }
        public bool bDisallowMeshPaintPerInstance { get { return this["bDisallowMeshPaintPerInstance"].Flag; } set { this["bDisallowMeshPaintPerInstance"].Flag = value; } }
        public bool bIgnoreInstanceForTextureStreaming { get { return this["bIgnoreInstanceForTextureStreaming"].Flag; } set { this["bIgnoreInstanceForTextureStreaming"].Flag = value; } }
        public bool bOverrideLightMapRes { get { return this["bOverrideLightMapRes"].Flag; } set { this["bOverrideLightMapRes"].Flag = value; } }
        public bool bCastDistanceFieldIndirectShadow { get { return this["bCastDistanceFieldIndirectShadow"].Flag; } set { this["bCastDistanceFieldIndirectShadow"].Flag = value; } }
        public bool bOverrideDistanceFieldSelfShadowBias { get { return this["bOverrideDistanceFieldSelfShadowBias"].Flag; } set { this["bOverrideDistanceFieldSelfShadowBias"].Flag = value; } }
        public bool bUseSubDivisions { get { return this["bUseSubDivisions"].Flag; } set { this["bUseSubDivisions"].Flag = value; } }
        public bool bUseDefaultCollision { get { return this["bUseDefaultCollision"].Flag; } set { this["bUseDefaultCollision"].Flag = value; } }
        public bool bReverseCulling { get { return this["bReverseCulling"].Flag; } set { this["bReverseCulling"].Flag = value; } }
        public int OverriddenLightMapRes { get { return this["OverriddenLightMapRes"].GetValue<int>(); } set { this["OverriddenLightMapRes"].SetValue<int>(value); } }
        public float DistanceFieldIndirectShadowMinVisibility { get { return this["DistanceFieldIndirectShadowMinVisibility"].GetValue<float>(); } set { this["DistanceFieldIndirectShadowMinVisibility"].SetValue<float>(value); } }
        public float DistanceFieldSelfShadowBias { get { return this["DistanceFieldSelfShadowBias"].GetValue<float>(); } set { this["DistanceFieldSelfShadowBias"].SetValue<float>(value); } }
        public float StreamingDistanceMultiplier { get { return this["StreamingDistanceMultiplier"].GetValue<float>(); } set { this["StreamingDistanceMultiplier"].SetValue<float>(value); } }
        public Array<StaticMeshComponentLODInfo> LODData { get { return new Array<StaticMeshComponentLODInfo>(this["LODData"]); } set { this["LODData"] = value; } }
        public Array<StreamingTextureBuildInfo> StreamingTextureData { get { return new Array<StreamingTextureBuildInfo>(this["StreamingTextureData"]); } set { this["StreamingTextureData"] = value; } }
        public LightmassPrimitiveSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPrimitiveSettings>(); } set { this["LightmassSettings"] = value; } }
        public UEObject SetStaticMesh(UEObject NewMesh) { return InvokeUEObject("SetStaticMesh", NewMesh); }
        public void _StaticMeshComponent(UEObject AreaClass, UEObject ForcedLodModel, UEObject PreviousLODLevel, UEObject MinLOD, UEObject SubDivisionStepSize, UEObject bForceDynamicShadowOnUltraSettings, UEObject StaticMesh, UEObject WireframeColorOverride, UEObject bEvaluateWorldPositionOffset, UEObject bOverrideWireframeColor, UEObject bOverrideMinLod, UEObject bOverrideNavigationExport, UEObject bForceNavigationObstacle, UEObject bDisallowMeshPaintPerInstance, UEObject bIgnoreInstanceForTextureStreaming, UEObject bOverrideLightMapRes, UEObject bCastDistanceFieldIndirectShadow, UEObject bOverrideDistanceFieldSelfShadowBias, UEObject bUseSubDivisions, UEObject bUseDefaultCollision, UEObject bReverseCulling, UEObject OverriddenLightMapRes, UEObject DistanceFieldIndirectShadowMinVisibility, UEObject DistanceFieldSelfShadowBias, UEObject StreamingDistanceMultiplier, UEObject LODData, UEObject StreamingTextureData, UEObject LightmassSettings) { Invoke("StaticMeshComponent", AreaClass, ForcedLodModel, PreviousLODLevel, MinLOD, SubDivisionStepSize, bForceDynamicShadowOnUltraSettings, StaticMesh, WireframeColorOverride, bEvaluateWorldPositionOffset, bOverrideWireframeColor, bOverrideMinLod, bOverrideNavigationExport, bForceNavigationObstacle, bDisallowMeshPaintPerInstance, bIgnoreInstanceForTextureStreaming, bOverrideLightMapRes, bCastDistanceFieldIndirectShadow, bOverrideDistanceFieldSelfShadowBias, bUseSubDivisions, bUseDefaultCollision, bReverseCulling, OverriddenLightMapRes, DistanceFieldIndirectShadowMinVisibility, DistanceFieldSelfShadowBias, StreamingDistanceMultiplier, LODData, StreamingTextureData, LightmassSettings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TextureCube : Texture
    {
        public TextureCube(nint addr) : base(addr) { }
        public TextureCube() : base(0) { }
    }
    public class Texture : StreamableRenderAsset
    {
        public Texture(nint addr) : base(addr) { }
        public Texture() : base(0) { }
        public SDK.Script.CoreUObject.Guid LightingGuid { get { return this[nameof(LightingGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["LightingGuid"] = value; } }
        public int LODBias { get { return this["LODBias"].GetValue<int>(); } set { this["LODBias"].SetValue<int>(value); } }
        public byte CompressionSettings { get { return this["CompressionSettings"].GetValue<byte>(); } set { this["CompressionSettings"].SetValue<byte>(value); } }
        public byte Filter { get { return this["Filter"].GetValue<byte>(); } set { this["Filter"].SetValue<byte>(value); } }
        public ETextureMipLoadOptions MipLoadOptions { get { return (ETextureMipLoadOptions)this["MipLoadOptions"].GetValue<int>(); } set { this["MipLoadOptions"].SetValue<int>((int)value); } }
        public byte LODGroup { get { return this["LODGroup"].GetValue<byte>(); } set { this["LODGroup"].SetValue<byte>(value); } }
        public PerPlatformFloat Downscale { get { return this[nameof(Downscale)].As<PerPlatformFloat>(); } set { this["Downscale"] = value; } }
        public ETextureDownscaleOptions DownscaleOptions { get { return (ETextureDownscaleOptions)this["DownscaleOptions"].GetValue<int>(); } set { this["DownscaleOptions"].SetValue<int>((int)value); } }
        public bool sRGB { get { return this["sRGB"].Flag; } set { this["sRGB"].Flag = value; } }
        public bool bNoTiling { get { return this["bNoTiling"].Flag; } set { this["bNoTiling"].Flag = value; } }
        public bool VirtualTextureStreaming { get { return this["VirtualTextureStreaming"].Flag; } set { this["VirtualTextureStreaming"].Flag = value; } }
        public bool CompressionYCoCg { get { return this["CompressionYCoCg"].Flag; } set { this["CompressionYCoCg"].Flag = value; } }
        public bool bNotOfflineProcessed { get { return this["bNotOfflineProcessed"].Flag; } set { this["bNotOfflineProcessed"].Flag = value; } }
        public bool bAsyncResourceReleaseHasBeenStarted { get { return this["bAsyncResourceReleaseHasBeenStarted"].Flag; } set { this["bAsyncResourceReleaseHasBeenStarted"].Flag = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
    }
    public class SkyLight : Info
    {
        public SkyLight(nint addr) : base(addr) { }
        public SkyLight() : base(0) { }
        public SkyLightComponent LightComponent { get { return this[nameof(LightComponent)].As<SkyLightComponent>(); } set { this["LightComponent"] = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public void OnRep_bEnabled() { Invoke("OnRep_bEnabled"); }
        public void _SkyLight(UEObject LightComponent, UEObject bEnabled) { Invoke("SkyLight", LightComponent, bEnabled); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SoundNodeParamCrossFade : SoundNodeDistanceCrossFade
    {
        public SoundNodeParamCrossFade(nint addr) : base(addr) { }
        public SoundNodeParamCrossFade() : base(0) { }
        public string ParamName { get { return this["ParamName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SoundNodeDistanceCrossFade : SoundNode
    {
        public SoundNodeDistanceCrossFade(nint addr) : base(addr) { }
        public SoundNodeDistanceCrossFade() : base(0) { }
        public Array<DistanceDatum> CrossFadeInput { get { return new Array<DistanceDatum>(this["CrossFadeInput"]); } set { this["CrossFadeInput"] = value; } }
    }
    public class CheatManager : UEObject
    {
        public CheatManager(nint addr) : base(addr) { }
        public CheatManager() : base(0) { }
        public DebugCameraController DebugCameraControllerRef { get { return this[nameof(DebugCameraControllerRef)].As<DebugCameraController>(); } set { this["DebugCameraControllerRef"] = value; } }
        public UEObject DebugCameraControllerClass { get { return this["DebugCameraControllerClass"]; } set { this["DebugCameraControllerClass"] = value; } }
        public Array<CheatManagerExtension> CheatManagerExtensions { get { return new Array<CheatManagerExtension>(this["CheatManagerExtensions"]); } set { this["CheatManagerExtensions"] = value; } }
        public void Walk() { Invoke("Walk"); }
        public void _CheatManager(UEObject DebugCameraControllerRef, UEObject DebugCameraControllerClass, UEObject CheatManagerExtensions) { Invoke("CheatManager", DebugCameraControllerRef, DebugCameraControllerClass, CheatManagerExtensions); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class NavigationSystemBase : UEObject
    {
        public NavigationSystemBase(nint addr) : base(addr) { }
        public NavigationSystemBase() : base(0) { }
    }
    public class World : UEObject
    {
        public World(nint addr) : base(addr) { }
        public World() : base(0) { }
        public Level PersistentLevel { get { return this[nameof(PersistentLevel)].As<Level>(); } set { this["PersistentLevel"] = value; } }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public LineBatchComponent LineBatcher { get { return this[nameof(LineBatcher)].As<LineBatchComponent>(); } set { this["LineBatcher"] = value; } }
        public LineBatchComponent PersistentLineBatcher { get { return this[nameof(PersistentLineBatcher)].As<LineBatchComponent>(); } set { this["PersistentLineBatcher"] = value; } }
        public LineBatchComponent ForegroundLineBatcher { get { return this[nameof(ForegroundLineBatcher)].As<LineBatchComponent>(); } set { this["ForegroundLineBatcher"] = value; } }
        public GameNetworkManager NetworkManager { get { return this[nameof(NetworkManager)].As<GameNetworkManager>(); } set { this["NetworkManager"] = value; } }
        public PhysicsCollisionHandler PhysicsCollisionHandler { get { return this[nameof(PhysicsCollisionHandler)].As<PhysicsCollisionHandler>(); } set { this["PhysicsCollisionHandler"] = value; } }
        public Array<UEObject> ExtraReferencedObjects { get { return new Array<UEObject>(this["ExtraReferencedObjects"]); } set { this["ExtraReferencedObjects"] = value; } }
        public Array<UEObject> PerModuleDataObjects { get { return new Array<UEObject>(this["PerModuleDataObjects"]); } set { this["PerModuleDataObjects"] = value; } }
        public Array<LevelStreaming> StreamingLevels { get { return new Array<LevelStreaming>(this["StreamingLevels"]); } set { this["StreamingLevels"] = value; } }
        public StreamingLevelsToConsider StreamingLevelsToConsider { get { return this[nameof(StreamingLevelsToConsider)].As<StreamingLevelsToConsider>(); } set { this["StreamingLevelsToConsider"] = value; } }
        public string StreamingLevelsPrefix { get { return this["StreamingLevelsPrefix"].ToString(); } set { /* String properties are read-only */ } }
        public Level CurrentLevelPendingVisibility { get { return this[nameof(CurrentLevelPendingVisibility)].As<Level>(); } set { this["CurrentLevelPendingVisibility"] = value; } }
        public Level CurrentLevelPendingInvisibility { get { return this[nameof(CurrentLevelPendingInvisibility)].As<Level>(); } set { this["CurrentLevelPendingInvisibility"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
        public ParticleEventManager MyParticleEventManager { get { return this[nameof(MyParticleEventManager)].As<ParticleEventManager>(); } set { this["MyParticleEventManager"] = value; } }
        public PhysicsVolume DefaultPhysicsVolume { get { return this[nameof(DefaultPhysicsVolume)].As<PhysicsVolume>(); } set { this["DefaultPhysicsVolume"] = value; } }
        public bool bAreConstraintsDirty { get { return this["bAreConstraintsDirty"].Flag; } set { this["bAreConstraintsDirty"].Flag = value; } }
        public NavigationSystemBase NavigationSystem { get { return this[nameof(NavigationSystem)].As<NavigationSystemBase>(); } set { this["NavigationSystem"] = value; } }
        public GameModeBase AuthorityGameMode { get { return this[nameof(AuthorityGameMode)].As<GameModeBase>(); } set { this["AuthorityGameMode"] = value; } }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public AISystemBase AISystem { get { return this[nameof(AISystem)].As<AISystemBase>(); } set { this["AISystem"] = value; } }
        public AvoidanceManager AvoidanceManager { get { return this[nameof(AvoidanceManager)].As<AvoidanceManager>(); } set { this["AvoidanceManager"] = value; } }
        public Array<Level> Levels { get { return new Array<Level>(this["Levels"]); } set { this["Levels"] = value; } }
        public Array<LevelCollection> LevelCollections { get { return new Array<LevelCollection>(this["LevelCollections"]); } set { this["LevelCollections"] = value; } }
        public GameInstance OwningGameInstance { get { return this[nameof(OwningGameInstance)].As<GameInstance>(); } set { this["OwningGameInstance"] = value; } }
        public Array<MaterialParameterCollectionInstance> ParameterCollectionInstances { get { return new Array<MaterialParameterCollectionInstance>(this["ParameterCollectionInstances"]); } set { this["ParameterCollectionInstances"] = value; } }
        public Canvas CanvasForRenderingToTarget { get { return this[nameof(CanvasForRenderingToTarget)].As<Canvas>(); } set { this["CanvasForRenderingToTarget"] = value; } }
        public Canvas CanvasForDrawMaterialToRenderTarget { get { return this[nameof(CanvasForDrawMaterialToRenderTarget)].As<Canvas>(); } set { this["CanvasForDrawMaterialToRenderTarget"] = value; } }
        public PhysicsFieldComponent PhysicsField { get { return this[nameof(PhysicsField)].As<PhysicsFieldComponent>(); } set { this["PhysicsField"] = value; } }
        public UEObject ComponentsThatNeedPreEndOfFrameSync { get { return this["ComponentsThatNeedPreEndOfFrameSync"]; } set { this["ComponentsThatNeedPreEndOfFrameSync"] = value; } }
        public Array<ActorComponent> ComponentsThatNeedEndOfFrameUpdate { get { return new Array<ActorComponent>(this["ComponentsThatNeedEndOfFrameUpdate"]); } set { this["ComponentsThatNeedEndOfFrameUpdate"] = value; } }
        public Array<ActorComponent> ComponentsThatNeedEndOfFrameUpdate_OnGameThread { get { return new Array<ActorComponent>(this["ComponentsThatNeedEndOfFrameUpdate_OnGameThread"]); } set { this["ComponentsThatNeedEndOfFrameUpdate_OnGameThread"] = value; } }
        public WorldComposition WorldComposition { get { return this[nameof(WorldComposition)].As<WorldComposition>(); } set { this["WorldComposition"] = value; } }
        public WorldPSCPool PSCPool { get { return this[nameof(PSCPool)].As<WorldPSCPool>(); } set { this["PSCPool"] = value; } }
        public UEObject K2_GetWorldSettings() { return InvokeUEObject("K2_GetWorldSettings"); }
        public void _World(UEObject PersistentLevel, UEObject NetDriver, UEObject LineBatcher, UEObject PersistentLineBatcher, UEObject ForegroundLineBatcher, UEObject NetworkManager, UEObject PhysicsCollisionHandler, UEObject ExtraReferencedObjects, UEObject PerModuleDataObjects, UEObject StreamingLevels, UEObject StreamingLevelsToConsider, UEObject StreamingLevelsPrefix, UEObject CurrentLevelPendingVisibility, UEObject CurrentLevelPendingInvisibility, UEObject DemoNetDriver, UEObject MyParticleEventManager, UEObject DefaultPhysicsVolume, UEObject bAreConstraintsDirty, UEObject NavigationSystem, UEObject AuthorityGameMode, UEObject GameState, UEObject AISystem, UEObject AvoidanceManager, UEObject Levels, UEObject LevelCollections, UEObject OwningGameInstance, UEObject ParameterCollectionInstances, UEObject CanvasForRenderingToTarget, UEObject CanvasForDrawMaterialToRenderTarget, UEObject PhysicsField, UEObject ComponentsThatNeedPreEndOfFrameSync, UEObject ComponentsThatNeedEndOfFrameUpdate, UEObject ComponentsThatNeedEndOfFrameUpdate_OnGameThread, UEObject WorldComposition, UEObject PSCPool) { Invoke("World", PersistentLevel, NetDriver, LineBatcher, PersistentLineBatcher, ForegroundLineBatcher, NetworkManager, PhysicsCollisionHandler, ExtraReferencedObjects, PerModuleDataObjects, StreamingLevels, StreamingLevelsToConsider, StreamingLevelsPrefix, CurrentLevelPendingVisibility, CurrentLevelPendingInvisibility, DemoNetDriver, MyParticleEventManager, DefaultPhysicsVolume, bAreConstraintsDirty, NavigationSystem, AuthorityGameMode, GameState, AISystem, AvoidanceManager, Levels, LevelCollections, OwningGameInstance, ParameterCollectionInstances, CanvasForRenderingToTarget, CanvasForDrawMaterialToRenderTarget, PhysicsField, ComponentsThatNeedPreEndOfFrameSync, ComponentsThatNeedEndOfFrameUpdate, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, WorldComposition, PSCPool); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SoundNode : UEObject
    {
        public SoundNode(nint addr) : base(addr) { }
        public SoundNode() : base(0) { }
        public Array<SoundNode> ChildNodes { get { return new Array<SoundNode>(this["ChildNodes"]); } set { this["ChildNodes"] = value; } }
    }
    public class CurveVector : CurveBase
    {
        public CurveVector(nint addr) : base(addr) { }
        public CurveVector() : base(0) { }
        public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
        public UEObject GetVectorValue(UEObject InTime) { return InvokeUEObject("GetVectorValue", InTime); }
        public void _CurveVector(UEObject FloatCurves) { Invoke("CurveVector", FloatCurves); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CurveBase : UEObject
    {
        public CurveBase(nint addr) : base(addr) { }
        public CurveBase() : base(0) { }
        public void GetValueRange(UEObject MinValue, UEObject MaxValue) { Invoke("GetValueRange", MinValue, MaxValue); }
        public void _CurveBase() { Invoke("CurveBase"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PrimaryDataAsset : DataAsset
    {
        public PrimaryDataAsset(nint addr) : base(addr) { }
        public PrimaryDataAsset() : base(0) { }
    }
    public class NavigationObjectBase : Actor
    {
        public NavigationObjectBase(nint addr) : base(addr) { }
        public NavigationObjectBase() : base(0) { }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public BillboardComponent GoodSprite { get { return this[nameof(GoodSprite)].As<BillboardComponent>(); } set { this["GoodSprite"] = value; } }
        public BillboardComponent BadSprite { get { return this[nameof(BadSprite)].As<BillboardComponent>(); } set { this["BadSprite"] = value; } }
        public bool bIsPIEPlayerStart { get { return this["bIsPIEPlayerStart"].Flag; } set { this["bIsPIEPlayerStart"].Flag = value; } }
    }
    public class ProjectileMovementComponent : MovementComponent
    {
        public ProjectileMovementComponent(nint addr) : base(addr) { }
        public ProjectileMovementComponent() : base(0) { }
        public float InitialSpeed { get { return this["InitialSpeed"].GetValue<float>(); } set { this["InitialSpeed"].SetValue<float>(value); } }
        public float MaxSpeed { get { return this["MaxSpeed"].GetValue<float>(); } set { this["MaxSpeed"].SetValue<float>(value); } }
        public bool bRotationFollowsVelocity { get { return this["bRotationFollowsVelocity"].Flag; } set { this["bRotationFollowsVelocity"].Flag = value; } }
        public bool bRotationRemainsVertical { get { return this["bRotationRemainsVertical"].Flag; } set { this["bRotationRemainsVertical"].Flag = value; } }
        public bool bShouldBounce { get { return this["bShouldBounce"].Flag; } set { this["bShouldBounce"].Flag = value; } }
        public bool bInitialVelocityInLocalSpace { get { return this["bInitialVelocityInLocalSpace"].Flag; } set { this["bInitialVelocityInLocalSpace"].Flag = value; } }
        public bool bForceSubStepping { get { return this["bForceSubStepping"].Flag; } set { this["bForceSubStepping"].Flag = value; } }
        public bool bSimulationEnabled { get { return this["bSimulationEnabled"].Flag; } set { this["bSimulationEnabled"].Flag = value; } }
        public bool bSweepCollision { get { return this["bSweepCollision"].Flag; } set { this["bSweepCollision"].Flag = value; } }
        public bool bIsHomingProjectile { get { return this["bIsHomingProjectile"].Flag; } set { this["bIsHomingProjectile"].Flag = value; } }
        public bool bBounceAngleAffectsFriction { get { return this["bBounceAngleAffectsFriction"].Flag; } set { this["bBounceAngleAffectsFriction"].Flag = value; } }
        public bool bIsSliding { get { return this["bIsSliding"].Flag; } set { this["bIsSliding"].Flag = value; } }
        public bool bInterpMovement { get { return this["bInterpMovement"].Flag; } set { this["bInterpMovement"].Flag = value; } }
        public bool bInterpRotation { get { return this["bInterpRotation"].Flag; } set { this["bInterpRotation"].Flag = value; } }
        public float PreviousHitTime { get { return this["PreviousHitTime"].GetValue<float>(); } set { this["PreviousHitTime"].SetValue<float>(value); } }
        public Vector PreviousHitNormal { get { return this[nameof(PreviousHitNormal)].As<Vector>(); } set { this["PreviousHitNormal"] = value; } }
        public float ProjectileGravityScale { get { return this["ProjectileGravityScale"].GetValue<float>(); } set { this["ProjectileGravityScale"].SetValue<float>(value); } }
        public float Buoyancy { get { return this["Buoyancy"].GetValue<float>(); } set { this["Buoyancy"].SetValue<float>(value); } }
        public float Bounciness { get { return this["Bounciness"].GetValue<float>(); } set { this["Bounciness"].SetValue<float>(value); } }
        public float Friction { get { return this["Friction"].GetValue<float>(); } set { this["Friction"].SetValue<float>(value); } }
        public float BounceVelocityStopSimulatingThreshold { get { return this["BounceVelocityStopSimulatingThreshold"].GetValue<float>(); } set { this["BounceVelocityStopSimulatingThreshold"].SetValue<float>(value); } }
        public float MinFrictionFraction { get { return this["MinFrictionFraction"].GetValue<float>(); } set { this["MinFrictionFraction"].SetValue<float>(value); } }
        public UEObject OnProjectileBounce { get { return this["OnProjectileBounce"]; } set { this["OnProjectileBounce"] = value; } }
        public UEObject OnProjectileStop { get { return this["OnProjectileStop"]; } set { this["OnProjectileStop"] = value; } }
        public float HomingAccelerationMagnitude { get { return this["HomingAccelerationMagnitude"].GetValue<float>(); } set { this["HomingAccelerationMagnitude"].SetValue<float>(value); } }
        public UEObject HomingTargetComponent { get { return this["HomingTargetComponent"]; } set { this["HomingTargetComponent"] = value; } }
        public float MaxSimulationTimeStep { get { return this["MaxSimulationTimeStep"].GetValue<float>(); } set { this["MaxSimulationTimeStep"].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this["MaxSimulationIterations"].GetValue<int>(); } set { this["MaxSimulationIterations"].SetValue<int>(value); } }
        public int BounceAdditionalIterations { get { return this["BounceAdditionalIterations"].GetValue<int>(); } set { this["BounceAdditionalIterations"].SetValue<int>(value); } }
        public float InterpLocationTime { get { return this["InterpLocationTime"].GetValue<float>(); } set { this["InterpLocationTime"].SetValue<float>(value); } }
        public float InterpRotationTime { get { return this["InterpRotationTime"].GetValue<float>(); } set { this["InterpRotationTime"].SetValue<float>(value); } }
        public float InterpLocationMaxLagDistance { get { return this["InterpLocationMaxLagDistance"].GetValue<float>(); } set { this["InterpLocationMaxLagDistance"].SetValue<float>(value); } }
        public float InterpLocationSnapToTargetDistance { get { return this["InterpLocationSnapToTargetDistance"].GetValue<float>(); } set { this["InterpLocationSnapToTargetDistance"].SetValue<float>(value); } }
        public void StopSimulating(UEObject HitResult) { Invoke("StopSimulating", HitResult); }
        public void _ProjectileMovementComponent(UEObject InitialSpeed, UEObject MaxSpeed, UEObject bRotationFollowsVelocity, UEObject bRotationRemainsVertical, UEObject bShouldBounce, UEObject bInitialVelocityInLocalSpace, UEObject bForceSubStepping, UEObject bSimulationEnabled, UEObject bSweepCollision, UEObject bIsHomingProjectile, UEObject bBounceAngleAffectsFriction, UEObject bIsSliding, UEObject bInterpMovement, UEObject bInterpRotation, UEObject PreviousHitTime, UEObject PreviousHitNormal, UEObject ProjectileGravityScale, UEObject Buoyancy, UEObject Bounciness, UEObject Friction, UEObject BounceVelocityStopSimulatingThreshold, UEObject MinFrictionFraction, UEObject OnProjectileBounce, UEObject OnProjectileStop, UEObject HomingAccelerationMagnitude, UEObject HomingTargetComponent, UEObject MaxSimulationTimeStep, UEObject MaxSimulationIterations, UEObject BounceAdditionalIterations, UEObject InterpLocationTime, UEObject InterpRotationTime, UEObject InterpLocationMaxLagDistance, UEObject InterpLocationSnapToTargetDistance) { Invoke("ProjectileMovementComponent", InitialSpeed, MaxSpeed, bRotationFollowsVelocity, bRotationRemainsVertical, bShouldBounce, bInitialVelocityInLocalSpace, bForceSubStepping, bSimulationEnabled, bSweepCollision, bIsHomingProjectile, bBounceAngleAffectsFriction, bIsSliding, bInterpMovement, bInterpRotation, PreviousHitTime, PreviousHitNormal, ProjectileGravityScale, Buoyancy, Bounciness, Friction, BounceVelocityStopSimulatingThreshold, MinFrictionFraction, OnProjectileBounce, OnProjectileStop, HomingAccelerationMagnitude, HomingTargetComponent, MaxSimulationTimeStep, MaxSimulationIterations, BounceAdditionalIterations, InterpLocationTime, InterpRotationTime, InterpLocationMaxLagDistance, InterpLocationSnapToTargetDistance); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlayerInput : UEObject
    {
        public PlayerInput(nint addr) : base(addr) { }
        public PlayerInput() : base(0) { }
        public Array<KeyBind> DebugExecBindings { get { return new Array<KeyBind>(this["DebugExecBindings"]); } set { this["DebugExecBindings"] = value; } }
        public List<string> InvertedAxis { get { return this["InvertedAxis"].GetStringList(); } set { /* Arrays are read-only */ } }
        public void SetMouseSensitivity(UEObject Sensitivity) { Invoke("SetMouseSensitivity", Sensitivity); }
        public void _PlayerInput(UEObject DebugExecBindings, UEObject InvertedAxis) { Invoke("PlayerInput", DebugExecBindings, InvertedAxis); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlayerCameraManager : Actor
    {
        public PlayerCameraManager(nint addr) : base(addr) { }
        public PlayerCameraManager() : base(0) { }
        public PlayerController PCOwner { get { return this[nameof(PCOwner)].As<PlayerController>(); } set { this["PCOwner"] = value; } }
        public SceneComponent TransformComponent { get { return this[nameof(TransformComponent)].As<SceneComponent>(); } set { this["TransformComponent"] = value; } }
        public float DefaultFOV { get { return this["DefaultFOV"].GetValue<float>(); } set { this["DefaultFOV"].SetValue<float>(value); } }
        public float CustomFOV { get { return this["CustomFOV"].GetValue<float>(); } set { this["CustomFOV"].SetValue<float>(value); } }
        public float LoweringModifier { get { return this["LoweringModifier"].GetValue<float>(); } set { this["LoweringModifier"].SetValue<float>(value); } }
        public float DefaultOrthoWidth { get { return this["DefaultOrthoWidth"].GetValue<float>(); } set { this["DefaultOrthoWidth"].SetValue<float>(value); } }
        public float DefaultAspectRatio { get { return this["DefaultAspectRatio"].GetValue<float>(); } set { this["DefaultAspectRatio"].SetValue<float>(value); } }
        public CameraCacheEntry CameraCache { get { return this[nameof(CameraCache)].As<CameraCacheEntry>(); } set { this["CameraCache"] = value; } }
        public CameraCacheEntry LastFrameCameraCache { get { return this[nameof(LastFrameCameraCache)].As<CameraCacheEntry>(); } set { this["LastFrameCameraCache"] = value; } }
        public TViewTarget ViewTarget { get { return this[nameof(ViewTarget)].As<TViewTarget>(); } set { this["ViewTarget"] = value; } }
        public TViewTarget PendingViewTarget { get { return this[nameof(PendingViewTarget)].As<TViewTarget>(); } set { this["PendingViewTarget"] = value; } }
        public CameraCacheEntry CameraCachePrivate { get { return this[nameof(CameraCachePrivate)].As<CameraCacheEntry>(); } set { this["CameraCachePrivate"] = value; } }
        public CameraCacheEntry LastFrameCameraCachePrivate { get { return this[nameof(LastFrameCameraCachePrivate)].As<CameraCacheEntry>(); } set { this["LastFrameCameraCachePrivate"] = value; } }
        public Array<CameraModifier> ModifierList { get { return new Array<CameraModifier>(this["ModifierList"]); } set { this["ModifierList"] = value; } }
        public Array<UEObject> DefaultModifiers { get { return new Array<UEObject>(this["DefaultModifiers"]); } set { this["DefaultModifiers"] = value; } }
        public float FreeCamDistance { get { return this["FreeCamDistance"].GetValue<float>(); } set { this["FreeCamDistance"].SetValue<float>(value); } }
        public Vector FreeCamOffset { get { return this[nameof(FreeCamOffset)].As<Vector>(); } set { this["FreeCamOffset"] = value; } }
        public Vector ViewTargetOffset { get { return this[nameof(ViewTargetOffset)].As<Vector>(); } set { this["ViewTargetOffset"] = value; } }
        public UEObject OnAudioFadeChangeEvent { get { return this["OnAudioFadeChangeEvent"]; } set { this["OnAudioFadeChangeEvent"] = value; } }
        public Array<EmitterCameraLensEffectBase> CameraLensEffects { get { return new Array<EmitterCameraLensEffectBase>(this["CameraLensEffects"]); } set { this["CameraLensEffects"] = value; } }
        public CameraModifier_CameraShake CachedCameraShakeMod { get { return this[nameof(CachedCameraShakeMod)].As<CameraModifier_CameraShake>(); } set { this["CachedCameraShakeMod"] = value; } }
        public CameraAnimInst AnimInstPool { get { return this[nameof(AnimInstPool)].As<CameraAnimInst>(); } set { this["AnimInstPool"] = value; } }
        public Array<PostProcessSettings> PostProcessBlendCache { get { return new Array<PostProcessSettings>(this["PostProcessBlendCache"]); } set { this["PostProcessBlendCache"] = value; } }
        public Array<CameraAnimInst> ActiveAnims { get { return new Array<CameraAnimInst>(this["ActiveAnims"]); } set { this["ActiveAnims"] = value; } }
        public Array<CameraAnimInst> FreeAnims { get { return new Array<CameraAnimInst>(this["FreeAnims"]); } set { this["FreeAnims"] = value; } }
        public CameraActor AnimCameraActor { get { return this[nameof(AnimCameraActor)].As<CameraActor>(); } set { this["AnimCameraActor"] = value; } }
        public bool bIsOrthographic { get { return this["bIsOrthographic"].Flag; } set { this["bIsOrthographic"].Flag = value; } }
        public bool bDefaultConstrainAspectRatio { get { return this["bDefaultConstrainAspectRatio"].Flag; } set { this["bDefaultConstrainAspectRatio"].Flag = value; } }
        public bool bClientSimulatingViewTarget { get { return this["bClientSimulatingViewTarget"].Flag; } set { this["bClientSimulatingViewTarget"].Flag = value; } }
        public bool bUseClientSideCameraUpdates { get { return this["bUseClientSideCameraUpdates"].Flag; } set { this["bUseClientSideCameraUpdates"].Flag = value; } }
        public bool bGameCameraCutThisFrame { get { return this["bGameCameraCutThisFrame"].Flag; } set { this["bGameCameraCutThisFrame"].Flag = value; } }
        public float ViewPitchMin { get { return this["ViewPitchMin"].GetValue<float>(); } set { this["ViewPitchMin"].SetValue<float>(value); } }
        public float ViewPitchMax { get { return this["ViewPitchMax"].GetValue<float>(); } set { this["ViewPitchMax"].SetValue<float>(value); } }
        public float ViewYawMin { get { return this["ViewYawMin"].GetValue<float>(); } set { this["ViewYawMin"].SetValue<float>(value); } }
        public float ViewYawMax { get { return this["ViewYawMax"].GetValue<float>(); } set { this["ViewYawMax"].SetValue<float>(value); } }
        public float ViewRollMin { get { return this["ViewRollMin"].GetValue<float>(); } set { this["ViewRollMin"].SetValue<float>(value); } }
        public float ViewRollMax { get { return this["ViewRollMax"].GetValue<float>(); } set { this["ViewRollMax"].SetValue<float>(value); } }
        public float ServerUpdateCameraTimeout { get { return this["ServerUpdateCameraTimeout"].GetValue<float>(); } set { this["ServerUpdateCameraTimeout"].SetValue<float>(value); } }
        public void SwapPendingViewTargetWhenUsingClientSideCameraUpdates() { Invoke("SwapPendingViewTargetWhenUsingClientSideCameraUpdates"); }
        public void _PlayerCameraManager(UEObject PCOwner, UEObject TransformComponent, UEObject DefaultFOV, UEObject CustomFOV, UEObject LoweringModifier, UEObject DefaultOrthoWidth, UEObject DefaultAspectRatio, UEObject CameraCache, UEObject LastFrameCameraCache, UEObject ViewTarget, UEObject PendingViewTarget, UEObject CameraCachePrivate, UEObject LastFrameCameraCachePrivate, UEObject ModifierList, UEObject DefaultModifiers, UEObject FreeCamDistance, UEObject FreeCamOffset, UEObject ViewTargetOffset, UEObject OnAudioFadeChangeEvent, UEObject CameraLensEffects, UEObject CachedCameraShakeMod, UEObject AnimInstPool, UEObject PostProcessBlendCache, UEObject ActiveAnims, UEObject FreeAnims, UEObject AnimCameraActor, UEObject bIsOrthographic, UEObject bDefaultConstrainAspectRatio, UEObject bClientSimulatingViewTarget, UEObject bUseClientSideCameraUpdates, UEObject bGameCameraCutThisFrame, UEObject ViewPitchMin, UEObject ViewPitchMax, UEObject ViewYawMin, UEObject ViewYawMax, UEObject ViewRollMin, UEObject ViewRollMax, UEObject ServerUpdateCameraTimeout) { Invoke("PlayerCameraManager", PCOwner, TransformComponent, DefaultFOV, CustomFOV, LoweringModifier, DefaultOrthoWidth, DefaultAspectRatio, CameraCache, LastFrameCameraCache, ViewTarget, PendingViewTarget, CameraCachePrivate, LastFrameCameraCachePrivate, ModifierList, DefaultModifiers, FreeCamDistance, FreeCamOffset, ViewTargetOffset, OnAudioFadeChangeEvent, CameraLensEffects, CachedCameraShakeMod, AnimInstPool, PostProcessBlendCache, ActiveAnims, FreeAnims, AnimCameraActor, bIsOrthographic, bDefaultConstrainAspectRatio, bClientSimulatingViewTarget, bUseClientSideCameraUpdates, bGameCameraCutThisFrame, ViewPitchMin, ViewPitchMax, ViewYawMin, ViewYawMax, ViewRollMin, ViewRollMax, ServerUpdateCameraTimeout); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PlanarReflection : SceneCapture
    {
        public PlanarReflection(nint addr) : base(addr) { }
        public PlanarReflection() : base(0) { }
        public PlanarReflectionComponent PlanarReflectionComponent { get { return this[nameof(PlanarReflectionComponent)].As<PlanarReflectionComponent>(); } set { this["PlanarReflectionComponent"] = value; } }
        public bool bShowPreviewPlane { get { return this["bShowPreviewPlane"].Flag; } set { this["bShowPreviewPlane"].Flag = value; } }
        public void OnInterpToggle(UEObject bEnable) { Invoke("OnInterpToggle", bEnable); }
        public void _PlanarReflection(UEObject PlanarReflectionComponent, UEObject bShowPreviewPlane) { Invoke("PlanarReflection", PlanarReflectionComponent, bShowPreviewPlane); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SceneCapture : Actor
    {
        public SceneCapture(nint addr) : base(addr) { }
        public SceneCapture() : base(0) { }
        public StaticMeshComponent MeshComp { get { return this[nameof(MeshComp)].As<StaticMeshComponent>(); } set { this["MeshComp"] = value; } }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
    }
    public class ParticleSystemComponent : FXSystemComponent
    {
        public ParticleSystemComponent(nint addr) : base(addr) { }
        public ParticleSystemComponent() : base(0) { }
        public UEObject Template { get { return this[nameof(Template)]; } set { this["Template"] = value; } }
        public Array<MaterialInterface> EmitterMaterials { get { return new Array<MaterialInterface>(this["EmitterMaterials"]); } set { this["EmitterMaterials"] = value; } }
        public Array<SkeletalMeshComponent> SkelMeshComponents { get { return new Array<SkeletalMeshComponent>(this["SkelMeshComponents"]); } set { this["SkelMeshComponents"] = value; } }
        public bool bResetOnDetach { get { return this["bResetOnDetach"].Flag; } set { this["bResetOnDetach"].Flag = value; } }
        public bool bUpdateOnDedicatedServer { get { return this["bUpdateOnDedicatedServer"].Flag; } set { this["bUpdateOnDedicatedServer"].Flag = value; } }
        public bool bAllowRecycling { get { return this["bAllowRecycling"].Flag; } set { this["bAllowRecycling"].Flag = value; } }
        public bool bAutoManageAttachment { get { return this["bAutoManageAttachment"].Flag; } set { this["bAutoManageAttachment"].Flag = value; } }
        public bool bAutoAttachWeldSimulatedBodies { get { return this["bAutoAttachWeldSimulatedBodies"].Flag; } set { this["bAutoAttachWeldSimulatedBodies"].Flag = value; } }
        public bool bWarmingUp { get { return this["bWarmingUp"].Flag; } set { this["bWarmingUp"].Flag = value; } }
        public bool bOverrideLODMethod { get { return this["bOverrideLODMethod"].Flag; } set { this["bOverrideLODMethod"].Flag = value; } }
        public bool bSkipUpdateDynamicDataDuringTick { get { return this["bSkipUpdateDynamicDataDuringTick"].Flag; } set { this["bSkipUpdateDynamicDataDuringTick"].Flag = value; } }
        public byte LODMethod { get { return this["LODMethod"].GetValue<byte>(); } set { this["LODMethod"].SetValue<byte>(value); } }
        public EParticleSignificanceLevel RequiredSignificance { get { return (EParticleSignificanceLevel)this["RequiredSignificance"].GetValue<int>(); } set { this["RequiredSignificance"].SetValue<int>((int)value); } }
        public Array<ParticleSysParam> InstanceParameters { get { return new Array<ParticleSysParam>(this["InstanceParameters"]); } set { this["InstanceParameters"] = value; } }
        public UEObject OnParticleSpawn { get { return this["OnParticleSpawn"]; } set { this["OnParticleSpawn"] = value; } }
        public UEObject OnParticleBurst { get { return this["OnParticleBurst"]; } set { this["OnParticleBurst"] = value; } }
        public UEObject OnParticleDeath { get { return this["OnParticleDeath"]; } set { this["OnParticleDeath"] = value; } }
        public UEObject OnParticleCollide { get { return this["OnParticleCollide"]; } set { this["OnParticleCollide"] = value; } }
        public bool bOldPositionValid { get { return this["bOldPositionValid"].Flag; } set { this["bOldPositionValid"].Flag = value; } }
        public Vector OldPosition { get { return this[nameof(OldPosition)].As<Vector>(); } set { this["OldPosition"] = value; } }
        public Vector PartSysVelocity { get { return this[nameof(PartSysVelocity)].As<Vector>(); } set { this["PartSysVelocity"] = value; } }
        public float WarmupTime { get { return this["WarmupTime"].GetValue<float>(); } set { this["WarmupTime"].SetValue<float>(value); } }
        public float WarmupTickRate { get { return this["WarmupTickRate"].GetValue<float>(); } set { this["WarmupTickRate"].SetValue<float>(value); } }
        public float SecondsBeforeInactive { get { return this["SecondsBeforeInactive"].GetValue<float>(); } set { this["SecondsBeforeInactive"].SetValue<float>(value); } }
        public float MaxTimeBeforeForceUpdateTransform { get { return this["MaxTimeBeforeForceUpdateTransform"].GetValue<float>(); } set { this["MaxTimeBeforeForceUpdateTransform"].SetValue<float>(value); } }
        public Array<ParticleSystemReplay> ReplayClips { get { return new Array<ParticleSystemReplay>(this["ReplayClips"]); } set { this["ReplayClips"] = value; } }
        public float CustomTimeDilation { get { return this["CustomTimeDilation"].GetValue<float>(); } set { this["CustomTimeDilation"].SetValue<float>(value); } }
        public UEObject AutoAttachParent { get { return this["AutoAttachParent"]; } set { this["AutoAttachParent"] = value; } }
        public string AutoAttachSocketName { get { return this["AutoAttachSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public EAttachmentRule AutoAttachLocationRule { get { return (EAttachmentRule)this["AutoAttachLocationRule"].GetValue<int>(); } set { this["AutoAttachLocationRule"].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachRotationRule { get { return (EAttachmentRule)this["AutoAttachRotationRule"].GetValue<int>(); } set { this["AutoAttachRotationRule"].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachScaleRule { get { return (EAttachmentRule)this["AutoAttachScaleRule"].GetValue<int>(); } set { this["AutoAttachScaleRule"].SetValue<int>((int)value); } }
        public UEObject OnSystemFinished { get { return this["OnSystemFinished"]; } set { this["OnSystemFinished"] = value; } }
        public void SetTrailSourceData(UEObject InFirstSocketName, UEObject InSecondSocketName, UEObject InWidthMode, UEObject InWidth) { Invoke("SetTrailSourceData", InFirstSocketName, InSecondSocketName, InWidthMode, InWidth); }
        public void _ParticleSystemComponent(UEObject Template, UEObject EmitterMaterials, UEObject SkelMeshComponents, UEObject bResetOnDetach, UEObject bUpdateOnDedicatedServer, UEObject bAllowRecycling, UEObject bAutoManageAttachment, UEObject bAutoAttachWeldSimulatedBodies, UEObject bWarmingUp, UEObject bOverrideLODMethod, UEObject bSkipUpdateDynamicDataDuringTick, UEObject LODMethod, UEObject RequiredSignificance, UEObject InstanceParameters, UEObject OnParticleSpawn, UEObject OnParticleBurst, UEObject OnParticleDeath, UEObject OnParticleCollide, UEObject bOldPositionValid, UEObject OldPosition, UEObject PartSysVelocity, UEObject WarmupTime, UEObject WarmupTickRate, UEObject SecondsBeforeInactive, UEObject MaxTimeBeforeForceUpdateTransform, UEObject ReplayClips, UEObject CustomTimeDilation, UEObject AutoAttachParent, UEObject AutoAttachSocketName, UEObject AutoAttachLocationRule, UEObject AutoAttachRotationRule, UEObject AutoAttachScaleRule, UEObject OnSystemFinished) { Invoke("ParticleSystemComponent", Template, EmitterMaterials, SkelMeshComponents, bResetOnDetach, bUpdateOnDedicatedServer, bAllowRecycling, bAutoManageAttachment, bAutoAttachWeldSimulatedBodies, bWarmingUp, bOverrideLODMethod, bSkipUpdateDynamicDataDuringTick, LODMethod, RequiredSignificance, InstanceParameters, OnParticleSpawn, OnParticleBurst, OnParticleDeath, OnParticleCollide, bOldPositionValid, OldPosition, PartSysVelocity, WarmupTime, WarmupTickRate, SecondsBeforeInactive, MaxTimeBeforeForceUpdateTransform, ReplayClips, CustomTimeDilation, AutoAttachParent, AutoAttachSocketName, AutoAttachLocationRule, AutoAttachRotationRule, AutoAttachScaleRule, OnSystemFinished); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TriggerVolume : Volume
    {
        public TriggerVolume(nint addr) : base(addr) { }
        public TriggerVolume() : base(0) { }
    }
    public class LocalPlayer : Player
    {
        public LocalPlayer(nint addr) : base(addr) { }
        public LocalPlayer() : base(0) { }
        public GameViewportClient ViewportClient { get { return this[nameof(ViewportClient)].As<GameViewportClient>(); } set { this["ViewportClient"] = value; } }
        public byte AspectRatioAxisConstraint { get { return this["AspectRatioAxisConstraint"].GetValue<byte>(); } set { this["AspectRatioAxisConstraint"].SetValue<byte>(value); } }
        public UEObject PendingLevelPlayerControllerClass { get { return this["PendingLevelPlayerControllerClass"]; } set { this["PendingLevelPlayerControllerClass"] = value; } }
        public bool bSentSplitJoin { get { return this["bSentSplitJoin"].Flag; } set { this["bSentSplitJoin"].Flag = value; } }
        public int ControllerId { get { return this["ControllerId"].GetValue<int>(); } set { this["ControllerId"].SetValue<int>(value); } }
    }
    public class InputComponent : ActorComponent
    {
        public InputComponent(nint addr) : base(addr) { }
        public InputComponent() : base(0) { }
        public Array<CachedKeyToActionInfo> CachedKeyToActionInfo { get { return new Array<CachedKeyToActionInfo>(this["CachedKeyToActionInfo"]); } set { this["CachedKeyToActionInfo"] = value; } }
        public UEObject WasControllerKeyJustReleased(UEObject Key) { return InvokeUEObject("WasControllerKeyJustReleased", Key); }
        public void _InputComponent(UEObject CachedKeyToActionInfo) { Invoke("InputComponent", CachedKeyToActionInfo); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameViewportClient : ScriptViewportClient
    {
        public GameViewportClient(nint addr) : base(addr) { }
        public GameViewportClient() : base(0) { }
        public Console ViewportConsole { get { return this[nameof(ViewportConsole)].As<Console>(); } set { this["ViewportConsole"] = value; } }
        public Array<DebugDisplayProperty> DebugProperties { get { return new Array<DebugDisplayProperty>(this["DebugProperties"]); } set { this["DebugProperties"] = value; } }
        public int MaxSplitscreenPlayers { get { return this["MaxSplitscreenPlayers"].GetValue<int>(); } set { this["MaxSplitscreenPlayers"].SetValue<int>(value); } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public GameInstance GameInstance { get { return this[nameof(GameInstance)].As<GameInstance>(); } set { this["GameInstance"] = value; } }
        public void SSSwapControllers() { Invoke("SSSwapControllers"); }
        public void _GameViewportClient(UEObject ViewportConsole, UEObject DebugProperties, UEObject MaxSplitscreenPlayers, UEObject World, UEObject GameInstance) { Invoke("GameViewportClient", ViewportConsole, DebugProperties, MaxSplitscreenPlayers, World, GameInstance); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ScriptViewportClient : UEObject
    {
        public ScriptViewportClient(nint addr) : base(addr) { }
        public ScriptViewportClient() : base(0) { }
    }
    public class Engine : UEObject
    {
        public Engine(nint addr) : base(addr) { }
        public Engine() : base(0) { }
        public Font TinyFont { get { return this[nameof(TinyFont)].As<Font>(); } set { this["TinyFont"] = value; } }
        public SoftObjectPath TinyFontName { get { return this[nameof(TinyFontName)].As<SoftObjectPath>(); } set { this["TinyFontName"] = value; } }
        public Font SmallFont { get { return this[nameof(SmallFont)].As<Font>(); } set { this["SmallFont"] = value; } }
        public SoftObjectPath SmallFontName { get { return this[nameof(SmallFontName)].As<SoftObjectPath>(); } set { this["SmallFontName"] = value; } }
        public Font MediumFont { get { return this[nameof(MediumFont)].As<Font>(); } set { this["MediumFont"] = value; } }
        public SoftObjectPath MediumFontName { get { return this[nameof(MediumFontName)].As<SoftObjectPath>(); } set { this["MediumFontName"] = value; } }
        public Font LargeFont { get { return this[nameof(LargeFont)].As<Font>(); } set { this["LargeFont"] = value; } }
        public SoftObjectPath LargeFontName { get { return this[nameof(LargeFontName)].As<SoftObjectPath>(); } set { this["LargeFontName"] = value; } }
        public Font SubtitleFont { get { return this[nameof(SubtitleFont)].As<Font>(); } set { this["SubtitleFont"] = value; } }
        public SoftObjectPath SubtitleFontName { get { return this[nameof(SubtitleFontName)].As<SoftObjectPath>(); } set { this["SubtitleFontName"] = value; } }
        public Array<Font> AdditionalFonts { get { return new Array<Font>(this["AdditionalFonts"]); } set { this["AdditionalFonts"] = value; } }
        public List<string> AdditionalFontNames { get { return this["AdditionalFontNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject ConsoleClass { get { return this["ConsoleClass"]; } set { this["ConsoleClass"] = value; } }
        public SoftClassPath ConsoleClassName { get { return this[nameof(ConsoleClassName)].As<SoftClassPath>(); } set { this["ConsoleClassName"] = value; } }
        public UEObject GameViewportClientClass { get { return this["GameViewportClientClass"]; } set { this["GameViewportClientClass"] = value; } }
        public SoftClassPath GameViewportClientClassName { get { return this[nameof(GameViewportClientClassName)].As<SoftClassPath>(); } set { this["GameViewportClientClassName"] = value; } }
        public UEObject LocalPlayerClass { get { return this["LocalPlayerClass"]; } set { this["LocalPlayerClass"] = value; } }
        public SoftClassPath LocalPlayerClassName { get { return this[nameof(LocalPlayerClassName)].As<SoftClassPath>(); } set { this["LocalPlayerClassName"] = value; } }
        public UEObject WorldSettingsClass { get { return this["WorldSettingsClass"]; } set { this["WorldSettingsClass"] = value; } }
        public SoftClassPath WorldSettingsClassName { get { return this[nameof(WorldSettingsClassName)].As<SoftClassPath>(); } set { this["WorldSettingsClassName"] = value; } }
        public SoftClassPath NavigationSystemClassName { get { return this[nameof(NavigationSystemClassName)].As<SoftClassPath>(); } set { this["NavigationSystemClassName"] = value; } }
        public UEObject NavigationSystemClass { get { return this["NavigationSystemClass"]; } set { this["NavigationSystemClass"] = value; } }
        public SoftClassPath NavigationSystemConfigClassName { get { return this[nameof(NavigationSystemConfigClassName)].As<SoftClassPath>(); } set { this["NavigationSystemConfigClassName"] = value; } }
        public UEObject NavigationSystemConfigClass { get { return this["NavigationSystemConfigClass"]; } set { this["NavigationSystemConfigClass"] = value; } }
        public SoftClassPath AvoidanceManagerClassName { get { return this[nameof(AvoidanceManagerClassName)].As<SoftClassPath>(); } set { this["AvoidanceManagerClassName"] = value; } }
        public UEObject AvoidanceManagerClass { get { return this["AvoidanceManagerClass"]; } set { this["AvoidanceManagerClass"] = value; } }
        public SoftClassPath AIControllerClassName { get { return this[nameof(AIControllerClassName)].As<SoftClassPath>(); } set { this["AIControllerClassName"] = value; } }
        public UEObject PhysicsCollisionHandlerClass { get { return this["PhysicsCollisionHandlerClass"]; } set { this["PhysicsCollisionHandlerClass"] = value; } }
        public SoftClassPath PhysicsCollisionHandlerClassName { get { return this[nameof(PhysicsCollisionHandlerClassName)].As<SoftClassPath>(); } set { this["PhysicsCollisionHandlerClassName"] = value; } }
        public SoftClassPath GameUserSettingsClassName { get { return this[nameof(GameUserSettingsClassName)].As<SoftClassPath>(); } set { this["GameUserSettingsClassName"] = value; } }
        public UEObject GameUserSettingsClass { get { return this["GameUserSettingsClass"]; } set { this["GameUserSettingsClass"] = value; } }
        public GameUserSettings GameUserSettings { get { return this[nameof(GameUserSettings)].As<GameUserSettings>(); } set { this["GameUserSettings"] = value; } }
        public UEObject LevelScriptActorClass { get { return this["LevelScriptActorClass"]; } set { this["LevelScriptActorClass"] = value; } }
        public SoftClassPath LevelScriptActorClassName { get { return this[nameof(LevelScriptActorClassName)].As<SoftClassPath>(); } set { this["LevelScriptActorClassName"] = value; } }
        public SoftClassPath DefaultBlueprintBaseClassName { get { return this[nameof(DefaultBlueprintBaseClassName)].As<SoftClassPath>(); } set { this["DefaultBlueprintBaseClassName"] = value; } }
        public SoftClassPath GameSingletonClassName { get { return this[nameof(GameSingletonClassName)].As<SoftClassPath>(); } set { this["GameSingletonClassName"] = value; } }
        public UEObject GameSingleton { get { return this[nameof(GameSingleton)]; } set { this["GameSingleton"] = value; } }
        public SoftClassPath AssetManagerClassName { get { return this[nameof(AssetManagerClassName)].As<SoftClassPath>(); } set { this["AssetManagerClassName"] = value; } }
        public AssetManager AssetManager { get { return this[nameof(AssetManager)].As<AssetManager>(); } set { this["AssetManager"] = value; } }
        public Texture2D DefaultTexture { get { return this[nameof(DefaultTexture)].As<Texture2D>(); } set { this["DefaultTexture"] = value; } }
        public SoftObjectPath DefaultTextureName { get { return this[nameof(DefaultTextureName)].As<SoftObjectPath>(); } set { this["DefaultTextureName"] = value; } }
        public Texture DefaultDiffuseTexture { get { return this[nameof(DefaultDiffuseTexture)].As<Texture>(); } set { this["DefaultDiffuseTexture"] = value; } }
        public SoftObjectPath DefaultDiffuseTextureName { get { return this[nameof(DefaultDiffuseTextureName)].As<SoftObjectPath>(); } set { this["DefaultDiffuseTextureName"] = value; } }
        public Texture2D DefaultBSPVertexTexture { get { return this[nameof(DefaultBSPVertexTexture)].As<Texture2D>(); } set { this["DefaultBSPVertexTexture"] = value; } }
        public SoftObjectPath DefaultBSPVertexTextureName { get { return this[nameof(DefaultBSPVertexTextureName)].As<SoftObjectPath>(); } set { this["DefaultBSPVertexTextureName"] = value; } }
        public Texture2D HighFrequencyNoiseTexture { get { return this[nameof(HighFrequencyNoiseTexture)].As<Texture2D>(); } set { this["HighFrequencyNoiseTexture"] = value; } }
        public SoftObjectPath HighFrequencyNoiseTextureName { get { return this[nameof(HighFrequencyNoiseTextureName)].As<SoftObjectPath>(); } set { this["HighFrequencyNoiseTextureName"] = value; } }
        public Texture2D DefaultBokehTexture { get { return this[nameof(DefaultBokehTexture)].As<Texture2D>(); } set { this["DefaultBokehTexture"] = value; } }
        public SoftObjectPath DefaultBokehTextureName { get { return this[nameof(DefaultBokehTextureName)].As<SoftObjectPath>(); } set { this["DefaultBokehTextureName"] = value; } }
        public Texture2D DefaultBloomKernelTexture { get { return this[nameof(DefaultBloomKernelTexture)].As<Texture2D>(); } set { this["DefaultBloomKernelTexture"] = value; } }
        public SoftObjectPath DefaultBloomKernelTextureName { get { return this[nameof(DefaultBloomKernelTextureName)].As<SoftObjectPath>(); } set { this["DefaultBloomKernelTextureName"] = value; } }
        public Material WireframeMaterial { get { return this[nameof(WireframeMaterial)].As<Material>(); } set { this["WireframeMaterial"] = value; } }
        public string WireframeMaterialName { get { return this["WireframeMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material DebugMeshMaterial { get { return this[nameof(DebugMeshMaterial)].As<Material>(); } set { this["DebugMeshMaterial"] = value; } }
        public SoftObjectPath DebugMeshMaterialName { get { return this[nameof(DebugMeshMaterialName)].As<SoftObjectPath>(); } set { this["DebugMeshMaterialName"] = value; } }
        public Material EmissiveMeshMaterial { get { return this[nameof(EmissiveMeshMaterial)].As<Material>(); } set { this["EmissiveMeshMaterial"] = value; } }
        public SoftObjectPath EmissiveMeshMaterialName { get { return this[nameof(EmissiveMeshMaterialName)].As<SoftObjectPath>(); } set { this["EmissiveMeshMaterialName"] = value; } }
        public Material LevelColorationLitMaterial { get { return this[nameof(LevelColorationLitMaterial)].As<Material>(); } set { this["LevelColorationLitMaterial"] = value; } }
        public string LevelColorationLitMaterialName { get { return this["LevelColorationLitMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material LevelColorationUnlitMaterial { get { return this[nameof(LevelColorationUnlitMaterial)].As<Material>(); } set { this["LevelColorationUnlitMaterial"] = value; } }
        public string LevelColorationUnlitMaterialName { get { return this["LevelColorationUnlitMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material LightingTexelDensityMaterial { get { return this[nameof(LightingTexelDensityMaterial)].As<Material>(); } set { this["LightingTexelDensityMaterial"] = value; } }
        public string LightingTexelDensityName { get { return this["LightingTexelDensityName"].ToString(); } set { /* String properties are read-only */ } }
        public Material ShadedLevelColorationLitMaterial { get { return this[nameof(ShadedLevelColorationLitMaterial)].As<Material>(); } set { this["ShadedLevelColorationLitMaterial"] = value; } }
        public string ShadedLevelColorationLitMaterialName { get { return this["ShadedLevelColorationLitMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material ShadedLevelColorationUnlitMaterial { get { return this[nameof(ShadedLevelColorationUnlitMaterial)].As<Material>(); } set { this["ShadedLevelColorationUnlitMaterial"] = value; } }
        public string ShadedLevelColorationUnlitMaterialName { get { return this["ShadedLevelColorationUnlitMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material RemoveSurfaceMaterial { get { return this[nameof(RemoveSurfaceMaterial)].As<Material>(); } set { this["RemoveSurfaceMaterial"] = value; } }
        public SoftObjectPath RemoveSurfaceMaterialName { get { return this[nameof(RemoveSurfaceMaterialName)].As<SoftObjectPath>(); } set { this["RemoveSurfaceMaterialName"] = value; } }
        public Material VertexColorMaterial { get { return this[nameof(VertexColorMaterial)].As<Material>(); } set { this["VertexColorMaterial"] = value; } }
        public string VertexColorMaterialName { get { return this["VertexColorMaterialName"].ToString(); } set { /* String properties are read-only */ } }
        public Material VertexColorViewModeMaterial_ColorOnly { get { return this[nameof(VertexColorViewModeMaterial_ColorOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_ColorOnly"] = value; } }
        public string VertexColorViewModeMaterialName_ColorOnly { get { return this["VertexColorViewModeMaterialName_ColorOnly"].ToString(); } set { /* String properties are read-only */ } }
        public Material VertexColorViewModeMaterial_AlphaAsColor { get { return this[nameof(VertexColorViewModeMaterial_AlphaAsColor)].As<Material>(); } set { this["VertexColorViewModeMaterial_AlphaAsColor"] = value; } }
        public string VertexColorViewModeMaterialName_AlphaAsColor { get { return this["VertexColorViewModeMaterialName_AlphaAsColor"].ToString(); } set { /* String properties are read-only */ } }
        public Material VertexColorViewModeMaterial_RedOnly { get { return this[nameof(VertexColorViewModeMaterial_RedOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_RedOnly"] = value; } }
        public string VertexColorViewModeMaterialName_RedOnly { get { return this["VertexColorViewModeMaterialName_RedOnly"].ToString(); } set { /* String properties are read-only */ } }
        public Material VertexColorViewModeMaterial_GreenOnly { get { return this[nameof(VertexColorViewModeMaterial_GreenOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_GreenOnly"] = value; } }
        public string VertexColorViewModeMaterialName_GreenOnly { get { return this["VertexColorViewModeMaterialName_GreenOnly"].ToString(); } set { /* String properties are read-only */ } }
        public Material VertexColorViewModeMaterial_BlueOnly { get { return this[nameof(VertexColorViewModeMaterial_BlueOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_BlueOnly"] = value; } }
        public string VertexColorViewModeMaterialName_BlueOnly { get { return this["VertexColorViewModeMaterialName_BlueOnly"].ToString(); } set { /* String properties are read-only */ } }
        public SoftObjectPath DebugEditorMaterialName { get { return this[nameof(DebugEditorMaterialName)].As<SoftObjectPath>(); } set { this["DebugEditorMaterialName"] = value; } }
        public Material ConstraintLimitMaterial { get { return this[nameof(ConstraintLimitMaterial)].As<Material>(); } set { this["ConstraintLimitMaterial"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialX { get { return this[nameof(ConstraintLimitMaterialX)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialX"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialXAxis { get { return this[nameof(ConstraintLimitMaterialXAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialXAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialY { get { return this[nameof(ConstraintLimitMaterialY)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialY"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialYAxis { get { return this[nameof(ConstraintLimitMaterialYAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialYAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialZ { get { return this[nameof(ConstraintLimitMaterialZ)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialZ"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialZAxis { get { return this[nameof(ConstraintLimitMaterialZAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialZAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialPrismatic { get { return this[nameof(ConstraintLimitMaterialPrismatic)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialPrismatic"] = value; } }
        public Material InvalidLightmapSettingsMaterial { get { return this[nameof(InvalidLightmapSettingsMaterial)].As<Material>(); } set { this["InvalidLightmapSettingsMaterial"] = value; } }
        public SoftObjectPath InvalidLightmapSettingsMaterialName { get { return this[nameof(InvalidLightmapSettingsMaterialName)].As<SoftObjectPath>(); } set { this["InvalidLightmapSettingsMaterialName"] = value; } }
        public Material PreviewShadowsIndicatorMaterial { get { return this[nameof(PreviewShadowsIndicatorMaterial)].As<Material>(); } set { this["PreviewShadowsIndicatorMaterial"] = value; } }
        public SoftObjectPath PreviewShadowsIndicatorMaterialName { get { return this[nameof(PreviewShadowsIndicatorMaterialName)].As<SoftObjectPath>(); } set { this["PreviewShadowsIndicatorMaterialName"] = value; } }
        public Material ArrowMaterial { get { return this[nameof(ArrowMaterial)].As<Material>(); } set { this["ArrowMaterial"] = value; } }
        public MaterialInstanceDynamic ArrowMaterialYellow { get { return this[nameof(ArrowMaterialYellow)].As<MaterialInstanceDynamic>(); } set { this["ArrowMaterialYellow"] = value; } }
        public SoftObjectPath ArrowMaterialName { get { return this[nameof(ArrowMaterialName)].As<SoftObjectPath>(); } set { this["ArrowMaterialName"] = value; } }
        public LinearColor LightingOnlyBrightness { get { return this[nameof(LightingOnlyBrightness)].As<LinearColor>(); } set { this["LightingOnlyBrightness"] = value; } }
        public Array<LinearColor> ShaderComplexityColors { get { return new Array<LinearColor>(this["ShaderComplexityColors"]); } set { this["ShaderComplexityColors"] = value; } }
        public Array<LinearColor> QuadComplexityColors { get { return new Array<LinearColor>(this["QuadComplexityColors"]); } set { this["QuadComplexityColors"] = value; } }
        public Array<LinearColor> LightComplexityColors { get { return new Array<LinearColor>(this["LightComplexityColors"]); } set { this["LightComplexityColors"] = value; } }
        public Array<LinearColor> StationaryLightOverlapColors { get { return new Array<LinearColor>(this["StationaryLightOverlapColors"]); } set { this["StationaryLightOverlapColors"] = value; } }
        public Array<LinearColor> LODColorationColors { get { return new Array<LinearColor>(this["LODColorationColors"]); } set { this["LODColorationColors"] = value; } }
        public Array<LinearColor> HLODColorationColors { get { return new Array<LinearColor>(this["HLODColorationColors"]); } set { this["HLODColorationColors"] = value; } }
        public Array<LinearColor> StreamingAccuracyColors { get { return new Array<LinearColor>(this["StreamingAccuracyColors"]); } set { this["StreamingAccuracyColors"] = value; } }
        public float MaxPixelShaderAdditiveComplexityCount { get { return this["MaxPixelShaderAdditiveComplexityCount"].GetValue<float>(); } set { this["MaxPixelShaderAdditiveComplexityCount"].SetValue<float>(value); } }
        public float MaxES3PixelShaderAdditiveComplexityCount { get { return this["MaxES3PixelShaderAdditiveComplexityCount"].GetValue<float>(); } set { this["MaxES3PixelShaderAdditiveComplexityCount"].SetValue<float>(value); } }
        public float MinLightMapDensity { get { return this["MinLightMapDensity"].GetValue<float>(); } set { this["MinLightMapDensity"].SetValue<float>(value); } }
        public float IdealLightMapDensity { get { return this["IdealLightMapDensity"].GetValue<float>(); } set { this["IdealLightMapDensity"].SetValue<float>(value); } }
        public float MaxLightMapDensity { get { return this["MaxLightMapDensity"].GetValue<float>(); } set { this["MaxLightMapDensity"].SetValue<float>(value); } }
        public bool bRenderLightMapDensityGrayscale { get { return this["bRenderLightMapDensityGrayscale"].Flag; } set { this["bRenderLightMapDensityGrayscale"].Flag = value; } }
        public float RenderLightMapDensityGrayscaleScale { get { return this["RenderLightMapDensityGrayscaleScale"].GetValue<float>(); } set { this["RenderLightMapDensityGrayscaleScale"].SetValue<float>(value); } }
        public float RenderLightMapDensityColorScale { get { return this["RenderLightMapDensityColorScale"].GetValue<float>(); } set { this["RenderLightMapDensityColorScale"].SetValue<float>(value); } }
        public LinearColor LightMapDensityVertexMappedColor { get { return this[nameof(LightMapDensityVertexMappedColor)].As<LinearColor>(); } set { this["LightMapDensityVertexMappedColor"] = value; } }
        public LinearColor LightMapDensitySelectedColor { get { return this[nameof(LightMapDensitySelectedColor)].As<LinearColor>(); } set { this["LightMapDensitySelectedColor"] = value; } }
        public Array<StatColorMapping> StatColorMappings { get { return new Array<StatColorMapping>(this["StatColorMappings"]); } set { this["StatColorMappings"] = value; } }
        public PhysicalMaterial DefaultPhysMaterial { get { return this[nameof(DefaultPhysMaterial)].As<PhysicalMaterial>(); } set { this["DefaultPhysMaterial"] = value; } }
        public SoftObjectPath DefaultPhysMaterialName { get { return this[nameof(DefaultPhysMaterialName)].As<SoftObjectPath>(); } set { this["DefaultPhysMaterialName"] = value; } }
        public Array<GameNameRedirect> ActiveGameNameRedirects { get { return new Array<GameNameRedirect>(this["ActiveGameNameRedirects"]); } set { this["ActiveGameNameRedirects"] = value; } }
        public Array<ClassRedirect> ActiveClassRedirects { get { return new Array<ClassRedirect>(this["ActiveClassRedirects"]); } set { this["ActiveClassRedirects"] = value; } }
        public Array<PluginRedirect> ActivePluginRedirects { get { return new Array<PluginRedirect>(this["ActivePluginRedirects"]); } set { this["ActivePluginRedirects"] = value; } }
        public Array<StructRedirect> ActiveStructRedirects { get { return new Array<StructRedirect>(this["ActiveStructRedirects"]); } set { this["ActiveStructRedirects"] = value; } }
        public Texture2D PreIntegratedSkinBRDFTexture { get { return this[nameof(PreIntegratedSkinBRDFTexture)].As<Texture2D>(); } set { this["PreIntegratedSkinBRDFTexture"] = value; } }
        public SoftObjectPath PreIntegratedSkinBRDFTextureName { get { return this[nameof(PreIntegratedSkinBRDFTextureName)].As<SoftObjectPath>(); } set { this["PreIntegratedSkinBRDFTextureName"] = value; } }
        public Texture2D BlueNoiseTexture { get { return this[nameof(BlueNoiseTexture)].As<Texture2D>(); } set { this["BlueNoiseTexture"] = value; } }
        public SoftObjectPath BlueNoiseTextureName { get { return this[nameof(BlueNoiseTextureName)].As<SoftObjectPath>(); } set { this["BlueNoiseTextureName"] = value; } }
        public Texture2D MiniFontTexture { get { return this[nameof(MiniFontTexture)].As<Texture2D>(); } set { this["MiniFontTexture"] = value; } }
        public SoftObjectPath MiniFontTextureName { get { return this[nameof(MiniFontTextureName)].As<SoftObjectPath>(); } set { this["MiniFontTextureName"] = value; } }
        public Texture WeightMapPlaceholderTexture { get { return this[nameof(WeightMapPlaceholderTexture)].As<Texture>(); } set { this["WeightMapPlaceholderTexture"] = value; } }
        public SoftObjectPath WeightMapPlaceholderTextureName { get { return this[nameof(WeightMapPlaceholderTextureName)].As<SoftObjectPath>(); } set { this["WeightMapPlaceholderTextureName"] = value; } }
        public Texture2D LightMapDensityTexture { get { return this[nameof(LightMapDensityTexture)].As<Texture2D>(); } set { this["LightMapDensityTexture"] = value; } }
        public SoftObjectPath LightMapDensityTextureName { get { return this[nameof(LightMapDensityTextureName)].As<SoftObjectPath>(); } set { this["LightMapDensityTextureName"] = value; } }
        public GameViewportClient GameViewport { get { return this[nameof(GameViewport)].As<GameViewportClient>(); } set { this["GameViewport"] = value; } }
        public List<string> DeferredCommands { get { return this["DeferredCommands"].GetStringList(); } set { /* Arrays are read-only */ } }
        public float NearClipPlane { get { return this["NearClipPlane"].GetValue<float>(); } set { this["NearClipPlane"].SetValue<float>(value); } }
        public bool bSubtitlesEnabled { get { return this["bSubtitlesEnabled"].Flag; } set { this["bSubtitlesEnabled"].Flag = value; } }
        public bool bSubtitlesForcedOff { get { return this["bSubtitlesForcedOff"].Flag; } set { this["bSubtitlesForcedOff"].Flag = value; } }
        public int MaximumLoopIterationCount { get { return this["MaximumLoopIterationCount"].GetValue<int>(); } set { this["MaximumLoopIterationCount"].SetValue<int>(value); } }
        public bool bCanBlueprintsTickByDefault { get { return this["bCanBlueprintsTickByDefault"].Flag; } set { this["bCanBlueprintsTickByDefault"].Flag = value; } }
        public bool bOptimizeAnimBlueprintMemberVariableAccess { get { return this["bOptimizeAnimBlueprintMemberVariableAccess"].Flag; } set { this["bOptimizeAnimBlueprintMemberVariableAccess"].Flag = value; } }
        public bool bAllowMultiThreadedAnimationUpdate { get { return this["bAllowMultiThreadedAnimationUpdate"].Flag; } set { this["bAllowMultiThreadedAnimationUpdate"].Flag = value; } }
        public bool bEnableEditorPSysRealtimeLOD { get { return this["bEnableEditorPSysRealtimeLOD"].Flag; } set { this["bEnableEditorPSysRealtimeLOD"].Flag = value; } }
        public bool bSmoothFrameRate { get { return this["bSmoothFrameRate"].Flag; } set { this["bSmoothFrameRate"].Flag = value; } }
        public bool bUseFixedFrameRate { get { return this["bUseFixedFrameRate"].Flag; } set { this["bUseFixedFrameRate"].Flag = value; } }
        public float FixedFrameRate { get { return this["FixedFrameRate"].GetValue<float>(); } set { this["FixedFrameRate"].SetValue<float>(value); } }
        public FloatRange SmoothedFrameRateRange { get { return this[nameof(SmoothedFrameRateRange)].As<FloatRange>(); } set { this["SmoothedFrameRateRange"] = value; } }
        public EngineCustomTimeStep CustomTimeStep { get { return this[nameof(CustomTimeStep)].As<EngineCustomTimeStep>(); } set { this["CustomTimeStep"] = value; } }
        public SoftClassPath CustomTimeStepClassName { get { return this[nameof(CustomTimeStepClassName)].As<SoftClassPath>(); } set { this["CustomTimeStepClassName"] = value; } }
        public TimecodeProvider TimecodeProvider { get { return this[nameof(TimecodeProvider)].As<TimecodeProvider>(); } set { this["TimecodeProvider"] = value; } }
        public SoftClassPath TimecodeProviderClassName { get { return this[nameof(TimecodeProviderClassName)].As<SoftClassPath>(); } set { this["TimecodeProviderClassName"] = value; } }
        public bool bGenerateDefaultTimecode { get { return this["bGenerateDefaultTimecode"].Flag; } set { this["bGenerateDefaultTimecode"].Flag = value; } }
        public FrameRate GenerateDefaultTimecodeFrameRate { get { return this[nameof(GenerateDefaultTimecodeFrameRate)].As<FrameRate>(); } set { this["GenerateDefaultTimecodeFrameRate"] = value; } }
        public float GenerateDefaultTimecodeFrameDelay { get { return this["GenerateDefaultTimecodeFrameDelay"].GetValue<float>(); } set { this["GenerateDefaultTimecodeFrameDelay"].SetValue<float>(value); } }
        public bool bCheckForMultiplePawnsSpawnedInAFrame { get { return this["bCheckForMultiplePawnsSpawnedInAFrame"].Flag; } set { this["bCheckForMultiplePawnsSpawnedInAFrame"].Flag = value; } }
        public int NumPawnsAllowedToBeSpawnedInAFrame { get { return this["NumPawnsAllowedToBeSpawnedInAFrame"].GetValue<int>(); } set { this["NumPawnsAllowedToBeSpawnedInAFrame"].SetValue<int>(value); } }
        public bool bShouldGenerateLowQualityLightmaps { get { return this["bShouldGenerateLowQualityLightmaps"].Flag; } set { this["bShouldGenerateLowQualityLightmaps"].Flag = value; } }
        public Color C_WorldBox { get { return this[nameof(C_WorldBox)].As<Color>(); } set { this["C_WorldBox"] = value; } }
        public Color C_BrushWire { get { return this[nameof(C_BrushWire)].As<Color>(); } set { this["C_BrushWire"] = value; } }
        public Color C_AddWire { get { return this[nameof(C_AddWire)].As<Color>(); } set { this["C_AddWire"] = value; } }
        public Color C_SubtractWire { get { return this[nameof(C_SubtractWire)].As<Color>(); } set { this["C_SubtractWire"] = value; } }
        public Color C_SemiSolidWire { get { return this[nameof(C_SemiSolidWire)].As<Color>(); } set { this["C_SemiSolidWire"] = value; } }
        public Color C_NonSolidWire { get { return this[nameof(C_NonSolidWire)].As<Color>(); } set { this["C_NonSolidWire"] = value; } }
        public Color C_WireBackground { get { return this[nameof(C_WireBackground)].As<Color>(); } set { this["C_WireBackground"] = value; } }
        public Color C_ScaleBoxHi { get { return this[nameof(C_ScaleBoxHi)].As<Color>(); } set { this["C_ScaleBoxHi"] = value; } }
        public Color C_VolumeCollision { get { return this[nameof(C_VolumeCollision)].As<Color>(); } set { this["C_VolumeCollision"] = value; } }
        public Color C_BSPCollision { get { return this[nameof(C_BSPCollision)].As<Color>(); } set { this["C_BSPCollision"] = value; } }
        public Color C_OrthoBackground { get { return this[nameof(C_OrthoBackground)].As<Color>(); } set { this["C_OrthoBackground"] = value; } }
        public Color C_Volume { get { return this[nameof(C_Volume)].As<Color>(); } set { this["C_Volume"] = value; } }
        public Color C_BrushShape { get { return this[nameof(C_BrushShape)].As<Color>(); } set { this["C_BrushShape"] = value; } }
        public float StreamingDistanceFactor { get { return this["StreamingDistanceFactor"].GetValue<float>(); } set { this["StreamingDistanceFactor"].SetValue<float>(value); } }
        public DirectoryPath GameScreenshotSaveDirectory { get { return this[nameof(GameScreenshotSaveDirectory)].As<DirectoryPath>(); } set { this["GameScreenshotSaveDirectory"] = value; } }
        public ETransitionType TransitionType { get { return (ETransitionType)this["TransitionType"].GetValue<int>(); } set { this["TransitionType"].SetValue<int>((int)value); } }
        public string TransitionDescription { get { return this["TransitionDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string TransitionGameMode { get { return this["TransitionGameMode"].ToString(); } set { /* String properties are read-only */ } }
        public bool bAllowMatureLanguage { get { return this["bAllowMatureLanguage"].Flag; } set { this["bAllowMatureLanguage"].Flag = value; } }
        public float CameraRotationThreshold { get { return this["CameraRotationThreshold"].GetValue<float>(); } set { this["CameraRotationThreshold"].SetValue<float>(value); } }
        public float CameraTranslationThreshold { get { return this["CameraTranslationThreshold"].GetValue<float>(); } set { this["CameraTranslationThreshold"].SetValue<float>(value); } }
        public float PrimitiveProbablyVisibleTime { get { return this["PrimitiveProbablyVisibleTime"].GetValue<float>(); } set { this["PrimitiveProbablyVisibleTime"].SetValue<float>(value); } }
        public float MaxOcclusionPixelsFraction { get { return this["MaxOcclusionPixelsFraction"].GetValue<float>(); } set { this["MaxOcclusionPixelsFraction"].SetValue<float>(value); } }
        public bool bPauseOnLossOfFocus { get { return this["bPauseOnLossOfFocus"].Flag; } set { this["bPauseOnLossOfFocus"].Flag = value; } }
        public int MaxParticleResize { get { return this["MaxParticleResize"].GetValue<int>(); } set { this["MaxParticleResize"].SetValue<int>(value); } }
        public int MaxParticleResizeWarn { get { return this["MaxParticleResizeWarn"].GetValue<int>(); } set { this["MaxParticleResizeWarn"].SetValue<int>(value); } }
        public Array<DropNoteInfo> PendingDroppedNotes { get { return new Array<DropNoteInfo>(this["PendingDroppedNotes"]); } set { this["PendingDroppedNotes"] = value; } }
        public float NetClientTicksPerSecond { get { return this["NetClientTicksPerSecond"].GetValue<float>(); } set { this["NetClientTicksPerSecond"].SetValue<float>(value); } }
        public float DisplayGamma { get { return this["DisplayGamma"].GetValue<float>(); } set { this["DisplayGamma"].SetValue<float>(value); } }
        public float MinDesiredFrameRate { get { return this["MinDesiredFrameRate"].GetValue<float>(); } set { this["MinDesiredFrameRate"].SetValue<float>(value); } }
        public LinearColor DefaultSelectedMaterialColor { get { return this[nameof(DefaultSelectedMaterialColor)].As<LinearColor>(); } set { this["DefaultSelectedMaterialColor"] = value; } }
        public LinearColor SelectedMaterialColor { get { return this[nameof(SelectedMaterialColor)].As<LinearColor>(); } set { this["SelectedMaterialColor"] = value; } }
        public LinearColor SelectionOutlineColor { get { return this[nameof(SelectionOutlineColor)].As<LinearColor>(); } set { this["SelectionOutlineColor"] = value; } }
        public LinearColor SubduedSelectionOutlineColor { get { return this[nameof(SubduedSelectionOutlineColor)].As<LinearColor>(); } set { this["SubduedSelectionOutlineColor"] = value; } }
        public LinearColor SelectedMaterialColorOverride { get { return this[nameof(SelectedMaterialColorOverride)].As<LinearColor>(); } set { this["SelectedMaterialColorOverride"] = value; } }
        public bool bIsOverridingSelectedColor { get { return this["bIsOverridingSelectedColor"].Flag; } set { this["bIsOverridingSelectedColor"].Flag = value; } }
        public bool bEnableOnScreenDebugMessages { get { return this["bEnableOnScreenDebugMessages"].Flag; } set { this["bEnableOnScreenDebugMessages"].Flag = value; } }
        public bool bEnableOnScreenDebugMessagesDisplay { get { return this["bEnableOnScreenDebugMessagesDisplay"].Flag; } set { this["bEnableOnScreenDebugMessagesDisplay"].Flag = value; } }
        public bool bSuppressMapWarnings { get { return this["bSuppressMapWarnings"].Flag; } set { this["bSuppressMapWarnings"].Flag = value; } }
        public bool bDisableAILogging { get { return this["bDisableAILogging"].Flag; } set { this["bDisableAILogging"].Flag = value; } }
        public uint bEnableVisualLogRecordingOnStart { get { return this["bEnableVisualLogRecordingOnStart"].GetValue<uint>(); } set { this["bEnableVisualLogRecordingOnStart"].SetValue<uint>(value); } }
        public int ScreenSaverInhibitorSemaphore { get { return this["ScreenSaverInhibitorSemaphore"].GetValue<int>(); } set { this["ScreenSaverInhibitorSemaphore"].SetValue<int>(value); } }
        public bool bLockReadOnlyLevels { get { return this["bLockReadOnlyLevels"].Flag; } set { this["bLockReadOnlyLevels"].Flag = value; } }
        public string ParticleEventManagerClassPath { get { return this["ParticleEventManagerClassPath"].ToString(); } set { /* String properties are read-only */ } }
        public float SelectionHighlightIntensity { get { return this["SelectionHighlightIntensity"].GetValue<float>(); } set { this["SelectionHighlightIntensity"].SetValue<float>(value); } }
        public float BSPSelectionHighlightIntensity { get { return this["BSPSelectionHighlightIntensity"].GetValue<float>(); } set { this["BSPSelectionHighlightIntensity"].SetValue<float>(value); } }
        public float SelectionHighlightIntensityBillboards { get { return this["SelectionHighlightIntensityBillboards"].GetValue<float>(); } set { this["SelectionHighlightIntensityBillboards"].SetValue<float>(value); } }
        public Array<NetDriverDefinition> NetDriverDefinitions { get { return new Array<NetDriverDefinition>(this["NetDriverDefinitions"]); } set { this["NetDriverDefinitions"] = value; } }
        public List<string> ServerActors { get { return this["ServerActors"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> RuntimeServerActors { get { return this["RuntimeServerActors"].GetStringList(); } set { /* Arrays are read-only */ } }
        public float NetErrorLogInterval { get { return this["NetErrorLogInterval"].GetValue<float>(); } set { this["NetErrorLogInterval"].SetValue<float>(value); } }
        public bool bStartedLoadMapMovie { get { return this["bStartedLoadMapMovie"].Flag; } set { this["bStartedLoadMapMovie"].Flag = value; } }
        public int NextWorldContextHandle { get { return this["NextWorldContextHandle"].GetValue<int>(); } set { this["NextWorldContextHandle"].SetValue<int>(value); } }
    }
    public class GameUserSettings : UEObject
    {
        public GameUserSettings(nint addr) : base(addr) { }
        public GameUserSettings() : base(0) { }
        public bool bUseVSync { get { return this["bUseVSync"].Flag; } set { this["bUseVSync"].Flag = value; } }
        public bool bUseDynamicResolution { get { return this["bUseDynamicResolution"].Flag; } set { this["bUseDynamicResolution"].Flag = value; } }
        public uint ResolutionSizeX { get { return this["ResolutionSizeX"].GetValue<uint>(); } set { this["ResolutionSizeX"].SetValue<uint>(value); } }
        public uint ResolutionSizeY { get { return this["ResolutionSizeY"].GetValue<uint>(); } set { this["ResolutionSizeY"].SetValue<uint>(value); } }
        public uint LastUserConfirmedResolutionSizeX { get { return this["LastUserConfirmedResolutionSizeX"].GetValue<uint>(); } set { this["LastUserConfirmedResolutionSizeX"].SetValue<uint>(value); } }
        public uint LastUserConfirmedResolutionSizeY { get { return this["LastUserConfirmedResolutionSizeY"].GetValue<uint>(); } set { this["LastUserConfirmedResolutionSizeY"].SetValue<uint>(value); } }
        public int WindowPosX { get { return this["WindowPosX"].GetValue<int>(); } set { this["WindowPosX"].SetValue<int>(value); } }
        public int WindowPosY { get { return this["WindowPosY"].GetValue<int>(); } set { this["WindowPosY"].SetValue<int>(value); } }
        public int FullscreenMode { get { return this["FullscreenMode"].GetValue<int>(); } set { this["FullscreenMode"].SetValue<int>(value); } }
        public int LastConfirmedFullscreenMode { get { return this["LastConfirmedFullscreenMode"].GetValue<int>(); } set { this["LastConfirmedFullscreenMode"].SetValue<int>(value); } }
        public int PreferredFullscreenMode { get { return this["PreferredFullscreenMode"].GetValue<int>(); } set { this["PreferredFullscreenMode"].SetValue<int>(value); } }
        public uint Version { get { return this["Version"].GetValue<uint>(); } set { this["Version"].SetValue<uint>(value); } }
        public int AudioQualityLevel { get { return this["AudioQualityLevel"].GetValue<int>(); } set { this["AudioQualityLevel"].SetValue<int>(value); } }
        public int LastConfirmedAudioQualityLevel { get { return this["LastConfirmedAudioQualityLevel"].GetValue<int>(); } set { this["LastConfirmedAudioQualityLevel"].SetValue<int>(value); } }
        public float FrameRateLimit { get { return this["FrameRateLimit"].GetValue<float>(); } set { this["FrameRateLimit"].SetValue<float>(value); } }
        public int DesiredScreenWidth { get { return this["DesiredScreenWidth"].GetValue<int>(); } set { this["DesiredScreenWidth"].SetValue<int>(value); } }
        public bool bUseDesiredScreenHeight { get { return this["bUseDesiredScreenHeight"].Flag; } set { this["bUseDesiredScreenHeight"].Flag = value; } }
        public int DesiredScreenHeight { get { return this["DesiredScreenHeight"].GetValue<int>(); } set { this["DesiredScreenHeight"].SetValue<int>(value); } }
        public int LastUserConfirmedDesiredScreenWidth { get { return this["LastUserConfirmedDesiredScreenWidth"].GetValue<int>(); } set { this["LastUserConfirmedDesiredScreenWidth"].SetValue<int>(value); } }
        public int LastUserConfirmedDesiredScreenHeight { get { return this["LastUserConfirmedDesiredScreenHeight"].GetValue<int>(); } set { this["LastUserConfirmedDesiredScreenHeight"].SetValue<int>(value); } }
        public float LastRecommendedScreenWidth { get { return this["LastRecommendedScreenWidth"].GetValue<float>(); } set { this["LastRecommendedScreenWidth"].SetValue<float>(value); } }
        public float LastRecommendedScreenHeight { get { return this["LastRecommendedScreenHeight"].GetValue<float>(); } set { this["LastRecommendedScreenHeight"].SetValue<float>(value); } }
        public float LastCPUBenchmarkResult { get { return this["LastCPUBenchmarkResult"].GetValue<float>(); } set { this["LastCPUBenchmarkResult"].SetValue<float>(value); } }
        public float LastGPUBenchmarkResult { get { return this["LastGPUBenchmarkResult"].GetValue<float>(); } set { this["LastGPUBenchmarkResult"].SetValue<float>(value); } }
        public List<float> LastCPUBenchmarkSteps { get { return this["LastCPUBenchmarkSteps"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> LastGPUBenchmarkSteps { get { return this["LastGPUBenchmarkSteps"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float LastGPUBenchmarkMultiplier { get { return this["LastGPUBenchmarkMultiplier"].GetValue<float>(); } set { this["LastGPUBenchmarkMultiplier"].SetValue<float>(value); } }
        public bool bUseHDRDisplayOutput { get { return this["bUseHDRDisplayOutput"].Flag; } set { this["bUseHDRDisplayOutput"].Flag = value; } }
        public int HDRDisplayOutputNits { get { return this["HDRDisplayOutputNits"].GetValue<int>(); } set { this["HDRDisplayOutputNits"].SetValue<int>(value); } }
        public UEObject OnGameUserSettingsUINeedsUpdate { get { return this["OnGameUserSettingsUINeedsUpdate"]; } set { this["OnGameUserSettingsUINeedsUpdate"] = value; } }
        public void ValidateSettings() { Invoke("ValidateSettings"); }
        public void _GameUserSettings(UEObject bUseVSync, UEObject bUseDynamicResolution, UEObject ResolutionSizeX, UEObject ResolutionSizeY, UEObject LastUserConfirmedResolutionSizeX, UEObject LastUserConfirmedResolutionSizeY, UEObject WindowPosX, UEObject WindowPosY, UEObject FullscreenMode, UEObject LastConfirmedFullscreenMode, UEObject PreferredFullscreenMode, UEObject Version, UEObject AudioQualityLevel, UEObject LastConfirmedAudioQualityLevel, UEObject FrameRateLimit, UEObject DesiredScreenWidth, UEObject bUseDesiredScreenHeight, UEObject DesiredScreenHeight, UEObject LastUserConfirmedDesiredScreenWidth, UEObject LastUserConfirmedDesiredScreenHeight, UEObject LastRecommendedScreenWidth, UEObject LastRecommendedScreenHeight, UEObject LastCPUBenchmarkResult, UEObject LastGPUBenchmarkResult, UEObject LastCPUBenchmarkSteps, UEObject LastGPUBenchmarkSteps, UEObject LastGPUBenchmarkMultiplier, UEObject bUseHDRDisplayOutput, UEObject HDRDisplayOutputNits, UEObject OnGameUserSettingsUINeedsUpdate) { Invoke("GameUserSettings", bUseVSync, bUseDynamicResolution, ResolutionSizeX, ResolutionSizeY, LastUserConfirmedResolutionSizeX, LastUserConfirmedResolutionSizeY, WindowPosX, WindowPosY, FullscreenMode, LastConfirmedFullscreenMode, PreferredFullscreenMode, Version, AudioQualityLevel, LastConfirmedAudioQualityLevel, FrameRateLimit, DesiredScreenWidth, bUseDesiredScreenHeight, DesiredScreenHeight, LastUserConfirmedDesiredScreenWidth, LastUserConfirmedDesiredScreenHeight, LastRecommendedScreenWidth, LastRecommendedScreenHeight, LastCPUBenchmarkResult, LastGPUBenchmarkResult, LastCPUBenchmarkSteps, LastGPUBenchmarkSteps, LastGPUBenchmarkMultiplier, bUseHDRDisplayOutput, HDRDisplayOutputNits, OnGameUserSettingsUINeedsUpdate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SphereComponent : ShapeComponent
    {
        public SphereComponent(nint addr) : base(addr) { }
        public SphereComponent() : base(0) { }
        public float SphereRadius { get { return this["SphereRadius"].GetValue<float>(); } set { this["SphereRadius"].SetValue<float>(value); } }
        public void SetSphereRadius(UEObject InSphereRadius, UEObject bUpdateOverlaps) { Invoke("SetSphereRadius", InSphereRadius, bUpdateOverlaps); }
        public void _SphereComponent(UEObject SphereRadius) { Invoke("SphereComponent", SphereRadius); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AISystemBase : UEObject
    {
        public AISystemBase(nint addr) : base(addr) { }
        public AISystemBase() : base(0) { }
        public SoftClassPath AISystemClassName { get { return this[nameof(AISystemClassName)].As<SoftClassPath>(); } set { this["AISystemClassName"] = value; } }
        public string AISystemModuleName { get { return this["AISystemModuleName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bInstantiateAISystemOnClient { get { return this["bInstantiateAISystemOnClient"].Flag; } set { this["bInstantiateAISystemOnClient"].Flag = value; } }
    }
    public class SoundEffectSubmixPreset : SoundEffectPreset
    {
        public SoundEffectSubmixPreset(nint addr) : base(addr) { }
        public SoundEffectSubmixPreset() : base(0) { }
    }
    public class SoundEffectSourcePreset : SoundEffectPreset
    {
        public SoundEffectSourcePreset(nint addr) : base(addr) { }
        public SoundEffectSourcePreset() : base(0) { }
    }
    public class SoundEffectPreset : UEObject
    {
        public SoundEffectPreset(nint addr) : base(addr) { }
        public SoundEffectPreset() : base(0) { }
    }
    public class CharacterMovementComponent : PawnMovementComponent
    {
        public CharacterMovementComponent(nint addr) : base(addr) { }
        public CharacterMovementComponent() : base(0) { }
        public Character CharacterOwner { get { return this[nameof(CharacterOwner)].As<Character>(); } set { this["CharacterOwner"] = value; } }
        public float GravityScale { get { return this["GravityScale"].GetValue<float>(); } set { this["GravityScale"].SetValue<float>(value); } }
        public float MaxStepHeight { get { return this["MaxStepHeight"].GetValue<float>(); } set { this["MaxStepHeight"].SetValue<float>(value); } }
        public float JumpZVelocity { get { return this["JumpZVelocity"].GetValue<float>(); } set { this["JumpZVelocity"].SetValue<float>(value); } }
        public float JumpOffJumpZFactor { get { return this["JumpOffJumpZFactor"].GetValue<float>(); } set { this["JumpOffJumpZFactor"].SetValue<float>(value); } }
        public float WalkableFloorAngle { get { return this["WalkableFloorAngle"].GetValue<float>(); } set { this["WalkableFloorAngle"].SetValue<float>(value); } }
        public float WalkableFloorZ { get { return this["WalkableFloorZ"].GetValue<float>(); } set { this["WalkableFloorZ"].SetValue<float>(value); } }
        public byte MovementMode { get { return this["MovementMode"].GetValue<byte>(); } set { this["MovementMode"].SetValue<byte>(value); } }
        public byte CustomMovementMode { get { return this["CustomMovementMode"].GetValue<byte>(); } set { this["CustomMovementMode"].SetValue<byte>(value); } }
        public ENetworkSmoothingMode NetworkSmoothingMode { get { return (ENetworkSmoothingMode)this["NetworkSmoothingMode"].GetValue<int>(); } set { this["NetworkSmoothingMode"].SetValue<int>((int)value); } }
        public float GroundFriction { get { return this["GroundFriction"].GetValue<float>(); } set { this["GroundFriction"].SetValue<float>(value); } }
        public float MaxWalkSpeed { get { return this["MaxWalkSpeed"].GetValue<float>(); } set { this["MaxWalkSpeed"].SetValue<float>(value); } }
        public float MaxWalkSpeedCrouched { get { return this["MaxWalkSpeedCrouched"].GetValue<float>(); } set { this["MaxWalkSpeedCrouched"].SetValue<float>(value); } }
        public float MaxSwimSpeed { get { return this["MaxSwimSpeed"].GetValue<float>(); } set { this["MaxSwimSpeed"].SetValue<float>(value); } }
        public float MaxFlySpeed { get { return this["MaxFlySpeed"].GetValue<float>(); } set { this["MaxFlySpeed"].SetValue<float>(value); } }
        public float MaxCustomMovementSpeed { get { return this["MaxCustomMovementSpeed"].GetValue<float>(); } set { this["MaxCustomMovementSpeed"].SetValue<float>(value); } }
        public float MaxAcceleration { get { return this["MaxAcceleration"].GetValue<float>(); } set { this["MaxAcceleration"].SetValue<float>(value); } }
        public float MinAnalogWalkSpeed { get { return this["MinAnalogWalkSpeed"].GetValue<float>(); } set { this["MinAnalogWalkSpeed"].SetValue<float>(value); } }
        public float BrakingFrictionFactor { get { return this["BrakingFrictionFactor"].GetValue<float>(); } set { this["BrakingFrictionFactor"].SetValue<float>(value); } }
        public float BrakingFriction { get { return this["BrakingFriction"].GetValue<float>(); } set { this["BrakingFriction"].SetValue<float>(value); } }
        public float BrakingSubStepTime { get { return this["BrakingSubStepTime"].GetValue<float>(); } set { this["BrakingSubStepTime"].SetValue<float>(value); } }
        public float BrakingDecelerationWalking { get { return this["BrakingDecelerationWalking"].GetValue<float>(); } set { this["BrakingDecelerationWalking"].SetValue<float>(value); } }
        public float BrakingDecelerationFalling { get { return this["BrakingDecelerationFalling"].GetValue<float>(); } set { this["BrakingDecelerationFalling"].SetValue<float>(value); } }
        public float BrakingDecelerationSwimming { get { return this["BrakingDecelerationSwimming"].GetValue<float>(); } set { this["BrakingDecelerationSwimming"].SetValue<float>(value); } }
        public float BrakingDecelerationFlying { get { return this["BrakingDecelerationFlying"].GetValue<float>(); } set { this["BrakingDecelerationFlying"].SetValue<float>(value); } }
        public float AirControl { get { return this["AirControl"].GetValue<float>(); } set { this["AirControl"].SetValue<float>(value); } }
        public float AirControlBoostMultiplier { get { return this["AirControlBoostMultiplier"].GetValue<float>(); } set { this["AirControlBoostMultiplier"].SetValue<float>(value); } }
        public float AirControlBoostVelocityThreshold { get { return this["AirControlBoostVelocityThreshold"].GetValue<float>(); } set { this["AirControlBoostVelocityThreshold"].SetValue<float>(value); } }
        public float FallingLateralFriction { get { return this["FallingLateralFriction"].GetValue<float>(); } set { this["FallingLateralFriction"].SetValue<float>(value); } }
        public float CrouchedHalfHeight { get { return this["CrouchedHalfHeight"].GetValue<float>(); } set { this["CrouchedHalfHeight"].SetValue<float>(value); } }
        public float Buoyancy { get { return this["Buoyancy"].GetValue<float>(); } set { this["Buoyancy"].SetValue<float>(value); } }
        public float PerchRadiusThreshold { get { return this["PerchRadiusThreshold"].GetValue<float>(); } set { this["PerchRadiusThreshold"].SetValue<float>(value); } }
        public float PerchAdditionalHeight { get { return this["PerchAdditionalHeight"].GetValue<float>(); } set { this["PerchAdditionalHeight"].SetValue<float>(value); } }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public bool bUseSeparateBrakingFriction { get { return this["bUseSeparateBrakingFriction"].Flag; } set { this["bUseSeparateBrakingFriction"].Flag = value; } }
        public bool bApplyGravityWhileJumping { get { return this["bApplyGravityWhileJumping"].Flag; } set { this["bApplyGravityWhileJumping"].Flag = value; } }
        public bool bUseControllerDesiredRotation { get { return this["bUseControllerDesiredRotation"].Flag; } set { this["bUseControllerDesiredRotation"].Flag = value; } }
        public bool bOrientRotationToMovement { get { return this["bOrientRotationToMovement"].Flag; } set { this["bOrientRotationToMovement"].Flag = value; } }
        public bool bSweepWhileNavWalking { get { return this["bSweepWhileNavWalking"].Flag; } set { this["bSweepWhileNavWalking"].Flag = value; } }
        public bool bMovementInProgress { get { return this["bMovementInProgress"].Flag; } set { this["bMovementInProgress"].Flag = value; } }
        public bool bEnableScopedMovementUpdates { get { return this["bEnableScopedMovementUpdates"].Flag; } set { this["bEnableScopedMovementUpdates"].Flag = value; } }
        public bool bEnableServerDualMoveScopedMovementUpdates { get { return this["bEnableServerDualMoveScopedMovementUpdates"].Flag; } set { this["bEnableServerDualMoveScopedMovementUpdates"].Flag = value; } }
        public bool bForceMaxAccel { get { return this["bForceMaxAccel"].Flag; } set { this["bForceMaxAccel"].Flag = value; } }
        public bool bRunPhysicsWithNoController { get { return this["bRunPhysicsWithNoController"].Flag; } set { this["bRunPhysicsWithNoController"].Flag = value; } }
        public bool bForceNextFloorCheck { get { return this["bForceNextFloorCheck"].Flag; } set { this["bForceNextFloorCheck"].Flag = value; } }
        public bool bShrinkProxyCapsule { get { return this["bShrinkProxyCapsule"].Flag; } set { this["bShrinkProxyCapsule"].Flag = value; } }
        public bool bCanWalkOffLedges { get { return this["bCanWalkOffLedges"].Flag; } set { this["bCanWalkOffLedges"].Flag = value; } }
        public bool bCanWalkOffLedgesWhenCrouching { get { return this["bCanWalkOffLedgesWhenCrouching"].Flag; } set { this["bCanWalkOffLedgesWhenCrouching"].Flag = value; } }
        public bool bNetworkSkipProxyPredictionOnNetUpdate { get { return this["bNetworkSkipProxyPredictionOnNetUpdate"].Flag; } set { this["bNetworkSkipProxyPredictionOnNetUpdate"].Flag = value; } }
        public bool bNetworkAlwaysReplicateTransformUpdateTimestamp { get { return this["bNetworkAlwaysReplicateTransformUpdateTimestamp"].Flag; } set { this["bNetworkAlwaysReplicateTransformUpdateTimestamp"].Flag = value; } }
        public bool bDeferUpdateMoveComponent { get { return this["bDeferUpdateMoveComponent"].Flag; } set { this["bDeferUpdateMoveComponent"].Flag = value; } }
        public bool bEnablePhysicsInteraction { get { return this["bEnablePhysicsInteraction"].Flag; } set { this["bEnablePhysicsInteraction"].Flag = value; } }
        public bool bTouchForceScaledToMass { get { return this["bTouchForceScaledToMass"].Flag; } set { this["bTouchForceScaledToMass"].Flag = value; } }
        public bool bPushForceScaledToMass { get { return this["bPushForceScaledToMass"].Flag; } set { this["bPushForceScaledToMass"].Flag = value; } }
        public bool bPushForceUsingZOffset { get { return this["bPushForceUsingZOffset"].Flag; } set { this["bPushForceUsingZOffset"].Flag = value; } }
        public bool bScalePushForceToVelocity { get { return this["bScalePushForceToVelocity"].Flag; } set { this["bScalePushForceToVelocity"].Flag = value; } }
        public SceneComponent DeferredUpdatedMoveComponent { get { return this[nameof(DeferredUpdatedMoveComponent)].As<SceneComponent>(); } set { this["DeferredUpdatedMoveComponent"] = value; } }
        public float MaxOutOfWaterStepHeight { get { return this["MaxOutOfWaterStepHeight"].GetValue<float>(); } set { this["MaxOutOfWaterStepHeight"].SetValue<float>(value); } }
        public float OutofWaterZ { get { return this["OutofWaterZ"].GetValue<float>(); } set { this["OutofWaterZ"].SetValue<float>(value); } }
        public float Mass { get { return this["Mass"].GetValue<float>(); } set { this["Mass"].SetValue<float>(value); } }
        public float StandingDownwardForceScale { get { return this["StandingDownwardForceScale"].GetValue<float>(); } set { this["StandingDownwardForceScale"].SetValue<float>(value); } }
        public float InitialPushForceFactor { get { return this["InitialPushForceFactor"].GetValue<float>(); } set { this["InitialPushForceFactor"].SetValue<float>(value); } }
        public float PushForceFactor { get { return this["PushForceFactor"].GetValue<float>(); } set { this["PushForceFactor"].SetValue<float>(value); } }
        public float PushForcePointZOffsetFactor { get { return this["PushForcePointZOffsetFactor"].GetValue<float>(); } set { this["PushForcePointZOffsetFactor"].SetValue<float>(value); } }
        public float TouchForceFactor { get { return this["TouchForceFactor"].GetValue<float>(); } set { this["TouchForceFactor"].SetValue<float>(value); } }
        public float MinTouchForce { get { return this["MinTouchForce"].GetValue<float>(); } set { this["MinTouchForce"].SetValue<float>(value); } }
        public float MaxTouchForce { get { return this["MaxTouchForce"].GetValue<float>(); } set { this["MaxTouchForce"].SetValue<float>(value); } }
        public float RepulsionForce { get { return this["RepulsionForce"].GetValue<float>(); } set { this["RepulsionForce"].SetValue<float>(value); } }
        public Vector Acceleration { get { return this[nameof(Acceleration)].As<Vector>(); } set { this["Acceleration"] = value; } }
        public Quat LastUpdateRotation { get { return this[nameof(LastUpdateRotation)].As<Quat>(); } set { this["LastUpdateRotation"] = value; } }
        public Vector LastUpdateLocation { get { return this[nameof(LastUpdateLocation)].As<Vector>(); } set { this["LastUpdateLocation"] = value; } }
        public Vector LastUpdateVelocity { get { return this[nameof(LastUpdateVelocity)].As<Vector>(); } set { this["LastUpdateVelocity"] = value; } }
        public float ServerLastTransformUpdateTimeStamp { get { return this["ServerLastTransformUpdateTimeStamp"].GetValue<float>(); } set { this["ServerLastTransformUpdateTimeStamp"].SetValue<float>(value); } }
        public float ServerLastClientGoodMoveAckTime { get { return this["ServerLastClientGoodMoveAckTime"].GetValue<float>(); } set { this["ServerLastClientGoodMoveAckTime"].SetValue<float>(value); } }
        public float ServerLastClientAdjustmentTime { get { return this["ServerLastClientAdjustmentTime"].GetValue<float>(); } set { this["ServerLastClientAdjustmentTime"].SetValue<float>(value); } }
        public Vector PendingImpulseToApply { get { return this[nameof(PendingImpulseToApply)].As<Vector>(); } set { this["PendingImpulseToApply"] = value; } }
        public Vector PendingForceToApply { get { return this[nameof(PendingForceToApply)].As<Vector>(); } set { this["PendingForceToApply"] = value; } }
        public float AnalogInputModifier { get { return this["AnalogInputModifier"].GetValue<float>(); } set { this["AnalogInputModifier"].SetValue<float>(value); } }
        public float MaxSimulationTimeStep { get { return this["MaxSimulationTimeStep"].GetValue<float>(); } set { this["MaxSimulationTimeStep"].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this["MaxSimulationIterations"].GetValue<int>(); } set { this["MaxSimulationIterations"].SetValue<int>(value); } }
        public int MaxJumpApexAttemptsPerSimulation { get { return this["MaxJumpApexAttemptsPerSimulation"].GetValue<int>(); } set { this["MaxJumpApexAttemptsPerSimulation"].SetValue<int>(value); } }
        public float MaxDepenetrationWithGeometry { get { return this["MaxDepenetrationWithGeometry"].GetValue<float>(); } set { this["MaxDepenetrationWithGeometry"].SetValue<float>(value); } }
        public float MaxDepenetrationWithGeometryAsProxy { get { return this["MaxDepenetrationWithGeometryAsProxy"].GetValue<float>(); } set { this["MaxDepenetrationWithGeometryAsProxy"].SetValue<float>(value); } }
        public float MaxDepenetrationWithPawn { get { return this["MaxDepenetrationWithPawn"].GetValue<float>(); } set { this["MaxDepenetrationWithPawn"].SetValue<float>(value); } }
        public float MaxDepenetrationWithPawnAsProxy { get { return this["MaxDepenetrationWithPawnAsProxy"].GetValue<float>(); } set { this["MaxDepenetrationWithPawnAsProxy"].SetValue<float>(value); } }
        public float NetworkSimulatedSmoothLocationTime { get { return this["NetworkSimulatedSmoothLocationTime"].GetValue<float>(); } set { this["NetworkSimulatedSmoothLocationTime"].SetValue<float>(value); } }
        public float NetworkSimulatedSmoothRotationTime { get { return this["NetworkSimulatedSmoothRotationTime"].GetValue<float>(); } set { this["NetworkSimulatedSmoothRotationTime"].SetValue<float>(value); } }
        public float ListenServerNetworkSimulatedSmoothLocationTime { get { return this["ListenServerNetworkSimulatedSmoothLocationTime"].GetValue<float>(); } set { this["ListenServerNetworkSimulatedSmoothLocationTime"].SetValue<float>(value); } }
        public float ListenServerNetworkSimulatedSmoothRotationTime { get { return this["ListenServerNetworkSimulatedSmoothRotationTime"].GetValue<float>(); } set { this["ListenServerNetworkSimulatedSmoothRotationTime"].SetValue<float>(value); } }
        public float NetProxyShrinkRadius { get { return this["NetProxyShrinkRadius"].GetValue<float>(); } set { this["NetProxyShrinkRadius"].SetValue<float>(value); } }
        public float NetProxyShrinkHalfHeight { get { return this["NetProxyShrinkHalfHeight"].GetValue<float>(); } set { this["NetProxyShrinkHalfHeight"].SetValue<float>(value); } }
        public float NetworkMaxSmoothUpdateDistance { get { return this["NetworkMaxSmoothUpdateDistance"].GetValue<float>(); } set { this["NetworkMaxSmoothUpdateDistance"].SetValue<float>(value); } }
        public float NetworkNoSmoothUpdateDistance { get { return this["NetworkNoSmoothUpdateDistance"].GetValue<float>(); } set { this["NetworkNoSmoothUpdateDistance"].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAckGoodMoves { get { return this["NetworkMinTimeBetweenClientAckGoodMoves"].GetValue<float>(); } set { this["NetworkMinTimeBetweenClientAckGoodMoves"].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAdjustments { get { return this["NetworkMinTimeBetweenClientAdjustments"].GetValue<float>(); } set { this["NetworkMinTimeBetweenClientAdjustments"].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection { get { return this["NetworkMinTimeBetweenClientAdjustmentsLargeCorrection"].GetValue<float>(); } set { this["NetworkMinTimeBetweenClientAdjustmentsLargeCorrection"].SetValue<float>(value); } }
        public float NetworkLargeClientCorrectionDistance { get { return this["NetworkLargeClientCorrectionDistance"].GetValue<float>(); } set { this["NetworkLargeClientCorrectionDistance"].SetValue<float>(value); } }
        public float LedgeCheckThreshold { get { return this["LedgeCheckThreshold"].GetValue<float>(); } set { this["LedgeCheckThreshold"].SetValue<float>(value); } }
        public float JumpOutOfWaterPitch { get { return this["JumpOutOfWaterPitch"].GetValue<float>(); } set { this["JumpOutOfWaterPitch"].SetValue<float>(value); } }
        public FindFloorResult CurrentFloor { get { return this[nameof(CurrentFloor)].As<FindFloorResult>(); } set { this["CurrentFloor"] = value; } }
        public byte DefaultLandMovementMode { get { return this["DefaultLandMovementMode"].GetValue<byte>(); } set { this["DefaultLandMovementMode"].SetValue<byte>(value); } }
        public byte DefaultWaterMovementMode { get { return this["DefaultWaterMovementMode"].GetValue<byte>(); } set { this["DefaultWaterMovementMode"].SetValue<byte>(value); } }
        public bool bConstraintToNavigation { get { return this["bConstraintToNavigation"].Flag; } set { this["bConstraintToNavigation"].Flag = value; } }
        public byte GroundMovementMode { get { return this["GroundMovementMode"].GetValue<byte>(); } set { this["GroundMovementMode"].SetValue<byte>(value); } }
        public bool bMaintainHorizontalGroundVelocity { get { return this["bMaintainHorizontalGroundVelocity"].Flag; } set { this["bMaintainHorizontalGroundVelocity"].Flag = value; } }
        public bool bImpartBaseVelocityX { get { return this["bImpartBaseVelocityX"].Flag; } set { this["bImpartBaseVelocityX"].Flag = value; } }
        public bool bImpartBaseVelocityY { get { return this["bImpartBaseVelocityY"].Flag; } set { this["bImpartBaseVelocityY"].Flag = value; } }
        public bool bImpartBaseVelocityZ { get { return this["bImpartBaseVelocityZ"].Flag; } set { this["bImpartBaseVelocityZ"].Flag = value; } }
        public bool bImpartBaseAngularVelocity { get { return this["bImpartBaseAngularVelocity"].Flag; } set { this["bImpartBaseAngularVelocity"].Flag = value; } }
        public bool bJustTeleported { get { return this["bJustTeleported"].Flag; } set { this["bJustTeleported"].Flag = value; } }
        public bool bNetworkUpdateReceived { get { return this["bNetworkUpdateReceived"].Flag; } set { this["bNetworkUpdateReceived"].Flag = value; } }
        public bool bNetworkMovementModeChanged { get { return this["bNetworkMovementModeChanged"].Flag; } set { this["bNetworkMovementModeChanged"].Flag = value; } }
        public bool bIgnoreClientMovementErrorChecksAndCorrection { get { return this["bIgnoreClientMovementErrorChecksAndCorrection"].Flag; } set { this["bIgnoreClientMovementErrorChecksAndCorrection"].Flag = value; } }
        public bool bServerAcceptClientAuthoritativePosition { get { return this["bServerAcceptClientAuthoritativePosition"].Flag; } set { this["bServerAcceptClientAuthoritativePosition"].Flag = value; } }
        public bool bNotifyApex { get { return this["bNotifyApex"].Flag; } set { this["bNotifyApex"].Flag = value; } }
        public bool bCheatFlying { get { return this["bCheatFlying"].Flag; } set { this["bCheatFlying"].Flag = value; } }
        public bool bWantsToCrouch { get { return this["bWantsToCrouch"].Flag; } set { this["bWantsToCrouch"].Flag = value; } }
        public bool bCrouchMaintainsBaseLocation { get { return this["bCrouchMaintainsBaseLocation"].Flag; } set { this["bCrouchMaintainsBaseLocation"].Flag = value; } }
        public bool bIgnoreBaseRotation { get { return this["bIgnoreBaseRotation"].Flag; } set { this["bIgnoreBaseRotation"].Flag = value; } }
        public bool bFastAttachedMove { get { return this["bFastAttachedMove"].Flag; } set { this["bFastAttachedMove"].Flag = value; } }
        public bool bAlwaysCheckFloor { get { return this["bAlwaysCheckFloor"].Flag; } set { this["bAlwaysCheckFloor"].Flag = value; } }
        public bool bUseFlatBaseForFloorChecks { get { return this["bUseFlatBaseForFloorChecks"].Flag; } set { this["bUseFlatBaseForFloorChecks"].Flag = value; } }
        public bool bPerformingJumpOff { get { return this["bPerformingJumpOff"].Flag; } set { this["bPerformingJumpOff"].Flag = value; } }
        public bool bWantsToLeaveNavWalking { get { return this["bWantsToLeaveNavWalking"].Flag; } set { this["bWantsToLeaveNavWalking"].Flag = value; } }
        public bool bUseRVOAvoidance { get { return this["bUseRVOAvoidance"].Flag; } set { this["bUseRVOAvoidance"].Flag = value; } }
        public bool bRequestedMoveUseAcceleration { get { return this["bRequestedMoveUseAcceleration"].Flag; } set { this["bRequestedMoveUseAcceleration"].Flag = value; } }
        public bool bWasSimulatingRootMotion { get { return this["bWasSimulatingRootMotion"].Flag; } set { this["bWasSimulatingRootMotion"].Flag = value; } }
        public bool bAllowPhysicsRotationDuringAnimRootMotion { get { return this["bAllowPhysicsRotationDuringAnimRootMotion"].Flag; } set { this["bAllowPhysicsRotationDuringAnimRootMotion"].Flag = value; } }
        public bool bHasRequestedVelocity { get { return this["bHasRequestedVelocity"].Flag; } set { this["bHasRequestedVelocity"].Flag = value; } }
        public bool bRequestedMoveWithMaxSpeed { get { return this["bRequestedMoveWithMaxSpeed"].Flag; } set { this["bRequestedMoveWithMaxSpeed"].Flag = value; } }
        public bool bWasAvoidanceUpdated { get { return this["bWasAvoidanceUpdated"].Flag; } set { this["bWasAvoidanceUpdated"].Flag = value; } }
        public bool bProjectNavMeshWalking { get { return this["bProjectNavMeshWalking"].Flag; } set { this["bProjectNavMeshWalking"].Flag = value; } }
        public bool bProjectNavMeshOnBothWorldChannels { get { return this["bProjectNavMeshOnBothWorldChannels"].Flag; } set { this["bProjectNavMeshOnBothWorldChannels"].Flag = value; } }
        public float AvoidanceConsiderationRadius { get { return this["AvoidanceConsiderationRadius"].GetValue<float>(); } set { this["AvoidanceConsiderationRadius"].SetValue<float>(value); } }
        public Vector RequestedVelocity { get { return this[nameof(RequestedVelocity)].As<Vector>(); } set { this["RequestedVelocity"] = value; } }
        public int AvoidanceUID { get { return this["AvoidanceUID"].GetValue<int>(); } set { this["AvoidanceUID"].SetValue<int>(value); } }
        public NavAvoidanceMask AvoidanceGroup { get { return this[nameof(AvoidanceGroup)].As<NavAvoidanceMask>(); } set { this["AvoidanceGroup"] = value; } }
        public NavAvoidanceMask GroupsToAvoid { get { return this[nameof(GroupsToAvoid)].As<NavAvoidanceMask>(); } set { this["GroupsToAvoid"] = value; } }
        public NavAvoidanceMask GroupsToIgnore { get { return this[nameof(GroupsToIgnore)].As<NavAvoidanceMask>(); } set { this["GroupsToIgnore"] = value; } }
        public float AvoidanceWeight { get { return this["AvoidanceWeight"].GetValue<float>(); } set { this["AvoidanceWeight"].SetValue<float>(value); } }
        public Vector PendingLaunchVelocity { get { return this[nameof(PendingLaunchVelocity)].As<Vector>(); } set { this["PendingLaunchVelocity"] = value; } }
        public float NavMeshProjectionInterval { get { return this["NavMeshProjectionInterval"].GetValue<float>(); } set { this["NavMeshProjectionInterval"].SetValue<float>(value); } }
        public float NavMeshProjectionTimer { get { return this["NavMeshProjectionTimer"].GetValue<float>(); } set { this["NavMeshProjectionTimer"].SetValue<float>(value); } }
        public float NavMeshProjectionInterpSpeed { get { return this["NavMeshProjectionInterpSpeed"].GetValue<float>(); } set { this["NavMeshProjectionInterpSpeed"].SetValue<float>(value); } }
        public float NavMeshProjectionHeightScaleUp { get { return this["NavMeshProjectionHeightScaleUp"].GetValue<float>(); } set { this["NavMeshProjectionHeightScaleUp"].SetValue<float>(value); } }
        public float NavMeshProjectionHeightScaleDown { get { return this["NavMeshProjectionHeightScaleDown"].GetValue<float>(); } set { this["NavMeshProjectionHeightScaleDown"].SetValue<float>(value); } }
        public float NavWalkingFloorDistTolerance { get { return this["NavWalkingFloorDistTolerance"].GetValue<float>(); } set { this["NavWalkingFloorDistTolerance"].SetValue<float>(value); } }
        public CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction { get { return this[nameof(PostPhysicsTickFunction)].As<CharacterMovementComponentPostPhysicsTickFunction>(); } set { this["PostPhysicsTickFunction"] = value; } }
        public float MinTimeBetweenTimeStampResets { get { return this["MinTimeBetweenTimeStampResets"].GetValue<float>(); } set { this["MinTimeBetweenTimeStampResets"].SetValue<float>(value); } }
        public RootMotionSourceGroup CurrentRootMotion { get { return this[nameof(CurrentRootMotion)].As<RootMotionSourceGroup>(); } set { this["CurrentRootMotion"] = value; } }
        public RootMotionSourceGroup ServerCorrectionRootMotion { get { return this[nameof(ServerCorrectionRootMotion)].As<RootMotionSourceGroup>(); } set { this["ServerCorrectionRootMotion"] = value; } }
        public RootMotionMovementParams RootMotionParams { get { return this[nameof(RootMotionParams)].As<RootMotionMovementParams>(); } set { this["RootMotionParams"] = value; } }
        public Vector AnimRootMotionVelocity { get { return this[nameof(AnimRootMotionVelocity)].As<Vector>(); } set { this["AnimRootMotionVelocity"] = value; } }
        public void SetWalkableFloorZ(UEObject InWalkableFloorZ) { Invoke("SetWalkableFloorZ", InWalkableFloorZ); }
        public void _CharacterMovementComponent(UEObject CharacterOwner, UEObject GravityScale, UEObject MaxStepHeight, UEObject JumpZVelocity, UEObject JumpOffJumpZFactor, UEObject WalkableFloorAngle, UEObject WalkableFloorZ, UEObject MovementMode, UEObject CustomMovementMode, UEObject NetworkSmoothingMode, UEObject GroundFriction, UEObject MaxWalkSpeed, UEObject MaxWalkSpeedCrouched, UEObject MaxSwimSpeed, UEObject MaxFlySpeed, UEObject MaxCustomMovementSpeed, UEObject MaxAcceleration, UEObject MinAnalogWalkSpeed, UEObject BrakingFrictionFactor, UEObject BrakingFriction, UEObject BrakingSubStepTime, UEObject BrakingDecelerationWalking, UEObject BrakingDecelerationFalling, UEObject BrakingDecelerationSwimming, UEObject BrakingDecelerationFlying, UEObject AirControl, UEObject AirControlBoostMultiplier, UEObject AirControlBoostVelocityThreshold, UEObject FallingLateralFriction, UEObject CrouchedHalfHeight, UEObject Buoyancy, UEObject PerchRadiusThreshold, UEObject PerchAdditionalHeight, UEObject RotationRate, UEObject bUseSeparateBrakingFriction, UEObject bApplyGravityWhileJumping, UEObject bUseControllerDesiredRotation, UEObject bOrientRotationToMovement, UEObject bSweepWhileNavWalking, UEObject bMovementInProgress, UEObject bEnableScopedMovementUpdates, UEObject bEnableServerDualMoveScopedMovementUpdates, UEObject bForceMaxAccel, UEObject bRunPhysicsWithNoController, UEObject bForceNextFloorCheck, UEObject bShrinkProxyCapsule, UEObject bCanWalkOffLedges, UEObject bCanWalkOffLedgesWhenCrouching, UEObject bNetworkSkipProxyPredictionOnNetUpdate, UEObject bNetworkAlwaysReplicateTransformUpdateTimestamp, UEObject bDeferUpdateMoveComponent, UEObject bEnablePhysicsInteraction, UEObject bTouchForceScaledToMass, UEObject bPushForceScaledToMass, UEObject bPushForceUsingZOffset, UEObject bScalePushForceToVelocity, UEObject DeferredUpdatedMoveComponent, UEObject MaxOutOfWaterStepHeight, UEObject OutofWaterZ, UEObject Mass, UEObject StandingDownwardForceScale, UEObject InitialPushForceFactor, UEObject PushForceFactor, UEObject PushForcePointZOffsetFactor, UEObject TouchForceFactor, UEObject MinTouchForce, UEObject MaxTouchForce, UEObject RepulsionForce, UEObject Acceleration, UEObject LastUpdateRotation, UEObject LastUpdateLocation, UEObject LastUpdateVelocity, UEObject ServerLastTransformUpdateTimeStamp, UEObject ServerLastClientGoodMoveAckTime, UEObject ServerLastClientAdjustmentTime, UEObject PendingImpulseToApply, UEObject PendingForceToApply, UEObject AnalogInputModifier, UEObject MaxSimulationTimeStep, UEObject MaxSimulationIterations, UEObject MaxJumpApexAttemptsPerSimulation, UEObject MaxDepenetrationWithGeometry, UEObject MaxDepenetrationWithGeometryAsProxy, UEObject MaxDepenetrationWithPawn, UEObject MaxDepenetrationWithPawnAsProxy, UEObject NetworkSimulatedSmoothLocationTime, UEObject NetworkSimulatedSmoothRotationTime, UEObject ListenServerNetworkSimulatedSmoothLocationTime, UEObject ListenServerNetworkSimulatedSmoothRotationTime, UEObject NetProxyShrinkRadius, UEObject NetProxyShrinkHalfHeight, UEObject NetworkMaxSmoothUpdateDistance, UEObject NetworkNoSmoothUpdateDistance, UEObject NetworkMinTimeBetweenClientAckGoodMoves, UEObject NetworkMinTimeBetweenClientAdjustments, UEObject NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, UEObject NetworkLargeClientCorrectionDistance, UEObject LedgeCheckThreshold, UEObject JumpOutOfWaterPitch, UEObject CurrentFloor, UEObject DefaultLandMovementMode, UEObject DefaultWaterMovementMode, UEObject bConstraintToNavigation, UEObject GroundMovementMode, UEObject bMaintainHorizontalGroundVelocity, UEObject bImpartBaseVelocityX, UEObject bImpartBaseVelocityY, UEObject bImpartBaseVelocityZ, UEObject bImpartBaseAngularVelocity, UEObject bJustTeleported, UEObject bNetworkUpdateReceived, UEObject bNetworkMovementModeChanged, UEObject bIgnoreClientMovementErrorChecksAndCorrection, UEObject bServerAcceptClientAuthoritativePosition, UEObject bNotifyApex, UEObject bCheatFlying, UEObject bWantsToCrouch, UEObject bCrouchMaintainsBaseLocation, UEObject bIgnoreBaseRotation, UEObject bFastAttachedMove, UEObject bAlwaysCheckFloor, UEObject bUseFlatBaseForFloorChecks, UEObject bPerformingJumpOff, UEObject bWantsToLeaveNavWalking, UEObject bUseRVOAvoidance, UEObject bRequestedMoveUseAcceleration, UEObject bWasSimulatingRootMotion, UEObject bAllowPhysicsRotationDuringAnimRootMotion, UEObject bHasRequestedVelocity, UEObject bRequestedMoveWithMaxSpeed, UEObject bWasAvoidanceUpdated, UEObject bProjectNavMeshWalking, UEObject bProjectNavMeshOnBothWorldChannels, UEObject AvoidanceConsiderationRadius, UEObject RequestedVelocity, UEObject AvoidanceUID, UEObject AvoidanceGroup, UEObject GroupsToAvoid, UEObject GroupsToIgnore, UEObject AvoidanceWeight, UEObject PendingLaunchVelocity, UEObject NavMeshProjectionInterval, UEObject NavMeshProjectionTimer, UEObject NavMeshProjectionInterpSpeed, UEObject NavMeshProjectionHeightScaleUp, UEObject NavMeshProjectionHeightScaleDown, UEObject NavWalkingFloorDistTolerance, UEObject PostPhysicsTickFunction, UEObject MinTimeBetweenTimeStampResets, UEObject CurrentRootMotion, UEObject ServerCorrectionRootMotion, UEObject RootMotionParams, UEObject AnimRootMotionVelocity) { Invoke("CharacterMovementComponent", CharacterOwner, GravityScale, MaxStepHeight, JumpZVelocity, JumpOffJumpZFactor, WalkableFloorAngle, WalkableFloorZ, MovementMode, CustomMovementMode, NetworkSmoothingMode, GroundFriction, MaxWalkSpeed, MaxWalkSpeedCrouched, MaxSwimSpeed, MaxFlySpeed, MaxCustomMovementSpeed, MaxAcceleration, MinAnalogWalkSpeed, BrakingFrictionFactor, BrakingFriction, BrakingSubStepTime, BrakingDecelerationWalking, BrakingDecelerationFalling, BrakingDecelerationSwimming, BrakingDecelerationFlying, AirControl, AirControlBoostMultiplier, AirControlBoostVelocityThreshold, FallingLateralFriction, CrouchedHalfHeight, Buoyancy, PerchRadiusThreshold, PerchAdditionalHeight, RotationRate, bUseSeparateBrakingFriction, bApplyGravityWhileJumping, bUseControllerDesiredRotation, bOrientRotationToMovement, bSweepWhileNavWalking, bMovementInProgress, bEnableScopedMovementUpdates, bEnableServerDualMoveScopedMovementUpdates, bForceMaxAccel, bRunPhysicsWithNoController, bForceNextFloorCheck, bShrinkProxyCapsule, bCanWalkOffLedges, bCanWalkOffLedgesWhenCrouching, bNetworkSkipProxyPredictionOnNetUpdate, bNetworkAlwaysReplicateTransformUpdateTimestamp, bDeferUpdateMoveComponent, bEnablePhysicsInteraction, bTouchForceScaledToMass, bPushForceScaledToMass, bPushForceUsingZOffset, bScalePushForceToVelocity, DeferredUpdatedMoveComponent, MaxOutOfWaterStepHeight, OutofWaterZ, Mass, StandingDownwardForceScale, InitialPushForceFactor, PushForceFactor, PushForcePointZOffsetFactor, TouchForceFactor, MinTouchForce, MaxTouchForce, RepulsionForce, Acceleration, LastUpdateRotation, LastUpdateLocation, LastUpdateVelocity, ServerLastTransformUpdateTimeStamp, ServerLastClientGoodMoveAckTime, ServerLastClientAdjustmentTime, PendingImpulseToApply, PendingForceToApply, AnalogInputModifier, MaxSimulationTimeStep, MaxSimulationIterations, MaxJumpApexAttemptsPerSimulation, MaxDepenetrationWithGeometry, MaxDepenetrationWithGeometryAsProxy, MaxDepenetrationWithPawn, MaxDepenetrationWithPawnAsProxy, NetworkSimulatedSmoothLocationTime, NetworkSimulatedSmoothRotationTime, ListenServerNetworkSimulatedSmoothLocationTime, ListenServerNetworkSimulatedSmoothRotationTime, NetProxyShrinkRadius, NetProxyShrinkHalfHeight, NetworkMaxSmoothUpdateDistance, NetworkNoSmoothUpdateDistance, NetworkMinTimeBetweenClientAckGoodMoves, NetworkMinTimeBetweenClientAdjustments, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, NetworkLargeClientCorrectionDistance, LedgeCheckThreshold, JumpOutOfWaterPitch, CurrentFloor, DefaultLandMovementMode, DefaultWaterMovementMode, bConstraintToNavigation, GroundMovementMode, bMaintainHorizontalGroundVelocity, bImpartBaseVelocityX, bImpartBaseVelocityY, bImpartBaseVelocityZ, bImpartBaseAngularVelocity, bJustTeleported, bNetworkUpdateReceived, bNetworkMovementModeChanged, bIgnoreClientMovementErrorChecksAndCorrection, bServerAcceptClientAuthoritativePosition, bNotifyApex, bCheatFlying, bWantsToCrouch, bCrouchMaintainsBaseLocation, bIgnoreBaseRotation, bFastAttachedMove, bAlwaysCheckFloor, bUseFlatBaseForFloorChecks, bPerformingJumpOff, bWantsToLeaveNavWalking, bUseRVOAvoidance, bRequestedMoveUseAcceleration, bWasSimulatingRootMotion, bAllowPhysicsRotationDuringAnimRootMotion, bHasRequestedVelocity, bRequestedMoveWithMaxSpeed, bWasAvoidanceUpdated, bProjectNavMeshWalking, bProjectNavMeshOnBothWorldChannels, AvoidanceConsiderationRadius, RequestedVelocity, AvoidanceUID, AvoidanceGroup, GroupsToAvoid, GroupsToIgnore, AvoidanceWeight, PendingLaunchVelocity, NavMeshProjectionInterval, NavMeshProjectionTimer, NavMeshProjectionInterpSpeed, NavMeshProjectionHeightScaleUp, NavMeshProjectionHeightScaleDown, NavWalkingFloorDistTolerance, PostPhysicsTickFunction, MinTimeBetweenTimeStampResets, CurrentRootMotion, ServerCorrectionRootMotion, RootMotionParams, AnimRootMotionVelocity); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PawnMovementComponent : NavMovementComponent
    {
        public PawnMovementComponent(nint addr) : base(addr) { }
        public PawnMovementComponent() : base(0) { }
        public Pawn PawnOwner { get { return this[nameof(PawnOwner)].As<Pawn>(); } set { this["PawnOwner"] = value; } }
        public UEObject K2_GetInputVector() { return InvokeUEObject("K2_GetInputVector"); }
        public void _PawnMovementComponent(UEObject PawnOwner) { Invoke("PawnMovementComponent", PawnOwner); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class NavMovementComponent : MovementComponent
    {
        public NavMovementComponent(nint addr) : base(addr) { }
        public NavMovementComponent() : base(0) { }
        public NavAgentProperties NavAgentProps { get { return this[nameof(NavAgentProps)].As<NavAgentProperties>(); } set { this["NavAgentProps"] = value; } }
        public float FixedPathBrakingDistance { get { return this["FixedPathBrakingDistance"].GetValue<float>(); } set { this["FixedPathBrakingDistance"].SetValue<float>(value); } }
        public bool bUpdateNavAgentWithOwnersCollision { get { return this["bUpdateNavAgentWithOwnersCollision"].Flag; } set { this["bUpdateNavAgentWithOwnersCollision"].Flag = value; } }
        public bool bUseAccelerationForPaths { get { return this["bUseAccelerationForPaths"].Flag; } set { this["bUseAccelerationForPaths"].Flag = value; } }
        public bool bUseFixedBrakingDistanceForPaths { get { return this["bUseFixedBrakingDistanceForPaths"].Flag; } set { this["bUseFixedBrakingDistanceForPaths"].Flag = value; } }
        public MovementProperties MovementState { get { return this[nameof(MovementState)].As<MovementProperties>(); } set { this["MovementState"] = value; } }
        public UEObject PathFollowingComp { get { return this[nameof(PathFollowingComp)]; } set { this["PathFollowingComp"] = value; } }
        public void StopMovementKeepPathing() { Invoke("StopMovementKeepPathing"); }
        public void _NavMovementComponent(UEObject NavAgentProps, UEObject FixedPathBrakingDistance, UEObject bUpdateNavAgentWithOwnersCollision, UEObject bUseAccelerationForPaths, UEObject bUseFixedBrakingDistanceForPaths, UEObject MovementState, UEObject PathFollowingComp) { Invoke("NavMovementComponent", NavAgentProps, FixedPathBrakingDistance, bUpdateNavAgentWithOwnersCollision, bUseAccelerationForPaths, bUseFixedBrakingDistanceForPaths, MovementState, PathFollowingComp); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MovementComponent : ActorComponent
    {
        public MovementComponent(nint addr) : base(addr) { }
        public MovementComponent() : base(0) { }
        public SceneComponent UpdatedComponent { get { return this[nameof(UpdatedComponent)].As<SceneComponent>(); } set { this["UpdatedComponent"] = value; } }
        public PrimitiveComponent UpdatedPrimitive { get { return this[nameof(UpdatedPrimitive)].As<PrimitiveComponent>(); } set { this["UpdatedPrimitive"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public Vector PlaneConstraintNormal { get { return this[nameof(PlaneConstraintNormal)].As<Vector>(); } set { this["PlaneConstraintNormal"] = value; } }
        public Vector PlaneConstraintOrigin { get { return this[nameof(PlaneConstraintOrigin)].As<Vector>(); } set { this["PlaneConstraintOrigin"] = value; } }
        public bool bUpdateOnlyIfRendered { get { return this["bUpdateOnlyIfRendered"].Flag; } set { this["bUpdateOnlyIfRendered"].Flag = value; } }
        public bool bAutoUpdateTickRegistration { get { return this["bAutoUpdateTickRegistration"].Flag; } set { this["bAutoUpdateTickRegistration"].Flag = value; } }
        public bool bTickBeforeOwner { get { return this["bTickBeforeOwner"].Flag; } set { this["bTickBeforeOwner"].Flag = value; } }
        public bool bAutoRegisterUpdatedComponent { get { return this["bAutoRegisterUpdatedComponent"].Flag; } set { this["bAutoRegisterUpdatedComponent"].Flag = value; } }
        public bool bConstrainToPlane { get { return this["bConstrainToPlane"].Flag; } set { this["bConstrainToPlane"].Flag = value; } }
        public bool bSnapToPlaneAtStart { get { return this["bSnapToPlaneAtStart"].Flag; } set { this["bSnapToPlaneAtStart"].Flag = value; } }
        public bool bAutoRegisterPhysicsVolumeUpdates { get { return this["bAutoRegisterPhysicsVolumeUpdates"].Flag; } set { this["bAutoRegisterPhysicsVolumeUpdates"].Flag = value; } }
        public bool bComponentShouldUpdatePhysicsVolume { get { return this["bComponentShouldUpdatePhysicsVolume"].Flag; } set { this["bComponentShouldUpdatePhysicsVolume"].Flag = value; } }
        public EPlaneConstraintAxisSetting PlaneConstraintAxisSetting { get { return (EPlaneConstraintAxisSetting)this["PlaneConstraintAxisSetting"].GetValue<int>(); } set { this["PlaneConstraintAxisSetting"].SetValue<int>((int)value); } }
        public void StopMovementImmediately() { Invoke("StopMovementImmediately"); }
        public void _MovementComponent(UEObject UpdatedComponent, UEObject UpdatedPrimitive, UEObject Velocity, UEObject PlaneConstraintNormal, UEObject PlaneConstraintOrigin, UEObject bUpdateOnlyIfRendered, UEObject bAutoUpdateTickRegistration, UEObject bTickBeforeOwner, UEObject bAutoRegisterUpdatedComponent, UEObject bConstrainToPlane, UEObject bSnapToPlaneAtStart, UEObject bAutoRegisterPhysicsVolumeUpdates, UEObject bComponentShouldUpdatePhysicsVolume, UEObject PlaneConstraintAxisSetting) { Invoke("MovementComponent", UpdatedComponent, UpdatedPrimitive, Velocity, PlaneConstraintNormal, PlaneConstraintOrigin, bUpdateOnlyIfRendered, bAutoUpdateTickRegistration, bTickBeforeOwner, bAutoRegisterUpdatedComponent, bConstrainToPlane, bSnapToPlaneAtStart, bAutoRegisterPhysicsVolumeUpdates, bComponentShouldUpdatePhysicsVolume, PlaneConstraintAxisSetting); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ApplicationLifecycleComponent : ActorComponent
    {
        public ApplicationLifecycleComponent(nint addr) : base(addr) { }
        public ApplicationLifecycleComponent() : base(0) { }
        public UEObject ApplicationWillDeactivateDelegate { get { return this["ApplicationWillDeactivateDelegate"]; } set { this["ApplicationWillDeactivateDelegate"] = value; } }
        public UEObject ApplicationHasReactivatedDelegate { get { return this["ApplicationHasReactivatedDelegate"]; } set { this["ApplicationHasReactivatedDelegate"] = value; } }
        public UEObject ApplicationWillEnterBackgroundDelegate { get { return this["ApplicationWillEnterBackgroundDelegate"]; } set { this["ApplicationWillEnterBackgroundDelegate"] = value; } }
        public UEObject ApplicationHasEnteredForegroundDelegate { get { return this["ApplicationHasEnteredForegroundDelegate"]; } set { this["ApplicationHasEnteredForegroundDelegate"] = value; } }
        public UEObject ApplicationWillTerminateDelegate { get { return this["ApplicationWillTerminateDelegate"]; } set { this["ApplicationWillTerminateDelegate"] = value; } }
        public UEObject ApplicationShouldUnloadResourcesDelegate { get { return this["ApplicationShouldUnloadResourcesDelegate"]; } set { this["ApplicationShouldUnloadResourcesDelegate"] = value; } }
        public UEObject ApplicationReceivedStartupArgumentsDelegate { get { return this["ApplicationReceivedStartupArgumentsDelegate"]; } set { this["ApplicationReceivedStartupArgumentsDelegate"] = value; } }
        public UEObject OnTemperatureChangeDelegate { get { return this["OnTemperatureChangeDelegate"]; } set { this["OnTemperatureChangeDelegate"] = value; } }
        public UEObject OnLowPowerModeDelegate { get { return this["OnLowPowerModeDelegate"]; } set { this["OnLowPowerModeDelegate"] = value; } }
    }
    public class PlayerController : Controller
    {
        public PlayerController(nint addr) : base(addr) { }
        public PlayerController() : base(0) { }
        public Player Player { get { return this[nameof(Player)].As<Player>(); } set { this["Player"] = value; } }
        public Pawn AcknowledgedPawn { get { return this[nameof(AcknowledgedPawn)].As<Pawn>(); } set { this["AcknowledgedPawn"] = value; } }
        public InterpTrackInstDirector ControllingDirTrackInst { get { return this[nameof(ControllingDirTrackInst)].As<InterpTrackInstDirector>(); } set { this["ControllingDirTrackInst"] = value; } }
        public HUD MyHUD { get { return this[nameof(MyHUD)].As<HUD>(); } set { this["MyHUD"] = value; } }
        public PlayerCameraManager PlayerCameraManager { get { return this[nameof(PlayerCameraManager)].As<PlayerCameraManager>(); } set { this["PlayerCameraManager"] = value; } }
        public UEObject PlayerCameraManagerClass { get { return this["PlayerCameraManagerClass"]; } set { this["PlayerCameraManagerClass"] = value; } }
        public bool bAutoManageActiveCameraTarget { get { return this["bAutoManageActiveCameraTarget"].Flag; } set { this["bAutoManageActiveCameraTarget"].Flag = value; } }
        public Rotator TargetViewRotation { get { return this[nameof(TargetViewRotation)].As<Rotator>(); } set { this["TargetViewRotation"] = value; } }
        public float SmoothTargetViewRotationSpeed { get { return this["SmoothTargetViewRotationSpeed"].GetValue<float>(); } set { this["SmoothTargetViewRotationSpeed"].SetValue<float>(value); } }
        public Array<Actor> HiddenActors { get { return new Array<Actor>(this["HiddenActors"]); } set { this["HiddenActors"] = value; } }
        public Array<UEObject> HiddenPrimitiveComponents { get { return new Array<UEObject>(this["HiddenPrimitiveComponents"]); } set { this["HiddenPrimitiveComponents"] = value; } }
        public float LastSpectatorStateSynchTime { get { return this["LastSpectatorStateSynchTime"].GetValue<float>(); } set { this["LastSpectatorStateSynchTime"].SetValue<float>(value); } }
        public Vector LastSpectatorSyncLocation { get { return this[nameof(LastSpectatorSyncLocation)].As<Vector>(); } set { this["LastSpectatorSyncLocation"] = value; } }
        public Rotator LastSpectatorSyncRotation { get { return this[nameof(LastSpectatorSyncRotation)].As<Rotator>(); } set { this["LastSpectatorSyncRotation"] = value; } }
        public int ClientCap { get { return this["ClientCap"].GetValue<int>(); } set { this["ClientCap"].SetValue<int>(value); } }
        public CheatManager CheatManager { get { return this[nameof(CheatManager)].As<CheatManager>(); } set { this["CheatManager"] = value; } }
        public UEObject CheatClass { get { return this["CheatClass"]; } set { this["CheatClass"] = value; } }
        public PlayerInput PlayerInput { get { return this[nameof(PlayerInput)].As<PlayerInput>(); } set { this["PlayerInput"] = value; } }
        public Array<ActiveForceFeedbackEffect> ActiveForceFeedbackEffects { get { return new Array<ActiveForceFeedbackEffect>(this["ActiveForceFeedbackEffects"]); } set { this["ActiveForceFeedbackEffects"] = value; } }
        public bool bPlayerIsWaiting { get { return this["bPlayerIsWaiting"].Flag; } set { this["bPlayerIsWaiting"].Flag = value; } }
        public byte NetPlayerIndex { get { return this["NetPlayerIndex"].GetValue<byte>(); } set { this["NetPlayerIndex"].SetValue<byte>(value); } }
        public NetConnection PendingSwapConnection { get { return this[nameof(PendingSwapConnection)].As<NetConnection>(); } set { this["PendingSwapConnection"] = value; } }
        public NetConnection NetConnection { get { return this[nameof(NetConnection)].As<NetConnection>(); } set { this["NetConnection"] = value; } }
        public float InputYawScale { get { return this["InputYawScale"].GetValue<float>(); } set { this["InputYawScale"].SetValue<float>(value); } }
        public float InputPitchScale { get { return this["InputPitchScale"].GetValue<float>(); } set { this["InputPitchScale"].SetValue<float>(value); } }
        public float InputRollScale { get { return this["InputRollScale"].GetValue<float>(); } set { this["InputRollScale"].SetValue<float>(value); } }
        public bool bShowMouseCursor { get { return this["bShowMouseCursor"].Flag; } set { this["bShowMouseCursor"].Flag = value; } }
        public bool bEnableClickEvents { get { return this["bEnableClickEvents"].Flag; } set { this["bEnableClickEvents"].Flag = value; } }
        public bool bEnableTouchEvents { get { return this["bEnableTouchEvents"].Flag; } set { this["bEnableTouchEvents"].Flag = value; } }
        public bool bEnableMouseOverEvents { get { return this["bEnableMouseOverEvents"].Flag; } set { this["bEnableMouseOverEvents"].Flag = value; } }
        public bool bEnableTouchOverEvents { get { return this["bEnableTouchOverEvents"].Flag; } set { this["bEnableTouchOverEvents"].Flag = value; } }
        public bool bForceFeedbackEnabled { get { return this["bForceFeedbackEnabled"].Flag; } set { this["bForceFeedbackEnabled"].Flag = value; } }
        public float ForceFeedbackScale { get { return this["ForceFeedbackScale"].GetValue<float>(); } set { this["ForceFeedbackScale"].SetValue<float>(value); } }
        public Array<Key> ClickEventKeys { get { return new Array<Key>(this["ClickEventKeys"]); } set { this["ClickEventKeys"] = value; } }
        public byte DefaultMouseCursor { get { return this["DefaultMouseCursor"].GetValue<byte>(); } set { this["DefaultMouseCursor"].SetValue<byte>(value); } }
        public byte CurrentMouseCursor { get { return this["CurrentMouseCursor"].GetValue<byte>(); } set { this["CurrentMouseCursor"].SetValue<byte>(value); } }
        public byte DefaultClickTraceChannel { get { return this["DefaultClickTraceChannel"].GetValue<byte>(); } set { this["DefaultClickTraceChannel"].SetValue<byte>(value); } }
        public byte CurrentClickTraceChannel { get { return this["CurrentClickTraceChannel"].GetValue<byte>(); } set { this["CurrentClickTraceChannel"].SetValue<byte>(value); } }
        public float HitResultTraceDistance { get { return this["HitResultTraceDistance"].GetValue<float>(); } set { this["HitResultTraceDistance"].SetValue<float>(value); } }
        public ushort SeamlessTravelCount { get { return this["SeamlessTravelCount"].GetValue<ushort>(); } set { this["SeamlessTravelCount"].SetValue<ushort>(value); } }
        public ushort LastCompletedSeamlessTravelCount { get { return this["LastCompletedSeamlessTravelCount"].GetValue<ushort>(); } set { this["LastCompletedSeamlessTravelCount"].SetValue<ushort>(value); } }
        public InputComponent InactiveStateInputComponent { get { return this[nameof(InactiveStateInputComponent)].As<InputComponent>(); } set { this["InactiveStateInputComponent"] = value; } }
        public bool bShouldPerformFullTickWhenPaused { get { return this["bShouldPerformFullTickWhenPaused"].Flag; } set { this["bShouldPerformFullTickWhenPaused"].Flag = value; } }
        public TouchInterface CurrentTouchInterface { get { return this[nameof(CurrentTouchInterface)].As<TouchInterface>(); } set { this["CurrentTouchInterface"] = value; } }
        public SpectatorPawn SpectatorPawn { get { return this[nameof(SpectatorPawn)].As<SpectatorPawn>(); } set { this["SpectatorPawn"] = value; } }
        public bool bIsLocalPlayerController { get { return this["bIsLocalPlayerController"].Flag; } set { this["bIsLocalPlayerController"].Flag = value; } }
        public Vector SpawnLocation { get { return this[nameof(SpawnLocation)].As<Vector>(); } set { this["SpawnLocation"] = value; } }
        public UEObject WasInputKeyJustReleased(UEObject Key) { return InvokeUEObject("WasInputKeyJustReleased", Key); }
        public void _PlayerController(UEObject Player, UEObject AcknowledgedPawn, UEObject ControllingDirTrackInst, UEObject MyHUD, UEObject PlayerCameraManager, UEObject PlayerCameraManagerClass, UEObject bAutoManageActiveCameraTarget, UEObject TargetViewRotation, UEObject SmoothTargetViewRotationSpeed, UEObject HiddenActors, UEObject HiddenPrimitiveComponents, UEObject LastSpectatorStateSynchTime, UEObject LastSpectatorSyncLocation, UEObject LastSpectatorSyncRotation, UEObject ClientCap, UEObject CheatManager, UEObject CheatClass, UEObject PlayerInput, UEObject ActiveForceFeedbackEffects, UEObject bPlayerIsWaiting, UEObject NetPlayerIndex, UEObject PendingSwapConnection, UEObject NetConnection, UEObject InputYawScale, UEObject InputPitchScale, UEObject InputRollScale, UEObject bShowMouseCursor, UEObject bEnableClickEvents, UEObject bEnableTouchEvents, UEObject bEnableMouseOverEvents, UEObject bEnableTouchOverEvents, UEObject bForceFeedbackEnabled, UEObject ForceFeedbackScale, UEObject ClickEventKeys, UEObject DefaultMouseCursor, UEObject CurrentMouseCursor, UEObject DefaultClickTraceChannel, UEObject CurrentClickTraceChannel, UEObject HitResultTraceDistance, UEObject SeamlessTravelCount, UEObject LastCompletedSeamlessTravelCount, UEObject InactiveStateInputComponent, UEObject bShouldPerformFullTickWhenPaused, UEObject CurrentTouchInterface, UEObject SpectatorPawn, UEObject bIsLocalPlayerController, UEObject SpawnLocation) { Invoke("PlayerController", Player, AcknowledgedPawn, ControllingDirTrackInst, MyHUD, PlayerCameraManager, PlayerCameraManagerClass, bAutoManageActiveCameraTarget, TargetViewRotation, SmoothTargetViewRotationSpeed, HiddenActors, HiddenPrimitiveComponents, LastSpectatorStateSynchTime, LastSpectatorSyncLocation, LastSpectatorSyncRotation, ClientCap, CheatManager, CheatClass, PlayerInput, ActiveForceFeedbackEffects, bPlayerIsWaiting, NetPlayerIndex, PendingSwapConnection, NetConnection, InputYawScale, InputPitchScale, InputRollScale, bShowMouseCursor, bEnableClickEvents, bEnableTouchEvents, bEnableMouseOverEvents, bEnableTouchOverEvents, bForceFeedbackEnabled, ForceFeedbackScale, ClickEventKeys, DefaultMouseCursor, CurrentMouseCursor, DefaultClickTraceChannel, CurrentClickTraceChannel, HitResultTraceDistance, SeamlessTravelCount, LastCompletedSeamlessTravelCount, InactiveStateInputComponent, bShouldPerformFullTickWhenPaused, CurrentTouchInterface, SpectatorPawn, bIsLocalPlayerController, SpawnLocation); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Controller : Actor
    {
        public Controller(nint addr) : base(addr) { }
        public Controller() : base(0) { }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
        public UEObject OnInstigatedAnyDamage { get { return this["OnInstigatedAnyDamage"]; } set { this["OnInstigatedAnyDamage"] = value; } }
        public string StateName { get { return this["StateName"].ToString(); } set { /* String properties are read-only */ } }
        public Pawn Pawn { get { return this[nameof(Pawn)].As<Pawn>(); } set { this["Pawn"] = value; } }
        public Character Character { get { return this[nameof(Character)].As<Character>(); } set { this["Character"] = value; } }
        public SceneComponent TransformComponent { get { return this[nameof(TransformComponent)].As<SceneComponent>(); } set { this["TransformComponent"] = value; } }
        public Rotator ControlRotation { get { return this[nameof(ControlRotation)].As<Rotator>(); } set { this["ControlRotation"] = value; } }
        public bool bAttachToPawn { get { return this["bAttachToPawn"].Flag; } set { this["bAttachToPawn"].Flag = value; } }
        public void UnPossess() { Invoke("UnPossess"); }
        public void _Controller(UEObject PlayerState, UEObject OnInstigatedAnyDamage, UEObject StateName, UEObject Pawn, UEObject Character, UEObject TransformComponent, UEObject ControlRotation, UEObject bAttachToPawn) { Invoke("Controller", PlayerState, OnInstigatedAnyDamage, StateName, Pawn, Character, TransformComponent, ControlRotation, bAttachToPawn); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameState : GameStateBase
    {
        public GameState(nint addr) : base(addr) { }
        public GameState() : base(0) { }
        public string MatchState { get { return this["MatchState"].ToString(); } set { /* String properties are read-only */ } }
        public string PreviousMatchState { get { return this["PreviousMatchState"].ToString(); } set { /* String properties are read-only */ } }
        public int ElapsedTime { get { return this["ElapsedTime"].GetValue<int>(); } set { this["ElapsedTime"].SetValue<int>(value); } }
        public void OnRep_MatchState() { Invoke("OnRep_MatchState"); }
        public void _GameState(UEObject MatchState, UEObject PreviousMatchState, UEObject ElapsedTime) { Invoke("GameState", MatchState, PreviousMatchState, ElapsedTime); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameStateBase : Info
    {
        public GameStateBase(nint addr) : base(addr) { }
        public GameStateBase() : base(0) { }
        public UEObject GameModeClass { get { return this["GameModeClass"]; } set { this["GameModeClass"] = value; } }
        public GameModeBase AuthorityGameMode { get { return this[nameof(AuthorityGameMode)].As<GameModeBase>(); } set { this["AuthorityGameMode"] = value; } }
        public UEObject SpectatorClass { get { return this["SpectatorClass"]; } set { this["SpectatorClass"] = value; } }
        public Array<PlayerState> PlayerArray { get { return new Array<PlayerState>(this["PlayerArray"]); } set { this["PlayerArray"] = value; } }
        public bool bReplicatedHasBegunPlay { get { return this["bReplicatedHasBegunPlay"].Flag; } set { this["bReplicatedHasBegunPlay"].Flag = value; } }
        public float ReplicatedWorldTimeSeconds { get { return this["ReplicatedWorldTimeSeconds"].GetValue<float>(); } set { this["ReplicatedWorldTimeSeconds"].SetValue<float>(value); } }
        public float ServerWorldTimeSecondsDelta { get { return this["ServerWorldTimeSecondsDelta"].GetValue<float>(); } set { this["ServerWorldTimeSecondsDelta"].SetValue<float>(value); } }
        public float ServerWorldTimeSecondsUpdateFrequency { get { return this["ServerWorldTimeSecondsUpdateFrequency"].GetValue<float>(); } set { this["ServerWorldTimeSecondsUpdateFrequency"].SetValue<float>(value); } }
        public void OnRep_SpectatorClass() { Invoke("OnRep_SpectatorClass"); }
        public void _GameStateBase(UEObject GameModeClass, UEObject AuthorityGameMode, UEObject SpectatorClass, UEObject PlayerArray, UEObject bReplicatedHasBegunPlay, UEObject ReplicatedWorldTimeSeconds, UEObject ServerWorldTimeSecondsDelta, UEObject ServerWorldTimeSecondsUpdateFrequency) { Invoke("GameStateBase", GameModeClass, AuthorityGameMode, SpectatorClass, PlayerArray, bReplicatedHasBegunPlay, ReplicatedWorldTimeSeconds, ServerWorldTimeSecondsDelta, ServerWorldTimeSecondsUpdateFrequency); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameMode : GameModeBase
    {
        public GameMode(nint addr) : base(addr) { }
        public GameMode() : base(0) { }
        public string MatchState { get { return this["MatchState"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDelayedStart { get { return this["bDelayedStart"].Flag; } set { this["bDelayedStart"].Flag = value; } }
        public int NumSpectators { get { return this["NumSpectators"].GetValue<int>(); } set { this["NumSpectators"].SetValue<int>(value); } }
        public int NumPlayers { get { return this["NumPlayers"].GetValue<int>(); } set { this["NumPlayers"].SetValue<int>(value); } }
        public int NumBots { get { return this["NumBots"].GetValue<int>(); } set { this["NumBots"].SetValue<int>(value); } }
        public float MinRespawnDelay { get { return this["MinRespawnDelay"].GetValue<float>(); } set { this["MinRespawnDelay"].SetValue<float>(value); } }
        public int NumTravellingPlayers { get { return this["NumTravellingPlayers"].GetValue<int>(); } set { this["NumTravellingPlayers"].SetValue<int>(value); } }
        public UEObject EngineMessageClass { get { return this["EngineMessageClass"]; } set { this["EngineMessageClass"] = value; } }
        public Array<PlayerState> InactivePlayerArray { get { return new Array<PlayerState>(this["InactivePlayerArray"]); } set { this["InactivePlayerArray"] = value; } }
        public float InactivePlayerStateLifeSpan { get { return this["InactivePlayerStateLifeSpan"].GetValue<float>(); } set { this["InactivePlayerStateLifeSpan"].SetValue<float>(value); } }
        public int MaxInactivePlayers { get { return this["MaxInactivePlayers"].GetValue<int>(); } set { this["MaxInactivePlayers"].SetValue<int>(value); } }
        public bool bHandleDedicatedServerReplays { get { return this["bHandleDedicatedServerReplays"].Flag; } set { this["bHandleDedicatedServerReplays"].Flag = value; } }
        public void StartMatch() { Invoke("StartMatch"); }
        public void _GameMode(UEObject MatchState, UEObject bDelayedStart, UEObject NumSpectators, UEObject NumPlayers, UEObject NumBots, UEObject MinRespawnDelay, UEObject NumTravellingPlayers, UEObject EngineMessageClass, UEObject InactivePlayerArray, UEObject InactivePlayerStateLifeSpan, UEObject MaxInactivePlayers, UEObject bHandleDedicatedServerReplays) { Invoke("GameMode", MatchState, bDelayedStart, NumSpectators, NumPlayers, NumBots, MinRespawnDelay, NumTravellingPlayers, EngineMessageClass, InactivePlayerArray, InactivePlayerStateLifeSpan, MaxInactivePlayers, bHandleDedicatedServerReplays); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class GameModeBase : Info
    {
        public GameModeBase(nint addr) : base(addr) { }
        public GameModeBase() : base(0) { }
        public string OptionsString { get { return this["OptionsString"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GameSessionClass { get { return this["GameSessionClass"]; } set { this["GameSessionClass"] = value; } }
        public UEObject GameStateClass { get { return this["GameStateClass"]; } set { this["GameStateClass"] = value; } }
        public UEObject PlayerControllerClass { get { return this["PlayerControllerClass"]; } set { this["PlayerControllerClass"] = value; } }
        public UEObject PlayerStateClass { get { return this["PlayerStateClass"]; } set { this["PlayerStateClass"] = value; } }
        public UEObject HUDClass { get { return this["HUDClass"]; } set { this["HUDClass"] = value; } }
        public UEObject DefaultPawnClass { get { return this["DefaultPawnClass"]; } set { this["DefaultPawnClass"] = value; } }
        public UEObject SpectatorClass { get { return this["SpectatorClass"]; } set { this["SpectatorClass"] = value; } }
        public UEObject ReplaySpectatorPlayerControllerClass { get { return this["ReplaySpectatorPlayerControllerClass"]; } set { this["ReplaySpectatorPlayerControllerClass"] = value; } }
        public UEObject ServerStatReplicatorClass { get { return this["ServerStatReplicatorClass"]; } set { this["ServerStatReplicatorClass"] = value; } }
        public GameSession GameSession { get { return this[nameof(GameSession)].As<GameSession>(); } set { this["GameSession"] = value; } }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public ServerStatReplicator ServerStatReplicator { get { return this[nameof(ServerStatReplicator)].As<ServerStatReplicator>(); } set { this["ServerStatReplicator"] = value; } }
        public string DefaultPlayerName { get { return this["DefaultPlayerName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUseSeamlessTravel { get { return this["bUseSeamlessTravel"].Flag; } set { this["bUseSeamlessTravel"].Flag = value; } }
        public bool bStartPlayersAsSpectators { get { return this["bStartPlayersAsSpectators"].Flag; } set { this["bStartPlayersAsSpectators"].Flag = value; } }
        public bool bPauseable { get { return this["bPauseable"].Flag; } set { this["bPauseable"].Flag = value; } }
        public void StartPlay() { Invoke("StartPlay"); }
        public void _GameModeBase(UEObject OptionsString, UEObject GameSessionClass, UEObject GameStateClass, UEObject PlayerControllerClass, UEObject PlayerStateClass, UEObject HUDClass, UEObject DefaultPawnClass, UEObject SpectatorClass, UEObject ReplaySpectatorPlayerControllerClass, UEObject ServerStatReplicatorClass, UEObject GameSession, UEObject GameState, UEObject ServerStatReplicator, UEObject DefaultPlayerName, UEObject bUseSeamlessTravel, UEObject bStartPlayersAsSpectators, UEObject bPauseable) { Invoke("GameModeBase", OptionsString, GameSessionClass, GameStateClass, PlayerControllerClass, PlayerStateClass, HUDClass, DefaultPawnClass, SpectatorClass, ReplaySpectatorPlayerControllerClass, ServerStatReplicatorClass, GameSession, GameState, ServerStatReplicator, DefaultPlayerName, bUseSeamlessTravel, bStartPlayersAsSpectators, bPauseable); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Info : Actor
    {
        public Info(nint addr) : base(addr) { }
        public Info() : base(0) { }
    }
    public class SaveGame : UEObject
    {
        public SaveGame(nint addr) : base(addr) { }
        public SaveGame() : base(0) { }
    }
    public class AssetUserData : UEObject
    {
        public AssetUserData(nint addr) : base(addr) { }
        public AssetUserData() : base(0) { }
    }
    public class AudioComponent : SceneComponent
    {
        public AudioComponent(nint addr) : base(addr) { }
        public AudioComponent() : base(0) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public Array<AudioComponentParam> InstanceParameters { get { return new Array<AudioComponentParam>(this["InstanceParameters"]); } set { this["InstanceParameters"] = value; } }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
        public bool bAutoDestroy { get { return this["bAutoDestroy"].Flag; } set { this["bAutoDestroy"].Flag = value; } }
        public bool bStopWhenOwnerDestroyed { get { return this["bStopWhenOwnerDestroyed"].Flag; } set { this["bStopWhenOwnerDestroyed"].Flag = value; } }
        public bool bShouldRemainActiveIfDropped { get { return this["bShouldRemainActiveIfDropped"].Flag; } set { this["bShouldRemainActiveIfDropped"].Flag = value; } }
        public bool bAllowSpatialization { get { return this["bAllowSpatialization"].Flag; } set { this["bAllowSpatialization"].Flag = value; } }
        public bool bOverrideAttenuation { get { return this["bOverrideAttenuation"].Flag; } set { this["bOverrideAttenuation"].Flag = value; } }
        public bool bOverrideSubtitlePriority { get { return this["bOverrideSubtitlePriority"].Flag; } set { this["bOverrideSubtitlePriority"].Flag = value; } }
        public bool bIsUISound { get { return this["bIsUISound"].Flag; } set { this["bIsUISound"].Flag = value; } }
        public bool bEnableLowPassFilter { get { return this["bEnableLowPassFilter"].Flag; } set { this["bEnableLowPassFilter"].Flag = value; } }
        public bool bOverridePriority { get { return this["bOverridePriority"].Flag; } set { this["bOverridePriority"].Flag = value; } }
        public bool bSuppressSubtitles { get { return this["bSuppressSubtitles"].Flag; } set { this["bSuppressSubtitles"].Flag = value; } }
        public bool bAutoManageAttachment { get { return this["bAutoManageAttachment"].Flag; } set { this["bAutoManageAttachment"].Flag = value; } }
        public string AudioComponentUserID { get { return this["AudioComponentUserID"].ToString(); } set { /* String properties are read-only */ } }
        public float PitchModulationMin { get { return this["PitchModulationMin"].GetValue<float>(); } set { this["PitchModulationMin"].SetValue<float>(value); } }
        public float PitchModulationMax { get { return this["PitchModulationMax"].GetValue<float>(); } set { this["PitchModulationMax"].SetValue<float>(value); } }
        public float VolumeModulationMin { get { return this["VolumeModulationMin"].GetValue<float>(); } set { this["VolumeModulationMin"].SetValue<float>(value); } }
        public float VolumeModulationMax { get { return this["VolumeModulationMax"].GetValue<float>(); } set { this["VolumeModulationMax"].SetValue<float>(value); } }
        public float VolumeMultiplier { get { return this["VolumeMultiplier"].GetValue<float>(); } set { this["VolumeMultiplier"].SetValue<float>(value); } }
        public int EnvelopeFollowerAttackTime { get { return this["EnvelopeFollowerAttackTime"].GetValue<int>(); } set { this["EnvelopeFollowerAttackTime"].SetValue<int>(value); } }
        public int EnvelopeFollowerReleaseTime { get { return this["EnvelopeFollowerReleaseTime"].GetValue<int>(); } set { this["EnvelopeFollowerReleaseTime"].SetValue<int>(value); } }
        public float Priority { get { return this["Priority"].GetValue<float>(); } set { this["Priority"].SetValue<float>(value); } }
        public float SubtitlePriority { get { return this["SubtitlePriority"].GetValue<float>(); } set { this["SubtitlePriority"].SetValue<float>(value); } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
        public float PitchMultiplier { get { return this["PitchMultiplier"].GetValue<float>(); } set { this["PitchMultiplier"].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this["LowPassFilterFrequency"].GetValue<float>(); } set { this["LowPassFilterFrequency"].SetValue<float>(value); } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public SoundConcurrency ConcurrencySettings { get { return this[nameof(ConcurrencySettings)].As<SoundConcurrency>(); } set { this["ConcurrencySettings"] = value; } }
        public UEObject ConcurrencySet { get { return this["ConcurrencySet"]; } set { this["ConcurrencySet"] = value; } }
        public EAttachmentRule AutoAttachLocationRule { get { return (EAttachmentRule)this["AutoAttachLocationRule"].GetValue<int>(); } set { this["AutoAttachLocationRule"].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachRotationRule { get { return (EAttachmentRule)this["AutoAttachRotationRule"].GetValue<int>(); } set { this["AutoAttachRotationRule"].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachScaleRule { get { return (EAttachmentRule)this["AutoAttachScaleRule"].GetValue<int>(); } set { this["AutoAttachScaleRule"].SetValue<int>((int)value); } }
        public SoundModulationDefaultRoutingSettings ModulationRouting { get { return this[nameof(ModulationRouting)].As<SoundModulationDefaultRoutingSettings>(); } set { this["ModulationRouting"] = value; } }
        public UEObject OnAudioPlayStateChanged { get { return this["OnAudioPlayStateChanged"]; } set { this["OnAudioPlayStateChanged"] = value; } }
        public UEObject OnAudioVirtualizationChanged { get { return this["OnAudioVirtualizationChanged"]; } set { this["OnAudioVirtualizationChanged"] = value; } }
        public UEObject OnAudioFinished { get { return this["OnAudioFinished"]; } set { this["OnAudioFinished"] = value; } }
        public UEObject OnAudioPlaybackPercent { get { return this["OnAudioPlaybackPercent"]; } set { this["OnAudioPlaybackPercent"] = value; } }
        public UEObject OnAudioSingleEnvelopeValue { get { return this["OnAudioSingleEnvelopeValue"]; } set { this["OnAudioSingleEnvelopeValue"] = value; } }
        public UEObject OnAudioMultiEnvelopeValue { get { return this["OnAudioMultiEnvelopeValue"]; } set { this["OnAudioMultiEnvelopeValue"] = value; } }
        public UEObject OnQueueSubtitles { get { return this["OnQueueSubtitles"]; } set { this["OnQueueSubtitles"] = value; } }
        public UEObject AutoAttachParent { get { return this["AutoAttachParent"]; } set { this["AutoAttachParent"] = value; } }
        public string AutoAttachSocketName { get { return this["AutoAttachSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public void StopDelayed(UEObject DelayTime) { Invoke("StopDelayed", DelayTime); }
        public void _AudioComponent(UEObject Sound, UEObject InstanceParameters, UEObject SoundClassOverride, UEObject bAutoDestroy, UEObject bStopWhenOwnerDestroyed, UEObject bShouldRemainActiveIfDropped, UEObject bAllowSpatialization, UEObject bOverrideAttenuation, UEObject bOverrideSubtitlePriority, UEObject bIsUISound, UEObject bEnableLowPassFilter, UEObject bOverridePriority, UEObject bSuppressSubtitles, UEObject bAutoManageAttachment, UEObject AudioComponentUserID, UEObject PitchModulationMin, UEObject PitchModulationMax, UEObject VolumeModulationMin, UEObject VolumeModulationMax, UEObject VolumeMultiplier, UEObject EnvelopeFollowerAttackTime, UEObject EnvelopeFollowerReleaseTime, UEObject Priority, UEObject SubtitlePriority, UEObject SourceEffectChain, UEObject PitchMultiplier, UEObject LowPassFilterFrequency, UEObject AttenuationSettings, UEObject AttenuationOverrides, UEObject ConcurrencySettings, UEObject ConcurrencySet, UEObject AutoAttachLocationRule, UEObject AutoAttachRotationRule, UEObject AutoAttachScaleRule, UEObject ModulationRouting, UEObject OnAudioPlayStateChanged, UEObject OnAudioVirtualizationChanged, UEObject OnAudioFinished, UEObject OnAudioPlaybackPercent, UEObject OnAudioSingleEnvelopeValue, UEObject OnAudioMultiEnvelopeValue, UEObject OnQueueSubtitles, UEObject AutoAttachParent, UEObject AutoAttachSocketName) { Invoke("AudioComponent", Sound, InstanceParameters, SoundClassOverride, bAutoDestroy, bStopWhenOwnerDestroyed, bShouldRemainActiveIfDropped, bAllowSpatialization, bOverrideAttenuation, bOverrideSubtitlePriority, bIsUISound, bEnableLowPassFilter, bOverridePriority, bSuppressSubtitles, bAutoManageAttachment, AudioComponentUserID, PitchModulationMin, PitchModulationMax, VolumeModulationMin, VolumeModulationMax, VolumeMultiplier, EnvelopeFollowerAttackTime, EnvelopeFollowerReleaseTime, Priority, SubtitlePriority, SourceEffectChain, PitchMultiplier, LowPassFilterFrequency, AttenuationSettings, AttenuationOverrides, ConcurrencySettings, ConcurrencySet, AutoAttachLocationRule, AutoAttachRotationRule, AutoAttachScaleRule, ModulationRouting, OnAudioPlayStateChanged, OnAudioVirtualizationChanged, OnAudioFinished, OnAudioPlaybackPercent, OnAudioSingleEnvelopeValue, OnAudioMultiEnvelopeValue, OnQueueSubtitles, AutoAttachParent, AutoAttachSocketName); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraShakeBase : UEObject
    {
        public CameraShakeBase(nint addr) : base(addr) { }
        public CameraShakeBase() : base(0) { }
        public bool bSingleInstance { get { return this["bSingleInstance"].Flag; } set { this["bSingleInstance"].Flag = value; } }
        public float ShakeScale { get { return this["ShakeScale"].GetValue<float>(); } set { this["ShakeScale"].SetValue<float>(value); } }
        public CameraShakePattern RootShakePattern { get { return this[nameof(RootShakePattern)].As<CameraShakePattern>(); } set { this["RootShakePattern"] = value; } }
        public PlayerCameraManager CameraManager { get { return this[nameof(CameraManager)].As<PlayerCameraManager>(); } set { this["CameraManager"] = value; } }
        public void SetRootShakePattern(UEObject InPattern) { Invoke("SetRootShakePattern", InPattern); }
        public void _CameraShakeBase(UEObject bSingleInstance, UEObject ShakeScale, UEObject RootShakePattern, UEObject CameraManager) { Invoke("CameraShakeBase", bSingleInstance, ShakeScale, RootShakePattern, CameraManager); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Character : Pawn
    {
        public Character(nint addr) : base(addr) { }
        public Character() : base(0) { }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public CharacterMovementComponent CharacterMovement { get { return this[nameof(CharacterMovement)].As<CharacterMovementComponent>(); } set { this["CharacterMovement"] = value; } }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public BasedMovementInfo BasedMovement { get { return this[nameof(BasedMovement)].As<BasedMovementInfo>(); } set { this["BasedMovement"] = value; } }
        public BasedMovementInfo ReplicatedBasedMovement { get { return this[nameof(ReplicatedBasedMovement)].As<BasedMovementInfo>(); } set { this["ReplicatedBasedMovement"] = value; } }
        public float AnimRootMotionTranslationScale { get { return this["AnimRootMotionTranslationScale"].GetValue<float>(); } set { this["AnimRootMotionTranslationScale"].SetValue<float>(value); } }
        public Vector BaseTranslationOffset { get { return this[nameof(BaseTranslationOffset)].As<Vector>(); } set { this["BaseTranslationOffset"] = value; } }
        public Quat BaseRotationOffset { get { return this[nameof(BaseRotationOffset)].As<Quat>(); } set { this["BaseRotationOffset"] = value; } }
        public float ReplicatedServerLastTransformUpdateTimeStamp { get { return this["ReplicatedServerLastTransformUpdateTimeStamp"].GetValue<float>(); } set { this["ReplicatedServerLastTransformUpdateTimeStamp"].SetValue<float>(value); } }
        public float ReplayLastTransformUpdateTimeStamp { get { return this["ReplayLastTransformUpdateTimeStamp"].GetValue<float>(); } set { this["ReplayLastTransformUpdateTimeStamp"].SetValue<float>(value); } }
        public byte ReplicatedMovementMode { get { return this["ReplicatedMovementMode"].GetValue<byte>(); } set { this["ReplicatedMovementMode"].SetValue<byte>(value); } }
        public bool bInBaseReplication { get { return this["bInBaseReplication"].Flag; } set { this["bInBaseReplication"].Flag = value; } }
        public float CrouchedEyeHeight { get { return this["CrouchedEyeHeight"].GetValue<float>(); } set { this["CrouchedEyeHeight"].SetValue<float>(value); } }
        public bool bIsCrouched { get { return this["bIsCrouched"].Flag; } set { this["bIsCrouched"].Flag = value; } }
        public bool bProxyIsJumpForceApplied { get { return this["bProxyIsJumpForceApplied"].Flag; } set { this["bProxyIsJumpForceApplied"].Flag = value; } }
        public bool bPressedJump { get { return this["bPressedJump"].Flag; } set { this["bPressedJump"].Flag = value; } }
        public bool bClientUpdating { get { return this["bClientUpdating"].Flag; } set { this["bClientUpdating"].Flag = value; } }
        public bool bClientWasFalling { get { return this["bClientWasFalling"].Flag; } set { this["bClientWasFalling"].Flag = value; } }
        public bool bClientResimulateRootMotion { get { return this["bClientResimulateRootMotion"].Flag; } set { this["bClientResimulateRootMotion"].Flag = value; } }
        public bool bClientResimulateRootMotionSources { get { return this["bClientResimulateRootMotionSources"].Flag; } set { this["bClientResimulateRootMotionSources"].Flag = value; } }
        public bool bSimGravityDisabled { get { return this["bSimGravityDisabled"].Flag; } set { this["bSimGravityDisabled"].Flag = value; } }
        public bool bClientCheckEncroachmentOnNetUpdate { get { return this["bClientCheckEncroachmentOnNetUpdate"].Flag; } set { this["bClientCheckEncroachmentOnNetUpdate"].Flag = value; } }
        public bool bServerMoveIgnoreRootMotion { get { return this["bServerMoveIgnoreRootMotion"].Flag; } set { this["bServerMoveIgnoreRootMotion"].Flag = value; } }
        public bool bWasJumping { get { return this["bWasJumping"].Flag; } set { this["bWasJumping"].Flag = value; } }
        public float JumpKeyHoldTime { get { return this["JumpKeyHoldTime"].GetValue<float>(); } set { this["JumpKeyHoldTime"].SetValue<float>(value); } }
        public float JumpForceTimeRemaining { get { return this["JumpForceTimeRemaining"].GetValue<float>(); } set { this["JumpForceTimeRemaining"].SetValue<float>(value); } }
        public float ProxyJumpForceStartedTime { get { return this["ProxyJumpForceStartedTime"].GetValue<float>(); } set { this["ProxyJumpForceStartedTime"].SetValue<float>(value); } }
        public float JumpMaxHoldTime { get { return this["JumpMaxHoldTime"].GetValue<float>(); } set { this["JumpMaxHoldTime"].SetValue<float>(value); } }
        public int JumpMaxCount { get { return this["JumpMaxCount"].GetValue<int>(); } set { this["JumpMaxCount"].SetValue<int>(value); } }
        public int JumpCurrentCount { get { return this["JumpCurrentCount"].GetValue<int>(); } set { this["JumpCurrentCount"].SetValue<int>(value); } }
        public int JumpCurrentCountPreJump { get { return this["JumpCurrentCountPreJump"].GetValue<int>(); } set { this["JumpCurrentCountPreJump"].SetValue<int>(value); } }
        public UEObject OnReachedJumpApex { get { return this["OnReachedJumpApex"]; } set { this["OnReachedJumpApex"] = value; } }
        public UEObject MovementModeChangedDelegate { get { return this["MovementModeChangedDelegate"]; } set { this["MovementModeChangedDelegate"] = value; } }
        public UEObject OnCharacterMovementUpdated { get { return this["OnCharacterMovementUpdated"]; } set { this["OnCharacterMovementUpdated"] = value; } }
        public RootMotionSourceGroup SavedRootMotion { get { return this[nameof(SavedRootMotion)].As<RootMotionSourceGroup>(); } set { this["SavedRootMotion"] = value; } }
        public RootMotionMovementParams ClientRootMotionParams { get { return this[nameof(ClientRootMotionParams)].As<RootMotionMovementParams>(); } set { this["ClientRootMotionParams"] = value; } }
        public Array<SimulatedRootMotionReplicatedMove> RootMotionRepMoves { get { return new Array<SimulatedRootMotionReplicatedMove>(this["RootMotionRepMoves"]); } set { this["RootMotionRepMoves"] = value; } }
        public RepRootMotionMontage RepRootMotion { get { return this[nameof(RepRootMotion)].As<RepRootMotionMontage>(); } set { this["RepRootMotion"] = value; } }
        public void UnCrouch(UEObject bClientSimulation) { Invoke("UnCrouch", bClientSimulation); }
        public void _Character(UEObject Mesh, UEObject CharacterMovement, UEObject CapsuleComponent, UEObject BasedMovement, UEObject ReplicatedBasedMovement, UEObject AnimRootMotionTranslationScale, UEObject BaseTranslationOffset, UEObject BaseRotationOffset, UEObject ReplicatedServerLastTransformUpdateTimeStamp, UEObject ReplayLastTransformUpdateTimeStamp, UEObject ReplicatedMovementMode, UEObject bInBaseReplication, UEObject CrouchedEyeHeight, UEObject bIsCrouched, UEObject bProxyIsJumpForceApplied, UEObject bPressedJump, UEObject bClientUpdating, UEObject bClientWasFalling, UEObject bClientResimulateRootMotion, UEObject bClientResimulateRootMotionSources, UEObject bSimGravityDisabled, UEObject bClientCheckEncroachmentOnNetUpdate, UEObject bServerMoveIgnoreRootMotion, UEObject bWasJumping, UEObject JumpKeyHoldTime, UEObject JumpForceTimeRemaining, UEObject ProxyJumpForceStartedTime, UEObject JumpMaxHoldTime, UEObject JumpMaxCount, UEObject JumpCurrentCount, UEObject JumpCurrentCountPreJump, UEObject OnReachedJumpApex, UEObject MovementModeChangedDelegate, UEObject OnCharacterMovementUpdated, UEObject SavedRootMotion, UEObject ClientRootMotionParams, UEObject RootMotionRepMoves, UEObject RepRootMotion) { Invoke("Character", Mesh, CharacterMovement, CapsuleComponent, BasedMovement, ReplicatedBasedMovement, AnimRootMotionTranslationScale, BaseTranslationOffset, BaseRotationOffset, ReplicatedServerLastTransformUpdateTimeStamp, ReplayLastTransformUpdateTimeStamp, ReplicatedMovementMode, bInBaseReplication, CrouchedEyeHeight, bIsCrouched, bProxyIsJumpForceApplied, bPressedJump, bClientUpdating, bClientWasFalling, bClientResimulateRootMotion, bClientResimulateRootMotionSources, bSimGravityDisabled, bClientCheckEncroachmentOnNetUpdate, bServerMoveIgnoreRootMotion, bWasJumping, JumpKeyHoldTime, JumpForceTimeRemaining, ProxyJumpForceStartedTime, JumpMaxHoldTime, JumpMaxCount, JumpCurrentCount, JumpCurrentCountPreJump, OnReachedJumpApex, MovementModeChangedDelegate, OnCharacterMovementUpdated, SavedRootMotion, ClientRootMotionParams, RootMotionRepMoves, RepRootMotion); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MaterialExpressionTextureSampleParameter2D : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameter2D(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameter2D() : base(0) { }
    }
    public class MaterialExpressionTextureSampleParameter : MaterialExpressionTextureSample
    {
        public MaterialExpressionTextureSampleParameter(nint addr) : base(addr) { }
        public MaterialExpressionTextureSampleParameter() : base(0) { }
        public string ParameterName { get { return this["ParameterName"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ExpressionGUID"] = value; } }
        public string Group { get { return this["Group"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MaterialExpressionTextureSample : MaterialExpressionTextureBase
    {
        public MaterialExpressionTextureSample(nint addr) : base(addr) { }
        public MaterialExpressionTextureSample() : base(0) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
    }
    public class MaterialExpressionTextureBase : MaterialExpression
    {
        public MaterialExpressionTextureBase(nint addr) : base(addr) { }
        public MaterialExpressionTextureBase() : base(0) { }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
    }
    public class MaterialExpression : UEObject
    {
        public MaterialExpression(nint addr) : base(addr) { }
        public MaterialExpression() : base(0) { }
        public Material Material { get { return this[nameof(Material)].As<Material>(); } set { this["Material"] = value; } }
        public MaterialFunction Function { get { return this[nameof(Function)].As<MaterialFunction>(); } set { this["Function"] = value; } }
        public bool bIsParameterExpression { get { return this["bIsParameterExpression"].Flag; } set { this["bIsParameterExpression"].Flag = value; } }
    }
    public class GameInstanceSubsystem : Subsystem
    {
        public GameInstanceSubsystem(nint addr) : base(addr) { }
        public GameInstanceSubsystem() : base(0) { }
    }
    public class GameInstance : UEObject
    {
        public GameInstance(nint addr) : base(addr) { }
        public GameInstance() : base(0) { }
        public Array<LocalPlayer> LocalPlayers { get { return new Array<LocalPlayer>(this["LocalPlayers"]); } set { this["LocalPlayers"] = value; } }
        public OnlineSession OnlineSession { get { return this[nameof(OnlineSession)].As<OnlineSession>(); } set { this["OnlineSession"] = value; } }
        public Array<UEObject> ReferencedObjects { get { return new Array<UEObject>(this["ReferencedObjects"]); } set { this["ReferencedObjects"] = value; } }
        public UEObject OnPawnControllerChangedDelegates { get { return this["OnPawnControllerChangedDelegates"]; } set { this["OnPawnControllerChangedDelegates"] = value; } }
        public void ReceiveShutdown() { Invoke("ReceiveShutdown"); }
        public void _GameInstance(UEObject LocalPlayers, UEObject OnlineSession, UEObject ReferencedObjects, UEObject OnPawnControllerChangedDelegates) { Invoke("GameInstance", LocalPlayers, OnlineSession, ReferencedObjects, OnPawnControllerChangedDelegates); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class CameraShakePattern : UEObject
    {
        public CameraShakePattern(nint addr) : base(addr) { }
        public CameraShakePattern() : base(0) { }
    }
    public class BlueprintGeneratedClass : Class
    {
        public BlueprintGeneratedClass(nint addr) : base(addr) { }
        public BlueprintGeneratedClass() : base(0) { }
        public int NumReplicatedProperties { get { return this["NumReplicatedProperties"].GetValue<int>(); } set { this["NumReplicatedProperties"].SetValue<int>(value); } }
        public bool bHasNativizedParent { get { return this["bHasNativizedParent"].Flag; } set { this["bHasNativizedParent"].Flag = value; } }
        public bool bHasCookedComponentInstancingData { get { return this["bHasCookedComponentInstancingData"].Flag; } set { this["bHasCookedComponentInstancingData"].Flag = value; } }
        public Array<DynamicBlueprintBinding> DynamicBindingObjects { get { return new Array<DynamicBlueprintBinding>(this["DynamicBindingObjects"]); } set { this["DynamicBindingObjects"] = value; } }
        public Array<ActorComponent> ComponentTemplates { get { return new Array<ActorComponent>(this["ComponentTemplates"]); } set { this["ComponentTemplates"] = value; } }
        public Array<TimelineTemplate> Timelines { get { return new Array<TimelineTemplate>(this["Timelines"]); } set { this["Timelines"] = value; } }
        public Array<BPComponentClassOverride> ComponentClassOverrides { get { return new Array<BPComponentClassOverride>(this["ComponentClassOverrides"]); } set { this["ComponentClassOverrides"] = value; } }
        public SimpleConstructionScript SimpleConstructionScript { get { return this[nameof(SimpleConstructionScript)].As<SimpleConstructionScript>(); } set { this["SimpleConstructionScript"] = value; } }
        public InheritableComponentHandler InheritableComponentHandler { get { return this[nameof(InheritableComponentHandler)].As<InheritableComponentHandler>(); } set { this["InheritableComponentHandler"] = value; } }
        public StructProperty UberGraphFramePointerProperty { get { return this[nameof(UberGraphFramePointerProperty)].As<StructProperty>(); } set { this["UberGraphFramePointerProperty"] = value; } }
        public Function UberGraphFunction { get { return this[nameof(UberGraphFunction)].As<Function>(); } set { this["UberGraphFunction"] = value; } }
        public UEObject CookedComponentInstancingData { get { return this["CookedComponentInstancingData"]; } set { this["CookedComponentInstancingData"] = value; } }
    }
    public class AnimInstance : UEObject
    {
        public AnimInstance(nint addr) : base(addr) { }
        public AnimInstance() : base(0) { }
        public Skeleton CurrentSkeleton { get { return this[nameof(CurrentSkeleton)].As<Skeleton>(); } set { this["CurrentSkeleton"] = value; } }
        public byte RootMotionMode { get { return this["RootMotionMode"].GetValue<byte>(); } set { this["RootMotionMode"].SetValue<byte>(value); } }
        public bool bUseMultiThreadedAnimationUpdate { get { return this["bUseMultiThreadedAnimationUpdate"].Flag; } set { this["bUseMultiThreadedAnimationUpdate"].Flag = value; } }
        public bool bUsingCopyPoseFromMesh { get { return this["bUsingCopyPoseFromMesh"].Flag; } set { this["bUsingCopyPoseFromMesh"].Flag = value; } }
        public bool bReceiveNotifiesFromLinkedInstances { get { return this["bReceiveNotifiesFromLinkedInstances"].Flag; } set { this["bReceiveNotifiesFromLinkedInstances"].Flag = value; } }
        public bool bPropagateNotifiesToLinkedInstances { get { return this["bPropagateNotifiesToLinkedInstances"].Flag; } set { this["bPropagateNotifiesToLinkedInstances"].Flag = value; } }
        public bool bQueueMontageEvents { get { return this["bQueueMontageEvents"].Flag; } set { this["bQueueMontageEvents"].Flag = value; } }
        public UEObject OnMontageBlendingOut { get { return this["OnMontageBlendingOut"]; } set { this["OnMontageBlendingOut"] = value; } }
        public UEObject OnMontageStarted { get { return this["OnMontageStarted"]; } set { this["OnMontageStarted"] = value; } }
        public UEObject OnMontageEnded { get { return this["OnMontageEnded"]; } set { this["OnMontageEnded"] = value; } }
        public UEObject OnAllMontageInstancesEnded { get { return this["OnAllMontageInstancesEnded"]; } set { this["OnAllMontageInstancesEnded"] = value; } }
        public AnimNotifyQueue NotifyQueue { get { return this[nameof(NotifyQueue)].As<AnimNotifyQueue>(); } set { this["NotifyQueue"] = value; } }
        public Array<AnimNotifyEvent> ActiveAnimNotifyState { get { return new Array<AnimNotifyEvent>(this["ActiveAnimNotifyState"]); } set { this["ActiveAnimNotifyState"] = value; } }
        public void UnlockAIResources(UEObject bUnlockMovement, UEObject UnlockAILogic) { Invoke("UnlockAIResources", bUnlockMovement, UnlockAILogic); }
        public void _AnimInstance(UEObject CurrentSkeleton, UEObject RootMotionMode, UEObject bUseMultiThreadedAnimationUpdate, UEObject bUsingCopyPoseFromMesh, UEObject bReceiveNotifiesFromLinkedInstances, UEObject bPropagateNotifiesToLinkedInstances, UEObject bQueueMontageEvents, UEObject OnMontageBlendingOut, UEObject OnMontageStarted, UEObject OnMontageEnded, UEObject OnAllMontageInstancesEnded, UEObject NotifyQueue, UEObject ActiveAnimNotifyState) { Invoke("AnimInstance", CurrentSkeleton, RootMotionMode, bUseMultiThreadedAnimationUpdate, bUsingCopyPoseFromMesh, bReceiveNotifiesFromLinkedInstances, bPropagateNotifiesToLinkedInstances, bQueueMontageEvents, OnMontageBlendingOut, OnMontageStarted, OnMontageEnded, OnAllMontageInstancesEnded, NotifyQueue, ActiveAnimNotifyState); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SkeletalMeshComponent : SkinnedMeshComponent
    {
        public SkeletalMeshComponent(nint addr) : base(addr) { }
        public SkeletalMeshComponent() : base(0) { }
        public UEObject AnimBlueprintGeneratedClass { get { return this["AnimBlueprintGeneratedClass"]; } set { this["AnimBlueprintGeneratedClass"] = value; } }
        public UEObject AnimClass { get { return this["AnimClass"]; } set { this["AnimClass"] = value; } }
        public AnimInstance AnimScriptInstance { get { return this[nameof(AnimScriptInstance)].As<AnimInstance>(); } set { this["AnimScriptInstance"] = value; } }
        public AnimInstance PostProcessAnimInstance { get { return this[nameof(PostProcessAnimInstance)].As<AnimInstance>(); } set { this["PostProcessAnimInstance"] = value; } }
        public bool bForceDynamicShadowOnUltraSettings { get { return this["bForceDynamicShadowOnUltraSettings"].Flag; } set { this["bForceDynamicShadowOnUltraSettings"].Flag = value; } }
        public SingleAnimationPlayData AnimationData { get { return this[nameof(AnimationData)].As<SingleAnimationPlayData>(); } set { this["AnimationData"] = value; } }
        public Vector RootBoneTranslation { get { return this[nameof(RootBoneTranslation)].As<Vector>(); } set { this["RootBoneTranslation"] = value; } }
        public Vector LineCheckBoundsScale { get { return this[nameof(LineCheckBoundsScale)].As<Vector>(); } set { this["LineCheckBoundsScale"] = value; } }
        public Array<AnimInstance> LinkedInstances { get { return new Array<AnimInstance>(this["LinkedInstances"]); } set { this["LinkedInstances"] = value; } }
        public Array<SDK.Script.CoreUObject.Transform> CachedBoneSpaceTransforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["CachedBoneSpaceTransforms"]); } set { this["CachedBoneSpaceTransforms"] = value; } }
        public Array<SDK.Script.CoreUObject.Transform> CachedComponentSpaceTransforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["CachedComponentSpaceTransforms"]); } set { this["CachedComponentSpaceTransforms"] = value; } }
        public float GlobalAnimRateScale { get { return this["GlobalAnimRateScale"].GetValue<float>(); } set { this["GlobalAnimRateScale"].SetValue<float>(value); } }
        public byte KinematicBonesUpdateType { get { return this["KinematicBonesUpdateType"].GetValue<byte>(); } set { this["KinematicBonesUpdateType"].SetValue<byte>(value); } }
        public byte PhysicsTransformUpdateMode { get { return this["PhysicsTransformUpdateMode"].GetValue<byte>(); } set { this["PhysicsTransformUpdateMode"].SetValue<byte>(value); } }
        public byte AnimationMode { get { return this["AnimationMode"].GetValue<byte>(); } set { this["AnimationMode"].SetValue<byte>(value); } }
        public bool bDisablePostProcessBlueprint { get { return this["bDisablePostProcessBlueprint"].Flag; } set { this["bDisablePostProcessBlueprint"].Flag = value; } }
        public bool bUpdateOverlapsOnAnimationFinalize { get { return this["bUpdateOverlapsOnAnimationFinalize"].Flag; } set { this["bUpdateOverlapsOnAnimationFinalize"].Flag = value; } }
        public bool bHasValidBodies { get { return this["bHasValidBodies"].Flag; } set { this["bHasValidBodies"].Flag = value; } }
        public bool bBlendPhysics { get { return this["bBlendPhysics"].Flag; } set { this["bBlendPhysics"].Flag = value; } }
        public bool bEnablePhysicsOnDedicatedServer { get { return this["bEnablePhysicsOnDedicatedServer"].Flag; } set { this["bEnablePhysicsOnDedicatedServer"].Flag = value; } }
        public bool bUpdateJointsFromAnimation { get { return this["bUpdateJointsFromAnimation"].Flag; } set { this["bUpdateJointsFromAnimation"].Flag = value; } }
        public bool bDisableClothSimulation { get { return this["bDisableClothSimulation"].Flag; } set { this["bDisableClothSimulation"].Flag = value; } }
        public bool bDisableRigidBodyAnimNode { get { return this["bDisableRigidBodyAnimNode"].Flag; } set { this["bDisableRigidBodyAnimNode"].Flag = value; } }
        public bool bAllowAnimCurveEvaluation { get { return this["bAllowAnimCurveEvaluation"].Flag; } set { this["bAllowAnimCurveEvaluation"].Flag = value; } }
        public bool bDisableAnimCurves { get { return this["bDisableAnimCurves"].Flag; } set { this["bDisableAnimCurves"].Flag = value; } }
        public bool bCollideWithEnvironment { get { return this["bCollideWithEnvironment"].Flag; } set { this["bCollideWithEnvironment"].Flag = value; } }
        public bool bCollideWithAttachedChildren { get { return this["bCollideWithAttachedChildren"].Flag; } set { this["bCollideWithAttachedChildren"].Flag = value; } }
        public bool bLocalSpaceSimulation { get { return this["bLocalSpaceSimulation"].Flag; } set { this["bLocalSpaceSimulation"].Flag = value; } }
        public bool bResetAfterTeleport { get { return this["bResetAfterTeleport"].Flag; } set { this["bResetAfterTeleport"].Flag = value; } }
        public bool bDeferKinematicBoneUpdate { get { return this["bDeferKinematicBoneUpdate"].Flag; } set { this["bDeferKinematicBoneUpdate"].Flag = value; } }
        public bool bNoSkeletonUpdate { get { return this["bNoSkeletonUpdate"].Flag; } set { this["bNoSkeletonUpdate"].Flag = value; } }
        public bool bPauseAnims { get { return this["bPauseAnims"].Flag; } set { this["bPauseAnims"].Flag = value; } }
        public bool bUseRefPoseOnInitAnim { get { return this["bUseRefPoseOnInitAnim"].Flag; } set { this["bUseRefPoseOnInitAnim"].Flag = value; } }
        public bool bEnablePerPolyCollision { get { return this["bEnablePerPolyCollision"].Flag; } set { this["bEnablePerPolyCollision"].Flag = value; } }
        public bool bForceRefpose { get { return this["bForceRefpose"].Flag; } set { this["bForceRefpose"].Flag = value; } }
        public bool bOnlyAllowAutonomousTickPose { get { return this["bOnlyAllowAutonomousTickPose"].Flag; } set { this["bOnlyAllowAutonomousTickPose"].Flag = value; } }
        public bool bIsAutonomousTickPose { get { return this["bIsAutonomousTickPose"].Flag; } set { this["bIsAutonomousTickPose"].Flag = value; } }
        public bool bOldForceRefPose { get { return this["bOldForceRefPose"].Flag; } set { this["bOldForceRefPose"].Flag = value; } }
        public bool bShowPrePhysBones { get { return this["bShowPrePhysBones"].Flag; } set { this["bShowPrePhysBones"].Flag = value; } }
        public bool bRequiredBonesUpToDate { get { return this["bRequiredBonesUpToDate"].Flag; } set { this["bRequiredBonesUpToDate"].Flag = value; } }
        public bool bAnimTreeInitialised { get { return this["bAnimTreeInitialised"].Flag; } set { this["bAnimTreeInitialised"].Flag = value; } }
        public bool bIncludeComponentLocationIntoBounds { get { return this["bIncludeComponentLocationIntoBounds"].Flag; } set { this["bIncludeComponentLocationIntoBounds"].Flag = value; } }
        public bool bEnableLineCheckWithBounds { get { return this["bEnableLineCheckWithBounds"].Flag; } set { this["bEnableLineCheckWithBounds"].Flag = value; } }
        public bool bPropagateCurvesToSlaves { get { return this["bPropagateCurvesToSlaves"].Flag; } set { this["bPropagateCurvesToSlaves"].Flag = value; } }
        public bool bSkipKinematicUpdateWhenInterpolating { get { return this["bSkipKinematicUpdateWhenInterpolating"].Flag; } set { this["bSkipKinematicUpdateWhenInterpolating"].Flag = value; } }
        public bool bSkipBoundsUpdateWhenInterpolating { get { return this["bSkipBoundsUpdateWhenInterpolating"].Flag; } set { this["bSkipBoundsUpdateWhenInterpolating"].Flag = value; } }
        public bool bNeedsQueuedAnimEventsDispatched { get { return this["bNeedsQueuedAnimEventsDispatched"].Flag; } set { this["bNeedsQueuedAnimEventsDispatched"].Flag = value; } }
        public ushort CachedAnimCurveUidVersion { get { return this["CachedAnimCurveUidVersion"].GetValue<ushort>(); } set { this["CachedAnimCurveUidVersion"].SetValue<ushort>(value); } }
        public float ClothBlendWeight { get { return this["ClothBlendWeight"].GetValue<float>(); } set { this["ClothBlendWeight"].SetValue<float>(value); } }
        public bool bWaitForParallelClothTask { get { return this["bWaitForParallelClothTask"].Flag; } set { this["bWaitForParallelClothTask"].Flag = value; } }
        public List<string> DisallowedAnimCurves { get { return this["DisallowedAnimCurves"].GetStringList(); } set { /* Arrays are read-only */ } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public UEObject OnConstraintBroken { get { return this["OnConstraintBroken"]; } set { this["OnConstraintBroken"] = value; } }
        public UEObject ClothingSimulationFactory { get { return this["ClothingSimulationFactory"]; } set { this["ClothingSimulationFactory"] = value; } }
        public float TeleportDistanceThreshold { get { return this["TeleportDistanceThreshold"].GetValue<float>(); } set { this["TeleportDistanceThreshold"].SetValue<float>(value); } }
        public float TeleportRotationThreshold { get { return this["TeleportRotationThreshold"].GetValue<float>(); } set { this["TeleportRotationThreshold"].SetValue<float>(value); } }
        public uint LastPoseTickFrame { get { return this["LastPoseTickFrame"].GetValue<uint>(); } set { this["LastPoseTickFrame"].SetValue<uint>(value); } }
        public ClothingSimulationInteractor ClothingInteractor { get { return this[nameof(ClothingInteractor)].As<ClothingSimulationInteractor>(); } set { this["ClothingInteractor"] = value; } }
        public UEObject OnAnimInitialized { get { return this["OnAnimInitialized"]; } set { this["OnAnimInitialized"] = value; } }
        public void UnlinkAnimClassLayers(UEObject InClass) { Invoke("UnlinkAnimClassLayers", InClass); }
        public void _SkeletalMeshComponent(UEObject AnimBlueprintGeneratedClass, UEObject AnimClass, UEObject AnimScriptInstance, UEObject PostProcessAnimInstance, UEObject bForceDynamicShadowOnUltraSettings, UEObject AnimationData, UEObject RootBoneTranslation, UEObject LineCheckBoundsScale, UEObject LinkedInstances, UEObject CachedBoneSpaceTransforms, UEObject CachedComponentSpaceTransforms, UEObject GlobalAnimRateScale, UEObject KinematicBonesUpdateType, UEObject PhysicsTransformUpdateMode, UEObject AnimationMode, UEObject bDisablePostProcessBlueprint, UEObject bUpdateOverlapsOnAnimationFinalize, UEObject bHasValidBodies, UEObject bBlendPhysics, UEObject bEnablePhysicsOnDedicatedServer, UEObject bUpdateJointsFromAnimation, UEObject bDisableClothSimulation, UEObject bDisableRigidBodyAnimNode, UEObject bAllowAnimCurveEvaluation, UEObject bDisableAnimCurves, UEObject bCollideWithEnvironment, UEObject bCollideWithAttachedChildren, UEObject bLocalSpaceSimulation, UEObject bResetAfterTeleport, UEObject bDeferKinematicBoneUpdate, UEObject bNoSkeletonUpdate, UEObject bPauseAnims, UEObject bUseRefPoseOnInitAnim, UEObject bEnablePerPolyCollision, UEObject bForceRefpose, UEObject bOnlyAllowAutonomousTickPose, UEObject bIsAutonomousTickPose, UEObject bOldForceRefPose, UEObject bShowPrePhysBones, UEObject bRequiredBonesUpToDate, UEObject bAnimTreeInitialised, UEObject bIncludeComponentLocationIntoBounds, UEObject bEnableLineCheckWithBounds, UEObject bPropagateCurvesToSlaves, UEObject bSkipKinematicUpdateWhenInterpolating, UEObject bSkipBoundsUpdateWhenInterpolating, UEObject bNeedsQueuedAnimEventsDispatched, UEObject CachedAnimCurveUidVersion, UEObject ClothBlendWeight, UEObject bWaitForParallelClothTask, UEObject DisallowedAnimCurves, UEObject BodySetup, UEObject OnConstraintBroken, UEObject ClothingSimulationFactory, UEObject TeleportDistanceThreshold, UEObject TeleportRotationThreshold, UEObject LastPoseTickFrame, UEObject ClothingInteractor, UEObject OnAnimInitialized) { Invoke("SkeletalMeshComponent", AnimBlueprintGeneratedClass, AnimClass, AnimScriptInstance, PostProcessAnimInstance, bForceDynamicShadowOnUltraSettings, AnimationData, RootBoneTranslation, LineCheckBoundsScale, LinkedInstances, CachedBoneSpaceTransforms, CachedComponentSpaceTransforms, GlobalAnimRateScale, KinematicBonesUpdateType, PhysicsTransformUpdateMode, AnimationMode, bDisablePostProcessBlueprint, bUpdateOverlapsOnAnimationFinalize, bHasValidBodies, bBlendPhysics, bEnablePhysicsOnDedicatedServer, bUpdateJointsFromAnimation, bDisableClothSimulation, bDisableRigidBodyAnimNode, bAllowAnimCurveEvaluation, bDisableAnimCurves, bCollideWithEnvironment, bCollideWithAttachedChildren, bLocalSpaceSimulation, bResetAfterTeleport, bDeferKinematicBoneUpdate, bNoSkeletonUpdate, bPauseAnims, bUseRefPoseOnInitAnim, bEnablePerPolyCollision, bForceRefpose, bOnlyAllowAutonomousTickPose, bIsAutonomousTickPose, bOldForceRefPose, bShowPrePhysBones, bRequiredBonesUpToDate, bAnimTreeInitialised, bIncludeComponentLocationIntoBounds, bEnableLineCheckWithBounds, bPropagateCurvesToSlaves, bSkipKinematicUpdateWhenInterpolating, bSkipBoundsUpdateWhenInterpolating, bNeedsQueuedAnimEventsDispatched, CachedAnimCurveUidVersion, ClothBlendWeight, bWaitForParallelClothTask, DisallowedAnimCurves, BodySetup, OnConstraintBroken, ClothingSimulationFactory, TeleportDistanceThreshold, TeleportRotationThreshold, LastPoseTickFrame, ClothingInteractor, OnAnimInitialized); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AssetImportData : UEObject
    {
        public AssetImportData(nint addr) : base(addr) { }
        public AssetImportData() : base(0) { }
    }
    public class AnimNotifyState : UEObject
    {
        public AnimNotifyState(nint addr) : base(addr) { }
        public AnimNotifyState() : base(0) { }
        public UEObject Received_NotifyTick(UEObject MeshComp, UEObject Animation, UEObject FrameDeltaTime) { return InvokeUEObject("Received_NotifyTick", MeshComp, Animation, FrameDeltaTime); }
        public void _AnimNotifyState() { Invoke("AnimNotifyState"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class AnimNotify : UEObject
    {
        public AnimNotify(nint addr) : base(addr) { }
        public AnimNotify() : base(0) { }
        public UEObject Received_Notify(UEObject MeshComp, UEObject Animation) { return InvokeUEObject("Received_Notify", MeshComp, Animation); }
        public void _AnimNotify() { Invoke("AnimNotify"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class FXSystemAsset : UEObject
    {
        public FXSystemAsset(nint addr) : base(addr) { }
        public FXSystemAsset() : base(0) { }
        public uint MaxPoolSize { get { return this["MaxPoolSize"].GetValue<uint>(); } set { this["MaxPoolSize"].SetValue<uint>(value); } }
        public uint PoolPrimeSize { get { return this["PoolPrimeSize"].GetValue<uint>(); } set { this["PoolPrimeSize"].SetValue<uint>(value); } }
    }
    public class FXSystemComponent : PrimitiveComponent
    {
        public FXSystemComponent(nint addr) : base(addr) { }
        public FXSystemComponent() : base(0) { }
        public void SetVectorParameter(UEObject ParameterName, UEObject Param) { Invoke("SetVectorParameter", ParameterName, Param); }
        public void _FXSystemComponent() { Invoke("FXSystemComponent"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class TickableWorldSubsystem : WorldSubsystem
    {
        public TickableWorldSubsystem(nint addr) : base(addr) { }
        public TickableWorldSubsystem() : base(0) { }
    }
    public class WorldSubsystem : Subsystem
    {
        public WorldSubsystem(nint addr) : base(addr) { }
        public WorldSubsystem() : base(0) { }
    }
    public class SplineMetadata : UEObject
    {
        public SplineMetadata(nint addr) : base(addr) { }
        public SplineMetadata() : base(0) { }
    }
    public class SplineComponent : PrimitiveComponent
    {
        public SplineComponent(nint addr) : base(addr) { }
        public SplineComponent() : base(0) { }
        public SplineCurves SplineCurves { get { return this[nameof(SplineCurves)].As<SplineCurves>(); } set { this["SplineCurves"] = value; } }
        public InterpCurveVector SplineInfo { get { return this[nameof(SplineInfo)].As<InterpCurveVector>(); } set { this["SplineInfo"] = value; } }
        public InterpCurveQuat SplineRotInfo { get { return this[nameof(SplineRotInfo)].As<InterpCurveQuat>(); } set { this["SplineRotInfo"] = value; } }
        public InterpCurveVector SplineScaleInfo { get { return this[nameof(SplineScaleInfo)].As<InterpCurveVector>(); } set { this["SplineScaleInfo"] = value; } }
        public InterpCurveFloat SplineReparamTable { get { return this[nameof(SplineReparamTable)].As<InterpCurveFloat>(); } set { this["SplineReparamTable"] = value; } }
        public bool bAllowSplineEditingPerInstance { get { return this["bAllowSplineEditingPerInstance"].Flag; } set { this["bAllowSplineEditingPerInstance"].Flag = value; } }
        public int ReparamStepsPerSegment { get { return this["ReparamStepsPerSegment"].GetValue<int>(); } set { this["ReparamStepsPerSegment"].SetValue<int>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public bool bStationaryEndpoints { get { return this["bStationaryEndpoints"].Flag; } set { this["bStationaryEndpoints"].Flag = value; } }
        public bool bSplineHasBeenEdited { get { return this["bSplineHasBeenEdited"].Flag; } set { this["bSplineHasBeenEdited"].Flag = value; } }
        public bool bModifiedByConstructionScript { get { return this["bModifiedByConstructionScript"].Flag; } set { this["bModifiedByConstructionScript"].Flag = value; } }
        public bool bInputSplinePointsToConstructionScript { get { return this["bInputSplinePointsToConstructionScript"].Flag; } set { this["bInputSplinePointsToConstructionScript"].Flag = value; } }
        public bool bDrawDebug { get { return this["bDrawDebug"].Flag; } set { this["bDrawDebug"].Flag = value; } }
        public bool bClosedLoop { get { return this["bClosedLoop"].Flag; } set { this["bClosedLoop"].Flag = value; } }
        public bool bLoopPositionOverride { get { return this["bLoopPositionOverride"].Flag; } set { this["bLoopPositionOverride"].Flag = value; } }
        public float LoopPosition { get { return this["LoopPosition"].GetValue<float>(); } set { this["LoopPosition"].SetValue<float>(value); } }
        public Vector DefaultUpVector { get { return this[nameof(DefaultUpVector)].As<Vector>(); } set { this["DefaultUpVector"] = value; } }
        public void UpdateSpline() { Invoke("UpdateSpline"); }
        public void _SplineComponent(UEObject SplineCurves, UEObject SplineInfo, UEObject SplineRotInfo, UEObject SplineScaleInfo, UEObject SplineReparamTable, UEObject bAllowSplineEditingPerInstance, UEObject ReparamStepsPerSegment, UEObject Duration, UEObject bStationaryEndpoints, UEObject bSplineHasBeenEdited, UEObject bModifiedByConstructionScript, UEObject bInputSplinePointsToConstructionScript, UEObject bDrawDebug, UEObject bClosedLoop, UEObject bLoopPositionOverride, UEObject LoopPosition, UEObject DefaultUpVector) { Invoke("SplineComponent", SplineCurves, SplineInfo, SplineRotInfo, SplineScaleInfo, SplineReparamTable, bAllowSplineEditingPerInstance, ReparamStepsPerSegment, Duration, bStationaryEndpoints, bSplineHasBeenEdited, bModifiedByConstructionScript, bInputSplinePointsToConstructionScript, bDrawDebug, bClosedLoop, bLoopPositionOverride, LoopPosition, DefaultUpVector); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PhysicsVolume : Volume
    {
        public PhysicsVolume(nint addr) : base(addr) { }
        public PhysicsVolume() : base(0) { }
        public float TerminalVelocity { get { return this["TerminalVelocity"].GetValue<float>(); } set { this["TerminalVelocity"].SetValue<float>(value); } }
        public int Priority { get { return this["Priority"].GetValue<int>(); } set { this["Priority"].SetValue<int>(value); } }
        public float FluidFriction { get { return this["FluidFriction"].GetValue<float>(); } set { this["FluidFriction"].SetValue<float>(value); } }
        public bool bWaterVolume { get { return this["bWaterVolume"].Flag; } set { this["bWaterVolume"].Flag = value; } }
        public bool bPhysicsOnContact { get { return this["bPhysicsOnContact"].Flag; } set { this["bPhysicsOnContact"].Flag = value; } }
    }
    public class Volume : Brush
    {
        public Volume(nint addr) : base(addr) { }
        public Volume() : base(0) { }
    }
    public class Brush : Actor
    {
        public Brush(nint addr) : base(addr) { }
        public Brush() : base(0) { }
        public byte BrushType { get { return this["BrushType"].GetValue<byte>(); } set { this["BrushType"].SetValue<byte>(value); } }
        public Color BrushColor { get { return this[nameof(BrushColor)].As<Color>(); } set { this["BrushColor"] = value; } }
        public int PolyFlags { get { return this["PolyFlags"].GetValue<int>(); } set { this["PolyFlags"].SetValue<int>(value); } }
        public bool bColored { get { return this["bColored"].Flag; } set { this["bColored"].Flag = value; } }
        public bool bSolidWhenSelected { get { return this["bSolidWhenSelected"].Flag; } set { this["bSolidWhenSelected"].Flag = value; } }
        public bool bPlaceableFromClassBrowser { get { return this["bPlaceableFromClassBrowser"].Flag; } set { this["bPlaceableFromClassBrowser"].Flag = value; } }
        public bool bNotForClientOrServer { get { return this["bNotForClientOrServer"].Flag; } set { this["bNotForClientOrServer"].Flag = value; } }
        public Model Brush_Property { get { return this[nameof(Brush)].As<Model>(); } set { this["Brush"] = value; } }
        public BrushComponent BrushComponent { get { return this[nameof(BrushComponent)].As<BrushComponent>(); } set { this["BrushComponent"] = value; } }
        public bool bInManipulation { get { return this["bInManipulation"].Flag; } set { this["bInManipulation"].Flag = value; } }
        public Array<GeomSelection> SavedSelections { get { return new Array<GeomSelection>(this["SavedSelections"]); } set { this["SavedSelections"] = value; } }
    }
    public class BoxComponent : ShapeComponent
    {
        public BoxComponent(nint addr) : base(addr) { }
        public BoxComponent() : base(0) { }
        public Vector BoxExtent { get { return this[nameof(BoxExtent)].As<Vector>(); } set { this["BoxExtent"] = value; } }
        public float LineThickness { get { return this["LineThickness"].GetValue<float>(); } set { this["LineThickness"].SetValue<float>(value); } }
        public void SetBoxExtent(UEObject InBoxExtent, UEObject bUpdateOverlaps) { Invoke("SetBoxExtent", InBoxExtent, bUpdateOverlaps); }
        public void _BoxComponent(UEObject BoxExtent, UEObject LineThickness) { Invoke("BoxComponent", BoxExtent, LineThickness); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ShapeComponent : PrimitiveComponent
    {
        public ShapeComponent(nint addr) : base(addr) { }
        public ShapeComponent() : base(0) { }
        public BodySetup ShapeBodySetup { get { return this[nameof(ShapeBodySetup)].As<BodySetup>(); } set { this["ShapeBodySetup"] = value; } }
        public UEObject AreaClass { get { return this["AreaClass"]; } set { this["AreaClass"] = value; } }
        public Color ShapeColor { get { return this[nameof(ShapeColor)].As<Color>(); } set { this["ShapeColor"] = value; } }
        public bool bDrawOnlyIfSelected { get { return this["bDrawOnlyIfSelected"].Flag; } set { this["bDrawOnlyIfSelected"].Flag = value; } }
        public bool bShouldCollideWhenPlacing { get { return this["bShouldCollideWhenPlacing"].Flag; } set { this["bShouldCollideWhenPlacing"].Flag = value; } }
        public bool bDynamicObstacle { get { return this["bDynamicObstacle"].Flag; } set { this["bDynamicObstacle"].Flag = value; } }
    }
    public class Commandlet : UEObject
    {
        public Commandlet(nint addr) : base(addr) { }
        public Commandlet() : base(0) { }
        public string HelpDescription { get { return this["HelpDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string HelpUsage { get { return this["HelpUsage"].ToString(); } set { /* String properties are read-only */ } }
        public string HelpWebLink { get { return this["HelpWebLink"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> HelpParamNames { get { return this["HelpParamNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> HelpParamDescriptions { get { return this["HelpParamDescriptions"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool IsServer { get { return this["IsServer"].Flag; } set { this["IsServer"].Flag = value; } }
        public bool IsClient { get { return this["IsClient"].Flag; } set { this["IsClient"].Flag = value; } }
        public bool IsEditor { get { return this["IsEditor"].Flag; } set { this["IsEditor"].Flag = value; } }
        public bool LogToConsole { get { return this["LogToConsole"].Flag; } set { this["LogToConsole"].Flag = value; } }
        public bool ShowErrorCount { get { return this["ShowErrorCount"].Flag; } set { this["ShowErrorCount"].Flag = value; } }
        public bool ShowProgress { get { return this["ShowProgress"].Flag; } set { this["ShowProgress"].Flag = value; } }
    }
    public class SkeletalMesh : StreamableRenderAsset
    {
        public SkeletalMesh(nint addr) : base(addr) { }
        public SkeletalMesh() : base(0) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public BoxSphereBounds ImportedBounds { get { return this[nameof(ImportedBounds)].As<BoxSphereBounds>(); } set { this["ImportedBounds"] = value; } }
        public BoxSphereBounds ExtendedBounds { get { return this[nameof(ExtendedBounds)].As<BoxSphereBounds>(); } set { this["ExtendedBounds"] = value; } }
        public Vector PositiveBoundsExtension { get { return this[nameof(PositiveBoundsExtension)].As<Vector>(); } set { this["PositiveBoundsExtension"] = value; } }
        public Vector NegativeBoundsExtension { get { return this[nameof(NegativeBoundsExtension)].As<Vector>(); } set { this["NegativeBoundsExtension"] = value; } }
        public Array<SkeletalMaterial> Materials { get { return new Array<SkeletalMaterial>(this["Materials"]); } set { this["Materials"] = value; } }
        public Array<BoneMirrorInfo> SkelMirrorTable { get { return new Array<BoneMirrorInfo>(this["SkelMirrorTable"]); } set { this["SkelMirrorTable"] = value; } }
        public Array<SkeletalMeshLODInfo> LODInfo { get { return new Array<SkeletalMeshLODInfo>(this["LODInfo"]); } set { this["LODInfo"] = value; } }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public PerPlatformBool DisableBelowMinLodStripping { get { return this[nameof(DisableBelowMinLodStripping)].As<PerPlatformBool>(); } set { this["DisableBelowMinLodStripping"] = value; } }
        public byte SkelMirrorAxis { get { return this["SkelMirrorAxis"].GetValue<byte>(); } set { this["SkelMirrorAxis"].SetValue<byte>(value); } }
        public byte SkelMirrorFlipAxis { get { return this["SkelMirrorFlipAxis"].GetValue<byte>(); } set { this["SkelMirrorFlipAxis"].SetValue<byte>(value); } }
        public bool bUseFullPrecisionUVs { get { return this["bUseFullPrecisionUVs"].Flag; } set { this["bUseFullPrecisionUVs"].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this["bUseHighPrecisionTangentBasis"].Flag; } set { this["bUseHighPrecisionTangentBasis"].Flag = value; } }
        public bool bHasBeenSimplified { get { return this["bHasBeenSimplified"].Flag; } set { this["bHasBeenSimplified"].Flag = value; } }
        public bool bHasVertexColors { get { return this["bHasVertexColors"].Flag; } set { this["bHasVertexColors"].Flag = value; } }
        public bool bEnablePerPolyCollision { get { return this["bEnablePerPolyCollision"].Flag; } set { this["bEnablePerPolyCollision"].Flag = value; } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public PhysicsAsset PhysicsAsset { get { return this[nameof(PhysicsAsset)].As<PhysicsAsset>(); } set { this["PhysicsAsset"] = value; } }
        public PhysicsAsset ShadowPhysicsAsset { get { return this[nameof(ShadowPhysicsAsset)].As<PhysicsAsset>(); } set { this["ShadowPhysicsAsset"] = value; } }
        public Array<NodeMappingContainer> NodeMappingData { get { return new Array<NodeMappingContainer>(this["NodeMappingData"]); } set { this["NodeMappingData"] = value; } }
        public bool bSupportRayTracing { get { return this["bSupportRayTracing"].Flag; } set { this["bSupportRayTracing"].Flag = value; } }
        public Array<MorphTarget> MorphTargets { get { return new Array<MorphTarget>(this["MorphTargets"]); } set { this["MorphTargets"] = value; } }
        public UEObject PostProcessAnimBlueprint { get { return this["PostProcessAnimBlueprint"]; } set { this["PostProcessAnimBlueprint"] = value; } }
        public Array<ClothingAssetBase> MeshClothingAssets { get { return new Array<ClothingAssetBase>(this["MeshClothingAssets"]); } set { this["MeshClothingAssets"] = value; } }
        public SkeletalMeshSamplingInfo SamplingInfo { get { return this[nameof(SamplingInfo)].As<SkeletalMeshSamplingInfo>(); } set { this["SamplingInfo"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public Array<SkeletalMeshSocket> Sockets { get { return new Array<SkeletalMeshSocket>(this["Sockets"]); } set { this["Sockets"] = value; } }
        public Array<SkinWeightProfileInfo> SkinWeightProfiles { get { return new Array<SkinWeightProfileInfo>(this["SkinWeightProfiles"]); } set { this["SkinWeightProfiles"] = value; } }
        public void SetMorphTargets(UEObject InMorphTargets) { Invoke("SetMorphTargets", InMorphTargets); }
        public void _SkeletalMesh(UEObject Skeleton, UEObject ImportedBounds, UEObject ExtendedBounds, UEObject PositiveBoundsExtension, UEObject NegativeBoundsExtension, UEObject Materials, UEObject SkelMirrorTable, UEObject LODInfo, UEObject MinLOD, UEObject DisableBelowMinLodStripping, UEObject SkelMirrorAxis, UEObject SkelMirrorFlipAxis, UEObject bUseFullPrecisionUVs, UEObject bUseHighPrecisionTangentBasis, UEObject bHasBeenSimplified, UEObject bHasVertexColors, UEObject bEnablePerPolyCollision, UEObject BodySetup, UEObject PhysicsAsset, UEObject ShadowPhysicsAsset, UEObject NodeMappingData, UEObject bSupportRayTracing, UEObject MorphTargets, UEObject PostProcessAnimBlueprint, UEObject MeshClothingAssets, UEObject SamplingInfo, UEObject AssetUserData, UEObject Sockets, UEObject SkinWeightProfiles) { Invoke("SkeletalMesh", Skeleton, ImportedBounds, ExtendedBounds, PositiveBoundsExtension, NegativeBoundsExtension, Materials, SkelMirrorTable, LODInfo, MinLOD, DisableBelowMinLodStripping, SkelMirrorAxis, SkelMirrorFlipAxis, bUseFullPrecisionUVs, bUseHighPrecisionTangentBasis, bHasBeenSimplified, bHasVertexColors, bEnablePerPolyCollision, BodySetup, PhysicsAsset, ShadowPhysicsAsset, NodeMappingData, bSupportRayTracing, MorphTargets, PostProcessAnimBlueprint, MeshClothingAssets, SamplingInfo, AssetUserData, Sockets, SkinWeightProfiles); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class StreamableRenderAsset : UEObject
    {
        public StreamableRenderAsset(nint addr) : base(addr) { }
        public StreamableRenderAsset() : base(0) { }
        public double ForceMipLevelsToBeResidentTimestamp { get { return this["ForceMipLevelsToBeResidentTimestamp"].GetValue<double>(); } set { this["ForceMipLevelsToBeResidentTimestamp"].SetValue<double>(value); } }
        public int NumCinematicMipLevels { get { return this["NumCinematicMipLevels"].GetValue<int>(); } set { this["NumCinematicMipLevels"].SetValue<int>(value); } }
        public int StreamingIndex { get { return this["StreamingIndex"].GetValue<int>(); } set { this["StreamingIndex"].SetValue<int>(value); } }
        public int CachedCombinedLODBias { get { return this["CachedCombinedLODBias"].GetValue<int>(); } set { this["CachedCombinedLODBias"].SetValue<int>(value); } }
        public bool NeverStream { get { return this["NeverStream"].Flag; } set { this["NeverStream"].Flag = value; } }
        public bool bGlobalForceMipLevelsToBeResident { get { return this["bGlobalForceMipLevelsToBeResident"].Flag; } set { this["bGlobalForceMipLevelsToBeResident"].Flag = value; } }
        public bool bHasStreamingUpdatePending { get { return this["bHasStreamingUpdatePending"].Flag; } set { this["bHasStreamingUpdatePending"].Flag = value; } }
        public bool bForceMiplevelsToBeResident { get { return this["bForceMiplevelsToBeResident"].Flag; } set { this["bForceMiplevelsToBeResident"].Flag = value; } }
        public bool bIgnoreStreamingMipBias { get { return this["bIgnoreStreamingMipBias"].Flag; } set { this["bIgnoreStreamingMipBias"].Flag = value; } }
        public bool bUseCinematicMipLevels { get { return this["bUseCinematicMipLevels"].Flag; } set { this["bUseCinematicMipLevels"].Flag = value; } }
    }
    public class SkinnedMeshComponent : MeshComponent
    {
        public SkinnedMeshComponent(nint addr) : base(addr) { }
        public SkinnedMeshComponent() : base(0) { }
        public SkeletalMesh SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMesh>(); } set { this["SkeletalMesh"] = value; } }
        public UEObject MasterPoseComponent { get { return this["MasterPoseComponent"]; } set { this["MasterPoseComponent"] = value; } }
        public EnumArray<ESkinCacheUsage> SkinCacheUsage { get { return new EnumArray<ESkinCacheUsage>(this["SkinCacheUsage"]); } set { this["SkinCacheUsage"] = value; } }
        public Array<VertexOffsetUsage> VertexOffsetUsage { get { return new Array<VertexOffsetUsage>(this["VertexOffsetUsage"]); } set { this["VertexOffsetUsage"] = value; } }
        public PhysicsAsset PhysicsAssetOverride { get { return this[nameof(PhysicsAssetOverride)].As<PhysicsAsset>(); } set { this["PhysicsAssetOverride"] = value; } }
        public int ForcedLodModel { get { return this["ForcedLodModel"].GetValue<int>(); } set { this["ForcedLodModel"].SetValue<int>(value); } }
        public int MinLodModel { get { return this["MinLodModel"].GetValue<int>(); } set { this["MinLodModel"].SetValue<int>(value); } }
        public float StreamingDistanceMultiplier { get { return this["StreamingDistanceMultiplier"].GetValue<float>(); } set { this["StreamingDistanceMultiplier"].SetValue<float>(value); } }
        public Array<SkelMeshComponentLODInfo> LODInfo { get { return new Array<SkelMeshComponentLODInfo>(this["LODInfo"]); } set { this["LODInfo"] = value; } }
        public EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption { get { return (EVisibilityBasedAnimTickOption)this["VisibilityBasedAnimTickOption"].GetValue<int>(); } set { this["VisibilityBasedAnimTickOption"].SetValue<int>((int)value); } }
        public bool bOverrideMinLod { get { return this["bOverrideMinLod"].Flag; } set { this["bOverrideMinLod"].Flag = value; } }
        public bool bUseBoundsFromMasterPoseComponent { get { return this["bUseBoundsFromMasterPoseComponent"].Flag; } set { this["bUseBoundsFromMasterPoseComponent"].Flag = value; } }
        public bool bForceWireframe { get { return this["bForceWireframe"].Flag; } set { this["bForceWireframe"].Flag = value; } }
        public bool bDisplayBones { get { return this["bDisplayBones"].Flag; } set { this["bDisplayBones"].Flag = value; } }
        public bool bDisableMorphTarget { get { return this["bDisableMorphTarget"].Flag; } set { this["bDisableMorphTarget"].Flag = value; } }
        public bool bHideSkin { get { return this["bHideSkin"].Flag; } set { this["bHideSkin"].Flag = value; } }
        public bool bPerBoneMotionBlur { get { return this["bPerBoneMotionBlur"].Flag; } set { this["bPerBoneMotionBlur"].Flag = value; } }
        public bool bComponentUseFixedSkelBounds { get { return this["bComponentUseFixedSkelBounds"].Flag; } set { this["bComponentUseFixedSkelBounds"].Flag = value; } }
        public bool bConsiderAllBodiesForBounds { get { return this["bConsiderAllBodiesForBounds"].Flag; } set { this["bConsiderAllBodiesForBounds"].Flag = value; } }
        public bool bSyncAttachParentLOD { get { return this["bSyncAttachParentLOD"].Flag; } set { this["bSyncAttachParentLOD"].Flag = value; } }
        public bool bCanHighlightSelectedSections { get { return this["bCanHighlightSelectedSections"].Flag; } set { this["bCanHighlightSelectedSections"].Flag = value; } }
        public bool bRecentlyRendered { get { return this["bRecentlyRendered"].Flag; } set { this["bRecentlyRendered"].Flag = value; } }
        public bool bCastCapsuleDirectShadow { get { return this["bCastCapsuleDirectShadow"].Flag; } set { this["bCastCapsuleDirectShadow"].Flag = value; } }
        public bool bCastCapsuleIndirectShadow { get { return this["bCastCapsuleIndirectShadow"].Flag; } set { this["bCastCapsuleIndirectShadow"].Flag = value; } }
        public bool bCPUSkinning { get { return this["bCPUSkinning"].Flag; } set { this["bCPUSkinning"].Flag = value; } }
        public bool bEnableUpdateRateOptimizations { get { return this["bEnableUpdateRateOptimizations"].Flag; } set { this["bEnableUpdateRateOptimizations"].Flag = value; } }
        public bool bDisplayDebugUpdateRateOptimizations { get { return this["bDisplayDebugUpdateRateOptimizations"].Flag; } set { this["bDisplayDebugUpdateRateOptimizations"].Flag = value; } }
        public bool bRenderStatic { get { return this["bRenderStatic"].Flag; } set { this["bRenderStatic"].Flag = value; } }
        public bool bIgnoreMasterPoseComponentLOD { get { return this["bIgnoreMasterPoseComponentLOD"].Flag; } set { this["bIgnoreMasterPoseComponentLOD"].Flag = value; } }
        public bool bCachedLocalBoundsUpToDate { get { return this["bCachedLocalBoundsUpToDate"].Flag; } set { this["bCachedLocalBoundsUpToDate"].Flag = value; } }
        public bool bForceMeshObjectUpdate { get { return this["bForceMeshObjectUpdate"].Flag; } set { this["bForceMeshObjectUpdate"].Flag = value; } }
        public float CapsuleIndirectShadowMinVisibility { get { return this["CapsuleIndirectShadowMinVisibility"].GetValue<float>(); } set { this["CapsuleIndirectShadowMinVisibility"].SetValue<float>(value); } }
        public BoxSphereBounds CachedWorldSpaceBounds { get { return this[nameof(CachedWorldSpaceBounds)].As<BoxSphereBounds>(); } set { this["CachedWorldSpaceBounds"] = value; } }
        public Matrix CachedWorldToLocalTransform { get { return this[nameof(CachedWorldToLocalTransform)].As<Matrix>(); } set { this["CachedWorldToLocalTransform"] = value; } }
        public void UnloadSkinWeightProfile(UEObject InProfileName) { Invoke("UnloadSkinWeightProfile", InProfileName); }
        public void _SkinnedMeshComponent(UEObject SkeletalMesh, UEObject MasterPoseComponent, UEObject SkinCacheUsage, UEObject VertexOffsetUsage, UEObject PhysicsAssetOverride, UEObject ForcedLodModel, UEObject MinLodModel, UEObject StreamingDistanceMultiplier, UEObject LODInfo, UEObject VisibilityBasedAnimTickOption, UEObject bOverrideMinLod, UEObject bUseBoundsFromMasterPoseComponent, UEObject bForceWireframe, UEObject bDisplayBones, UEObject bDisableMorphTarget, UEObject bHideSkin, UEObject bPerBoneMotionBlur, UEObject bComponentUseFixedSkelBounds, UEObject bConsiderAllBodiesForBounds, UEObject bSyncAttachParentLOD, UEObject bCanHighlightSelectedSections, UEObject bRecentlyRendered, UEObject bCastCapsuleDirectShadow, UEObject bCastCapsuleIndirectShadow, UEObject bCPUSkinning, UEObject bEnableUpdateRateOptimizations, UEObject bDisplayDebugUpdateRateOptimizations, UEObject bRenderStatic, UEObject bIgnoreMasterPoseComponentLOD, UEObject bCachedLocalBoundsUpToDate, UEObject bForceMeshObjectUpdate, UEObject CapsuleIndirectShadowMinVisibility, UEObject CachedWorldSpaceBounds, UEObject CachedWorldToLocalTransform) { Invoke("SkinnedMeshComponent", SkeletalMesh, MasterPoseComponent, SkinCacheUsage, VertexOffsetUsage, PhysicsAssetOverride, ForcedLodModel, MinLodModel, StreamingDistanceMultiplier, LODInfo, VisibilityBasedAnimTickOption, bOverrideMinLod, bUseBoundsFromMasterPoseComponent, bForceWireframe, bDisplayBones, bDisableMorphTarget, bHideSkin, bPerBoneMotionBlur, bComponentUseFixedSkelBounds, bConsiderAllBodiesForBounds, bSyncAttachParentLOD, bCanHighlightSelectedSections, bRecentlyRendered, bCastCapsuleDirectShadow, bCastCapsuleIndirectShadow, bCPUSkinning, bEnableUpdateRateOptimizations, bDisplayDebugUpdateRateOptimizations, bRenderStatic, bIgnoreMasterPoseComponentLOD, bCachedLocalBoundsUpToDate, bForceMeshObjectUpdate, CapsuleIndirectShadowMinVisibility, CachedWorldSpaceBounds, CachedWorldToLocalTransform); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class MeshComponent : PrimitiveComponent
    {
        public MeshComponent(nint addr) : base(addr) { }
        public MeshComponent() : base(0) { }
        public Array<MaterialInterface> OverrideMaterials { get { return new Array<MaterialInterface>(this["OverrideMaterials"]); } set { this["OverrideMaterials"] = value; } }
        public bool bEnableMaterialParameterCaching { get { return this["bEnableMaterialParameterCaching"].Flag; } set { this["bEnableMaterialParameterCaching"].Flag = value; } }
        public void SetVectorParameterValueOnMaterials(UEObject ParameterName, UEObject ParameterValue) { Invoke("SetVectorParameterValueOnMaterials", ParameterName, ParameterValue); }
        public void _MeshComponent(UEObject OverrideMaterials, UEObject bEnableMaterialParameterCaching) { Invoke("MeshComponent", OverrideMaterials, bEnableMaterialParameterCaching); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class PrimitiveComponent : SceneComponent
    {
        public PrimitiveComponent(nint addr) : base(addr) { }
        public PrimitiveComponent() : base(0) { }
        public float MinDrawDistance { get { return this["MinDrawDistance"].GetValue<float>(); } set { this["MinDrawDistance"].SetValue<float>(value); } }
        public float LDMaxDrawDistance { get { return this["LDMaxDrawDistance"].GetValue<float>(); } set { this["LDMaxDrawDistance"].SetValue<float>(value); } }
        public float CachedMaxDrawDistance { get { return this["CachedMaxDrawDistance"].GetValue<float>(); } set { this["CachedMaxDrawDistance"].SetValue<float>(value); } }
        public byte DepthPriorityGroup { get { return this["DepthPriorityGroup"].GetValue<byte>(); } set { this["DepthPriorityGroup"].SetValue<byte>(value); } }
        public byte ViewOwnerDepthPriorityGroup { get { return this["ViewOwnerDepthPriorityGroup"].GetValue<byte>(); } set { this["ViewOwnerDepthPriorityGroup"].SetValue<byte>(value); } }
        public byte IndirectLightingCacheQuality { get { return this["IndirectLightingCacheQuality"].GetValue<byte>(); } set { this["IndirectLightingCacheQuality"].SetValue<byte>(value); } }
        public ELightmapType LightmapType { get { return (ELightmapType)this["LightmapType"].GetValue<int>(); } set { this["LightmapType"].SetValue<int>((int)value); } }
        public bool bUseMaxLODAsImposter { get { return this["bUseMaxLODAsImposter"].Flag; } set { this["bUseMaxLODAsImposter"].Flag = value; } }
        public bool bBatchImpostersAsInstances { get { return this["bBatchImpostersAsInstances"].Flag; } set { this["bBatchImpostersAsInstances"].Flag = value; } }
        public bool bNeverDistanceCull { get { return this["bNeverDistanceCull"].Flag; } set { this["bNeverDistanceCull"].Flag = value; } }
        public bool bAlwaysCreatePhysicsState { get { return this["bAlwaysCreatePhysicsState"].Flag; } set { this["bAlwaysCreatePhysicsState"].Flag = value; } }
        public bool bGenerateOverlapEvents { get { return this["bGenerateOverlapEvents"].Flag; } set { this["bGenerateOverlapEvents"].Flag = value; } }
        public bool bMultiBodyOverlap { get { return this["bMultiBodyOverlap"].Flag; } set { this["bMultiBodyOverlap"].Flag = value; } }
        public bool bTraceComplexOnMove { get { return this["bTraceComplexOnMove"].Flag; } set { this["bTraceComplexOnMove"].Flag = value; } }
        public bool bReturnMaterialOnMove { get { return this["bReturnMaterialOnMove"].Flag; } set { this["bReturnMaterialOnMove"].Flag = value; } }
        public bool bUseViewOwnerDepthPriorityGroup { get { return this["bUseViewOwnerDepthPriorityGroup"].Flag; } set { this["bUseViewOwnerDepthPriorityGroup"].Flag = value; } }
        public bool bAllowCullDistanceVolume { get { return this["bAllowCullDistanceVolume"].Flag; } set { this["bAllowCullDistanceVolume"].Flag = value; } }
        public bool bHasMotionBlurVelocityMeshes { get { return this["bHasMotionBlurVelocityMeshes"].Flag; } set { this["bHasMotionBlurVelocityMeshes"].Flag = value; } }
        public bool bVisibleInReflectionCaptures { get { return this["bVisibleInReflectionCaptures"].Flag; } set { this["bVisibleInReflectionCaptures"].Flag = value; } }
        public bool bVisibleInRealTimeSkyCaptures { get { return this["bVisibleInRealTimeSkyCaptures"].Flag; } set { this["bVisibleInRealTimeSkyCaptures"].Flag = value; } }
        public bool bVisibleInRayTracing { get { return this["bVisibleInRayTracing"].Flag; } set { this["bVisibleInRayTracing"].Flag = value; } }
        public bool bRenderInMainPass { get { return this["bRenderInMainPass"].Flag; } set { this["bRenderInMainPass"].Flag = value; } }
        public bool bRenderInDepthPass { get { return this["bRenderInDepthPass"].Flag; } set { this["bRenderInDepthPass"].Flag = value; } }
        public bool bReceivesDecals { get { return this["bReceivesDecals"].Flag; } set { this["bReceivesDecals"].Flag = value; } }
        public bool bOwnerNoSee { get { return this["bOwnerNoSee"].Flag; } set { this["bOwnerNoSee"].Flag = value; } }
        public bool bOnlyOwnerSee { get { return this["bOnlyOwnerSee"].Flag; } set { this["bOnlyOwnerSee"].Flag = value; } }
        public bool bTreatAsBackgroundForOcclusion { get { return this["bTreatAsBackgroundForOcclusion"].Flag; } set { this["bTreatAsBackgroundForOcclusion"].Flag = value; } }
        public bool bUseAsOccluder { get { return this["bUseAsOccluder"].Flag; } set { this["bUseAsOccluder"].Flag = value; } }
        public bool bSelectable { get { return this["bSelectable"].Flag; } set { this["bSelectable"].Flag = value; } }
        public bool bForceMipStreaming { get { return this["bForceMipStreaming"].Flag; } set { this["bForceMipStreaming"].Flag = value; } }
        public bool bHasPerInstanceHitProxies { get { return this["bHasPerInstanceHitProxies"].Flag; } set { this["bHasPerInstanceHitProxies"].Flag = value; } }
        public bool CastShadow { get { return this["CastShadow"].Flag; } set { this["CastShadow"].Flag = value; } }
        public bool bAffectDynamicIndirectLighting { get { return this["bAffectDynamicIndirectLighting"].Flag; } set { this["bAffectDynamicIndirectLighting"].Flag = value; } }
        public bool bAffectDistanceFieldLighting { get { return this["bAffectDistanceFieldLighting"].Flag; } set { this["bAffectDistanceFieldLighting"].Flag = value; } }
        public bool bCastDynamicShadow { get { return this["bCastDynamicShadow"].Flag; } set { this["bCastDynamicShadow"].Flag = value; } }
        public bool bCastStaticShadow { get { return this["bCastStaticShadow"].Flag; } set { this["bCastStaticShadow"].Flag = value; } }
        public bool bCastVolumetricTranslucentShadow { get { return this["bCastVolumetricTranslucentShadow"].Flag; } set { this["bCastVolumetricTranslucentShadow"].Flag = value; } }
        public bool bCastContactShadow { get { return this["bCastContactShadow"].Flag; } set { this["bCastContactShadow"].Flag = value; } }
        public bool bSelfShadowOnly { get { return this["bSelfShadowOnly"].Flag; } set { this["bSelfShadowOnly"].Flag = value; } }
        public bool bCastFarShadow { get { return this["bCastFarShadow"].Flag; } set { this["bCastFarShadow"].Flag = value; } }
        public bool bCastInsetShadow { get { return this["bCastInsetShadow"].Flag; } set { this["bCastInsetShadow"].Flag = value; } }
        public bool bCastCinematicShadow { get { return this["bCastCinematicShadow"].Flag; } set { this["bCastCinematicShadow"].Flag = value; } }
        public bool bCastHiddenShadow { get { return this["bCastHiddenShadow"].Flag; } set { this["bCastHiddenShadow"].Flag = value; } }
        public bool bCastShadowAsTwoSided { get { return this["bCastShadowAsTwoSided"].Flag; } set { this["bCastShadowAsTwoSided"].Flag = value; } }
        public bool bLightAsIfStatic { get { return this["bLightAsIfStatic"].Flag; } set { this["bLightAsIfStatic"].Flag = value; } }
        public bool bLightAttachmentsAsGroup { get { return this["bLightAttachmentsAsGroup"].Flag; } set { this["bLightAttachmentsAsGroup"].Flag = value; } }
        public bool bExcludeFromLightAttachmentGroup { get { return this["bExcludeFromLightAttachmentGroup"].Flag; } set { this["bExcludeFromLightAttachmentGroup"].Flag = value; } }
        public bool bReceiveMobileCSMShadows { get { return this["bReceiveMobileCSMShadows"].Flag; } set { this["bReceiveMobileCSMShadows"].Flag = value; } }
        public bool bSingleSampleShadowFromStationaryLights { get { return this["bSingleSampleShadowFromStationaryLights"].Flag; } set { this["bSingleSampleShadowFromStationaryLights"].Flag = value; } }
        public bool bIgnoreRadialImpulse { get { return this["bIgnoreRadialImpulse"].Flag; } set { this["bIgnoreRadialImpulse"].Flag = value; } }
        public bool bIgnoreRadialForce { get { return this["bIgnoreRadialForce"].Flag; } set { this["bIgnoreRadialForce"].Flag = value; } }
        public bool bApplyImpulseOnDamage { get { return this["bApplyImpulseOnDamage"].Flag; } set { this["bApplyImpulseOnDamage"].Flag = value; } }
        public bool bReplicatePhysicsToAutonomousProxy { get { return this["bReplicatePhysicsToAutonomousProxy"].Flag; } set { this["bReplicatePhysicsToAutonomousProxy"].Flag = value; } }
        public bool bFillCollisionUnderneathForNavmesh { get { return this["bFillCollisionUnderneathForNavmesh"].Flag; } set { this["bFillCollisionUnderneathForNavmesh"].Flag = value; } }
        public bool AlwaysLoadOnClient { get { return this["AlwaysLoadOnClient"].Flag; } set { this["AlwaysLoadOnClient"].Flag = value; } }
        public bool AlwaysLoadOnServer { get { return this["AlwaysLoadOnServer"].Flag; } set { this["AlwaysLoadOnServer"].Flag = value; } }
        public bool bUseEditorCompositing { get { return this["bUseEditorCompositing"].Flag; } set { this["bUseEditorCompositing"].Flag = value; } }
        public bool bRenderCustomDepth { get { return this["bRenderCustomDepth"].Flag; } set { this["bRenderCustomDepth"].Flag = value; } }
        public bool bVisibleInSceneCaptureOnly { get { return this["bVisibleInSceneCaptureOnly"].Flag; } set { this["bVisibleInSceneCaptureOnly"].Flag = value; } }
        public bool bHiddenInSceneCapture { get { return this["bHiddenInSceneCapture"].Flag; } set { this["bHiddenInSceneCapture"].Flag = value; } }
        public byte bHasCustomNavigableGeometry { get { return this["bHasCustomNavigableGeometry"].GetValue<byte>(); } set { this["bHasCustomNavigableGeometry"].SetValue<byte>(value); } }
        public byte CanCharacterStepUpOn { get { return this["CanCharacterStepUpOn"].GetValue<byte>(); } set { this["CanCharacterStepUpOn"].SetValue<byte>(value); } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public ERendererStencilMask CustomDepthStencilWriteMask { get { return (ERendererStencilMask)this["CustomDepthStencilWriteMask"].GetValue<int>(); } set { this["CustomDepthStencilWriteMask"].SetValue<int>((int)value); } }
        public int CustomDepthStencilValue { get { return this["CustomDepthStencilValue"].GetValue<int>(); } set { this["CustomDepthStencilValue"].SetValue<int>(value); } }
        public CustomPrimitiveData CustomPrimitiveData { get { return this[nameof(CustomPrimitiveData)].As<CustomPrimitiveData>(); } set { this["CustomPrimitiveData"] = value; } }
        public CustomPrimitiveData CustomPrimitiveDataInternal { get { return this[nameof(CustomPrimitiveDataInternal)].As<CustomPrimitiveData>(); } set { this["CustomPrimitiveDataInternal"] = value; } }
        public int TranslucencySortPriority { get { return this["TranslucencySortPriority"].GetValue<int>(); } set { this["TranslucencySortPriority"].SetValue<int>(value); } }
        public float TranslucencySortDistanceOffset { get { return this["TranslucencySortDistanceOffset"].GetValue<float>(); } set { this["TranslucencySortDistanceOffset"].SetValue<float>(value); } }
        public int VisibilityId { get { return this["VisibilityId"].GetValue<int>(); } set { this["VisibilityId"].SetValue<int>(value); } }
        public Array<RuntimeVirtualTexture> RuntimeVirtualTextures { get { return new Array<RuntimeVirtualTexture>(this["RuntimeVirtualTextures"]); } set { this["RuntimeVirtualTextures"] = value; } }
        public byte VirtualTextureLodBias { get { return this["VirtualTextureLodBias"].GetValue<byte>(); } set { this["VirtualTextureLodBias"].SetValue<byte>(value); } }
        public byte VirtualTextureCullMips { get { return this["VirtualTextureCullMips"].GetValue<byte>(); } set { this["VirtualTextureCullMips"].SetValue<byte>(value); } }
        public byte VirtualTextureMinCoverage { get { return this["VirtualTextureMinCoverage"].GetValue<byte>(); } set { this["VirtualTextureMinCoverage"].SetValue<byte>(value); } }
        public ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType { get { return (ERuntimeVirtualTextureMainPassType)this["VirtualTextureRenderPassType"].GetValue<int>(); } set { this["VirtualTextureRenderPassType"].SetValue<int>((int)value); } }
        public float LpvBiasMultiplier { get { return this["LpvBiasMultiplier"].GetValue<float>(); } set { this["LpvBiasMultiplier"].SetValue<float>(value); } }
        public float BoundsScale { get { return this["BoundsScale"].GetValue<float>(); } set { this["BoundsScale"].SetValue<float>(value); } }
        public Array<Actor> MoveIgnoreActors { get { return new Array<Actor>(this["MoveIgnoreActors"]); } set { this["MoveIgnoreActors"] = value; } }
        public Array<PrimitiveComponent> MoveIgnoreComponents { get { return new Array<PrimitiveComponent>(this["MoveIgnoreComponents"]); } set { this["MoveIgnoreComponents"] = value; } }
        public BodyInstance BodyInstance { get { return this[nameof(BodyInstance)].As<BodyInstance>(); } set { this["BodyInstance"] = value; } }
        public UEObject OnComponentHit { get { return this["OnComponentHit"]; } set { this["OnComponentHit"] = value; } }
        public UEObject OnComponentBeginOverlap { get { return this["OnComponentBeginOverlap"]; } set { this["OnComponentBeginOverlap"] = value; } }
        public UEObject OnComponentEndOverlap { get { return this["OnComponentEndOverlap"]; } set { this["OnComponentEndOverlap"] = value; } }
        public UEObject OnComponentWake { get { return this["OnComponentWake"]; } set { this["OnComponentWake"] = value; } }
        public UEObject OnComponentSleep { get { return this["OnComponentSleep"]; } set { this["OnComponentSleep"] = value; } }
        public UEObject OnBeginCursorOver { get { return this["OnBeginCursorOver"]; } set { this["OnBeginCursorOver"] = value; } }
        public UEObject OnEndCursorOver { get { return this["OnEndCursorOver"]; } set { this["OnEndCursorOver"] = value; } }
        public UEObject OnClicked { get { return this["OnClicked"]; } set { this["OnClicked"] = value; } }
        public UEObject OnReleased { get { return this["OnReleased"]; } set { this["OnReleased"] = value; } }
        public UEObject OnInputTouchBegin { get { return this["OnInputTouchBegin"]; } set { this["OnInputTouchBegin"] = value; } }
        public UEObject OnInputTouchEnd { get { return this["OnInputTouchEnd"]; } set { this["OnInputTouchEnd"] = value; } }
        public UEObject OnInputTouchEnter { get { return this["OnInputTouchEnter"]; } set { this["OnInputTouchEnter"] = value; } }
        public UEObject OnInputTouchLeave { get { return this["OnInputTouchLeave"]; } set { this["OnInputTouchLeave"] = value; } }
        public PrimitiveComponent LODParentPrimitive { get { return this[nameof(LODParentPrimitive)].As<PrimitiveComponent>(); } set { this["LODParentPrimitive"] = value; } }
        public bool bRenderWithCustomFOV { get { return this["bRenderWithCustomFOV"].Flag; } set { this["bRenderWithCustomFOV"].Flag = value; } }
        public bool bKeepBaseLightmapResolution { get { return this["bKeepBaseLightmapResolution"].Flag; } set { this["bKeepBaseLightmapResolution"].Flag = value; } }
        public UEObject WasRecentlyRendered(UEObject Tolerance) { return InvokeUEObject("WasRecentlyRendered", Tolerance); }
        public void _PrimitiveComponent(UEObject MinDrawDistance, UEObject LDMaxDrawDistance, UEObject CachedMaxDrawDistance, UEObject DepthPriorityGroup, UEObject ViewOwnerDepthPriorityGroup, UEObject IndirectLightingCacheQuality, UEObject LightmapType, UEObject bUseMaxLODAsImposter, UEObject bBatchImpostersAsInstances, UEObject bNeverDistanceCull, UEObject bAlwaysCreatePhysicsState, UEObject bGenerateOverlapEvents, UEObject bMultiBodyOverlap, UEObject bTraceComplexOnMove, UEObject bReturnMaterialOnMove, UEObject bUseViewOwnerDepthPriorityGroup, UEObject bAllowCullDistanceVolume, UEObject bHasMotionBlurVelocityMeshes, UEObject bVisibleInReflectionCaptures, UEObject bVisibleInRealTimeSkyCaptures, UEObject bVisibleInRayTracing, UEObject bRenderInMainPass, UEObject bRenderInDepthPass, UEObject bReceivesDecals, UEObject bOwnerNoSee, UEObject bOnlyOwnerSee, UEObject bTreatAsBackgroundForOcclusion, UEObject bUseAsOccluder, UEObject bSelectable, UEObject bForceMipStreaming, UEObject bHasPerInstanceHitProxies, UEObject CastShadow, UEObject bAffectDynamicIndirectLighting, UEObject bAffectDistanceFieldLighting, UEObject bCastDynamicShadow, UEObject bCastStaticShadow, UEObject bCastVolumetricTranslucentShadow, UEObject bCastContactShadow, UEObject bSelfShadowOnly, UEObject bCastFarShadow, UEObject bCastInsetShadow, UEObject bCastCinematicShadow, UEObject bCastHiddenShadow, UEObject bCastShadowAsTwoSided, UEObject bLightAsIfStatic, UEObject bLightAttachmentsAsGroup, UEObject bExcludeFromLightAttachmentGroup, UEObject bReceiveMobileCSMShadows, UEObject bSingleSampleShadowFromStationaryLights, UEObject bIgnoreRadialImpulse, UEObject bIgnoreRadialForce, UEObject bApplyImpulseOnDamage, UEObject bReplicatePhysicsToAutonomousProxy, UEObject bFillCollisionUnderneathForNavmesh, UEObject AlwaysLoadOnClient, UEObject AlwaysLoadOnServer, UEObject bUseEditorCompositing, UEObject bRenderCustomDepth, UEObject bVisibleInSceneCaptureOnly, UEObject bHiddenInSceneCapture, UEObject bHasCustomNavigableGeometry, UEObject CanCharacterStepUpOn, UEObject LightingChannels, UEObject CustomDepthStencilWriteMask, UEObject CustomDepthStencilValue, UEObject CustomPrimitiveData, UEObject CustomPrimitiveDataInternal, UEObject TranslucencySortPriority, UEObject TranslucencySortDistanceOffset, UEObject VisibilityId, UEObject RuntimeVirtualTextures, UEObject VirtualTextureLodBias, UEObject VirtualTextureCullMips, UEObject VirtualTextureMinCoverage, UEObject VirtualTextureRenderPassType, UEObject LpvBiasMultiplier, UEObject BoundsScale, UEObject MoveIgnoreActors, UEObject MoveIgnoreComponents, UEObject BodyInstance, UEObject OnComponentHit, UEObject OnComponentBeginOverlap, UEObject OnComponentEndOverlap, UEObject OnComponentWake, UEObject OnComponentSleep, UEObject OnBeginCursorOver, UEObject OnEndCursorOver, UEObject OnClicked, UEObject OnReleased, UEObject OnInputTouchBegin, UEObject OnInputTouchEnd, UEObject OnInputTouchEnter, UEObject OnInputTouchLeave, UEObject LODParentPrimitive, UEObject bRenderWithCustomFOV, UEObject bKeepBaseLightmapResolution) { Invoke("PrimitiveComponent", MinDrawDistance, LDMaxDrawDistance, CachedMaxDrawDistance, DepthPriorityGroup, ViewOwnerDepthPriorityGroup, IndirectLightingCacheQuality, LightmapType, bUseMaxLODAsImposter, bBatchImpostersAsInstances, bNeverDistanceCull, bAlwaysCreatePhysicsState, bGenerateOverlapEvents, bMultiBodyOverlap, bTraceComplexOnMove, bReturnMaterialOnMove, bUseViewOwnerDepthPriorityGroup, bAllowCullDistanceVolume, bHasMotionBlurVelocityMeshes, bVisibleInReflectionCaptures, bVisibleInRealTimeSkyCaptures, bVisibleInRayTracing, bRenderInMainPass, bRenderInDepthPass, bReceivesDecals, bOwnerNoSee, bOnlyOwnerSee, bTreatAsBackgroundForOcclusion, bUseAsOccluder, bSelectable, bForceMipStreaming, bHasPerInstanceHitProxies, CastShadow, bAffectDynamicIndirectLighting, bAffectDistanceFieldLighting, bCastDynamicShadow, bCastStaticShadow, bCastVolumetricTranslucentShadow, bCastContactShadow, bSelfShadowOnly, bCastFarShadow, bCastInsetShadow, bCastCinematicShadow, bCastHiddenShadow, bCastShadowAsTwoSided, bLightAsIfStatic, bLightAttachmentsAsGroup, bExcludeFromLightAttachmentGroup, bReceiveMobileCSMShadows, bSingleSampleShadowFromStationaryLights, bIgnoreRadialImpulse, bIgnoreRadialForce, bApplyImpulseOnDamage, bReplicatePhysicsToAutonomousProxy, bFillCollisionUnderneathForNavmesh, AlwaysLoadOnClient, AlwaysLoadOnServer, bUseEditorCompositing, bRenderCustomDepth, bVisibleInSceneCaptureOnly, bHiddenInSceneCapture, bHasCustomNavigableGeometry, CanCharacterStepUpOn, LightingChannels, CustomDepthStencilWriteMask, CustomDepthStencilValue, CustomPrimitiveData, CustomPrimitiveDataInternal, TranslucencySortPriority, TranslucencySortDistanceOffset, VisibilityId, RuntimeVirtualTextures, VirtualTextureLodBias, VirtualTextureCullMips, VirtualTextureMinCoverage, VirtualTextureRenderPassType, LpvBiasMultiplier, BoundsScale, MoveIgnoreActors, MoveIgnoreComponents, BodyInstance, OnComponentHit, OnComponentBeginOverlap, OnComponentEndOverlap, OnComponentWake, OnComponentSleep, OnBeginCursorOver, OnEndCursorOver, OnClicked, OnReleased, OnInputTouchBegin, OnInputTouchEnd, OnInputTouchEnter, OnInputTouchLeave, LODParentPrimitive, bRenderWithCustomFOV, bKeepBaseLightmapResolution); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class SceneComponent : ActorComponent
    {
        public SceneComponent(nint addr) : base(addr) { }
        public SceneComponent() : base(0) { }
        public UEObject PhysicsVolume { get { return this["PhysicsVolume"]; } set { this["PhysicsVolume"] = value; } }
        public SceneComponent AttachParent { get { return this[nameof(AttachParent)].As<SceneComponent>(); } set { this["AttachParent"] = value; } }
        public string AttachSocketName { get { return this["AttachSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SceneComponent> AttachChildren { get { return new Array<SceneComponent>(this["AttachChildren"]); } set { this["AttachChildren"] = value; } }
        public Array<SceneComponent> ClientAttachedChildren { get { return new Array<SceneComponent>(this["ClientAttachedChildren"]); } set { this["ClientAttachedChildren"] = value; } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector>(); } set { this["RelativeScale3D"] = value; } }
        public Vector ComponentVelocity { get { return this[nameof(ComponentVelocity)].As<Vector>(); } set { this["ComponentVelocity"] = value; } }
        public bool bComponentToWorldUpdated { get { return this["bComponentToWorldUpdated"].Flag; } set { this["bComponentToWorldUpdated"].Flag = value; } }
        public bool bAbsoluteLocation { get { return this["bAbsoluteLocation"].Flag; } set { this["bAbsoluteLocation"].Flag = value; } }
        public bool bAbsoluteRotation { get { return this["bAbsoluteRotation"].Flag; } set { this["bAbsoluteRotation"].Flag = value; } }
        public bool bAbsoluteScale { get { return this["bAbsoluteScale"].Flag; } set { this["bAbsoluteScale"].Flag = value; } }
        public bool bVisible { get { return this["bVisible"].Flag; } set { this["bVisible"].Flag = value; } }
        public bool bShouldBeAttached { get { return this["bShouldBeAttached"].Flag; } set { this["bShouldBeAttached"].Flag = value; } }
        public bool bShouldSnapLocationWhenAttached { get { return this["bShouldSnapLocationWhenAttached"].Flag; } set { this["bShouldSnapLocationWhenAttached"].Flag = value; } }
        public bool bShouldSnapRotationWhenAttached { get { return this["bShouldSnapRotationWhenAttached"].Flag; } set { this["bShouldSnapRotationWhenAttached"].Flag = value; } }
        public bool bShouldUpdatePhysicsVolume { get { return this["bShouldUpdatePhysicsVolume"].Flag; } set { this["bShouldUpdatePhysicsVolume"].Flag = value; } }
        public bool bHiddenInGame { get { return this["bHiddenInGame"].Flag; } set { this["bHiddenInGame"].Flag = value; } }
        public bool bBoundsChangeTriggersStreamingDataRebuild { get { return this["bBoundsChangeTriggersStreamingDataRebuild"].Flag; } set { this["bBoundsChangeTriggersStreamingDataRebuild"].Flag = value; } }
        public bool bUseAttachParentBound { get { return this["bUseAttachParentBound"].Flag; } set { this["bUseAttachParentBound"].Flag = value; } }
        public byte Mobility { get { return this["Mobility"].GetValue<byte>(); } set { this["Mobility"].SetValue<byte>(value); } }
        public byte DetailMode { get { return this["DetailMode"].GetValue<byte>(); } set { this["DetailMode"].SetValue<byte>(value); } }
        public UEObject PhysicsVolumeChangedDelegate { get { return this["PhysicsVolumeChangedDelegate"]; } set { this["PhysicsVolumeChangedDelegate"] = value; } }
        public void ToggleVisibility(UEObject bPropagateToChildren) { Invoke("ToggleVisibility", bPropagateToChildren); }
        public void _SceneComponent(UEObject PhysicsVolume, UEObject AttachParent, UEObject AttachSocketName, UEObject AttachChildren, UEObject ClientAttachedChildren, UEObject RelativeLocation, UEObject RelativeRotation, UEObject RelativeScale3D, UEObject ComponentVelocity, UEObject bComponentToWorldUpdated, UEObject bAbsoluteLocation, UEObject bAbsoluteRotation, UEObject bAbsoluteScale, UEObject bVisible, UEObject bShouldBeAttached, UEObject bShouldSnapLocationWhenAttached, UEObject bShouldSnapRotationWhenAttached, UEObject bShouldUpdatePhysicsVolume, UEObject bHiddenInGame, UEObject bBoundsChangeTriggersStreamingDataRebuild, UEObject bUseAttachParentBound, UEObject Mobility, UEObject DetailMode, UEObject PhysicsVolumeChangedDelegate) { Invoke("SceneComponent", PhysicsVolume, AttachParent, AttachSocketName, AttachChildren, ClientAttachedChildren, RelativeLocation, RelativeRotation, RelativeScale3D, ComponentVelocity, bComponentToWorldUpdated, bAbsoluteLocation, bAbsoluteRotation, bAbsoluteScale, bVisible, bShouldBeAttached, bShouldSnapLocationWhenAttached, bShouldSnapRotationWhenAttached, bShouldUpdatePhysicsVolume, bHiddenInGame, bBoundsChangeTriggersStreamingDataRebuild, bUseAttachParentBound, Mobility, DetailMode, PhysicsVolumeChangedDelegate); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class OnlineSession : UEObject
    {
        public OnlineSession(nint addr) : base(addr) { }
        public OnlineSession() : base(0) { }
    }
    public class OnlineEngineInterface : UEObject
    {
        public OnlineEngineInterface(nint addr) : base(addr) { }
        public OnlineEngineInterface() : base(0) { }
    }
    public class NetDriver : UEObject
    {
        public NetDriver(nint addr) : base(addr) { }
        public NetDriver() : base(0) { }
        public string NetConnectionClassName { get { return this["NetConnectionClassName"].ToString(); } set { /* String properties are read-only */ } }
        public string ReplicationDriverClassName { get { return this["ReplicationDriverClassName"].ToString(); } set { /* String properties are read-only */ } }
        public int MaxDownloadSize { get { return this["MaxDownloadSize"].GetValue<int>(); } set { this["MaxDownloadSize"].SetValue<int>(value); } }
        public bool bClampListenServerTickRate { get { return this["bClampListenServerTickRate"].Flag; } set { this["bClampListenServerTickRate"].Flag = value; } }
        public int NetServerMaxTickRate { get { return this["NetServerMaxTickRate"].GetValue<int>(); } set { this["NetServerMaxTickRate"].SetValue<int>(value); } }
        public int MaxNetTickRate { get { return this["MaxNetTickRate"].GetValue<int>(); } set { this["MaxNetTickRate"].SetValue<int>(value); } }
        public int MaxInternetClientRate { get { return this["MaxInternetClientRate"].GetValue<int>(); } set { this["MaxInternetClientRate"].SetValue<int>(value); } }
        public int MaxClientRate { get { return this["MaxClientRate"].GetValue<int>(); } set { this["MaxClientRate"].SetValue<int>(value); } }
        public float ServerTravelPause { get { return this["ServerTravelPause"].GetValue<float>(); } set { this["ServerTravelPause"].SetValue<float>(value); } }
        public float SpawnPrioritySeconds { get { return this["SpawnPrioritySeconds"].GetValue<float>(); } set { this["SpawnPrioritySeconds"].SetValue<float>(value); } }
        public float RelevantTimeout { get { return this["RelevantTimeout"].GetValue<float>(); } set { this["RelevantTimeout"].SetValue<float>(value); } }
        public float KeepAliveTime { get { return this["KeepAliveTime"].GetValue<float>(); } set { this["KeepAliveTime"].SetValue<float>(value); } }
        public float InitialConnectTimeout { get { return this["InitialConnectTimeout"].GetValue<float>(); } set { this["InitialConnectTimeout"].SetValue<float>(value); } }
        public float ConnectionTimeout { get { return this["ConnectionTimeout"].GetValue<float>(); } set { this["ConnectionTimeout"].SetValue<float>(value); } }
        public float TimeoutMultiplierForUnoptimizedBuilds { get { return this["TimeoutMultiplierForUnoptimizedBuilds"].GetValue<float>(); } set { this["TimeoutMultiplierForUnoptimizedBuilds"].SetValue<float>(value); } }
        public bool bNoTimeouts { get { return this["bNoTimeouts"].Flag; } set { this["bNoTimeouts"].Flag = value; } }
        public bool bNeverApplyNetworkEmulationSettings { get { return this["bNeverApplyNetworkEmulationSettings"].Flag; } set { this["bNeverApplyNetworkEmulationSettings"].Flag = value; } }
        public NetConnection ServerConnection { get { return this[nameof(ServerConnection)].As<NetConnection>(); } set { this["ServerConnection"] = value; } }
        public Array<NetConnection> ClientConnections { get { return new Array<NetConnection>(this["ClientConnections"]); } set { this["ClientConnections"] = value; } }
        public int RecentlyDisconnectedTrackingTime { get { return this["RecentlyDisconnectedTrackingTime"].GetValue<int>(); } set { this["RecentlyDisconnectedTrackingTime"].SetValue<int>(value); } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public Package WorldPackage { get { return this[nameof(WorldPackage)].As<Package>(); } set { this["WorldPackage"] = value; } }
        public UEObject NetConnectionClass { get { return this["NetConnectionClass"]; } set { this["NetConnectionClass"] = value; } }
        public UEObject ReplicationDriverClass { get { return this["ReplicationDriverClass"]; } set { this["ReplicationDriverClass"] = value; } }
        public string NetDriverName { get { return this["NetDriverName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ChannelDefinition> ChannelDefinitions { get { return new Array<ChannelDefinition>(this["ChannelDefinitions"]); } set { this["ChannelDefinitions"] = value; } }
        public UEObject ChannelDefinitionMap { get { return this["ChannelDefinitionMap"]; } set { this["ChannelDefinitionMap"] = value; } }
        public Array<Channel> ActorChannelPool { get { return new Array<Channel>(this["ActorChannelPool"]); } set { this["ActorChannelPool"] = value; } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public ReplicationDriver ReplicationDriver { get { return this[nameof(ReplicationDriver)].As<ReplicationDriver>(); } set { this["ReplicationDriver"] = value; } }
    }
    public class NetConnection : Player
    {
        public NetConnection(nint addr) : base(addr) { }
        public NetConnection() : base(0) { }
        public Array<ChildConnection> Children { get { return new Array<ChildConnection>(this["Children"]); } set { this["Children"] = value; } }
        public NetDriver Driver { get { return this[nameof(Driver)].As<NetDriver>(); } set { this["Driver"] = value; } }
        public UEObject PackageMapClass { get { return this["PackageMapClass"]; } set { this["PackageMapClass"] = value; } }
        public PackageMap PackageMap { get { return this[nameof(PackageMap)].As<PackageMap>(); } set { this["PackageMap"] = value; } }
        public Array<Channel> OpenChannels { get { return new Array<Channel>(this["OpenChannels"]); } set { this["OpenChannels"] = value; } }
        public Array<Actor> SentTemporaries { get { return new Array<Actor>(this["SentTemporaries"]); } set { this["SentTemporaries"] = value; } }
        public Actor ViewTarget { get { return this[nameof(ViewTarget)].As<Actor>(); } set { this["ViewTarget"] = value; } }
        public Actor OwningActor { get { return this[nameof(OwningActor)].As<Actor>(); } set { this["OwningActor"] = value; } }
        public int MaxPacket { get { return this["MaxPacket"].GetValue<int>(); } set { this["MaxPacket"].SetValue<int>(value); } }
        public bool InternalAck { get { return this["InternalAck"].Flag; } set { this["InternalAck"].Flag = value; } }
        public UniqueNetIdRepl PlayerId { get { return this[nameof(PlayerId)].As<UniqueNetIdRepl>(); } set { this["PlayerId"] = value; } }
        public double LastReceiveTime { get { return this["LastReceiveTime"].GetValue<double>(); } set { this["LastReceiveTime"].SetValue<double>(value); } }
        public Array<Channel> ChannelsToTick { get { return new Array<Channel>(this["ChannelsToTick"]); } set { this["ChannelsToTick"] = value; } }
    }
    public class Player : UEObject
    {
        public Player(nint addr) : base(addr) { }
        public Player() : base(0) { }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public int CurrentNetSpeed { get { return this["CurrentNetSpeed"].GetValue<int>(); } set { this["CurrentNetSpeed"].SetValue<int>(value); } }
        public int ConfiguredInternetSpeed { get { return this["ConfiguredInternetSpeed"].GetValue<int>(); } set { this["ConfiguredInternetSpeed"].SetValue<int>(value); } }
        public int ConfiguredLanSpeed { get { return this["ConfiguredLanSpeed"].GetValue<int>(); } set { this["ConfiguredLanSpeed"].SetValue<int>(value); } }
    }
    public class OnlineBlueprintCallProxyBase : BlueprintAsyncActionBase
    {
        public OnlineBlueprintCallProxyBase(nint addr) : base(addr) { }
        public OnlineBlueprintCallProxyBase() : base(0) { }
    }
    public class EngineSubsystem : DynamicSubsystem
    {
        public EngineSubsystem(nint addr) : base(addr) { }
        public EngineSubsystem() : base(0) { }
    }
    public class DynamicSubsystem : Subsystem
    {
        public DynamicSubsystem(nint addr) : base(addr) { }
        public DynamicSubsystem() : base(0) { }
    }
    public class Subsystem : UEObject
    {
        public Subsystem(nint addr) : base(addr) { }
        public Subsystem() : base(0) { }
    }
    public class DataAsset : UEObject
    {
        public DataAsset(nint addr) : base(addr) { }
        public DataAsset() : base(0) { }
        public UEObject NativeClass { get { return this["NativeClass"]; } set { this["NativeClass"] = value; } }
    }
    public class Blueprint : BlueprintCore
    {
        public Blueprint(nint addr) : base(addr) { }
        public Blueprint() : base(0) { }
        public UEObject ParentClass { get { return this["ParentClass"]; } set { this["ParentClass"] = value; } }
        public byte BlueprintType { get { return this["BlueprintType"].GetValue<byte>(); } set { this["BlueprintType"].SetValue<byte>(value); } }
        public bool bRecompileOnLoad { get { return this["bRecompileOnLoad"].Flag; } set { this["bRecompileOnLoad"].Flag = value; } }
        public bool bHasBeenRegenerated { get { return this["bHasBeenRegenerated"].Flag; } set { this["bHasBeenRegenerated"].Flag = value; } }
        public bool bIsRegeneratingOnLoad { get { return this["bIsRegeneratingOnLoad"].Flag; } set { this["bIsRegeneratingOnLoad"].Flag = value; } }
        public int BlueprintSystemVersion { get { return this["BlueprintSystemVersion"].GetValue<int>(); } set { this["BlueprintSystemVersion"].SetValue<int>(value); } }
        public SimpleConstructionScript SimpleConstructionScript { get { return this[nameof(SimpleConstructionScript)].As<SimpleConstructionScript>(); } set { this["SimpleConstructionScript"] = value; } }
        public Array<ActorComponent> ComponentTemplates { get { return new Array<ActorComponent>(this["ComponentTemplates"]); } set { this["ComponentTemplates"] = value; } }
        public Array<TimelineTemplate> Timelines { get { return new Array<TimelineTemplate>(this["Timelines"]); } set { this["Timelines"] = value; } }
        public Array<BPComponentClassOverride> ComponentClassOverrides { get { return new Array<BPComponentClassOverride>(this["ComponentClassOverrides"]); } set { this["ComponentClassOverrides"] = value; } }
        public InheritableComponentHandler InheritableComponentHandler { get { return this[nameof(InheritableComponentHandler)].As<InheritableComponentHandler>(); } set { this["InheritableComponentHandler"] = value; } }
    }
    public class BlueprintCore : UEObject
    {
        public BlueprintCore(nint addr) : base(addr) { }
        public BlueprintCore() : base(0) { }
        public UEObject SkeletonGeneratedClass { get { return this["SkeletonGeneratedClass"]; } set { this["SkeletonGeneratedClass"] = value; } }
        public UEObject GeneratedClass { get { return this["GeneratedClass"]; } set { this["GeneratedClass"] = value; } }
        public bool bLegacyNeedToPurgeSkelRefs { get { return this["bLegacyNeedToPurgeSkelRefs"].Flag; } set { this["bLegacyNeedToPurgeSkelRefs"].Flag = value; } }
        public SDK.Script.CoreUObject.Guid BlueprintGuid { get { return this[nameof(BlueprintGuid)].As<SDK.Script.CoreUObject.Guid>(); } set { this["BlueprintGuid"] = value; } }
    }
    public class DefaultPawn : Pawn
    {
        public DefaultPawn(nint addr) : base(addr) { }
        public DefaultPawn() : base(0) { }
        public float BaseTurnRate { get { return this["BaseTurnRate"].GetValue<float>(); } set { this["BaseTurnRate"].SetValue<float>(value); } }
        public float BaseLookUpRate { get { return this["BaseLookUpRate"].GetValue<float>(); } set { this["BaseLookUpRate"].SetValue<float>(value); } }
        public PawnMovementComponent MovementComponent { get { return this[nameof(MovementComponent)].As<PawnMovementComponent>(); } set { this["MovementComponent"] = value; } }
        public SphereComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<SphereComponent>(); } set { this["CollisionComponent"] = value; } }
        public StaticMeshComponent MeshComponent { get { return this[nameof(MeshComponent)].As<StaticMeshComponent>(); } set { this["MeshComponent"] = value; } }
        public bool bAddDefaultMovementBindings { get { return this["bAddDefaultMovementBindings"].Flag; } set { this["bAddDefaultMovementBindings"].Flag = value; } }
        public void TurnAtRate(UEObject Rate) { Invoke("TurnAtRate", Rate); }
        public void _DefaultPawn(UEObject BaseTurnRate, UEObject BaseLookUpRate, UEObject MovementComponent, UEObject CollisionComponent, UEObject MeshComponent, UEObject bAddDefaultMovementBindings) { Invoke("DefaultPawn", BaseTurnRate, BaseLookUpRate, MovementComponent, CollisionComponent, MeshComponent, bAddDefaultMovementBindings); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Pawn : Actor
    {
        public Pawn(nint addr) : base(addr) { }
        public Pawn() : base(0) { }
        public bool bUseControllerRotationPitch { get { return this["bUseControllerRotationPitch"].Flag; } set { this["bUseControllerRotationPitch"].Flag = value; } }
        public bool bUseControllerRotationYaw { get { return this["bUseControllerRotationYaw"].Flag; } set { this["bUseControllerRotationYaw"].Flag = value; } }
        public bool bUseControllerRotationRoll { get { return this["bUseControllerRotationRoll"].Flag; } set { this["bUseControllerRotationRoll"].Flag = value; } }
        public bool bCanAffectNavigationGeneration { get { return this["bCanAffectNavigationGeneration"].Flag; } set { this["bCanAffectNavigationGeneration"].Flag = value; } }
        public float BaseEyeHeight { get { return this["BaseEyeHeight"].GetValue<float>(); } set { this["BaseEyeHeight"].SetValue<float>(value); } }
        public byte AutoPossessPlayer { get { return this["AutoPossessPlayer"].GetValue<byte>(); } set { this["AutoPossessPlayer"].SetValue<byte>(value); } }
        public EAutoPossessAI AutoPossessAI { get { return (EAutoPossessAI)this["AutoPossessAI"].GetValue<int>(); } set { this["AutoPossessAI"].SetValue<int>((int)value); } }
        public float RemoteViewPitch { get { return this["RemoteViewPitch"].GetValue<float>(); } set { this["RemoteViewPitch"].SetValue<float>(value); } }
        public UEObject AIControllerClass { get { return this["AIControllerClass"]; } set { this["AIControllerClass"] = value; } }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
        public Controller LastHitBy { get { return this[nameof(LastHitBy)].As<Controller>(); } set { this["LastHitBy"] = value; } }
        public Controller Controller { get { return this[nameof(Controller)].As<Controller>(); } set { this["Controller"] = value; } }
        public Vector ControlInputVector { get { return this[nameof(ControlInputVector)].As<Vector>(); } set { this["ControlInputVector"] = value; } }
        public Vector LastControlInputVector { get { return this[nameof(LastControlInputVector)].As<Vector>(); } set { this["LastControlInputVector"] = value; } }
        public void SpawnDefaultController() { Invoke("SpawnDefaultController"); }
        public void _Pawn(UEObject bUseControllerRotationPitch, UEObject bUseControllerRotationYaw, UEObject bUseControllerRotationRoll, UEObject bCanAffectNavigationGeneration, UEObject BaseEyeHeight, UEObject AutoPossessPlayer, UEObject AutoPossessAI, UEObject RemoteViewPitch, UEObject AIControllerClass, UEObject PlayerState, UEObject LastHitBy, UEObject Controller, UEObject ControlInputVector, UEObject LastControlInputVector) { Invoke("Pawn", bUseControllerRotationPitch, bUseControllerRotationYaw, bUseControllerRotationRoll, bCanAffectNavigationGeneration, BaseEyeHeight, AutoPossessPlayer, AutoPossessAI, RemoteViewPitch, AIControllerClass, PlayerState, LastHitBy, Controller, ControlInputVector, LastControlInputVector); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class HUD : Actor
    {
        public HUD(nint addr) : base(addr) { }
        public HUD() : base(0) { }
        public PlayerController PlayerOwner { get { return this[nameof(PlayerOwner)].As<PlayerController>(); } set { this["PlayerOwner"] = value; } }
        public bool bLostFocusPaused { get { return this["bLostFocusPaused"].Flag; } set { this["bLostFocusPaused"].Flag = value; } }
        public bool bShowHUD { get { return this["bShowHUD"].Flag; } set { this["bShowHUD"].Flag = value; } }
        public bool bShowDebugInfo { get { return this["bShowDebugInfo"].Flag; } set { this["bShowDebugInfo"].Flag = value; } }
        public int CurrentTargetIndex { get { return this["CurrentTargetIndex"].GetValue<int>(); } set { this["CurrentTargetIndex"].SetValue<int>(value); } }
        public bool bShowHitBoxDebugInfo { get { return this["bShowHitBoxDebugInfo"].Flag; } set { this["bShowHitBoxDebugInfo"].Flag = value; } }
        public bool bShowOverlays { get { return this["bShowOverlays"].Flag; } set { this["bShowOverlays"].Flag = value; } }
        public bool bEnableDebugTextShadow { get { return this["bEnableDebugTextShadow"].Flag; } set { this["bEnableDebugTextShadow"].Flag = value; } }
        public Array<Actor> PostRenderedActors { get { return new Array<Actor>(this["PostRenderedActors"]); } set { this["PostRenderedActors"] = value; } }
        public List<string> DebugDisplay { get { return this["DebugDisplay"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ToggledDebugCategories { get { return this["ToggledDebugCategories"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Canvas Canvas { get { return this[nameof(Canvas)].As<Canvas>(); } set { this["Canvas"] = value; } }
        public Canvas DebugCanvas { get { return this[nameof(DebugCanvas)].As<Canvas>(); } set { this["DebugCanvas"] = value; } }
        public Array<DebugTextInfo> DebugTextList { get { return new Array<DebugTextInfo>(this["DebugTextList"]); } set { this["DebugTextList"] = value; } }
        public UEObject ShowDebugTargetDesiredClass { get { return this["ShowDebugTargetDesiredClass"]; } set { this["ShowDebugTargetDesiredClass"] = value; } }
        public Actor ShowDebugTargetActor { get { return this[nameof(ShowDebugTargetActor)].As<Actor>(); } set { this["ShowDebugTargetActor"] = value; } }
        public void ShowHUD() { Invoke("ShowHUD"); }
        public void _HUD(UEObject PlayerOwner, UEObject bLostFocusPaused, UEObject bShowHUD, UEObject bShowDebugInfo, UEObject CurrentTargetIndex, UEObject bShowHitBoxDebugInfo, UEObject bShowOverlays, UEObject bEnableDebugTextShadow, UEObject PostRenderedActors, UEObject DebugDisplay, UEObject ToggledDebugCategories, UEObject Canvas, UEObject DebugCanvas, UEObject DebugTextList, UEObject ShowDebugTargetDesiredClass, UEObject ShowDebugTargetActor) { Invoke("HUD", PlayerOwner, bLostFocusPaused, bShowHUD, bShowDebugInfo, CurrentTargetIndex, bShowHitBoxDebugInfo, bShowOverlays, bEnableDebugTextShadow, PostRenderedActors, DebugDisplay, ToggledDebugCategories, Canvas, DebugCanvas, DebugTextList, ShowDebugTargetDesiredClass, ShowDebugTargetActor); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class Actor : UEObject
    {
        public Actor(nint addr) : base(addr) { }
        public Actor() : base(0) { }
        public ActorTickFunction PrimaryActorTick { get { return this[nameof(PrimaryActorTick)].As<ActorTickFunction>(); } set { this["PrimaryActorTick"] = value; } }
        public bool bNetTemporary { get { return this["bNetTemporary"].Flag; } set { this["bNetTemporary"].Flag = value; } }
        public bool bNetStartup { get { return this["bNetStartup"].Flag; } set { this["bNetStartup"].Flag = value; } }
        public bool bOnlyRelevantToOwner { get { return this["bOnlyRelevantToOwner"].Flag; } set { this["bOnlyRelevantToOwner"].Flag = value; } }
        public bool bAlwaysRelevant { get { return this["bAlwaysRelevant"].Flag; } set { this["bAlwaysRelevant"].Flag = value; } }
        public bool bReplicateMovement { get { return this["bReplicateMovement"].Flag; } set { this["bReplicateMovement"].Flag = value; } }
        public bool bHidden { get { return this["bHidden"].Flag; } set { this["bHidden"].Flag = value; } }
        public bool bTearOff { get { return this["bTearOff"].Flag; } set { this["bTearOff"].Flag = value; } }
        public bool bForceNetAddressable { get { return this["bForceNetAddressable"].Flag; } set { this["bForceNetAddressable"].Flag = value; } }
        public bool bExchangedRoles { get { return this["bExchangedRoles"].Flag; } set { this["bExchangedRoles"].Flag = value; } }
        public bool bNetLoadOnClient { get { return this["bNetLoadOnClient"].Flag; } set { this["bNetLoadOnClient"].Flag = value; } }
        public bool bNetUseOwnerRelevancy { get { return this["bNetUseOwnerRelevancy"].Flag; } set { this["bNetUseOwnerRelevancy"].Flag = value; } }
        public bool bRelevantForNetworkReplays { get { return this["bRelevantForNetworkReplays"].Flag; } set { this["bRelevantForNetworkReplays"].Flag = value; } }
        public bool bRelevantForLevelBounds { get { return this["bRelevantForLevelBounds"].Flag; } set { this["bRelevantForLevelBounds"].Flag = value; } }
        public bool bReplayRewindable { get { return this["bReplayRewindable"].Flag; } set { this["bReplayRewindable"].Flag = value; } }
        public bool bAllowTickBeforeBeginPlay { get { return this["bAllowTickBeforeBeginPlay"].Flag; } set { this["bAllowTickBeforeBeginPlay"].Flag = value; } }
        public bool bAutoDestroyWhenFinished { get { return this["bAutoDestroyWhenFinished"].Flag; } set { this["bAutoDestroyWhenFinished"].Flag = value; } }
        public bool bCanBeDamaged { get { return this["bCanBeDamaged"].Flag; } set { this["bCanBeDamaged"].Flag = value; } }
        public bool bBlockInput { get { return this["bBlockInput"].Flag; } set { this["bBlockInput"].Flag = value; } }
        public bool bCollideWhenPlacing { get { return this["bCollideWhenPlacing"].Flag; } set { this["bCollideWhenPlacing"].Flag = value; } }
        public bool bFindCameraComponentWhenViewTarget { get { return this["bFindCameraComponentWhenViewTarget"].Flag; } set { this["bFindCameraComponentWhenViewTarget"].Flag = value; } }
        public bool bGenerateOverlapEventsDuringLevelStreaming { get { return this["bGenerateOverlapEventsDuringLevelStreaming"].Flag; } set { this["bGenerateOverlapEventsDuringLevelStreaming"].Flag = value; } }
        public bool bIgnoresOriginShifting { get { return this["bIgnoresOriginShifting"].Flag; } set { this["bIgnoresOriginShifting"].Flag = value; } }
        public bool bEnableAutoLODGeneration { get { return this["bEnableAutoLODGeneration"].Flag; } set { this["bEnableAutoLODGeneration"].Flag = value; } }
        public bool bIsEditorOnlyActor { get { return this["bIsEditorOnlyActor"].Flag; } set { this["bIsEditorOnlyActor"].Flag = value; } }
        public bool bActorSeamlessTraveled { get { return this["bActorSeamlessTraveled"].Flag; } set { this["bActorSeamlessTraveled"].Flag = value; } }
        public bool bReplicates { get { return this["bReplicates"].Flag; } set { this["bReplicates"].Flag = value; } }
        public bool bCanBeInCluster { get { return this["bCanBeInCluster"].Flag; } set { this["bCanBeInCluster"].Flag = value; } }
        public bool bAllowReceiveTickEventOnDedicatedServer { get { return this["bAllowReceiveTickEventOnDedicatedServer"].Flag; } set { this["bAllowReceiveTickEventOnDedicatedServer"].Flag = value; } }
        public bool bActorEnableCollision { get { return this["bActorEnableCollision"].Flag; } set { this["bActorEnableCollision"].Flag = value; } }
        public bool bActorIsBeingDestroyed { get { return this["bActorIsBeingDestroyed"].Flag; } set { this["bActorIsBeingDestroyed"].Flag = value; } }
        public EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming { get { return (EActorUpdateOverlapsMethod)this["UpdateOverlapsMethodDuringLevelStreaming"].GetValue<int>(); } set { this["UpdateOverlapsMethodDuringLevelStreaming"].SetValue<int>((int)value); } }
        public EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming { get { return (EActorUpdateOverlapsMethod)this["DefaultUpdateOverlapsMethodDuringLevelStreaming"].GetValue<int>(); } set { this["DefaultUpdateOverlapsMethodDuringLevelStreaming"].SetValue<int>((int)value); } }
        public byte RemoteRole { get { return this["RemoteRole"].GetValue<byte>(); } set { this["RemoteRole"].SetValue<byte>(value); } }
        public RepMovement ReplicatedMovement { get { return this[nameof(ReplicatedMovement)].As<RepMovement>(); } set { this["ReplicatedMovement"] = value; } }
        public float InitialLifeSpan { get { return this["InitialLifeSpan"].GetValue<float>(); } set { this["InitialLifeSpan"].SetValue<float>(value); } }
        public float CustomTimeDilation { get { return this["CustomTimeDilation"].GetValue<float>(); } set { this["CustomTimeDilation"].SetValue<float>(value); } }
        public RepAttachment AttachmentReplication { get { return this[nameof(AttachmentReplication)].As<RepAttachment>(); } set { this["AttachmentReplication"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public string NetDriverName { get { return this["NetDriverName"].ToString(); } set { /* String properties are read-only */ } }
        public byte Role { get { return this["Role"].GetValue<byte>(); } set { this["Role"].SetValue<byte>(value); } }
        public byte NetDormancy { get { return this["NetDormancy"].GetValue<byte>(); } set { this["NetDormancy"].SetValue<byte>(value); } }
        public ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod { get { return (ESpawnActorCollisionHandlingMethod)this["SpawnCollisionHandlingMethod"].GetValue<int>(); } set { this["SpawnCollisionHandlingMethod"].SetValue<int>((int)value); } }
        public byte AutoReceiveInput { get { return this["AutoReceiveInput"].GetValue<byte>(); } set { this["AutoReceiveInput"].SetValue<byte>(value); } }
        public int InputPriority { get { return this["InputPriority"].GetValue<int>(); } set { this["InputPriority"].SetValue<int>(value); } }
        public InputComponent InputComponent { get { return this[nameof(InputComponent)].As<InputComponent>(); } set { this["InputComponent"] = value; } }
        public float NetCullDistanceSquared { get { return this["NetCullDistanceSquared"].GetValue<float>(); } set { this["NetCullDistanceSquared"].SetValue<float>(value); } }
        public int NetTag { get { return this["NetTag"].GetValue<int>(); } set { this["NetTag"].SetValue<int>(value); } }
        public float NetUpdateFrequency { get { return this["NetUpdateFrequency"].GetValue<float>(); } set { this["NetUpdateFrequency"].SetValue<float>(value); } }
        public float MinNetUpdateFrequency { get { return this["MinNetUpdateFrequency"].GetValue<float>(); } set { this["MinNetUpdateFrequency"].SetValue<float>(value); } }
        public float NetPriority { get { return this["NetPriority"].GetValue<float>(); } set { this["NetPriority"].SetValue<float>(value); } }
        public Pawn Instigator { get { return this[nameof(Instigator)].As<Pawn>(); } set { this["Instigator"] = value; } }
        public Array<Actor> Children { get { return new Array<Actor>(this["Children"]); } set { this["Children"] = value; } }
        public SceneComponent RootComponent { get { return this[nameof(RootComponent)].As<SceneComponent>(); } set { this["RootComponent"] = value; } }
        public Array<MatineeActor> ControllingMatineeActors { get { return new Array<MatineeActor>(this["ControllingMatineeActors"]); } set { this["ControllingMatineeActors"] = value; } }
        public List<string> Layers { get { return this["Layers"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject ParentComponent { get { return this["ParentComponent"]; } set { this["ParentComponent"] = value; } }
        public List<string> Tags { get { return this["Tags"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject OnTakeAnyDamage { get { return this["OnTakeAnyDamage"]; } set { this["OnTakeAnyDamage"] = value; } }
        public UEObject OnTakePointDamage { get { return this["OnTakePointDamage"]; } set { this["OnTakePointDamage"] = value; } }
        public UEObject OnTakeRadialDamage { get { return this["OnTakeRadialDamage"]; } set { this["OnTakeRadialDamage"] = value; } }
        public UEObject OnActorBeginOverlap { get { return this["OnActorBeginOverlap"]; } set { this["OnActorBeginOverlap"] = value; } }
        public UEObject OnActorEndOverlap { get { return this["OnActorEndOverlap"]; } set { this["OnActorEndOverlap"] = value; } }
        public UEObject OnBeginCursorOver { get { return this["OnBeginCursorOver"]; } set { this["OnBeginCursorOver"] = value; } }
        public UEObject OnEndCursorOver { get { return this["OnEndCursorOver"]; } set { this["OnEndCursorOver"] = value; } }
        public UEObject OnClicked { get { return this["OnClicked"]; } set { this["OnClicked"] = value; } }
        public UEObject OnReleased { get { return this["OnReleased"]; } set { this["OnReleased"] = value; } }
        public UEObject OnInputTouchBegin { get { return this["OnInputTouchBegin"]; } set { this["OnInputTouchBegin"] = value; } }
        public UEObject OnInputTouchEnd { get { return this["OnInputTouchEnd"]; } set { this["OnInputTouchEnd"] = value; } }
        public UEObject OnInputTouchEnter { get { return this["OnInputTouchEnter"]; } set { this["OnInputTouchEnter"] = value; } }
        public UEObject OnInputTouchLeave { get { return this["OnInputTouchLeave"]; } set { this["OnInputTouchLeave"] = value; } }
        public UEObject OnActorHit { get { return this["OnActorHit"]; } set { this["OnActorHit"] = value; } }
        public UEObject OnDestroyed { get { return this["OnDestroyed"]; } set { this["OnDestroyed"] = value; } }
        public UEObject OnEndPlay { get { return this["OnEndPlay"]; } set { this["OnEndPlay"] = value; } }
        public Array<ActorComponent> InstanceComponents { get { return new Array<ActorComponent>(this["InstanceComponents"]); } set { this["InstanceComponents"] = value; } }
        public Array<ActorComponent> BlueprintCreatedComponents { get { return new Array<ActorComponent>(this["BlueprintCreatedComponents"]); } set { this["BlueprintCreatedComponents"] = value; } }
        public UEObject WasRecentlyRendered(UEObject Tolerance) { return InvokeUEObject("WasRecentlyRendered", Tolerance); }
        public void _Actor(UEObject PrimaryActorTick, UEObject bNetTemporary, UEObject bNetStartup, UEObject bOnlyRelevantToOwner, UEObject bAlwaysRelevant, UEObject bReplicateMovement, UEObject bHidden, UEObject bTearOff, UEObject bForceNetAddressable, UEObject bExchangedRoles, UEObject bNetLoadOnClient, UEObject bNetUseOwnerRelevancy, UEObject bRelevantForNetworkReplays, UEObject bRelevantForLevelBounds, UEObject bReplayRewindable, UEObject bAllowTickBeforeBeginPlay, UEObject bAutoDestroyWhenFinished, UEObject bCanBeDamaged, UEObject bBlockInput, UEObject bCollideWhenPlacing, UEObject bFindCameraComponentWhenViewTarget, UEObject bGenerateOverlapEventsDuringLevelStreaming, UEObject bIgnoresOriginShifting, UEObject bEnableAutoLODGeneration, UEObject bIsEditorOnlyActor, UEObject bActorSeamlessTraveled, UEObject bReplicates, UEObject bCanBeInCluster, UEObject bAllowReceiveTickEventOnDedicatedServer, UEObject bActorEnableCollision, UEObject bActorIsBeingDestroyed, UEObject UpdateOverlapsMethodDuringLevelStreaming, UEObject DefaultUpdateOverlapsMethodDuringLevelStreaming, UEObject RemoteRole, UEObject ReplicatedMovement, UEObject InitialLifeSpan, UEObject CustomTimeDilation, UEObject AttachmentReplication, UEObject Owner, UEObject NetDriverName, UEObject Role, UEObject NetDormancy, UEObject SpawnCollisionHandlingMethod, UEObject AutoReceiveInput, UEObject InputPriority, UEObject InputComponent, UEObject NetCullDistanceSquared, UEObject NetTag, UEObject NetUpdateFrequency, UEObject MinNetUpdateFrequency, UEObject NetPriority, UEObject Instigator, UEObject Children, UEObject RootComponent, UEObject ControllingMatineeActors, UEObject Layers, UEObject ParentComponent, UEObject Tags, UEObject OnTakeAnyDamage, UEObject OnTakePointDamage, UEObject OnTakeRadialDamage, UEObject OnActorBeginOverlap, UEObject OnActorEndOverlap, UEObject OnBeginCursorOver, UEObject OnEndCursorOver, UEObject OnClicked, UEObject OnReleased, UEObject OnInputTouchBegin, UEObject OnInputTouchEnd, UEObject OnInputTouchEnter, UEObject OnInputTouchLeave, UEObject OnActorHit, UEObject OnDestroyed, UEObject OnEndPlay, UEObject InstanceComponents, UEObject BlueprintCreatedComponents) { Invoke("Actor", PrimaryActorTick, bNetTemporary, bNetStartup, bOnlyRelevantToOwner, bAlwaysRelevant, bReplicateMovement, bHidden, bTearOff, bForceNetAddressable, bExchangedRoles, bNetLoadOnClient, bNetUseOwnerRelevancy, bRelevantForNetworkReplays, bRelevantForLevelBounds, bReplayRewindable, bAllowTickBeforeBeginPlay, bAutoDestroyWhenFinished, bCanBeDamaged, bBlockInput, bCollideWhenPlacing, bFindCameraComponentWhenViewTarget, bGenerateOverlapEventsDuringLevelStreaming, bIgnoresOriginShifting, bEnableAutoLODGeneration, bIsEditorOnlyActor, bActorSeamlessTraveled, bReplicates, bCanBeInCluster, bAllowReceiveTickEventOnDedicatedServer, bActorEnableCollision, bActorIsBeingDestroyed, UpdateOverlapsMethodDuringLevelStreaming, DefaultUpdateOverlapsMethodDuringLevelStreaming, RemoteRole, ReplicatedMovement, InitialLifeSpan, CustomTimeDilation, AttachmentReplication, Owner, NetDriverName, Role, NetDormancy, SpawnCollisionHandlingMethod, AutoReceiveInput, InputPriority, InputComponent, NetCullDistanceSquared, NetTag, NetUpdateFrequency, MinNetUpdateFrequency, NetPriority, Instigator, Children, RootComponent, ControllingMatineeActors, Layers, ParentComponent, Tags, OnTakeAnyDamage, OnTakePointDamage, OnTakeRadialDamage, OnActorBeginOverlap, OnActorEndOverlap, OnBeginCursorOver, OnEndCursorOver, OnClicked, OnReleased, OnInputTouchBegin, OnInputTouchEnd, OnInputTouchEnter, OnInputTouchLeave, OnActorHit, OnDestroyed, OnEndPlay, InstanceComponents, BlueprintCreatedComponents); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class ActorComponent : UEObject
    {
        public ActorComponent(nint addr) : base(addr) { }
        public ActorComponent() : base(0) { }
        public ActorComponentTickFunction PrimaryComponentTick { get { return this[nameof(PrimaryComponentTick)].As<ActorComponentTickFunction>(); } set { this["PrimaryComponentTick"] = value; } }
        public List<string> ComponentTags { get { return this["ComponentTags"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this["AssetUserData"]); } set { this["AssetUserData"] = value; } }
        public int UCSSerializationIndex { get { return this["UCSSerializationIndex"].GetValue<int>(); } set { this["UCSSerializationIndex"].SetValue<int>(value); } }
        public bool bNetAddressable { get { return this["bNetAddressable"].Flag; } set { this["bNetAddressable"].Flag = value; } }
        public bool bReplicates { get { return this["bReplicates"].Flag; } set { this["bReplicates"].Flag = value; } }
        public bool bAutoActivate { get { return this["bAutoActivate"].Flag; } set { this["bAutoActivate"].Flag = value; } }
        public bool bIsActive { get { return this["bIsActive"].Flag; } set { this["bIsActive"].Flag = value; } }
        public bool bEditableWhenInherited { get { return this["bEditableWhenInherited"].Flag; } set { this["bEditableWhenInherited"].Flag = value; } }
        public bool bCanEverAffectNavigation { get { return this["bCanEverAffectNavigation"].Flag; } set { this["bCanEverAffectNavigation"].Flag = value; } }
        public bool bIsEditorOnly { get { return this["bIsEditorOnly"].Flag; } set { this["bIsEditorOnly"].Flag = value; } }
        public EComponentCreationMethod CreationMethod { get { return (EComponentCreationMethod)this["CreationMethod"].GetValue<int>(); } set { this["CreationMethod"].SetValue<int>((int)value); } }
        public UEObject OnComponentActivated { get { return this["OnComponentActivated"]; } set { this["OnComponentActivated"] = value; } }
        public UEObject OnComponentDeactivated { get { return this["OnComponentDeactivated"]; } set { this["OnComponentDeactivated"] = value; } }
        public Array<SimpleMemberReference> UCSModifiedProperties { get { return new Array<SimpleMemberReference>(this["UCSModifiedProperties"]); } set { this["UCSModifiedProperties"] = value; } }
        public void ToggleActive() { Invoke("ToggleActive"); }
        public void _ActorComponent(UEObject PrimaryComponentTick, UEObject ComponentTags, UEObject AssetUserData, UEObject UCSSerializationIndex, UEObject bNetAddressable, UEObject bReplicates, UEObject bAutoActivate, UEObject bIsActive, UEObject bEditableWhenInherited, UEObject bCanEverAffectNavigation, UEObject bIsEditorOnly, UEObject CreationMethod, UEObject OnComponentActivated, UEObject OnComponentDeactivated, UEObject UCSModifiedProperties) { Invoke("ActorComponent", PrimaryComponentTick, ComponentTags, AssetUserData, UCSSerializationIndex, bNetAddressable, bReplicates, bAutoActivate, bIsActive, bEditableWhenInherited, bCanEverAffectNavigation, bIsEditorOnly, CreationMethod, OnComponentActivated, OnComponentDeactivated, UCSModifiedProperties); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
    public class BlueprintFunctionLibrary : UEObject
    {
        public BlueprintFunctionLibrary(nint addr) : base(addr) { }
        public BlueprintFunctionLibrary() : base(0) { }
    }
    public class BlueprintAsyncActionBase : UEObject
    {
        public BlueprintAsyncActionBase(nint addr) : base(addr) { }
        public BlueprintAsyncActionBase() : base(0) { }
        public void Activate() { Invoke("Activate"); }
        public void _BlueprintAsyncActionBase() { Invoke("BlueprintAsyncActionBase"); }
        public void Script_Engine(UEObject None) { Invoke("/Script/Engine", None); }
    }
}
