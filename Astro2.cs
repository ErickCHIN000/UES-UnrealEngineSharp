using System;
using System.Collections.Generic;
using UES;
using UES.Collections;
using UES.Extensions;
using UEObject = UES.UEObject;
using Object = UES.UEObject;
using SystemGuid = System.Guid;
using UESTransform = UES.Extensions.Transform;
using SDK.Script.Engine;
using SDK.Script.GameplayTags;
using SDK.Script.Gauntlet;
using SDK.Script.GameplayAbilities;
using SDK.Script.AIModule;
using SDK.Script.AstroAI;
using SDK.Script.CoreUObject;
using SDK.Script.UMG;
using SDK.Script.InputCore;
using SDK.Script.LevelSequence;
using SDK.Script.SlateCore;
using SDK.Script.DimensionSignificanceManager;
using SDK.Script.AudioModulation;
using SDK.Script.CustomAnimNode;
using SDK.Script.Slate;
using DateTime = SDK.Script.CoreUObject.DateTime;
namespace SDK.Script.Astro2
{
    public class WitchfireLevelBenchmark : Actor
    {
        public WitchfireLevelBenchmark(nint addr) : base(addr) { }
        public WitchfireLevelBenchmark() : base(0) { }
        public UEObject OnBenchmarkStarted { get { return this["OnBenchmarkStarted"]; } set { this["OnBenchmarkStarted"] = value; } }
        public UEObject OnBenchmarkFinished { get { return this["OnBenchmarkFinished"]; } set { this["OnBenchmarkFinished"] = value; } }
        public string BenchmarkName { get { return this["BenchmarkName"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTagContainer BenchmarkTags { get { return this[nameof(BenchmarkTags)].As<GameplayTagContainer>(); } set { this["BenchmarkTags"] = value; } }
        public Array<DimensionBenchmarkJob> Jobs { get { return new Array<DimensionBenchmarkJob>(this["Jobs"]); } set { this["Jobs"] = value; } }
        public void StartBenchmark() { Invoke("StartBenchmark"); }
        public void _WitchfireLevelBenchmark(UEObject OnBenchmarkStarted, UEObject OnBenchmarkFinished, UEObject BenchmarkName, UEObject BenchmarkTags, UEObject Jobs) { Invoke("WitchfireLevelBenchmark", OnBenchmarkStarted, OnBenchmarkFinished, BenchmarkName, BenchmarkTags, Jobs); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class WitchfireGauntletController : GauntletTestController
    {
        public WitchfireGauntletController(nint addr) : base(addr) { }
        public WitchfireGauntletController() : base(0) { }
        public void StopProfiling() { Invoke("StopProfiling"); }
        public void _WitchfireGauntletController() { Invoke("WitchfireGauntletController"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class TeamsAffiliationManager : UEObject
    {
        public TeamsAffiliationManager(nint addr) : base(addr) { }
        public TeamsAffiliationManager() : base(0) { }
        public Array<TeamsAffiliation> TeamsAffiliations { get { return new Array<TeamsAffiliation>(this["TeamsAffiliations"]); } set { this["TeamsAffiliations"] = value; } }
        public UEObject GetInstance() { return InvokeUEObject("GetInstance"); }
        public void _TeamsAffiliationManager(UEObject TeamsAffiliations) { Invoke("TeamsAffiliationManager", TeamsAffiliations); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class SpawnPoint : Actor
    {
        public SpawnPoint(nint addr) : base(addr) { }
        public SpawnPoint() : base(0) { }
        public float Range { get { return this["Range"].GetValue<float>(); } set { this["Range"].SetValue<float>(value); } }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
        public SphereComponent RangeVisualisation { get { return this[nameof(RangeVisualisation)].As<SphereComponent>(); } set { this["RangeVisualisation"] = value; } }
        public BillboardComponent SpriteComponent { get { return this[nameof(SpriteComponent)].As<BillboardComponent>(); } set { this["SpriteComponent"] = value; } }
        public void UnitKilled() { Invoke("UnitKilled"); }
        public void _SpawnPoint(UEObject Range, UEObject SceneComponent, UEObject RangeVisualisation, UEObject SpriteComponent) { Invoke("SpawnPoint", Range, SceneComponent, RangeVisualisation, SpriteComponent); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class SoundNodePlayerLocal : SoundNode
    {
        public SoundNodePlayerLocal(nint addr) : base(addr) { }
        public SoundNodePlayerLocal() : base(0) { }
    }
    public class RecoilCurveVector : CurveVector
    {
        public RecoilCurveVector(nint addr) : base(addr) { }
        public RecoilCurveVector() : base(0) { }
    }
    public class RangeCurve : CurveBase
    {
        public RangeCurve(nint addr) : base(addr) { }
        public RangeCurve() : base(0) { }
        public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
        public UEObject EvalMinCurve(UEObject Time) { return InvokeUEObject("EvalMinCurve", Time); }
        public void _RangeCurve(UEObject FloatCurves) { Invoke("RangeCurve", FloatCurves); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class MapsFlythroughGauntletController : GauntletTestController
    {
        public MapsFlythroughGauntletController(nint addr) : base(addr) { }
        public MapsFlythroughGauntletController() : base(0) { }
        public void StartTesting() { Invoke("StartTesting"); }
        public void _MapsFlythroughGauntletController() { Invoke("MapsFlythroughGauntletController"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class GameplayAbility_MontageWithNotifies : DimensionGameplayAIAbility
    {
        public GameplayAbility_MontageWithNotifies(nint addr) : base(addr) { }
        public GameplayAbility_MontageWithNotifies() : base(0) { }
        public AnimMontage MontageToPlay { get { return this[nameof(MontageToPlay)].As<AnimMontage>(); } set { this["MontageToPlay"] = value; } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
        public string SectionName { get { return this["SectionName"].ToString(); } set { /* String properties are read-only */ } }
        public AbilityTask_WaitVelocityBelow WaitVelocity_AbilityTask { get { return this[nameof(WaitVelocity_AbilityTask)].As<AbilityTask_WaitVelocityBelow>(); } set { this["WaitVelocity_AbilityTask"] = value; } }
        public bool bAutoPlayMontage { get { return this["bAutoPlayMontage"].Flag; } set { this["bAutoPlayMontage"].Flag = value; } }
        public bool bRequireVelocityThresholdForMontage { get { return this["bRequireVelocityThresholdForMontage"].Flag; } set { this["bRequireVelocityThresholdForMontage"].Flag = value; } }
        public bool bEndAbilityOnMontageBlendOut { get { return this["bEndAbilityOnMontageBlendOut"].Flag; } set { this["bEndAbilityOnMontageBlendOut"].Flag = value; } }
        public bool bEndAbilityOnMontageEnd { get { return this["bEndAbilityOnMontageEnd"].Flag; } set { this["bEndAbilityOnMontageEnd"].Flag = value; } }
        public bool bAddPreparationTagOnMontagePlay { get { return this["bAddPreparationTagOnMontagePlay"].Flag; } set { this["bAddPreparationTagOnMontagePlay"].Flag = value; } }
        public bool bLoosePreparationTagOnMontageStop { get { return this["bLoosePreparationTagOnMontageStop"].Flag; } set { this["bLoosePreparationTagOnMontageStop"].Flag = value; } }
        public bool bLooseEnemyChangeLockTagOnMontageStop { get { return this["bLooseEnemyChangeLockTagOnMontageStop"].Flag; } set { this["bLooseEnemyChangeLockTagOnMontageStop"].Flag = value; } }
        public bool bAddEnemyChangeLockTagOnMontagePlay { get { return this["bAddEnemyChangeLockTagOnMontagePlay"].Flag; } set { this["bAddEnemyChangeLockTagOnMontagePlay"].Flag = value; } }
        public float MontagePlayThresholdVelocity { get { return this["MontagePlayThresholdVelocity"].GetValue<float>(); } set { this["MontagePlayThresholdVelocity"].SetValue<float>(value); } }
        public float RootMotionScalingMinDist { get { return this["RootMotionScalingMinDist"].GetValue<float>(); } set { this["RootMotionScalingMinDist"].SetValue<float>(value); } }
        public float RootMotionScalingMaxDist { get { return this["RootMotionScalingMaxDist"].GetValue<float>(); } set { this["RootMotionScalingMaxDist"].SetValue<float>(value); } }
        public AbilityTask_PlayMontageAndWait PlayMontage_AbilityTask { get { return this[nameof(PlayMontage_AbilityTask)].As<AbilityTask_PlayMontageAndWait>(); } set { this["PlayMontage_AbilityTask"] = value; } }
        public float AnimRootMotionTranslationScale { get { return this["AnimRootMotionTranslationScale"].GetValue<float>(); } set { this["AnimRootMotionTranslationScale"].SetValue<float>(value); } }
        public void WaitVelocityThresholdMet() { Invoke("WaitVelocityThresholdMet"); }
        public void _GameplayAbility_MontageWithNotifies(UEObject MontageToPlay, UEObject PlayRate, UEObject SectionName, UEObject WaitVelocity_AbilityTask, UEObject bAutoPlayMontage, UEObject bRequireVelocityThresholdForMontage, UEObject bEndAbilityOnMontageBlendOut, UEObject bEndAbilityOnMontageEnd, UEObject bAddPreparationTagOnMontagePlay, UEObject bLoosePreparationTagOnMontageStop, UEObject bLooseEnemyChangeLockTagOnMontageStop, UEObject bAddEnemyChangeLockTagOnMontagePlay, UEObject MontagePlayThresholdVelocity, UEObject RootMotionScalingMinDist, UEObject RootMotionScalingMaxDist, UEObject PlayMontage_AbilityTask, UEObject AnimRootMotionTranslationScale) { Invoke("GameplayAbility_MontageWithNotifies", MontageToPlay, PlayRate, SectionName, WaitVelocity_AbilityTask, bAutoPlayMontage, bRequireVelocityThresholdForMontage, bEndAbilityOnMontageBlendOut, bEndAbilityOnMontageEnd, bAddPreparationTagOnMontagePlay, bLoosePreparationTagOnMontageStop, bLooseEnemyChangeLockTagOnMontageStop, bAddEnemyChangeLockTagOnMontagePlay, MontagePlayThresholdVelocity, RootMotionScalingMinDist, RootMotionScalingMaxDist, PlayMontage_AbilityTask, AnimRootMotionTranslationScale); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class FoliageShadowOverrideSubsystem : WorldSubsystem
    {
        public FoliageShadowOverrideSubsystem(nint addr) : base(addr) { }
        public FoliageShadowOverrideSubsystem() : base(0) { }
    }
    public class EnvQueryTest_TimeSinceAbility : EnvQueryTest
    {
        public EnvQueryTest_TimeSinceAbility(nint addr) : base(addr) { }
        public EnvQueryTest_TimeSinceAbility() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
        public EAbilityTime AbilityTimeType { get { return (EAbilityTime)this["AbilityTimeType"].GetValue<int>(); } set { this["AbilityTimeType"].SetValue<int>((int)value); } }
        public EAbilityFailureScoring AbilityFailureScoring { get { return (EAbilityFailureScoring)this["AbilityFailureScoring"].GetValue<int>(); } set { this["AbilityFailureScoring"].SetValue<int>((int)value); } }
        public EAbilityFailureScoring ContextFailureScoring { get { return (EAbilityFailureScoring)this["ContextFailureScoring"].GetValue<int>(); } set { this["ContextFailureScoring"].SetValue<int>((int)value); } }
    }
    public class EnvQueryTest_TagMemoryAge : EnvQueryTest
    {
        public EnvQueryTest_TagMemoryAge(nint addr) : base(addr) { }
        public EnvQueryTest_TagMemoryAge() : base(0) { }
        public GameplayTag Tag { get { return this[nameof(Tag)].As<GameplayTag>(); } set { this["Tag"] = value; } }
    }
    public class EnvQueryTest_TagCount : EnvQueryTest
    {
        public EnvQueryTest_TagCount(nint addr) : base(addr) { }
        public EnvQueryTest_TagCount() : base(0) { }
        public GameplayTag Tag { get { return this[nameof(Tag)].As<GameplayTag>(); } set { this["Tag"] = value; } }
    }
    public class EnvQueryTest_SquadSize : EnvQueryTest
    {
        public EnvQueryTest_SquadSize(nint addr) : base(addr) { }
        public EnvQueryTest_SquadSize() : base(0) { }
        public AIDataProviderFloatValue MaxDistanceValue { get { return this[nameof(MaxDistanceValue)].As<AIDataProviderFloatValue>(); } set { this["MaxDistanceValue"] = value; } }
        public GameplayTagQuery TagQueryToMatch { get { return this[nameof(TagQueryToMatch)].As<GameplayTagQuery>(); } set { this["TagQueryToMatch"] = value; } }
        public UEObject FilterCharacterClass { get { return this["FilterCharacterClass"]; } set { this["FilterCharacterClass"] = value; } }
        public AIDataProviderBoolValue ExpectedCharacterFilterResult { get { return this[nameof(ExpectedCharacterFilterResult)].As<AIDataProviderBoolValue>(); } set { this["ExpectedCharacterFilterResult"] = value; } }
    }
    public class EnvQueryTest_Separation : EnvQueryTest
    {
        public EnvQueryTest_Separation(nint addr) : base(addr) { }
        public EnvQueryTest_Separation() : base(0) { }
        public AIDataProviderFloatValue Separation { get { return this[nameof(Separation)].As<AIDataProviderFloatValue>(); } set { this["Separation"] = value; } }
        public UEObject SeparationFrom { get { return this["SeparationFrom"]; } set { this["SeparationFrom"] = value; } }
    }
    public class EnvQueryTest_OverlapVolume : EnvQueryTest
    {
        public EnvQueryTest_OverlapVolume(nint addr) : base(addr) { }
        public EnvQueryTest_OverlapVolume() : base(0) { }
        public UEObject VolumeContext { get { return this["VolumeContext"]; } set { this["VolumeContext"] = value; } }
    }
    public class EnvQueryTest_MovementModifier : EnvQueryTest
    {
        public EnvQueryTest_MovementModifier(nint addr) : base(addr) { }
        public EnvQueryTest_MovementModifier() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public bool bIncludeStamina { get { return this["bIncludeStamina"].Flag; } set { this["bIncludeStamina"].Flag = value; } }
        public bool bIncludeOnHitPenalty { get { return this["bIncludeOnHitPenalty"].Flag; } set { this["bIncludeOnHitPenalty"].Flag = value; } }
        public bool bIncludeSlow { get { return this["bIncludeSlow"].Flag; } set { this["bIncludeSlow"].Flag = value; } }
        public bool bIncludeSnare { get { return this["bIncludeSnare"].Flag; } set { this["bIncludeSnare"].Flag = value; } }
        public bool bIncludeWaterStatus { get { return this["bIncludeWaterStatus"].Flag; } set { this["bIncludeWaterStatus"].Flag = value; } }
    }
    public class EnvQueryTest_IsWithinLeash : EnvQueryTest
    {
        public EnvQueryTest_IsWithinLeash(nint addr) : base(addr) { }
        public EnvQueryTest_IsWithinLeash() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
    }
    public class EnvQueryTest_IsTokenAvailable : EnvQueryTest
    {
        public EnvQueryTest_IsTokenAvailable(nint addr) : base(addr) { }
        public EnvQueryTest_IsTokenAvailable() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public GameplayTag TokenTag { get { return this[nameof(TokenTag)].As<GameplayTag>(); } set { this["TokenTag"] = value; } }
    }
    public class EnvQueryTest_Influence : EnvQueryTest
    {
        public EnvQueryTest_Influence(nint addr) : base(addr) { }
        public EnvQueryTest_Influence() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public byte InfluenceAttitude { get { return this["InfluenceAttitude"].GetValue<byte>(); } set { this["InfluenceAttitude"].SetValue<byte>(value); } }
        public AIDataProviderFloatValue ItemZOffset { get { return this[nameof(ItemZOffset)].As<AIDataProviderFloatValue>(); } set { this["ItemZOffset"] = value; } }
    }
    public class EnvQueryTest_HasAssignedPosition : EnvQueryTest
    {
        public EnvQueryTest_HasAssignedPosition(nint addr) : base(addr) { }
        public EnvQueryTest_HasAssignedPosition() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
    }
    public class EnvQueryTest_EnemyInfoAge : EnvQueryTest
    {
        public EnvQueryTest_EnemyInfoAge(nint addr) : base(addr) { }
        public EnvQueryTest_EnemyInfoAge() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public EEnemyInfoAgeType AgeType { get { return (EEnemyInfoAgeType)this["AgeType"].GetValue<int>(); } set { this["AgeType"].SetValue<int>((int)value); } }
    }
    public class EnvQueryTest_EnemiesInRange : EnvQueryTest
    {
        public EnvQueryTest_EnemiesInRange(nint addr) : base(addr) { }
        public EnvQueryTest_EnemiesInRange() : base(0) { }
        public UEObject AIActorContext { get { return this["AIActorContext"]; } set { this["AIActorContext"] = value; } }
        public AIDataProviderFloatValue DetectionRange { get { return this[nameof(DetectionRange)].As<AIDataProviderFloatValue>(); } set { this["DetectionRange"] = value; } }
    }
    public class EnvQueryTest_DistanceToSquadAssignment : EnvQueryTest
    {
        public EnvQueryTest_DistanceToSquadAssignment(nint addr) : base(addr) { }
        public EnvQueryTest_DistanceToSquadAssignment() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
    }
    public class EnvQueryTest_CrossingSegments : EnvQueryTest
    {
        public EnvQueryTest_CrossingSegments(nint addr) : base(addr) { }
        public EnvQueryTest_CrossingSegments() : base(0) { }
        public UEObject SegmentA_BeginningContext { get { return this["SegmentA_BeginningContext"]; } set { this["SegmentA_BeginningContext"] = value; } }
        public UEObject SegmentA_EndingContext { get { return this["SegmentA_EndingContext"]; } set { this["SegmentA_EndingContext"] = value; } }
        public UEObject SegmentB_BeginningContext { get { return this["SegmentB_BeginningContext"]; } set { this["SegmentB_BeginningContext"] = value; } }
        public float SegmentA_LengthHalfOffset { get { return this["SegmentA_LengthHalfOffset"].GetValue<float>(); } set { this["SegmentA_LengthHalfOffset"].SetValue<float>(value); } }
        public float SegmentA_ClosenessOffset { get { return this["SegmentA_ClosenessOffset"].GetValue<float>(); } set { this["SegmentA_ClosenessOffset"].SetValue<float>(value); } }
    }
    public class EnvQueryTest_CanBeSeen : EnvQueryTest
    {
        public EnvQueryTest_CanBeSeen(nint addr) : base(addr) { }
        public EnvQueryTest_CanBeSeen() : base(0) { }
        public AIDataProviderFloatValue SeenTime { get { return this[nameof(SeenTime)].As<AIDataProviderFloatValue>(); } set { this["SeenTime"] = value; } }
    }
    public class EnvQueryTest_Attribute : EnvQueryTest
    {
        public EnvQueryTest_Attribute(nint addr) : base(addr) { }
        public EnvQueryTest_Attribute() : base(0) { }
        public GameplayAttribute Attrib { get { return this[nameof(Attrib)].As<GameplayAttribute>(); } set { this["Attrib"] = value; } }
    }
    public class EnvQueryTest_Anchors_CachedDist : EnvQueryTest_Anchors_Base
    {
        public EnvQueryTest_Anchors_CachedDist(nint addr) : base(addr) { }
        public EnvQueryTest_Anchors_CachedDist() : base(0) { }
        public UEObject CacheOwnersContext { get { return this["CacheOwnersContext"]; } set { this["CacheOwnersContext"] = value; } }
    }
    public class EnvQueryTest_Anchors_CachedActorsInRange : EnvQueryTest_Anchors_Base
    {
        public EnvQueryTest_Anchors_CachedActorsInRange(nint addr) : base(addr) { }
        public EnvQueryTest_Anchors_CachedActorsInRange() : base(0) { }
        public float Range { get { return this["Range"].GetValue<float>(); } set { this["Range"].SetValue<float>(value); } }
        public bool bCountOnlySameClass { get { return this["bCountOnlySameClass"].Flag; } set { this["bCountOnlySameClass"].Flag = value; } }
    }
    public class EnvQueryTest_AgeOfStimuli : EnvQueryTest
    {
        public EnvQueryTest_AgeOfStimuli(nint addr) : base(addr) { }
        public EnvQueryTest_AgeOfStimuli() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public UEObject SenseClass { get { return this["SenseClass"]; } set { this["SenseClass"] = value; } }
        public EAbilityFailureScoring SenseFailureScoring { get { return (EAbilityFailureScoring)this["SenseFailureScoring"].GetValue<int>(); } set { this["SenseFailureScoring"].SetValue<int>((int)value); } }
        public bool bRequireStimuliToBePresent { get { return this["bRequireStimuliToBePresent"].Flag; } set { this["bRequireStimuliToBePresent"].Flag = value; } }
    }
    public class EnvQueryTest_AbilityScore : EnvQueryTest
    {
        public EnvQueryTest_AbilityScore(nint addr) : base(addr) { }
        public EnvQueryTest_AbilityScore() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
    }
    public class EnvQueryTest_AbilityCooldown : EnvQueryTest
    {
        public EnvQueryTest_AbilityCooldown(nint addr) : base(addr) { }
        public EnvQueryTest_AbilityCooldown() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
    }
    public class EnvQueryGenerator_CachedCovers : EnvQueryGenerator
    {
        public EnvQueryGenerator_CachedCovers(nint addr) : base(addr) { }
        public EnvQueryGenerator_CachedCovers() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
    }
    public class EnvQueryGenerator_AvailableLeashAnchors : EnvQueryGenerator
    {
        public EnvQueryGenerator_AvailableLeashAnchors(nint addr) : base(addr) { }
        public EnvQueryGenerator_AvailableLeashAnchors() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public AIDataProviderIntValue MaxAnchorsCountValue { get { return this[nameof(MaxAnchorsCountValue)].As<AIDataProviderIntValue>(); } set { this["MaxAnchorsCountValue"] = value; } }
        public AIDataProviderBoolValue UseAnchorPoints { get { return this[nameof(UseAnchorPoints)].As<AIDataProviderBoolValue>(); } set { this["UseAnchorPoints"] = value; } }
    }
    public class EnvQueryGenerator_AvailableAnchors : EnvQueryGenerator
    {
        public EnvQueryGenerator_AvailableAnchors(nint addr) : base(addr) { }
        public EnvQueryGenerator_AvailableAnchors() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public AIDataProviderFloatValue MaxCachedPathValue { get { return this[nameof(MaxCachedPathValue)].As<AIDataProviderFloatValue>(); } set { this["MaxCachedPathValue"] = value; } }
        public AIDataProviderFloatValue HighDensityRange { get { return this[nameof(HighDensityRange)].As<AIDataProviderFloatValue>(); } set { this["HighDensityRange"] = value; } }
        public AIDataProviderIntValue MaxAnchorsCountValue { get { return this[nameof(MaxAnchorsCountValue)].As<AIDataProviderIntValue>(); } set { this["MaxAnchorsCountValue"] = value; } }
    }
    public class EnvQueryGenerator_AreaVolumeAnchors : EnvQueryGenerator
    {
        public EnvQueryGenerator_AreaVolumeAnchors(nint addr) : base(addr) { }
        public EnvQueryGenerator_AreaVolumeAnchors() : base(0) { }
        public UEObject AreaVolume { get { return this["AreaVolume"]; } set { this["AreaVolume"] = value; } }
        public bool bHighGeneratorDensity { get { return this["bHighGeneratorDensity"].Flag; } set { this["bHighGeneratorDensity"].Flag = value; } }
        public AIDataProviderIntValue MaxAnchorsCountValue { get { return this[nameof(MaxAnchorsCountValue)].As<AIDataProviderIntValue>(); } set { this["MaxAnchorsCountValue"] = value; } }
    }
    public class EnvQueryContext_SquadMembersWithAssignment : EnvQueryContext
    {
        public EnvQueryContext_SquadMembersWithAssignment(nint addr) : base(addr) { }
        public EnvQueryContext_SquadMembersWithAssignment() : base(0) { }
    }
    public class EnvQueryContext_SquadMembersMoveLocation : EnvQueryContext
    {
        public EnvQueryContext_SquadMembersMoveLocation(nint addr) : base(addr) { }
        public EnvQueryContext_SquadMembersMoveLocation() : base(0) { }
    }
    public class EnvQueryContext_SquadMembers : EnvQueryContext
    {
        public EnvQueryContext_SquadMembers(nint addr) : base(addr) { }
        public EnvQueryContext_SquadMembers() : base(0) { }
    }
    public class EnvQueryContext_SquadAssignedLocation : EnvQueryContext
    {
        public EnvQueryContext_SquadAssignedLocation(nint addr) : base(addr) { }
        public EnvQueryContext_SquadAssignedLocation() : base(0) { }
    }
    public class EnvQueryContext_RestrictedVolume : EnvQueryContext
    {
        public EnvQueryContext_RestrictedVolume(nint addr) : base(addr) { }
        public EnvQueryContext_RestrictedVolume() : base(0) { }
    }
    public class EnvQueryContext_QuerierVelocity : EnvQueryContext
    {
        public EnvQueryContext_QuerierVelocity(nint addr) : base(addr) { }
        public EnvQueryContext_QuerierVelocity() : base(0) { }
    }
    public class EnvQueryContext_PredictEnemyLocationInWaitTime : EnvQueryContext
    {
        public EnvQueryContext_PredictEnemyLocationInWaitTime(nint addr) : base(addr) { }
        public EnvQueryContext_PredictEnemyLocationInWaitTime() : base(0) { }
    }
    public class EnvQueryContext_PredictedEnemyLocation : EnvQueryContext
    {
        public EnvQueryContext_PredictedEnemyLocation(nint addr) : base(addr) { }
        public EnvQueryContext_PredictedEnemyLocation() : base(0) { }
        public float LaunchDelay { get { return this["LaunchDelay"].GetValue<float>(); } set { this["LaunchDelay"].SetValue<float>(value); } }
        public bool bUseWaitTime { get { return this["bUseWaitTime"].Flag; } set { this["bUseWaitTime"].Flag = value; } }
        public float ProjectileLaunchSpeed { get { return this["ProjectileLaunchSpeed"].GetValue<float>(); } set { this["ProjectileLaunchSpeed"].SetValue<float>(value); } }
        public float VelocityBufferLength { get { return this["VelocityBufferLength"].GetValue<float>(); } set { this["VelocityBufferLength"].SetValue<float>(value); } }
        public Vector ProjectileGravity { get { return this[nameof(ProjectileGravity)].As<Vector>(); } set { this["ProjectileGravity"] = value; } }
        public float PredictionIterationInterval { get { return this["PredictionIterationInterval"].GetValue<float>(); } set { this["PredictionIterationInterval"].SetValue<float>(value); } }
        public float PredictionTimeOffset { get { return this["PredictionTimeOffset"].GetValue<float>(); } set { this["PredictionTimeOffset"].SetValue<float>(value); } }
        public float MaxPerceivedEnemyHorizontalVelocity { get { return this["MaxPerceivedEnemyHorizontalVelocity"].GetValue<float>(); } set { this["MaxPerceivedEnemyHorizontalVelocity"].SetValue<float>(value); } }
        public float QuerierZOffset { get { return this["QuerierZOffset"].GetValue<float>(); } set { this["QuerierZOffset"].SetValue<float>(value); } }
    }
    public class EnvQueryContext_OtherSquadMembers : EnvQueryContext
    {
        public EnvQueryContext_OtherSquadMembers(nint addr) : base(addr) { }
        public EnvQueryContext_OtherSquadMembers() : base(0) { }
    }
    public class EnvQueryContext_FrontLineNormal : EnvQueryContext
    {
        public EnvQueryContext_FrontLineNormal(nint addr) : base(addr) { }
        public EnvQueryContext_FrontLineNormal() : base(0) { }
    }
    public class EnvQueryContext_EnemyLastSensedVelocity : EnvQueryContext
    {
        public EnvQueryContext_EnemyLastSensedVelocity(nint addr) : base(addr) { }
        public EnvQueryContext_EnemyLastSensedVelocity() : base(0) { }
    }
    public class EnvQueryContext_EnemyLastSensedRotation : EnvQueryContext
    {
        public EnvQueryContext_EnemyLastSensedRotation(nint addr) : base(addr) { }
        public EnvQueryContext_EnemyLastSensedRotation() : base(0) { }
    }
    public class EnvQueryContext_EnemyLastSensedLocation : EnvQueryContext
    {
        public EnvQueryContext_EnemyLastSensedLocation(nint addr) : base(addr) { }
        public EnvQueryContext_EnemyLastSensedLocation() : base(0) { }
    }
    public class EnvQueryContext_Enemy : EnvQueryContext
    {
        public EnvQueryContext_Enemy(nint addr) : base(addr) { }
        public EnvQueryContext_Enemy() : base(0) { }
    }
    public class EnvQueryContext_AllAIUnits : EnvQueryContext
    {
        public EnvQueryContext_AllAIUnits(nint addr) : base(addr) { }
        public EnvQueryContext_AllAIUnits() : base(0) { }
    }
    public class DummyHomingActor : Actor
    {
        public DummyHomingActor(nint addr) : base(addr) { }
        public DummyHomingActor() : base(0) { }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public Actor TargetingProjectile { get { return this[nameof(TargetingProjectile)].As<Actor>(); } set { this["TargetingProjectile"] = value; } }
        public void BeginOverlap(UEObject OverlappedComp, UEObject OtherActor, UEObject OtherComp, UEObject OtherBodyIndex, UEObject bFromSweep, UEObject SweepResult) { Invoke("BeginOverlap", OverlappedComp, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void _DummyHomingActor(UEObject CapsuleComponent, UEObject TargetingProjectile) { Invoke("DummyHomingActor", CapsuleComponent, TargetingProjectile); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWitchworldComponentBase : ActorComponent
    {
        public DimensionWitchworldComponentBase(nint addr) : base(addr) { }
        public DimensionWitchworldComponentBase() : base(0) { }
        public string CalamityName { get { return this["CalamityName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GetCalamityNames() { return InvokeUEObject("GetCalamityNames"); }
        public void _DimensionWitchworldComponentBase(UEObject CalamityName) { Invoke("DimensionWitchworldComponentBase", CalamityName); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWitchfireEssenceInterface : Interface
    {
        public DimensionWitchfireEssenceInterface(nint addr) : base(addr) { }
        public DimensionWitchfireEssenceInterface() : base(0) { }
        public UEObject IsWitchfireEssenceDelayed() { return InvokeUEObject("IsWitchfireEssenceDelayed"); }
        public void _DimensionWitchfireEssenceInterface() { Invoke("DimensionWitchfireEssenceInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponUnequippingState : DimensionWeaponState
    {
        public DimensionWeaponUnequippingState(nint addr) : base(addr) { }
        public DimensionWeaponUnequippingState() : base(0) { }
    }
    public class DimensionWeaponConfig : PrimaryDataAsset
    {
        public DimensionWeaponConfig(nint addr) : base(addr) { }
        public DimensionWeaponConfig() : base(0) { }
        public UEObject GlobalPropertyRanges { get { return this["GlobalPropertyRanges"]; } set { this["GlobalPropertyRanges"] = value; } }
        public UEObject LocalPropertyRanges { get { return this["LocalPropertyRanges"]; } set { this["LocalPropertyRanges"] = value; } }
        public DimensionArchetypeMinMax ImpactForce { get { return this[nameof(ImpactForce)].As<DimensionArchetypeMinMax>(); } set { this["ImpactForce"] = value; } }
        public float AimAssistCritShotBulletMagnetismRadius { get { return this["AimAssistCritShotBulletMagnetismRadius"].GetValue<float>(); } set { this["AimAssistCritShotBulletMagnetismRadius"].SetValue<float>(value); } }
        public float AimAssistInnerBulletMagnetismRadius { get { return this["AimAssistInnerBulletMagnetismRadius"].GetValue<float>(); } set { this["AimAssistInnerBulletMagnetismRadius"].SetValue<float>(value); } }
        public float AimAssistOuterBulletMagnetismRadius { get { return this["AimAssistOuterBulletMagnetismRadius"].GetValue<float>(); } set { this["AimAssistOuterBulletMagnetismRadius"].SetValue<float>(value); } }
        public RecoilCurveVector DefaultRecoilCurves { get { return this[nameof(DefaultRecoilCurves)].As<RecoilCurveVector>(); } set { this["DefaultRecoilCurves"] = value; } }
        public float ClientSideHitLeeway { get { return this["ClientSideHitLeeway"].GetValue<float>(); } set { this["ClientSideHitLeeway"].SetValue<float>(value); } }
        public float AllowedViewDotHitDir { get { return this["AllowedViewDotHitDir"].GetValue<float>(); } set { this["AllowedViewDotHitDir"].SetValue<float>(value); } }
        public float WeaponTrailTraceRange { get { return this["WeaponTrailTraceRange"].GetValue<float>(); } set { this["WeaponTrailTraceRange"].SetValue<float>(value); } }
    }
    public class DimensionWeaponStunGun : DimensionWeaponInstantHit
    {
        public DimensionWeaponStunGun(nint addr) : base(addr) { }
        public DimensionWeaponStunGun() : base(0) { }
    }
    public class DimensionWeaponStateMachineComponent : DimensionStateMachineComponent
    {
        public DimensionWeaponStateMachineComponent(nint addr) : base(addr) { }
        public DimensionWeaponStateMachineComponent() : base(0) { }
        public float FireHoldReloadDelay { get { return this["FireHoldReloadDelay"].GetValue<float>(); } set { this["FireHoldReloadDelay"].SetValue<float>(value); } }
        public EStateInterruptionPolicy EquippingToAbilityInterruptionPolicy { get { return (EStateInterruptionPolicy)this["EquippingToAbilityInterruptionPolicy"].GetValue<int>(); } set { this["EquippingToAbilityInterruptionPolicy"].SetValue<int>((int)value); } }
        public EStateInterruptionPolicy FiringToAbilityInterruptionPolicy { get { return (EStateInterruptionPolicy)this["FiringToAbilityInterruptionPolicy"].GetValue<int>(); } set { this["FiringToAbilityInterruptionPolicy"].SetValue<int>((int)value); } }
        public EStateInterruptionPolicy ReloadingToAbilityInterruptionPolicy { get { return (EStateInterruptionPolicy)this["ReloadingToAbilityInterruptionPolicy"].GetValue<int>(); } set { this["ReloadingToAbilityInterruptionPolicy"].SetValue<int>((int)value); } }
        public void OnPlayerJumped(UEObject JumpCount) { Invoke("OnPlayerJumped", JumpCount); }
        public void _DimensionWeaponStateMachineComponent(UEObject FireHoldReloadDelay, UEObject EquippingToAbilityInterruptionPolicy, UEObject FiringToAbilityInterruptionPolicy, UEObject ReloadingToAbilityInterruptionPolicy) { Invoke("DimensionWeaponStateMachineComponent", FireHoldReloadDelay, EquippingToAbilityInterruptionPolicy, FiringToAbilityInterruptionPolicy, ReloadingToAbilityInterruptionPolicy); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponStakeGun : DimensionWeaponProjectile
    {
        public DimensionWeaponStakeGun(nint addr) : base(addr) { }
        public DimensionWeaponStakeGun() : base(0) { }
        public bool bProjectileLoaded { get { return this["bProjectileLoaded"].Flag; } set { this["bProjectileLoaded"].Flag = value; } }
        public void NotifyShowProjectile() { Invoke("NotifyShowProjectile"); }
        public void _DimensionWeaponStakeGun(UEObject bProjectileLoaded) { Invoke("DimensionWeaponStakeGun", bProjectileLoaded); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponSniperRifle : DimensionWeaponInstantHit
    {
        public DimensionWeaponSniperRifle(nint addr) : base(addr) { }
        public DimensionWeaponSniperRifle() : base(0) { }
    }
    public class DimensionWeaponSightWidget : DimensionUserWidget
    {
        public DimensionWeaponSightWidget(nint addr) : base(addr) { }
        public DimensionWeaponSightWidget() : base(0) { }
        public DimensionWeaponSightComponent CachedWeaponSightComponent { get { return this[nameof(CachedWeaponSightComponent)].As<DimensionWeaponSightComponent>(); } set { this["CachedWeaponSightComponent"] = value; } }
        public bool bCachedIsSightVisible { get { return this["bCachedIsSightVisible"].Flag; } set { this["bCachedIsSightVisible"].Flag = value; } }
        public Image CachedSightImage { get { return this[nameof(CachedSightImage)].As<Image>(); } set { this["CachedSightImage"] = value; } }
        public void OnWeaponSwitched(UEObject ModifyingInventoryComponent, UEObject PreviousWeapon, UEObject CurrentWeapon) { Invoke("OnWeaponSwitched", ModifyingInventoryComponent, PreviousWeapon, CurrentWeapon); }
        public void _DimensionWeaponSightWidget(UEObject CachedWeaponSightComponent, UEObject bCachedIsSightVisible, UEObject CachedSightImage) { Invoke("DimensionWeaponSightWidget", CachedWeaponSightComponent, bCachedIsSightVisible, CachedSightImage); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponSightInterface : Interface
    {
        public DimensionWeaponSightInterface(nint addr) : base(addr) { }
        public DimensionWeaponSightInterface() : base(0) { }
        public UEObject GetRearSightRightComponent() { return InvokeUEObject("GetRearSightRightComponent"); }
        public void _DimensionWeaponSightInterface() { Invoke("DimensionWeaponSightInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponSightComponent : DimensionActorComponent
    {
        public DimensionWeaponSightComponent(nint addr) : base(addr) { }
        public DimensionWeaponSightComponent() : base(0) { }
        public DimensionPlayerCharacter Player { get { return this[nameof(Player)].As<DimensionPlayerCharacter>(); } set { this["Player"] = value; } }
        public StaticMeshComponent CachedFixedSightComponent { get { return this[nameof(CachedFixedSightComponent)].As<StaticMeshComponent>(); } set { this["CachedFixedSightComponent"] = value; } }
        public StaticMeshComponent CachedRearSightLeftComponent { get { return this[nameof(CachedRearSightLeftComponent)].As<StaticMeshComponent>(); } set { this["CachedRearSightLeftComponent"] = value; } }
        public StaticMeshComponent CachedRearSightRightComponent { get { return this[nameof(CachedRearSightRightComponent)].As<StaticMeshComponent>(); } set { this["CachedRearSightRightComponent"] = value; } }
        public bool bFixedSightEnabled { get { return this["bFixedSightEnabled"].Flag; } set { this["bFixedSightEnabled"].Flag = value; } }
        public bool bSightEnabled { get { return this["bSightEnabled"].Flag; } set { this["bSightEnabled"].Flag = value; } }
        public bool bSightWidgetEnabled { get { return this["bSightWidgetEnabled"].Flag; } set { this["bSightWidgetEnabled"].Flag = value; } }
        public Vector FixedSightOffset { get { return this[nameof(FixedSightOffset)].As<Vector>(); } set { this["FixedSightOffset"] = value; } }
        public Vector RearSightOffset { get { return this[nameof(RearSightOffset)].As<Vector>(); } set { this["RearSightOffset"] = value; } }
        public float SightScale { get { return this["SightScale"].GetValue<float>(); } set { this["SightScale"].SetValue<float>(value); } }
        public float SightOpacityReadyThreshold { get { return this["SightOpacityReadyThreshold"].GetValue<float>(); } set { this["SightOpacityReadyThreshold"].SetValue<float>(value); } }
        public float SightOpacityTargetingThreshold { get { return this["SightOpacityTargetingThreshold"].GetValue<float>(); } set { this["SightOpacityTargetingThreshold"].SetValue<float>(value); } }
        public float FallbackSpreadAngleNormalized { get { return this["FallbackSpreadAngleNormalized"].GetValue<float>(); } set { this["FallbackSpreadAngleNormalized"].SetValue<float>(value); } }
        public bool bColorReticleOnTargetingEnemy { get { return this["bColorReticleOnTargetingEnemy"].Flag; } set { this["bColorReticleOnTargetingEnemy"].Flag = value; } }
        public float SightWidgetScale { get { return this["SightWidgetScale"].GetValue<float>(); } set { this["SightWidgetScale"].SetValue<float>(value); } }
        public float SightWidgetOpacityTargetingThreshold { get { return this["SightWidgetOpacityTargetingThreshold"].GetValue<float>(); } set { this["SightWidgetOpacityTargetingThreshold"].SetValue<float>(value); } }
        public bool bShowWidgetOnFireReady { get { return this["bShowWidgetOnFireReady"].Flag; } set { this["bShowWidgetOnFireReady"].Flag = value; } }
        public bool bSightWidgetVisibleWhileReloading { get { return this["bSightWidgetVisibleWhileReloading"].Flag; } set { this["bSightWidgetVisibleWhileReloading"].Flag = value; } }
        public UEObject FixedSightMaterial { get { return this["FixedSightMaterial"]; } set { this["FixedSightMaterial"] = value; } }
        public UEObject SightMaterial { get { return this["SightMaterial"]; } set { this["SightMaterial"] = value; } }
        public UEObject SightWidgetMaterial { get { return this["SightWidgetMaterial"]; } set { this["SightWidgetMaterial"] = value; } }
        public MaterialInstanceDynamic FixedSightMaterialInstance { get { return this[nameof(FixedSightMaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["FixedSightMaterialInstance"] = value; } }
        public MaterialInstanceDynamic SightMaterialInstance { get { return this[nameof(SightMaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["SightMaterialInstance"] = value; } }
        public MaterialInstanceDynamic SightWidgetMaterialInstance { get { return this[nameof(SightWidgetMaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["SightWidgetMaterialInstance"] = value; } }
        public Array<MaterialInterface> MaterialPointers { get { return new Array<MaterialInterface>(this["MaterialPointers"]); } set { this["MaterialPointers"] = value; } }
        public UEObject OnSightOpacityUpdatedDelegate { get { return this["OnSightOpacityUpdatedDelegate"]; } set { this["OnSightOpacityUpdatedDelegate"] = value; } }
        public UEObject OnWidgetMaterialUpdatedDelegate { get { return this["OnWidgetMaterialUpdatedDelegate"]; } set { this["OnWidgetMaterialUpdatedDelegate"] = value; } }
        public float CachedOpacity { get { return this["CachedOpacity"].GetValue<float>(); } set { this["CachedOpacity"].SetValue<float>(value); } }
        public ESlateVisibility CachedWidgetVisibility { get { return (ESlateVisibility)this["CachedWidgetVisibility"].GetValue<int>(); } set { this["CachedWidgetVisibility"].SetValue<int>((int)value); } }
        public float CachedWidgetScale { get { return this["CachedWidgetScale"].GetValue<float>(); } set { this["CachedWidgetScale"].SetValue<float>(value); } }
        public void SetSightWidgetEnabled(UEObject bInSightWidgetEnabled) { Invoke("SetSightWidgetEnabled", bInSightWidgetEnabled); }
        public void _DimensionWeaponSightComponent(UEObject Player, UEObject CachedFixedSightComponent, UEObject CachedRearSightLeftComponent, UEObject CachedRearSightRightComponent, UEObject bFixedSightEnabled, UEObject bSightEnabled, UEObject bSightWidgetEnabled, UEObject FixedSightOffset, UEObject RearSightOffset, UEObject SightScale, UEObject SightOpacityReadyThreshold, UEObject SightOpacityTargetingThreshold, UEObject FallbackSpreadAngleNormalized, UEObject bColorReticleOnTargetingEnemy, UEObject SightWidgetScale, UEObject SightWidgetOpacityTargetingThreshold, UEObject bShowWidgetOnFireReady, UEObject bSightWidgetVisibleWhileReloading, UEObject FixedSightMaterial, UEObject SightMaterial, UEObject SightWidgetMaterial, UEObject FixedSightMaterialInstance, UEObject SightMaterialInstance, UEObject SightWidgetMaterialInstance, UEObject MaterialPointers, UEObject OnSightOpacityUpdatedDelegate, UEObject OnWidgetMaterialUpdatedDelegate, UEObject CachedOpacity, UEObject CachedWidgetVisibility, UEObject CachedWidgetScale) { Invoke("DimensionWeaponSightComponent", Player, CachedFixedSightComponent, CachedRearSightLeftComponent, CachedRearSightRightComponent, bFixedSightEnabled, bSightEnabled, bSightWidgetEnabled, FixedSightOffset, RearSightOffset, SightScale, SightOpacityReadyThreshold, SightOpacityTargetingThreshold, FallbackSpreadAngleNormalized, bColorReticleOnTargetingEnemy, SightWidgetScale, SightWidgetOpacityTargetingThreshold, bShowWidgetOnFireReady, bSightWidgetVisibleWhileReloading, FixedSightMaterial, SightMaterial, SightWidgetMaterial, FixedSightMaterialInstance, SightMaterialInstance, SightWidgetMaterialInstance, MaterialPointers, OnSightOpacityUpdatedDelegate, OnWidgetMaterialUpdatedDelegate, CachedOpacity, CachedWidgetVisibility, CachedWidgetScale); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponShotgun : DimensionWeaponInstantHit
    {
        public DimensionWeaponShotgun(nint addr) : base(addr) { }
        public DimensionWeaponShotgun() : base(0) { }
        public UEObject OnPelletsHits { get { return this["OnPelletsHits"]; } set { this["OnPelletsHits"] = value; } }
        public List<int> SpreadDistribution { get { return this["SpreadDistribution"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bBufferHits { get { return this["bBufferHits"].Flag; } set { this["bBufferHits"].Flag = value; } }
        public void ServerNotifyBufferedHits(UEObject Hits, UEObject AbilityKey) { Invoke("ServerNotifyBufferedHits", Hits, AbilityKey); }
        public void _DimensionWeaponShotgun(UEObject OnPelletsHits, UEObject SpreadDistribution, UEObject bBufferHits) { Invoke("DimensionWeaponShotgun", OnPelletsHits, SpreadDistribution, bBufferHits); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponReloadingStateShotgun : DimensionWeaponReloadingState
    {
        public DimensionWeaponReloadingStateShotgun(nint addr) : base(addr) { }
        public DimensionWeaponReloadingStateShotgun() : base(0) { }
        public void OnFireHoldTimerCallback() { Invoke("OnFireHoldTimerCallback"); }
        public void _DimensionWeaponReloadingStateShotgun() { Invoke("DimensionWeaponReloadingStateShotgun"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponReloadingState : DimensionWeaponState
    {
        public DimensionWeaponReloadingState(nint addr) : base(addr) { }
        public DimensionWeaponReloadingState() : base(0) { }
    }
    public class DimensionWeaponRayGun : DimensionWeaponInstantHit
    {
        public DimensionWeaponRayGun(nint addr) : base(addr) { }
        public DimensionWeaponRayGun() : base(0) { }
    }
    public class DimensionWeaponPreAbilityState : DimensionWeaponState
    {
        public DimensionWeaponPreAbilityState(nint addr) : base(addr) { }
        public DimensionWeaponPreAbilityState() : base(0) { }
        public float HeavySpellCastingLockTime { get { return this["HeavySpellCastingLockTime"].GetValue<float>(); } set { this["HeavySpellCastingLockTime"].SetValue<float>(value); } }
        public float SpellChargingTime { get { return this["SpellChargingTime"].GetValue<float>(); } set { this["SpellChargingTime"].SetValue<float>(value); } }
        public float WeaponUnequipTime { get { return this["WeaponUnequipTime"].GetValue<float>(); } set { this["WeaponUnequipTime"].SetValue<float>(value); } }
        public bool bSpellFailLocksState { get { return this["bSpellFailLocksState"].Flag; } set { this["bSpellFailLocksState"].Flag = value; } }
        public bool bLightSpellSeparateInstantCast { get { return this["bLightSpellSeparateInstantCast"].Flag; } set { this["bLightSpellSeparateInstantCast"].Flag = value; } }
        public GameplayTag AbilityTypeTag { get { return this[nameof(AbilityTypeTag)].As<GameplayTag>(); } set { this["AbilityTypeTag"] = value; } }
        public bool bAbilityBlocked { get { return this["bAbilityBlocked"].Flag; } set { this["bAbilityBlocked"].Flag = value; } }
        public bool bTransitionedFromWeaponSwitch { get { return this["bTransitionedFromWeaponSwitch"].Flag; } set { this["bTransitionedFromWeaponSwitch"].Flag = value; } }
        public void WeaponUnequipCallback() { Invoke("WeaponUnequipCallback"); }
        public void _DimensionWeaponPreAbilityState(UEObject HeavySpellCastingLockTime, UEObject SpellChargingTime, UEObject WeaponUnequipTime, UEObject bSpellFailLocksState, UEObject bLightSpellSeparateInstantCast, UEObject AbilityTypeTag, UEObject bAbilityBlocked, UEObject bTransitionedFromWeaponSwitch) { Invoke("DimensionWeaponPreAbilityState", HeavySpellCastingLockTime, SpellChargingTime, WeaponUnequipTime, bSpellFailLocksState, bLightSpellSeparateInstantCast, AbilityTypeTag, bAbilityBlocked, bTransitionedFromWeaponSwitch); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponPerkComponent : DimensionPerkComponent
    {
        public DimensionWeaponPerkComponent(nint addr) : base(addr) { }
        public DimensionWeaponPerkComponent() : base(0) { }
        public Actor LastTarget { get { return this[nameof(LastTarget)].As<Actor>(); } set { this["LastTarget"] = value; } }
        public Array<Actor> ShotgunLastTargets { get { return new Array<Actor>(this["ShotgunLastTargets"]); } set { this["ShotgunLastTargets"] = value; } }
    }
    public class DimensionWeaponMachinePistol : DimensionWeaponInstantHit
    {
        public DimensionWeaponMachinePistol(nint addr) : base(addr) { }
        public DimensionWeaponMachinePistol() : base(0) { }
    }
    public class DimensionWeaponMachineGun : DimensionWeaponInstantHit
    {
        public DimensionWeaponMachineGun(nint addr) : base(addr) { }
        public DimensionWeaponMachineGun() : base(0) { }
    }
    public class DimensionWeaponLeverActionRifle : DimensionWeaponInstantHit
    {
        public DimensionWeaponLeverActionRifle(nint addr) : base(addr) { }
        public DimensionWeaponLeverActionRifle() : base(0) { }
        public bool bLeverActionPending { get { return this["bLeverActionPending"].Flag; } set { this["bLeverActionPending"].Flag = value; } }
        public bool bManualBulletReload { get { return this["bManualBulletReload"].Flag; } set { this["bManualBulletReload"].Flag = value; } }
        public void NotifyBulletSequenceEnd() { Invoke("NotifyBulletSequenceEnd"); }
        public void _DimensionWeaponLeverActionRifle(UEObject bLeverActionPending, UEObject bManualBulletReload) { Invoke("DimensionWeaponLeverActionRifle", bLeverActionPending, bManualBulletReload); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponImpactEffect : Actor
    {
        public DimensionWeaponImpactEffect(nint addr) : base(addr) { }
        public DimensionWeaponImpactEffect() : base(0) { }
        public DimesnionDecalData DefaultDecal { get { return this[nameof(DefaultDecal)].As<DimesnionDecalData>(); } set { this["DefaultDecal"] = value; } }
        public Array<DimensionPhysicalMaterial> PhysicalEffects { get { return new Array<DimensionPhysicalMaterial>(this["PhysicalEffects"]); } set { this["PhysicalEffects"] = value; } }
        public UEObject DefaultImpactFX { get { return this[nameof(DefaultImpactFX)]; } set { this["DefaultImpactFX"] = value; } }
        public SoundCue DefaultSoundFX { get { return this[nameof(DefaultSoundFX)].As<SoundCue>(); } set { this["DefaultSoundFX"] = value; } }
        public HitResult SurfaceHit { get { return this[nameof(SurfaceHit)].As<HitResult>(); } set { this["SurfaceHit"] = value; } }
    }
    public class DimensionWeaponIdleState : DimensionWeaponState
    {
        public DimensionWeaponIdleState(nint addr) : base(addr) { }
        public DimensionWeaponIdleState() : base(0) { }
    }
    public class DimensionWeaponHandCannon : DimensionWeaponInstantHit
    {
        public DimensionWeaponHandCannon(nint addr) : base(addr) { }
        public DimensionWeaponHandCannon() : base(0) { }
    }
    public class DimensionWeaponGrenadeLauncher : DimensionWeaponProjectile
    {
        public DimensionWeaponGrenadeLauncher(nint addr) : base(addr) { }
        public DimensionWeaponGrenadeLauncher() : base(0) { }
    }
    public class DimensionWeaponFiringStateSingleCharged : DimensionWeaponFiringState
    {
        public DimensionWeaponFiringStateSingleCharged(nint addr) : base(addr) { }
        public DimensionWeaponFiringStateSingleCharged() : base(0) { }
        public EChargedFiringMode ChargedFiringMode { get { return (EChargedFiringMode)this["ChargedFiringMode"].GetValue<int>(); } set { this["ChargedFiringMode"].SetValue<int>((int)value); } }
        public float InstantShotWindow { get { return this["InstantShotWindow"].GetValue<float>(); } set { this["InstantShotWindow"].SetValue<float>(value); } }
        public float MinChargingTime { get { return this["MinChargingTime"].GetValue<float>(); } set { this["MinChargingTime"].SetValue<float>(value); } }
        public float MaxChargingTime { get { return this["MaxChargingTime"].GetValue<float>(); } set { this["MaxChargingTime"].SetValue<float>(value); } }
        public float OverchargeTime { get { return this["OverchargeTime"].GetValue<float>(); } set { this["OverchargeTime"].SetValue<float>(value); } }
        public bool bAutoShotOnMaxCharge { get { return this["bAutoShotOnMaxCharge"].Flag; } set { this["bAutoShotOnMaxCharge"].Flag = value; } }
        public bool bAutoShotOnOverchargeEnd { get { return this["bAutoShotOnOverchargeEnd"].Flag; } set { this["bAutoShotOnOverchargeEnd"].Flag = value; } }
        public UEObject OnInstantWindowClosedDelegate { get { return this["OnInstantWindowClosedDelegate"]; } set { this["OnInstantWindowClosedDelegate"] = value; } }
        public UEObject OnChargeStartedDelegate { get { return this["OnChargeStartedDelegate"]; } set { this["OnChargeStartedDelegate"] = value; } }
        public UEObject OnMinChargeDelegate { get { return this["OnMinChargeDelegate"]; } set { this["OnMinChargeDelegate"] = value; } }
        public UEObject OnMaxChargeDelegate { get { return this["OnMaxChargeDelegate"]; } set { this["OnMaxChargeDelegate"] = value; } }
        public UEObject OnChargeFinishedDelegate { get { return this["OnChargeFinishedDelegate"]; } set { this["OnChargeFinishedDelegate"] = value; } }
        public UEObject OnChargeInterruptedDelegate { get { return this["OnChargeInterruptedDelegate"]; } set { this["OnChargeInterruptedDelegate"] = value; } }
        public UEObject OnChargeFailedDelegate { get { return this["OnChargeFailedDelegate"]; } set { this["OnChargeFailedDelegate"] = value; } }
        public UEObject OnPreShotDelegate { get { return this["OnPreShotDelegate"]; } set { this["OnPreShotDelegate"] = value; } }
        public void OnOverchargeTimeReachedCallback() { Invoke("OnOverchargeTimeReachedCallback"); }
        public void _DimensionWeaponFiringStateSingleCharged(UEObject ChargedFiringMode, UEObject InstantShotWindow, UEObject MinChargingTime, UEObject MaxChargingTime, UEObject OverchargeTime, UEObject bAutoShotOnMaxCharge, UEObject bAutoShotOnOverchargeEnd, UEObject OnInstantWindowClosedDelegate, UEObject OnChargeStartedDelegate, UEObject OnMinChargeDelegate, UEObject OnMaxChargeDelegate, UEObject OnChargeFinishedDelegate, UEObject OnChargeInterruptedDelegate, UEObject OnChargeFailedDelegate, UEObject OnPreShotDelegate) { Invoke("DimensionWeaponFiringStateSingleCharged", ChargedFiringMode, InstantShotWindow, MinChargingTime, MaxChargingTime, OverchargeTime, bAutoShotOnMaxCharge, bAutoShotOnOverchargeEnd, OnInstantWindowClosedDelegate, OnChargeStartedDelegate, OnMinChargeDelegate, OnMaxChargeDelegate, OnChargeFinishedDelegate, OnChargeInterruptedDelegate, OnChargeFailedDelegate, OnPreShotDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponFiringStateBurst : DimensionWeaponFiringState
    {
        public DimensionWeaponFiringStateBurst(nint addr) : base(addr) { }
        public DimensionWeaponFiringStateBurst() : base(0) { }
    }
    public class DimensionWeaponFiringStateSingle : DimensionWeaponFiringState
    {
        public DimensionWeaponFiringStateSingle(nint addr) : base(addr) { }
        public DimensionWeaponFiringStateSingle() : base(0) { }
    }
    public class DimensionWeaponFiringStateAuto : DimensionWeaponFiringState
    {
        public DimensionWeaponFiringStateAuto(nint addr) : base(addr) { }
        public DimensionWeaponFiringStateAuto() : base(0) { }
        public void StopScheduledFiring() { Invoke("StopScheduledFiring"); }
        public void _DimensionWeaponFiringStateAuto() { Invoke("DimensionWeaponFiringStateAuto"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponFiringState : DimensionWeaponState
    {
        public DimensionWeaponFiringState(nint addr) : base(addr) { }
        public DimensionWeaponFiringState() : base(0) { }
        public float PostFiringRunningDelay { get { return this["PostFiringRunningDelay"].GetValue<float>(); } set { this["PostFiringRunningDelay"].SetValue<float>(value); } }
    }
    public class DimensionWeaponEquippingState : DimensionWeaponState
    {
        public DimensionWeaponEquippingState(nint addr) : base(addr) { }
        public DimensionWeaponEquippingState() : base(0) { }
    }
    public class DimensionWeaponCrossbow : DimensionWeaponProjectile
    {
        public DimensionWeaponCrossbow(nint addr) : base(addr) { }
        public DimensionWeaponCrossbow() : base(0) { }
        public bool bStringReady { get { return this["bStringReady"].Flag; } set { this["bStringReady"].Flag = value; } }
        public bool bProjectileLoaded { get { return this["bProjectileLoaded"].Flag; } set { this["bProjectileLoaded"].Flag = value; } }
        public void NotifyReloadButtonPressed() { Invoke("NotifyReloadButtonPressed"); }
        public void _DimensionWeaponCrossbow(UEObject bStringReady, UEObject bProjectileLoaded) { Invoke("DimensionWeaponCrossbow", bStringReady, bProjectileLoaded); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponProjectile : DimensionWeapon
    {
        public DimensionWeaponProjectile(nint addr) : base(addr) { }
        public DimensionWeaponProjectile() : base(0) { }
        public UEObject OnProjectilesSpawnedDelegate { get { return this["OnProjectilesSpawnedDelegate"]; } set { this["OnProjectilesSpawnedDelegate"] = value; } }
        public UEObject OnProjectilesUpdatedDelegate { get { return this["OnProjectilesUpdatedDelegate"]; } set { this["OnProjectilesUpdatedDelegate"] = value; } }
        public Array<DimensionProjectile> SpawnedProjectiles { get { return new Array<DimensionProjectile>(this["SpawnedProjectiles"]); } set { this["SpawnedProjectiles"] = value; } }
        public UEObject DefaultProjectileClass { get { return this["DefaultProjectileClass"]; } set { this["DefaultProjectileClass"] = value; } }
        public UEObject CurrentProjectileClass { get { return this["CurrentProjectileClass"]; } set { this["CurrentProjectileClass"] = value; } }
        public void SetProjectileClass(UEObject InProjectileClass) { Invoke("SetProjectileClass", InProjectileClass); }
        public void _DimensionWeaponProjectile(UEObject OnProjectilesSpawnedDelegate, UEObject OnProjectilesUpdatedDelegate, UEObject SpawnedProjectiles, UEObject DefaultProjectileClass, UEObject CurrentProjectileClass) { Invoke("DimensionWeaponProjectile", OnProjectilesSpawnedDelegate, OnProjectilesUpdatedDelegate, SpawnedProjectiles, DefaultProjectileClass, CurrentProjectileClass); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponBoltActionRifle : DimensionWeaponInstantHit
    {
        public DimensionWeaponBoltActionRifle(nint addr) : base(addr) { }
        public DimensionWeaponBoltActionRifle() : base(0) { }
        public bool bBoltActionPending { get { return this["bBoltActionPending"].Flag; } set { this["bBoltActionPending"].Flag = value; } }
    }
    public class DimensionWeaponAutoRifle : DimensionWeaponInstantHit
    {
        public DimensionWeaponAutoRifle(nint addr) : base(addr) { }
        public DimensionWeaponAutoRifle() : base(0) { }
    }
    public class DimensionWeaponInstantHit : DimensionWeapon
    {
        public DimensionWeaponInstantHit(nint addr) : base(addr) { }
        public DimensionWeaponInstantHit() : base(0) { }
        public UEObject ImpactTemplate { get { return this["ImpactTemplate"]; } set { this["ImpactTemplate"] = value; } }
        public DimensionInstantHitInfo HitNotify { get { return this[nameof(HitNotify)].As<DimensionInstantHitInfo>(); } set { this["HitNotify"] = value; } }
        public UEObject TrailFX { get { return this[nameof(TrailFX)]; } set { this["TrailFX"] = value; } }
        public UEObject TemporaryTrailFX { get { return this[nameof(TemporaryTrailFX)]; } set { this["TemporaryTrailFX"] = value; } }
        public string TrailTargetParam { get { return this["TrailTargetParam"].ToString(); } set { /* String properties are read-only */ } }
        public float TrailDeprojectionDepth { get { return this["TrailDeprojectionDepth"].GetValue<float>(); } set { this["TrailDeprojectionDepth"].SetValue<float>(value); } }
        public void SpawnTrailEffect(UEObject EndPoint) { Invoke("SpawnTrailEffect", EndPoint); }
        public void _DimensionWeaponInstantHit(UEObject ImpactTemplate, UEObject HitNotify, UEObject TrailFX, UEObject TemporaryTrailFX, UEObject TrailTargetParam, UEObject TrailDeprojectionDepth) { Invoke("DimensionWeaponInstantHit", ImpactTemplate, HitNotify, TrailFX, TemporaryTrailFX, TrailTargetParam, TrailDeprojectionDepth); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponAttribSet : DimensionAttribSet
    {
        public DimensionWeaponAttribSet(nint addr) : base(addr) { }
        public DimensionWeaponAttribSet() : base(0) { }
        public float Reload { get { return this["Reload"].GetValue<float>(); } set { this["Reload"].SetValue<float>(value); } }
        public float ReloadTime { get { return this["ReloadTime"].GetValue<float>(); } set { this["ReloadTime"].SetValue<float>(value); } }
        public float Range { get { return this["Range"].GetValue<float>(); } set { this["Range"].SetValue<float>(value); } }
        public float BaseRange { get { return this["BaseRange"].GetValue<float>(); } set { this["BaseRange"].SetValue<float>(value); } }
        public float FalloffRange { get { return this["FalloffRange"].GetValue<float>(); } set { this["FalloffRange"].SetValue<float>(value); } }
        public float CutoffRange { get { return this["CutoffRange"].GetValue<float>(); } set { this["CutoffRange"].SetValue<float>(value); } }
        public float FalloffValue { get { return this["FalloffValue"].GetValue<float>(); } set { this["FalloffValue"].SetValue<float>(value); } }
        public float MaxRange { get { return this["MaxRange"].GetValue<float>(); } set { this["MaxRange"].SetValue<float>(value); } }
        public float Handling { get { return this["Handling"].GetValue<float>(); } set { this["Handling"].SetValue<float>(value); } }
        public float EquipTime { get { return this["EquipTime"].GetValue<float>(); } set { this["EquipTime"].SetValue<float>(value); } }
        public float UnequipTime { get { return this["UnequipTime"].GetValue<float>(); } set { this["UnequipTime"].SetValue<float>(value); } }
        public float ADSTime { get { return this["ADSTime"].GetValue<float>(); } set { this["ADSTime"].SetValue<float>(value); } }
        public float DeADSTime { get { return this["DeADSTime"].GetValue<float>(); } set { this["DeADSTime"].SetValue<float>(value); } }
        public float PostSprintRecoveryTime { get { return this["PostSprintRecoveryTime"].GetValue<float>(); } set { this["PostSprintRecoveryTime"].SetValue<float>(value); } }
        public float StaminaDrainOnTargeting { get { return this["StaminaDrainOnTargeting"].GetValue<float>(); } set { this["StaminaDrainOnTargeting"].SetValue<float>(value); } }
        public float ActualStaminaDrainOnTargeting { get { return this["ActualStaminaDrainOnTargeting"].GetValue<float>(); } set { this["ActualStaminaDrainOnTargeting"].SetValue<float>(value); } }
        public float DrainStaminaTrigger { get { return this["DrainStaminaTrigger"].GetValue<float>(); } set { this["DrainStaminaTrigger"].SetValue<float>(value); } }
        public float Mobility { get { return this["Mobility"].GetValue<float>(); } set { this["Mobility"].SetValue<float>(value); } }
        public float SpeedMultiplier { get { return this["SpeedMultiplier"].GetValue<float>(); } set { this["SpeedMultiplier"].SetValue<float>(value); } }
        public float SpeedMultiplierOnTargeting { get { return this["SpeedMultiplierOnTargeting"].GetValue<float>(); } set { this["SpeedMultiplierOnTargeting"].SetValue<float>(value); } }
        public float StrafeSpeedMultiplier { get { return this["StrafeSpeedMultiplier"].GetValue<float>(); } set { this["StrafeSpeedMultiplier"].SetValue<float>(value); } }
        public float RateOfFire { get { return this["RateOfFire"].GetValue<float>(); } set { this["RateOfFire"].SetValue<float>(value); } }
        public float TimeBetweenShots { get { return this["TimeBetweenShots"].GetValue<float>(); } set { this["TimeBetweenShots"].SetValue<float>(value); } }
        public float RateOfFireMultiplier { get { return this["RateOfFireMultiplier"].GetValue<float>(); } set { this["RateOfFireMultiplier"].SetValue<float>(value); } }
        public float ActualTimeBetweenShots { get { return this["ActualTimeBetweenShots"].GetValue<float>(); } set { this["ActualTimeBetweenShots"].SetValue<float>(value); } }
        public float PhysicalProficiency { get { return this["PhysicalProficiency"].GetValue<float>(); } set { this["PhysicalProficiency"].SetValue<float>(value); } }
        public float FireProficiency { get { return this["FireProficiency"].GetValue<float>(); } set { this["FireProficiency"].SetValue<float>(value); } }
        public float EarthProficiency { get { return this["EarthProficiency"].GetValue<float>(); } set { this["EarthProficiency"].SetValue<float>(value); } }
        public float WaterProficiency { get { return this["WaterProficiency"].GetValue<float>(); } set { this["WaterProficiency"].SetValue<float>(value); } }
        public float AirProficiency { get { return this["AirProficiency"].GetValue<float>(); } set { this["AirProficiency"].SetValue<float>(value); } }
        public float PhysicalProficiencyPower { get { return this["PhysicalProficiencyPower"].GetValue<float>(); } set { this["PhysicalProficiencyPower"].SetValue<float>(value); } }
        public float FireProficiencyPower { get { return this["FireProficiencyPower"].GetValue<float>(); } set { this["FireProficiencyPower"].SetValue<float>(value); } }
        public float EarthProficiencyPower { get { return this["EarthProficiencyPower"].GetValue<float>(); } set { this["EarthProficiencyPower"].SetValue<float>(value); } }
        public float WaterProficiencyPower { get { return this["WaterProficiencyPower"].GetValue<float>(); } set { this["WaterProficiencyPower"].SetValue<float>(value); } }
        public float AirProficiencyPower { get { return this["AirProficiencyPower"].GetValue<float>(); } set { this["AirProficiencyPower"].SetValue<float>(value); } }
        public float Impact { get { return this["Impact"].GetValue<float>(); } set { this["Impact"].SetValue<float>(value); } }
        public float OpticsMultiplier { get { return this["OpticsMultiplier"].GetValue<float>(); } set { this["OpticsMultiplier"].SetValue<float>(value); } }
        public float OpticsInterpolationSpeed { get { return this["OpticsInterpolationSpeed"].GetValue<float>(); } set { this["OpticsInterpolationSpeed"].SetValue<float>(value); } }
        public float SensitivityModifier { get { return this["SensitivityModifier"].GetValue<float>(); } set { this["SensitivityModifier"].SetValue<float>(value); } }
        public float EyeToScopeDistance { get { return this["EyeToScopeDistance"].GetValue<float>(); } set { this["EyeToScopeDistance"].SetValue<float>(value); } }
        public float CriticalSectionMultiplier { get { return this["CriticalSectionMultiplier"].GetValue<float>(); } set { this["CriticalSectionMultiplier"].SetValue<float>(value); } }
        public float CriticalDamageMultiplier { get { return this["CriticalDamageMultiplier"].GetValue<float>(); } set { this["CriticalDamageMultiplier"].SetValue<float>(value); } }
        public float BurstSize { get { return this["BurstSize"].GetValue<float>(); } set { this["BurstSize"].SetValue<float>(value); } }
        public float BurstDelay { get { return this["BurstDelay"].GetValue<float>(); } set { this["BurstDelay"].SetValue<float>(value); } }
        public float AutoReloadDelay { get { return this["AutoReloadDelay"].GetValue<float>(); } set { this["AutoReloadDelay"].SetValue<float>(value); } }
        public float StaminaFireCost { get { return this["StaminaFireCost"].GetValue<float>(); } set { this["StaminaFireCost"].SetValue<float>(value); } }
        public float AimAssistStrength { get { return this["AimAssistStrength"].GetValue<float>(); } set { this["AimAssistStrength"].SetValue<float>(value); } }
        public float NumberOfPellets { get { return this["NumberOfPellets"].GetValue<float>(); } set { this["NumberOfPellets"].SetValue<float>(value); } }
    }
    public class DimensionWeaponAnimInstance : AnimInstance
    {
        public DimensionWeaponAnimInstance(nint addr) : base(addr) { }
        public DimensionWeaponAnimInstance() : base(0) { }
        public AnimMontage CurrentMontageInstance { get { return this[nameof(CurrentMontageInstance)].As<AnimMontage>(); } set { this["CurrentMontageInstance"] = value; } }
        public UEObject OnNotifyTriggeredDelegate { get { return this["OnNotifyTriggeredDelegate"]; } set { this["OnNotifyTriggeredDelegate"] = value; } }
        public void OnWeaponMontageStarted(UEObject Montage) { Invoke("OnWeaponMontageStarted", Montage); }
        public void _DimensionWeaponAnimInstance(UEObject CurrentMontageInstance, UEObject OnNotifyTriggeredDelegate) { Invoke("DimensionWeaponAnimInstance", CurrentMontageInstance, OnNotifyTriggeredDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponAbilityState : DimensionWeaponState
    {
        public DimensionWeaponAbilityState(nint addr) : base(addr) { }
        public DimensionWeaponAbilityState() : base(0) { }
        public UEObject GetStartingSectionName() { return InvokeUEObject("GetStartingSectionName"); }
        public void _DimensionWeaponAbilityState() { Invoke("DimensionWeaponAbilityState"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWeaponState : DimensionState
    {
        public DimensionWeaponState(nint addr) : base(addr) { }
        public DimensionWeaponState() : base(0) { }
        public float MaximumShotDelay { get { return this["MaximumShotDelay"].GetValue<float>(); } set { this["MaximumShotDelay"].SetValue<float>(value); } }
    }
    public class DimensionWeapon : DimensionItem
    {
        public DimensionWeapon(nint addr) : base(addr) { }
        public DimensionWeapon() : base(0) { }
        public bool bForceHiddenPlayerMesh { get { return this["bForceHiddenPlayerMesh"].Flag; } set { this["bForceHiddenPlayerMesh"].Flag = value; } }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Mesh1P { get { return this[nameof(Mesh1P)].As<SkeletalMeshComponent>(); } set { this["Mesh1P"] = value; } }
        public SkeletalMeshComponent Mesh3P { get { return this[nameof(Mesh3P)].As<SkeletalMeshComponent>(); } set { this["Mesh3P"] = value; } }
        public DimensionAbilitySystemComponent AbilitySystem { get { return this[nameof(AbilitySystem)].As<DimensionAbilitySystemComponent>(); } set { this["AbilitySystem"] = value; } }
        public DimensionWeaponPerkComponent PerkComponent { get { return this[nameof(PerkComponent)].As<DimensionWeaponPerkComponent>(); } set { this["PerkComponent"] = value; } }
        public UEObject OnTierUpdatedDelegate { get { return this["OnTierUpdatedDelegate"]; } set { this["OnTierUpdatedDelegate"] = value; } }
        public DimensionRecoilComponent RecoilComponent { get { return this[nameof(RecoilComponent)].As<DimensionRecoilComponent>(); } set { this["RecoilComponent"] = value; } }
        public DimensionWeaponStateMachineComponent StateMachine { get { return this[nameof(StateMachine)].As<DimensionWeaponStateMachineComponent>(); } set { this["StateMachine"] = value; } }
        public DimensionWeaponSightComponent WeaponSightComponent { get { return this[nameof(WeaponSightComponent)].As<DimensionWeaponSightComponent>(); } set { this["WeaponSightComponent"] = value; } }
        public DimensionPlayerCharacter MyPawn { get { return this[nameof(MyPawn)].As<DimensionPlayerCharacter>(); } set { this["MyPawn"] = value; } }
        public bool bLowerWeapon { get { return this["bLowerWeapon"].Flag; } set { this["bLowerWeapon"].Flag = value; } }
        public bool bIsAttachedToPlayer { get { return this["bIsAttachedToPlayer"].Flag; } set { this["bIsAttachedToPlayer"].Flag = value; } }
        public bool bReloadPending { get { return this["bReloadPending"].Flag; } set { this["bReloadPending"].Flag = value; } }
        public bool bAutoReloadEnabled { get { return this["bAutoReloadEnabled"].Flag; } set { this["bAutoReloadEnabled"].Flag = value; } }
        public bool bWasEquippedAtLeastOnce { get { return this["bWasEquippedAtLeastOnce"].Flag; } set { this["bWasEquippedAtLeastOnce"].Flag = value; } }
        public bool bHideAmmoAddedNotification { get { return this["bHideAmmoAddedNotification"].Flag; } set { this["bHideAmmoAddedNotification"].Flag = value; } }
        public int BurstCounter { get { return this["BurstCounter"].GetValue<int>(); } set { this["BurstCounter"].SetValue<int>(value); } }
        public float ReloadInputBufferTime { get { return this["ReloadInputBufferTime"].GetValue<float>(); } set { this["ReloadInputBufferTime"].SetValue<float>(value); } }
        public UEObject OnFireInputActionStateChangedDelegate { get { return this["OnFireInputActionStateChangedDelegate"]; } set { this["OnFireInputActionStateChangedDelegate"] = value; } }
        public UEObject FireAbility { get { return this["FireAbility"]; } set { this["FireAbility"] = value; } }
        public UEObject ReloadAbility { get { return this["ReloadAbility"]; } set { this["ReloadAbility"] = value; } }
        public UEObject LoadAmmoAbility { get { return this["LoadAmmoAbility"]; } set { this["LoadAmmoAbility"] = value; } }
        public UEObject ClipRefillAbility { get { return this["ClipRefillAbility"]; } set { this["ClipRefillAbility"] = value; } }
        public UEObject OnPureDamageTypeChangedDelegate { get { return this["OnPureDamageTypeChangedDelegate"]; } set { this["OnPureDamageTypeChangedDelegate"] = value; } }
        public float WeaponFOV { get { return this["WeaponFOV"].GetValue<float>(); } set { this["WeaponFOV"].SetValue<float>(value); } }
        public RecoilCurveVector RecoilCurves { get { return this[nameof(RecoilCurves)].As<RecoilCurveVector>(); } set { this["RecoilCurves"] = value; } }
        public DimensionPawnWeaponAnimationSet PawnWeaponAnimationSet { get { return this[nameof(PawnWeaponAnimationSet)].As<DimensionPawnWeaponAnimationSet>(); } set { this["PawnWeaponAnimationSet"] = value; } }
        public DimensionWeaponAnimationSet WeaponAnimationSet { get { return this[nameof(WeaponAnimationSet)].As<DimensionWeaponAnimationSet>(); } set { this["WeaponAnimationSet"] = value; } }
        public DataTableRowHandle PawnWeaponAnimationSetHandle { get { return this[nameof(PawnWeaponAnimationSetHandle)].As<DataTableRowHandle>(); } set { this["PawnWeaponAnimationSetHandle"] = value; } }
        public DataTableRowHandle WeaponAnimationSetHandle { get { return this[nameof(WeaponAnimationSetHandle)].As<DataTableRowHandle>(); } set { this["WeaponAnimationSetHandle"] = value; } }
        public bool bTriggerAnimNotifyImplementableEvents { get { return this["bTriggerAnimNotifyImplementableEvents"].Flag; } set { this["bTriggerAnimNotifyImplementableEvents"].Flag = value; } }
        public bool bTriggerMontageImplementableEvents { get { return this["bTriggerMontageImplementableEvents"].Flag; } set { this["bTriggerMontageImplementableEvents"].Flag = value; } }
        public bool bLoopedFireAnim { get { return this["bLoopedFireAnim"].Flag; } set { this["bLoopedFireAnim"].Flag = value; } }
        public DimensionWeaponSoundData WeaponSoundData { get { return this[nameof(WeaponSoundData)].As<DimensionWeaponSoundData>(); } set { this["WeaponSoundData"] = value; } }
        public bool bLoopedMuzzleFX { get { return this["bLoopedMuzzleFX"].Flag; } set { this["bLoopedMuzzleFX"].Flag = value; } }
        public string MuzzleAttachPointB { get { return this["MuzzleAttachPointB"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject MuzzleFX { get { return this[nameof(MuzzleFX)]; } set { this["MuzzleFX"] = value; } }
        public UEObject TemporaryMuzzleFX { get { return this[nameof(TemporaryMuzzleFX)]; } set { this["TemporaryMuzzleFX"] = value; } }
        public ParticleSystemComponent MuzzlePSC { get { return this[nameof(MuzzlePSC)].As<ParticleSystemComponent>(); } set { this["MuzzlePSC"] = value; } }
        public ParticleSystemComponent MuzzlePSCSecondary { get { return this[nameof(MuzzlePSCSecondary)].As<ParticleSystemComponent>(); } set { this["MuzzlePSCSecondary"] = value; } }
        public ForceFeedbackEffect FireForceFeedback { get { return this[nameof(FireForceFeedback)].As<ForceFeedbackEffect>(); } set { this["FireForceFeedback"] = value; } }
        public void UseAmmo() { Invoke("UseAmmo"); }
        public void _DimensionWeapon(UEObject bForceHiddenPlayerMesh, UEObject Root, UEObject Mesh1P, UEObject Mesh3P, UEObject AbilitySystem, UEObject PerkComponent, UEObject OnTierUpdatedDelegate, UEObject RecoilComponent, UEObject StateMachine, UEObject WeaponSightComponent, UEObject MyPawn, UEObject bLowerWeapon, UEObject bIsAttachedToPlayer, UEObject bReloadPending, UEObject bAutoReloadEnabled, UEObject bWasEquippedAtLeastOnce, UEObject bHideAmmoAddedNotification, UEObject BurstCounter, UEObject ReloadInputBufferTime, UEObject OnFireInputActionStateChangedDelegate, UEObject FireAbility, UEObject ReloadAbility, UEObject LoadAmmoAbility, UEObject ClipRefillAbility, UEObject OnPureDamageTypeChangedDelegate, UEObject WeaponFOV, UEObject RecoilCurves, UEObject PawnWeaponAnimationSet, UEObject WeaponAnimationSet, UEObject PawnWeaponAnimationSetHandle, UEObject WeaponAnimationSetHandle, UEObject bTriggerAnimNotifyImplementableEvents, UEObject bTriggerMontageImplementableEvents, UEObject bLoopedFireAnim, UEObject WeaponSoundData, UEObject bLoopedMuzzleFX, UEObject MuzzleAttachPointB, UEObject MuzzleFX, UEObject TemporaryMuzzleFX, UEObject MuzzlePSC, UEObject MuzzlePSCSecondary, UEObject FireForceFeedback) { Invoke("DimensionWeapon", bForceHiddenPlayerMesh, Root, Mesh1P, Mesh3P, AbilitySystem, PerkComponent, OnTierUpdatedDelegate, RecoilComponent, StateMachine, WeaponSightComponent, MyPawn, bLowerWeapon, bIsAttachedToPlayer, bReloadPending, bAutoReloadEnabled, bWasEquippedAtLeastOnce, bHideAmmoAddedNotification, BurstCounter, ReloadInputBufferTime, OnFireInputActionStateChangedDelegate, FireAbility, ReloadAbility, LoadAmmoAbility, ClipRefillAbility, OnPureDamageTypeChangedDelegate, WeaponFOV, RecoilCurves, PawnWeaponAnimationSet, WeaponAnimationSet, PawnWeaponAnimationSetHandle, WeaponAnimationSetHandle, bTriggerAnimNotifyImplementableEvents, bTriggerMontageImplementableEvents, bLoopedFireAnim, WeaponSoundData, bLoopedMuzzleFX, MuzzleAttachPointB, MuzzleFX, TemporaryMuzzleFX, MuzzlePSC, MuzzlePSCSecondary, FireForceFeedback); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionVolumeLeash : DimensionLeash
    {
        public DimensionVolumeLeash(nint addr) : base(addr) { }
        public DimensionVolumeLeash() : base(0) { }
        public Volume LeashVolume { get { return this[nameof(LeashVolume)].As<Volume>(); } set { this["LeashVolume"] = value; } }
    }
    public class DimensionVendorComponent : DimensionSaveLoadComponent
    {
        public DimensionVendorComponent(nint addr) : base(addr) { }
        public DimensionVendorComponent() : base(0) { }
        public DimensionPlayerControllerBase CachedPlayerController { get { return this[nameof(CachedPlayerController)].As<DimensionPlayerControllerBase>(); } set { this["CachedPlayerController"] = value; } }
        public Array<SaveLoadVendorItemData> SaveLoadVendorItems { get { return new Array<SaveLoadVendorItemData>(this["SaveLoadVendorItems"]); } set { this["SaveLoadVendorItems"] = value; } }
        public DataTableRowHandle VendorDataHandle { get { return this[nameof(VendorDataHandle)].As<DataTableRowHandle>(); } set { this["VendorDataHandle"] = value; } }
        public DimensionVendorData VendorData { get { return this[nameof(VendorData)].As<DimensionVendorData>(); } set { this["VendorData"] = value; } }
        public GameplayTag VendorTimeUnitUpdateTag { get { return this[nameof(VendorTimeUnitUpdateTag)].As<GameplayTag>(); } set { this["VendorTimeUnitUpdateTag"] = value; } }
        public UEObject OnStockUpdatedDelegate { get { return this["OnStockUpdatedDelegate"]; } set { this["OnStockUpdatedDelegate"] = value; } }
        public void PurchaseItemEntry(UEObject ItemEntry, UEObject BulkSize) { Invoke("PurchaseItemEntry", ItemEntry, BulkSize); }
        public void _DimensionVendorComponent(UEObject CachedPlayerController, UEObject SaveLoadVendorItems, UEObject VendorDataHandle, UEObject VendorData, UEObject VendorTimeUnitUpdateTag, UEObject OnStockUpdatedDelegate) { Invoke("DimensionVendorComponent", CachedPlayerController, SaveLoadVendorItems, VendorDataHandle, VendorData, VendorTimeUnitUpdateTag, OnStockUpdatedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionUserWidgetInterface : Interface
    {
        public DimensionUserWidgetInterface(nint addr) : base(addr) { }
        public DimensionUserWidgetInterface() : base(0) { }
        public void TickPause(UEObject DeltaTime) { Invoke("TickPause", DeltaTime); }
        public void _DimensionUserWidgetInterface() { Invoke("DimensionUserWidgetInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionUpdateRecoilEffect : DimensionGameplayEffect
    {
        public DimensionUpdateRecoilEffect(nint addr) : base(addr) { }
        public DimensionUpdateRecoilEffect() : base(0) { }
    }
    public class DimensionUISlidingComponent : DimensionUserWidget
    {
        public DimensionUISlidingComponent(nint addr) : base(addr) { }
        public DimensionUISlidingComponent() : base(0) { }
        public void TweenNowFromCurrentValues(UEObject Widget, UEObject StartDelay, UEObject EasingDuration, UEObject EndTranslation, UEObject TranslationEasingType, UEObject EndOpacity, UEObject OpacityEasingType) { Invoke("TweenNowFromCurrentValues", Widget, StartDelay, EasingDuration, EndTranslation, TranslationEasingType, EndOpacity, OpacityEasingType); }
        public void _DimensionUISlidingComponent() { Invoke("DimensionUISlidingComponent"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTweenSubsystem : GameInstanceSubsystem
    {
        public DimensionTweenSubsystem(nint addr) : base(addr) { }
        public DimensionTweenSubsystem() : base(0) { }
    }
    public class DimensionTweenLibrary : UEObject
    {
        public DimensionTweenLibrary(nint addr) : base(addr) { }
        public DimensionTweenLibrary() : base(0) { }
        public void TweenVolumeMultiplier(UEObject WorldContextObject, UEObject AudioComponent, UEObject StartMultiplier, UEObject EndMultiplier, UEObject Duration, UEObject EasingType) { Invoke("TweenVolumeMultiplier", WorldContextObject, AudioComponent, StartMultiplier, EndMultiplier, Duration, EasingType); }
        public void _DimensionTweenLibrary() { Invoke("DimensionTweenLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTrapInterface : Interface
    {
        public DimensionTrapInterface(nint addr) : base(addr) { }
        public DimensionTrapInterface() : base(0) { }
        public UEObject ShouldAddToRadarByRosaryBead(UEObject bOutKeepInRadarCache) { return InvokeUEObject("ShouldAddToRadarByRosaryBead", bOutKeepInRadarCache); }
        public void _DimensionTrapInterface() { Invoke("DimensionTrapInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTraceUtils : UEObject
    {
        public DimensionTraceUtils(nint addr) : base(addr) { }
        public DimensionTraceUtils() : base(0) { }
    }
    public class DimensionTokenSystem : UEObject
    {
        public DimensionTokenSystem(nint addr) : base(addr) { }
        public DimensionTokenSystem() : base(0) { }
        public UEObject AbilityUsageMap { get { return this["AbilityUsageMap"]; } set { this["AbilityUsageMap"] = value; } }
        public UEObject AIActiveAbilities { get { return this["AIActiveAbilities"]; } set { this["AIActiveAbilities"] = value; } }
        public ActionModifiers TokenModifiers { get { return this[nameof(TokenModifiers)].As<ActionModifiers>(); } set { this["TokenModifiers"] = value; } }
        public Array<TokenCooldown> Cooldowns { get { return new Array<TokenCooldown>(this["Cooldowns"]); } set { this["Cooldowns"] = value; } }
        public Array<TokenSettings> Tokens { get { return new Array<TokenSettings>(this["Tokens"]); } set { this["Tokens"] = value; } }
        public void UpdateTokens() { Invoke("UpdateTokens"); }
        public void _DimensionTokenSystem(UEObject AbilityUsageMap, UEObject AIActiveAbilities, UEObject TokenModifiers, UEObject Cooldowns, UEObject Tokens) { Invoke("DimensionTokenSystem", AbilityUsageMap, AIActiveAbilities, TokenModifiers, Cooldowns, Tokens); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTimeSubsystem : GameInstanceSubsystem
    {
        public DimensionTimeSubsystem(nint addr) : base(addr) { }
        public DimensionTimeSubsystem() : base(0) { }
        public float SaveLoadGenericTimeUnitsInPreviousRun { get { return this["SaveLoadGenericTimeUnitsInPreviousRun"].GetValue<float>(); } set { this["SaveLoadGenericTimeUnitsInPreviousRun"].SetValue<float>(value); } }
        public UEObject SaveLoadTimeUnitsInPreviousRun { get { return this["SaveLoadTimeUnitsInPreviousRun"]; } set { this["SaveLoadTimeUnitsInPreviousRun"] = value; } }
        public Array<DimensionTimeUnitsDelegateData> TimeUnitsDelegates { get { return new Array<DimensionTimeUnitsDelegateData>(this["TimeUnitsDelegates"]); } set { this["TimeUnitsDelegates"] = value; } }
        public Array<StringFloatPair> TimeUnitsRequestsInRun { get { return new Array<StringFloatPair>(this["TimeUnitsRequestsInRun"]); } set { this["TimeUnitsRequestsInRun"] = value; } }
        public void OnLevelChangeStarted(UEObject NextLevelTag) { Invoke("OnLevelChangeStarted", NextLevelTag); }
        public void _DimensionTimeSubsystem(UEObject SaveLoadGenericTimeUnitsInPreviousRun, UEObject SaveLoadTimeUnitsInPreviousRun, UEObject TimeUnitsDelegates, UEObject TimeUnitsRequestsInRun) { Invoke("DimensionTimeSubsystem", SaveLoadGenericTimeUnitsInPreviousRun, SaveLoadTimeUnitsInPreviousRun, TimeUnitsDelegates, TimeUnitsRequestsInRun); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionThrowableItem : DimensionConsumableItem
    {
        public DimensionThrowableItem(nint addr) : base(addr) { }
        public DimensionThrowableItem() : base(0) { }
        public DimensionThrowableItemSoundData ThrowableItemSoundData { get { return this[nameof(ThrowableItemSoundData)].As<DimensionThrowableItemSoundData>(); } set { this["ThrowableItemSoundData"] = value; } }
        public DataTableRowHandle SoundDataHandle { get { return this[nameof(SoundDataHandle)].As<DataTableRowHandle>(); } set { this["SoundDataHandle"] = value; } }
        public UEObject TriggerSoundEvent(UEObject SoundName, UEObject bOverridePlaybackSettings, UEObject PlaybackSettings, UEObject Location) { return InvokeUEObject("TriggerSoundEvent", SoundName, bOverridePlaybackSettings, PlaybackSettings, Location); }
        public void _DimensionThrowableItem(UEObject ThrowableItemSoundData, UEObject SoundDataHandle) { Invoke("DimensionThrowableItem", ThrowableItemSoundData, SoundDataHandle); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTestAttribSet : DimensionAttribSet
    {
        public DimensionTestAttribSet(nint addr) : base(addr) { }
        public DimensionTestAttribSet() : base(0) { }
        public float TestAttribute { get { return this["TestAttribute"].GetValue<float>(); } set { this["TestAttribute"].SetValue<float>(value); } }
    }
    public class DimensionTeamInterface : Interface
    {
        public DimensionTeamInterface(nint addr) : base(addr) { }
        public DimensionTeamInterface() : base(0) { }
        public void SetTeamTag(UEObject InTeamTag) { Invoke("SetTeamTag", InTeamTag); }
        public void _DimensionTeamInterface() { Invoke("DimensionTeamInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionTargetInterface : Interface
    {
        public DimensionTargetInterface(nint addr) : base(addr) { }
        public DimensionTargetInterface() : base(0) { }
        public UEObject GetTargetComponentForMelee(UEObject bForCriticalHit, UEObject OutComponentForMelee, UEObject OutBoneName, UEObject OutCustomLocation) { return InvokeUEObject("GetTargetComponentForMelee", bForCriticalHit, OutComponentForMelee, OutBoneName, OutCustomLocation); }
        public void _DimensionTargetInterface() { Invoke("DimensionTargetInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSubsystemInterface : Interface
    {
        public DimensionSubsystemInterface(nint addr) : base(addr) { }
        public DimensionSubsystemInterface() : base(0) { }
    }
    public class DimensionStunBarWidget : DimensionUserWidget
    {
        public DimensionStunBarWidget(nint addr) : base(addr) { }
        public DimensionStunBarWidget() : base(0) { }
        public Actor AttributeActor { get { return this[nameof(AttributeActor)].As<Actor>(); } set { this["AttributeActor"] = value; } }
        public void UpdateStunBarVisuals(UEObject StunValue) { Invoke("UpdateStunBarVisuals", StunValue); }
        public void _DimensionStunBarWidget(UEObject AttributeActor) { Invoke("DimensionStunBarWidget", AttributeActor); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAirStatusRegenEffect : DimensionStatusRegenEffect
    {
        public DimensionAirStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionAirStatusRegenEffect() : base(0) { }
    }
    public class DimensionWaterStatusRegenEffect : DimensionStatusRegenEffect
    {
        public DimensionWaterStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionWaterStatusRegenEffect() : base(0) { }
    }
    public class DimensionEarthStatusRegenEffect : DimensionStatusRegenEffect
    {
        public DimensionEarthStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionEarthStatusRegenEffect() : base(0) { }
    }
    public class DimensionFireStatusRegenEffect : DimensionStatusRegenEffect
    {
        public DimensionFireStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionFireStatusRegenEffect() : base(0) { }
    }
    public class DimensionPhysicalStatusRegenEffect : DimensionStatusRegenEffect
    {
        public DimensionPhysicalStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionPhysicalStatusRegenEffect() : base(0) { }
    }
    public class DimensionStatusRegenEffect : DimensionGameplayEffect
    {
        public DimensionStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionStatusRegenEffect() : base(0) { }
    }
    public class DimensionStatusAttribSet : DimensionAttribSet
    {
        public DimensionStatusAttribSet(nint addr) : base(addr) { }
        public DimensionStatusAttribSet() : base(0) { }
        public float PhysicalStatusValue { get { return this["PhysicalStatusValue"].GetValue<float>(); } set { this["PhysicalStatusValue"].SetValue<float>(value); } }
        public float PhysicalStatusMaxValue { get { return this["PhysicalStatusMaxValue"].GetValue<float>(); } set { this["PhysicalStatusMaxValue"].SetValue<float>(value); } }
        public float PhysicalStatusRegenSpeed { get { return this["PhysicalStatusRegenSpeed"].GetValue<float>(); } set { this["PhysicalStatusRegenSpeed"].SetValue<float>(value); } }
        public float PhysicalStatusRegenDelay { get { return this["PhysicalStatusRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunSoftRegenDelay { get { return this["PhysicalStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunHardRegenDelay { get { return this["PhysicalStatusStunHardRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunSoftReset { get { return this["PhysicalStatusStunSoftReset"].GetValue<float>(); } set { this["PhysicalStatusStunSoftReset"].SetValue<float>(value); } }
        public float PhysicalStatusStunHardReset { get { return this["PhysicalStatusStunHardReset"].GetValue<float>(); } set { this["PhysicalStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> PhysicalStatusSoftThresholds { get { return this["PhysicalStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> PhysicalStatusHardThresholds { get { return this["PhysicalStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float PhysicalStatusIncreaseMultiplier { get { return this["PhysicalStatusIncreaseMultiplier"].GetValue<float>(); } set { this["PhysicalStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float PhysicalStatusPowerMultiplier { get { return this["PhysicalStatusPowerMultiplier"].GetValue<float>(); } set { this["PhysicalStatusPowerMultiplier"].SetValue<float>(value); } }
        public float FireStatusValue { get { return this["FireStatusValue"].GetValue<float>(); } set { this["FireStatusValue"].SetValue<float>(value); } }
        public float FireStatusMaxValue { get { return this["FireStatusMaxValue"].GetValue<float>(); } set { this["FireStatusMaxValue"].SetValue<float>(value); } }
        public float FireStatusRegenSpeed { get { return this["FireStatusRegenSpeed"].GetValue<float>(); } set { this["FireStatusRegenSpeed"].SetValue<float>(value); } }
        public float FireStatusRegenDelay { get { return this["FireStatusRegenDelay"].GetValue<float>(); } set { this["FireStatusRegenDelay"].SetValue<float>(value); } }
        public float FireStatusStunSoftRegenDelay { get { return this["FireStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["FireStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float FireStatusStunHardRegenDelay { get { return this["FireStatusStunHardRegenDelay"].GetValue<float>(); } set { this["FireStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float FireStatusStunSoftReset { get { return this["FireStatusStunSoftReset"].GetValue<float>(); } set { this["FireStatusStunSoftReset"].SetValue<float>(value); } }
        public float FireStatusStunHardReset { get { return this["FireStatusStunHardReset"].GetValue<float>(); } set { this["FireStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> FireStatusSoftThresholds { get { return this["FireStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> FireStatusHardThresholds { get { return this["FireStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float FireStatusIncreaseMultiplier { get { return this["FireStatusIncreaseMultiplier"].GetValue<float>(); } set { this["FireStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float FireStatusPowerMultiplier { get { return this["FireStatusPowerMultiplier"].GetValue<float>(); } set { this["FireStatusPowerMultiplier"].SetValue<float>(value); } }
        public float EarthStatusValue { get { return this["EarthStatusValue"].GetValue<float>(); } set { this["EarthStatusValue"].SetValue<float>(value); } }
        public float EarthStatusMaxValue { get { return this["EarthStatusMaxValue"].GetValue<float>(); } set { this["EarthStatusMaxValue"].SetValue<float>(value); } }
        public float EarthStatusRegenSpeed { get { return this["EarthStatusRegenSpeed"].GetValue<float>(); } set { this["EarthStatusRegenSpeed"].SetValue<float>(value); } }
        public float EarthStatusRegenDelay { get { return this["EarthStatusRegenDelay"].GetValue<float>(); } set { this["EarthStatusRegenDelay"].SetValue<float>(value); } }
        public float EarthStatusStunSoftRegenDelay { get { return this["EarthStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["EarthStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float EarthStatusStunHardRegenDelay { get { return this["EarthStatusStunHardRegenDelay"].GetValue<float>(); } set { this["EarthStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float EarthStatusStunSoftReset { get { return this["EarthStatusStunSoftReset"].GetValue<float>(); } set { this["EarthStatusStunSoftReset"].SetValue<float>(value); } }
        public float EarthStatusStunHardReset { get { return this["EarthStatusStunHardReset"].GetValue<float>(); } set { this["EarthStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> EarthStatusSoftThresholds { get { return this["EarthStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> EarthStatusHardThresholds { get { return this["EarthStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float EarthStatusIncreaseMultiplier { get { return this["EarthStatusIncreaseMultiplier"].GetValue<float>(); } set { this["EarthStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float EarthStatusPowerMultiplier { get { return this["EarthStatusPowerMultiplier"].GetValue<float>(); } set { this["EarthStatusPowerMultiplier"].SetValue<float>(value); } }
        public float WaterStatusValue { get { return this["WaterStatusValue"].GetValue<float>(); } set { this["WaterStatusValue"].SetValue<float>(value); } }
        public float WaterStatusMaxValue { get { return this["WaterStatusMaxValue"].GetValue<float>(); } set { this["WaterStatusMaxValue"].SetValue<float>(value); } }
        public float WaterStatusRegenSpeed { get { return this["WaterStatusRegenSpeed"].GetValue<float>(); } set { this["WaterStatusRegenSpeed"].SetValue<float>(value); } }
        public float WaterStatusRegenDelay { get { return this["WaterStatusRegenDelay"].GetValue<float>(); } set { this["WaterStatusRegenDelay"].SetValue<float>(value); } }
        public float WaterStatusStunSoftRegenDelay { get { return this["WaterStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["WaterStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float WaterStatusStunHardRegenDelay { get { return this["WaterStatusStunHardRegenDelay"].GetValue<float>(); } set { this["WaterStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float WaterStatusStunSoftReset { get { return this["WaterStatusStunSoftReset"].GetValue<float>(); } set { this["WaterStatusStunSoftReset"].SetValue<float>(value); } }
        public float WaterStatusStunHardReset { get { return this["WaterStatusStunHardReset"].GetValue<float>(); } set { this["WaterStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> WaterStatusSoftThresholds { get { return this["WaterStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> WaterStatusHardThresholds { get { return this["WaterStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float WaterStatusIncreaseMultiplier { get { return this["WaterStatusIncreaseMultiplier"].GetValue<float>(); } set { this["WaterStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float WaterStatusPowerMultiplier { get { return this["WaterStatusPowerMultiplier"].GetValue<float>(); } set { this["WaterStatusPowerMultiplier"].SetValue<float>(value); } }
        public float AirStatusValue { get { return this["AirStatusValue"].GetValue<float>(); } set { this["AirStatusValue"].SetValue<float>(value); } }
        public float AirStatusMaxValue { get { return this["AirStatusMaxValue"].GetValue<float>(); } set { this["AirStatusMaxValue"].SetValue<float>(value); } }
        public float AirStatusRegenSpeed { get { return this["AirStatusRegenSpeed"].GetValue<float>(); } set { this["AirStatusRegenSpeed"].SetValue<float>(value); } }
        public float AirStatusRegenDelay { get { return this["AirStatusRegenDelay"].GetValue<float>(); } set { this["AirStatusRegenDelay"].SetValue<float>(value); } }
        public float AirStatusStunSoftRegenDelay { get { return this["AirStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["AirStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float AirStatusStunHardRegenDelay { get { return this["AirStatusStunHardRegenDelay"].GetValue<float>(); } set { this["AirStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float AirStatusStunSoftReset { get { return this["AirStatusStunSoftReset"].GetValue<float>(); } set { this["AirStatusStunSoftReset"].SetValue<float>(value); } }
        public float AirStatusStunHardReset { get { return this["AirStatusStunHardReset"].GetValue<float>(); } set { this["AirStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> AirStatusSoftThresholds { get { return this["AirStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> AirStatusHardThresholds { get { return this["AirStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float AirStatusIncreaseMultiplier { get { return this["AirStatusIncreaseMultiplier"].GetValue<float>(); } set { this["AirStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float AirStatusPowerMultiplier { get { return this["AirStatusPowerMultiplier"].GetValue<float>(); } set { this["AirStatusPowerMultiplier"].SetValue<float>(value); } }
        public void OnRep_WaterStatusValue(UEObject OldValue) { Invoke("OnRep_WaterStatusValue", OldValue); }
        public void _DimensionStatusAttribSet(UEObject PhysicalStatusValue, UEObject PhysicalStatusMaxValue, UEObject PhysicalStatusRegenSpeed, UEObject PhysicalStatusRegenDelay, UEObject PhysicalStatusStunSoftRegenDelay, UEObject PhysicalStatusStunHardRegenDelay, UEObject PhysicalStatusStunSoftReset, UEObject PhysicalStatusStunHardReset, UEObject PhysicalStatusSoftThresholds, UEObject PhysicalStatusHardThresholds, UEObject PhysicalStatusIncreaseMultiplier, UEObject PhysicalStatusPowerMultiplier, UEObject FireStatusValue, UEObject FireStatusMaxValue, UEObject FireStatusRegenSpeed, UEObject FireStatusRegenDelay, UEObject FireStatusStunSoftRegenDelay, UEObject FireStatusStunHardRegenDelay, UEObject FireStatusStunSoftReset, UEObject FireStatusStunHardReset, UEObject FireStatusSoftThresholds, UEObject FireStatusHardThresholds, UEObject FireStatusIncreaseMultiplier, UEObject FireStatusPowerMultiplier, UEObject EarthStatusValue, UEObject EarthStatusMaxValue, UEObject EarthStatusRegenSpeed, UEObject EarthStatusRegenDelay, UEObject EarthStatusStunSoftRegenDelay, UEObject EarthStatusStunHardRegenDelay, UEObject EarthStatusStunSoftReset, UEObject EarthStatusStunHardReset, UEObject EarthStatusSoftThresholds, UEObject EarthStatusHardThresholds, UEObject EarthStatusIncreaseMultiplier, UEObject EarthStatusPowerMultiplier, UEObject WaterStatusValue, UEObject WaterStatusMaxValue, UEObject WaterStatusRegenSpeed, UEObject WaterStatusRegenDelay, UEObject WaterStatusStunSoftRegenDelay, UEObject WaterStatusStunHardRegenDelay, UEObject WaterStatusStunSoftReset, UEObject WaterStatusStunHardReset, UEObject WaterStatusSoftThresholds, UEObject WaterStatusHardThresholds, UEObject WaterStatusIncreaseMultiplier, UEObject WaterStatusPowerMultiplier, UEObject AirStatusValue, UEObject AirStatusMaxValue, UEObject AirStatusRegenSpeed, UEObject AirStatusRegenDelay, UEObject AirStatusStunSoftRegenDelay, UEObject AirStatusStunHardRegenDelay, UEObject AirStatusStunSoftReset, UEObject AirStatusStunHardReset, UEObject AirStatusSoftThresholds, UEObject AirStatusHardThresholds, UEObject AirStatusIncreaseMultiplier, UEObject AirStatusPowerMultiplier) { Invoke("DimensionStatusAttribSet", PhysicalStatusValue, PhysicalStatusMaxValue, PhysicalStatusRegenSpeed, PhysicalStatusRegenDelay, PhysicalStatusStunSoftRegenDelay, PhysicalStatusStunHardRegenDelay, PhysicalStatusStunSoftReset, PhysicalStatusStunHardReset, PhysicalStatusSoftThresholds, PhysicalStatusHardThresholds, PhysicalStatusIncreaseMultiplier, PhysicalStatusPowerMultiplier, FireStatusValue, FireStatusMaxValue, FireStatusRegenSpeed, FireStatusRegenDelay, FireStatusStunSoftRegenDelay, FireStatusStunHardRegenDelay, FireStatusStunSoftReset, FireStatusStunHardReset, FireStatusSoftThresholds, FireStatusHardThresholds, FireStatusIncreaseMultiplier, FireStatusPowerMultiplier, EarthStatusValue, EarthStatusMaxValue, EarthStatusRegenSpeed, EarthStatusRegenDelay, EarthStatusStunSoftRegenDelay, EarthStatusStunHardRegenDelay, EarthStatusStunSoftReset, EarthStatusStunHardReset, EarthStatusSoftThresholds, EarthStatusHardThresholds, EarthStatusIncreaseMultiplier, EarthStatusPowerMultiplier, WaterStatusValue, WaterStatusMaxValue, WaterStatusRegenSpeed, WaterStatusRegenDelay, WaterStatusStunSoftRegenDelay, WaterStatusStunHardRegenDelay, WaterStatusStunSoftReset, WaterStatusStunHardReset, WaterStatusSoftThresholds, WaterStatusHardThresholds, WaterStatusIncreaseMultiplier, WaterStatusPowerMultiplier, AirStatusValue, AirStatusMaxValue, AirStatusRegenSpeed, AirStatusRegenDelay, AirStatusStunSoftRegenDelay, AirStatusStunHardRegenDelay, AirStatusStunSoftReset, AirStatusStunHardReset, AirStatusSoftThresholds, AirStatusHardThresholds, AirStatusIncreaseMultiplier, AirStatusPowerMultiplier); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionStatsSubsystemSettings : UEObject
    {
        public DimensionStatsSubsystemSettings(nint addr) : base(addr) { }
        public DimensionStatsSubsystemSettings() : base(0) { }
        public List<string> StatCollections { get { return this["StatCollections"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class DimensionStatsSubsystem : GameInstanceSubsystem
    {
        public DimensionStatsSubsystem(nint addr) : base(addr) { }
        public DimensionStatsSubsystem() : base(0) { }
        public void OnItemRemovedCallback(UEObject UpdateData) { Invoke("OnItemRemovedCallback", UpdateData); }
        public void _DimensionStatsSubsystem() { Invoke("DimensionStatsSubsystem"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionStaminaOnHitResetEffect : DimensionGameplayEffect
    {
        public DimensionStaminaOnHitResetEffect(nint addr) : base(addr) { }
        public DimensionStaminaOnHitResetEffect() : base(0) { }
    }
    public class DimensionDrainStaminaOnTargetingEffect : DimensionGameplayEffect
    {
        public DimensionDrainStaminaOnTargetingEffect(nint addr) : base(addr) { }
        public DimensionDrainStaminaOnTargetingEffect() : base(0) { }
    }
    public class DimensionStaminaRegenEffect : DimensionGameplayEffect
    {
        public DimensionStaminaRegenEffect(nint addr) : base(addr) { }
        public DimensionStaminaRegenEffect() : base(0) { }
    }
    public class StaminaRegenEffectCustomCalculation : GameplayModMagnitudeCalculation
    {
        public StaminaRegenEffectCustomCalculation(nint addr) : base(addr) { }
        public StaminaRegenEffectCustomCalculation() : base(0) { }
    }
    public class DimensionStaminaAttribSet : DimensionAttribSet
    {
        public DimensionStaminaAttribSet(nint addr) : base(addr) { }
        public DimensionStaminaAttribSet() : base(0) { }
        public float MaxStamina { get { return this["MaxStamina"].GetValue<float>(); } set { this["MaxStamina"].SetValue<float>(value); } }
        public float MaxBaseStamina { get { return this["MaxBaseStamina"].GetValue<float>(); } set { this["MaxBaseStamina"].SetValue<float>(value); } }
        public float MaxExtraStamina { get { return this["MaxExtraStamina"].GetValue<float>(); } set { this["MaxExtraStamina"].SetValue<float>(value); } }
        public float StaminaKillBonus { get { return this["StaminaKillBonus"].GetValue<float>(); } set { this["StaminaKillBonus"].SetValue<float>(value); } }
        public float StaminaKillBonusLimit { get { return this["StaminaKillBonusLimit"].GetValue<float>(); } set { this["StaminaKillBonusLimit"].SetValue<float>(value); } }
        public float StaminaKillBonusStacks { get { return this["StaminaKillBonusStacks"].GetValue<float>(); } set { this["StaminaKillBonusStacks"].SetValue<float>(value); } }
        public float Stamina { get { return this["Stamina"].GetValue<float>(); } set { this["Stamina"].SetValue<float>(value); } }
        public float BaseStamina { get { return this["BaseStamina"].GetValue<float>(); } set { this["BaseStamina"].SetValue<float>(value); } }
        public float ExtraStamina { get { return this["ExtraStamina"].GetValue<float>(); } set { this["ExtraStamina"].SetValue<float>(value); } }
        public float StaminaOverdraw { get { return this["StaminaOverdraw"].GetValue<float>(); } set { this["StaminaOverdraw"].SetValue<float>(value); } }
        public float StaminaRegenSpeed { get { return this["StaminaRegenSpeed"].GetValue<float>(); } set { this["StaminaRegenSpeed"].SetValue<float>(value); } }
        public float StaminaRegenDelay { get { return this["StaminaRegenDelay"].GetValue<float>(); } set { this["StaminaRegenDelay"].SetValue<float>(value); } }
        public float ActualStaminaRegenSpeed { get { return this["ActualStaminaRegenSpeed"].GetValue<float>(); } set { this["ActualStaminaRegenSpeed"].SetValue<float>(value); } }
        public float StaminaMovementModifier { get { return this["StaminaMovementModifier"].GetValue<float>(); } set { this["StaminaMovementModifier"].SetValue<float>(value); } }
        public float RunningStaminaCost { get { return this["RunningStaminaCost"].GetValue<float>(); } set { this["RunningStaminaCost"].SetValue<float>(value); } }
        public float SlidingStaminaCost { get { return this["SlidingStaminaCost"].GetValue<float>(); } set { this["SlidingStaminaCost"].SetValue<float>(value); } }
        public float OnHitStaminaCost { get { return this["OnHitStaminaCost"].GetValue<float>(); } set { this["OnHitStaminaCost"].SetValue<float>(value); } }
        public float OnHitStaminaDamageMultiplier { get { return this["OnHitStaminaDamageMultiplier"].GetValue<float>(); } set { this["OnHitStaminaDamageMultiplier"].SetValue<float>(value); } }
        public float StaminaFireCostMultiplier { get { return this["StaminaFireCostMultiplier"].GetValue<float>(); } set { this["StaminaFireCostMultiplier"].SetValue<float>(value); } }
        public void OnRep_Stamina(UEObject OldValue) { Invoke("OnRep_Stamina", OldValue); }
        public void _DimensionStaminaAttribSet(UEObject MaxStamina, UEObject MaxBaseStamina, UEObject MaxExtraStamina, UEObject StaminaKillBonus, UEObject StaminaKillBonusLimit, UEObject StaminaKillBonusStacks, UEObject Stamina, UEObject BaseStamina, UEObject ExtraStamina, UEObject StaminaOverdraw, UEObject StaminaRegenSpeed, UEObject StaminaRegenDelay, UEObject ActualStaminaRegenSpeed, UEObject StaminaMovementModifier, UEObject RunningStaminaCost, UEObject SlidingStaminaCost, UEObject OnHitStaminaCost, UEObject OnHitStaminaDamageMultiplier, UEObject StaminaFireCostMultiplier) { Invoke("DimensionStaminaAttribSet", MaxStamina, MaxBaseStamina, MaxExtraStamina, StaminaKillBonus, StaminaKillBonusLimit, StaminaKillBonusStacks, Stamina, BaseStamina, ExtraStamina, StaminaOverdraw, StaminaRegenSpeed, StaminaRegenDelay, ActualStaminaRegenSpeed, StaminaMovementModifier, RunningStaminaCost, SlidingStaminaCost, OnHitStaminaCost, OnHitStaminaDamageMultiplier, StaminaFireCostMultiplier); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionStakeProjectileInterface : Interface
    {
        public DimensionStakeProjectileInterface(nint addr) : base(addr) { }
        public DimensionStakeProjectileInterface() : base(0) { }
        public void TriggerStakeSequence(UEObject DamageData) { Invoke("TriggerStakeSequence", DamageData); }
        public void _DimensionStakeProjectileInterface() { Invoke("DimensionStakeProjectileInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionsStatsBlueprintLibrary : UEObject
    {
        public DimensionsStatsBlueprintLibrary(nint addr) : base(addr) { }
        public DimensionsStatsBlueprintLibrary() : base(0) { }
        public UEObject TypeToStatTag(UEObject WorldContextObject, UEObject TypeTag, UEObject Adjective) { return InvokeUEObject("TypeToStatTag", WorldContextObject, TypeTag, Adjective); }
        public void _DimensionsStatsBlueprintLibrary() { Invoke("DimensionsStatsBlueprintLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSquadAreaVolume : Volume
    {
        public DimensionSquadAreaVolume(nint addr) : base(addr) { }
        public DimensionSquadAreaVolume() : base(0) { }
        public UEObject IsPointInsideVolume(UEObject Point) { return InvokeUEObject("IsPointInsideVolume", Point); }
        public void _DimensionSquadAreaVolume() { Invoke("DimensionSquadAreaVolume"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSquad : UEObject
    {
        public DimensionSquad(nint addr) : base(addr) { }
        public DimensionSquad() : base(0) { }
        public UEObject SquadMembersAssignment { get { return this["SquadMembersAssignment"]; } set { this["SquadMembersAssignment"] = value; } }
        public Color SquadColor { get { return this[nameof(SquadColor)].As<Color>(); } set { this["SquadColor"] = value; } }
        public bool bDynamicSquad { get { return this["bDynamicSquad"].Flag; } set { this["bDynamicSquad"].Flag = value; } }
        public void SetDynamic(UEObject NewDynamic) { Invoke("SetDynamic", NewDynamic); }
        public void _DimensionSquad(UEObject SquadMembersAssignment, UEObject SquadColor, UEObject bDynamicSquad) { Invoke("DimensionSquad", SquadMembersAssignment, SquadColor, bDynamicSquad); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSpawnNode : Actor
    {
        public DimensionSpawnNode(nint addr) : base(addr) { }
        public DimensionSpawnNode() : base(0) { }
        public DimensionGameplayPropComponent GameplayPropComponent { get { return this[nameof(GameplayPropComponent)].As<DimensionGameplayPropComponent>(); } set { this["GameplayPropComponent"] = value; } }
        public UEObject OnActorSpawnedDelegate { get { return this["OnActorSpawnedDelegate"]; } set { this["OnActorSpawnedDelegate"] = value; } }
        public UEObject OnActorKilledDelegate { get { return this["OnActorKilledDelegate"]; } set { this["OnActorKilledDelegate"] = value; } }
        public bool bAutoActivateOnLoad { get { return this["bAutoActivateOnLoad"].Flag; } set { this["bAutoActivateOnLoad"].Flag = value; } }
        public string DefaultLeashName { get { return this["DefaultLeashName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<DataTableRowHandle> PresetsSpawnedOnActivate { get { return new Array<DataTableRowHandle>(this["PresetsSpawnedOnActivate"]); } set { this["PresetsSpawnedOnActivate"] = value; } }
        public Array<UEObject> CharactersSpawnedOnActivate { get { return new Array<UEObject>(this["CharactersSpawnedOnActivate"]); } set { this["CharactersSpawnedOnActivate"] = value; } }
        public bool bUseDefaultQueryForActivateSpawns { get { return this["bUseDefaultQueryForActivateSpawns"].Flag; } set { this["bUseDefaultQueryForActivateSpawns"].Flag = value; } }
        public Array<DataTableRowHandle> PreferredPresets { get { return new Array<DataTableRowHandle>(this["PreferredPresets"]); } set { this["PreferredPresets"] = value; } }
        public Array<DimensionAICharacter> SpawnedCharacters { get { return new Array<DimensionAICharacter>(this["SpawnedCharacters"]); } set { this["SpawnedCharacters"] = value; } }
        public void SpawnDefaultPresetData() { Invoke("SpawnDefaultPresetData"); }
        public void _DimensionSpawnNode(UEObject GameplayPropComponent, UEObject OnActorSpawnedDelegate, UEObject OnActorKilledDelegate, UEObject bAutoActivateOnLoad, UEObject DefaultLeashName, UEObject PresetsSpawnedOnActivate, UEObject CharactersSpawnedOnActivate, UEObject bUseDefaultQueryForActivateSpawns, UEObject PreferredPresets, UEObject SpawnedCharacters) { Invoke("DimensionSpawnNode", GameplayPropComponent, OnActorSpawnedDelegate, OnActorKilledDelegate, bAutoActivateOnLoad, DefaultLeashName, PresetsSpawnedOnActivate, CharactersSpawnedOnActivate, bUseDefaultQueryForActivateSpawns, PreferredPresets, SpawnedCharacters); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSpawnManager : DimensionObject
    {
        public DimensionSpawnManager(nint addr) : base(addr) { }
        public DimensionSpawnManager() : base(0) { }
        public bool Info { get { return this["Info"].Flag; } set { this["Info"].Flag = value; } }
        public Actor CachedPlayer { get { return this[nameof(CachedPlayer)].As<Actor>(); } set { this["CachedPlayer"] = value; } }
        public UEObject OnActorSpawnedDelegate { get { return this["OnActorSpawnedDelegate"]; } set { this["OnActorSpawnedDelegate"] = value; } }
        public UEObject OnActorKilledDelegate { get { return this["OnActorKilledDelegate"]; } set { this["OnActorKilledDelegate"] = value; } }
        public UEObject OnActorKilledOrDestroyedDelegate { get { return this["OnActorKilledOrDestroyedDelegate"]; } set { this["OnActorKilledOrDestroyedDelegate"] = value; } }
        public DimensionAllocator Allocator { get { return this[nameof(Allocator)].As<DimensionAllocator>(); } set { this["Allocator"] = value; } }
        public Array<SpawnManagerEntry> PendingSpawns { get { return new Array<SpawnManagerEntry>(this["PendingSpawns"]); } set { this["PendingSpawns"] = value; } }
        public UEObject DefaultSpawnQuery { get { return this["DefaultSpawnQuery"]; } set { this["DefaultSpawnQuery"] = value; } }
        public UEObject DefaultSpawnEffects { get { return this["DefaultSpawnEffects"]; } set { this["DefaultSpawnEffects"] = value; } }
        public UEObject DefaultTypeSFXData { get { return this["DefaultTypeSFXData"]; } set { this["DefaultTypeSFXData"] = value; } }
        public UEObject DefaultTypeGroupSFXData { get { return this["DefaultTypeGroupSFXData"]; } set { this["DefaultTypeGroupSFXData"] = value; } }
        public UEObject DefaultParticleSFXData { get { return this["DefaultParticleSFXData"]; } set { this["DefaultParticleSFXData"] = value; } }
        public UEObject DefaultGroupSFXCountData { get { return this["DefaultGroupSFXCountData"]; } set { this["DefaultGroupSFXCountData"] = value; } }
        public bool bLoadAllSpawnEffects { get { return this["bLoadAllSpawnEffects"].Flag; } set { this["bLoadAllSpawnEffects"].Flag = value; } }
        public bool bLoadAllSpawnEffectsInFirstLevel { get { return this["bLoadAllSpawnEffectsInFirstLevel"].Flag; } set { this["bLoadAllSpawnEffectsInFirstLevel"].Flag = value; } }
        public bool bLoadAllSpawnEffectsAsync { get { return this["bLoadAllSpawnEffectsAsync"].Flag; } set { this["bLoadAllSpawnEffectsAsync"].Flag = value; } }
        public bool bLoadAllActorClasses { get { return this["bLoadAllActorClasses"].Flag; } set { this["bLoadAllActorClasses"].Flag = value; } }
        public bool bLoadAllActorClassesInFirstLevel { get { return this["bLoadAllActorClassesInFirstLevel"].Flag; } set { this["bLoadAllActorClassesInFirstLevel"].Flag = value; } }
        public bool bLoadAllActorClassesAsync { get { return this["bLoadAllActorClassesAsync"].Flag; } set { this["bLoadAllActorClassesAsync"].Flag = value; } }
        public Array<UEObject> LoadedActorClasses { get { return new Array<UEObject>(this["LoadedActorClasses"]); } set { this["LoadedActorClasses"] = value; } }
        public Array<UEObject> LoadedVFX { get { return new Array<UEObject>(this["LoadedVFX"]); } set { this["LoadedVFX"] = value; } }
        public Array<SoundCue> LoadedSFX { get { return new Array<SoundCue>(this["LoadedSFX"]); } set { this["LoadedSFX"] = value; } }
        public Array<EnvQuery> LoadedEnvQueries { get { return new Array<EnvQuery>(this["LoadedEnvQueries"]); } set { this["LoadedEnvQueries"] = value; } }
        public DimensionAssetLoader CachedAssetLoader { get { return this[nameof(CachedAssetLoader)].As<DimensionAssetLoader>(); } set { this["CachedAssetLoader"] = value; } }
        public void StopSpawnForEntryID(UEObject EntryID) { Invoke("StopSpawnForEntryID", EntryID); }
        public void _DimensionSpawnManager(UEObject Info, UEObject CachedPlayer, UEObject OnActorSpawnedDelegate, UEObject OnActorKilledDelegate, UEObject OnActorKilledOrDestroyedDelegate, UEObject Allocator, UEObject PendingSpawns, UEObject DefaultSpawnQuery, UEObject DefaultSpawnEffects, UEObject DefaultTypeSFXData, UEObject DefaultTypeGroupSFXData, UEObject DefaultParticleSFXData, UEObject DefaultGroupSFXCountData, UEObject bLoadAllSpawnEffects, UEObject bLoadAllSpawnEffectsInFirstLevel, UEObject bLoadAllSpawnEffectsAsync, UEObject bLoadAllActorClasses, UEObject bLoadAllActorClassesInFirstLevel, UEObject bLoadAllActorClassesAsync, UEObject LoadedActorClasses, UEObject LoadedVFX, UEObject LoadedSFX, UEObject LoadedEnvQueries, UEObject CachedAssetLoader) { Invoke("DimensionSpawnManager", Info, CachedPlayer, OnActorSpawnedDelegate, OnActorKilledDelegate, OnActorKilledOrDestroyedDelegate, Allocator, PendingSpawns, DefaultSpawnQuery, DefaultSpawnEffects, DefaultTypeSFXData, DefaultTypeGroupSFXData, DefaultParticleSFXData, DefaultGroupSFXCountData, bLoadAllSpawnEffects, bLoadAllSpawnEffectsInFirstLevel, bLoadAllSpawnEffectsAsync, bLoadAllActorClasses, bLoadAllActorClassesInFirstLevel, bLoadAllActorClassesAsync, LoadedActorClasses, LoadedVFX, LoadedSFX, LoadedEnvQueries, CachedAssetLoader); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSquadSpawner : NavigationObjectBase
    {
        public DimensionSquadSpawner(nint addr) : base(addr) { }
        public DimensionSquadSpawner() : base(0) { }
        public bool bSetImmediateAggro { get { return this["bSetImmediateAggro"].Flag; } set { this["bSetImmediateAggro"].Flag = value; } }
        public SphereComponent SpawningVolume { get { return this[nameof(SpawningVolume)].As<SphereComponent>(); } set { this["SpawningVolume"] = value; } }
        public UEObject OnCharacterDeath { get { return this["OnCharacterDeath"]; } set { this["OnCharacterDeath"] = value; } }
        public UEObject OnCharacterSpawned { get { return this["OnCharacterSpawned"]; } set { this["OnCharacterSpawned"] = value; } }
        public Array<UEObject> CharacterClasses { get { return new Array<UEObject>(this["CharacterClasses"]); } set { this["CharacterClasses"] = value; } }
        public Array<SquadSpawnerInfo> SpawnOnLevelLoad { get { return new Array<SquadSpawnerInfo>(this["SpawnOnLevelLoad"]); } set { this["SpawnOnLevelLoad"] = value; } }
        public float SpawnRadiusOffset { get { return this["SpawnRadiusOffset"].GetValue<float>(); } set { this["SpawnRadiusOffset"].SetValue<float>(value); } }
        public Array<DimensionAICharacter> SpawnedCharacters { get { return new Array<DimensionAICharacter>(this["SpawnedCharacters"]); } set { this["SpawnedCharacters"] = value; } }
        public bool bLocked { get { return this["bLocked"].Flag; } set { this["bLocked"].Flag = value; } }
        public UEObject SpawnFX { get { return this[nameof(SpawnFX)]; } set { this["SpawnFX"] = value; } }
        public void SpawnSquad(UEObject SpawnInfo, UEObject SpawnHandlingMethod) { Invoke("SpawnSquad", SpawnInfo, SpawnHandlingMethod); }
        public void _DimensionSquadSpawner(UEObject bSetImmediateAggro, UEObject SpawningVolume, UEObject OnCharacterDeath, UEObject OnCharacterSpawned, UEObject CharacterClasses, UEObject SpawnOnLevelLoad, UEObject SpawnRadiusOffset, UEObject SpawnedCharacters, UEObject bLocked, UEObject SpawnFX) { Invoke("DimensionSquadSpawner", bSetImmediateAggro, SpawningVolume, OnCharacterDeath, OnCharacterSpawned, CharacterClasses, SpawnOnLevelLoad, SpawnRadiusOffset, SpawnedCharacters, bLocked, SpawnFX); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSpawner : NavigationObjectBase
    {
        public DimensionSpawner(nint addr) : base(addr) { }
        public DimensionSpawner() : base(0) { }
        public UEObject OnCharacterSpawned { get { return this["OnCharacterSpawned"]; } set { this["OnCharacterSpawned"] = value; } }
        public UEObject OnCharacterDeath { get { return this["OnCharacterDeath"]; } set { this["OnCharacterDeath"] = value; } }
        public Array<DimensionAICharacter> SpawnedCharacters { get { return new Array<DimensionAICharacter>(this["SpawnedCharacters"]); } set { this["SpawnedCharacters"] = value; } }
        public Array<ActorSpawnData> PendingCharacters { get { return new Array<ActorSpawnData>(this["PendingCharacters"]); } set { this["PendingCharacters"] = value; } }
        public Array<UEObject> CharacterClasses { get { return new Array<UEObject>(this["CharacterClasses"]); } set { this["CharacterClasses"] = value; } }
        public SphereComponent SpawningVolume { get { return this[nameof(SpawningVolume)].As<SphereComponent>(); } set { this["SpawningVolume"] = value; } }
        public UEObject SpawnFX { get { return this[nameof(SpawnFX)]; } set { this["SpawnFX"] = value; } }
        public DataTableRowHandle PresetSpawnedOnLevelLoad { get { return this[nameof(PresetSpawnedOnLevelLoad)].As<DataTableRowHandle>(); } set { this["PresetSpawnedOnLevelLoad"] = value; } }
        public float SpawnRadiusOffset { get { return this["SpawnRadiusOffset"].GetValue<float>(); } set { this["SpawnRadiusOffset"].SetValue<float>(value); } }
        public Array<UEObject> AsyncCharacters { get { return new Array<UEObject>(this["AsyncCharacters"]); } set { this["AsyncCharacters"] = value; } }
        public UEObject SpawnSingle(UEObject CharacterClass, UEObject bSpawnWithoutDelay) { return InvokeUEObject("SpawnSingle", CharacterClass, bSpawnWithoutDelay); }
        public void _DimensionSpawner(UEObject OnCharacterSpawned, UEObject OnCharacterDeath, UEObject SpawnedCharacters, UEObject PendingCharacters, UEObject CharacterClasses, UEObject SpawningVolume, UEObject SpawnFX, UEObject PresetSpawnedOnLevelLoad, UEObject SpawnRadiusOffset, UEObject AsyncCharacters) { Invoke("DimensionSpawner", OnCharacterSpawned, OnCharacterDeath, SpawnedCharacters, PendingCharacters, CharacterClasses, SpawningVolume, SpawnFX, PresetSpawnedOnLevelLoad, SpawnRadiusOffset, AsyncCharacters); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSoundInterface : Interface
    {
        public DimensionSoundInterface(nint addr) : base(addr) { }
        public DimensionSoundInterface() : base(0) { }
        public UEObject TriggerSoundEvent(UEObject SoundName, UEObject bOverridePlaybackSettings, UEObject PlaybackSettings, UEObject Location) { return InvokeUEObject("TriggerSoundEvent", SoundName, bOverridePlaybackSettings, PlaybackSettings, Location); }
        public void _DimensionSoundInterface() { Invoke("DimensionSoundInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSoundComponent : DimensionActorComponent
    {
        public DimensionSoundComponent(nint addr) : base(addr) { }
        public DimensionSoundComponent() : base(0) { }
        public UEObject OnSoundDataLoaded { get { return this["OnSoundDataLoaded"]; } set { this["OnSoundDataLoaded"] = value; } }
        public DataTableRowHandle SoundDataHandle { get { return this[nameof(SoundDataHandle)].As<DataTableRowHandle>(); } set { this["SoundDataHandle"] = value; } }
        public DimensionSoundData SoundData { get { return this[nameof(SoundData)].As<DimensionSoundData>(); } set { this["SoundData"] = value; } }
        public UEObject TriggerSoundEvent(UEObject SoundName, UEObject bOverridePlaybackSettings, UEObject PlaybackSettings, UEObject Location) { return InvokeUEObject("TriggerSoundEvent", SoundName, bOverridePlaybackSettings, PlaybackSettings, Location); }
        public void _DimensionSoundComponent(UEObject OnSoundDataLoaded, UEObject SoundDataHandle, UEObject SoundData) { Invoke("DimensionSoundComponent", OnSoundDataLoaded, SoundDataHandle, SoundData); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSniperRifleHeavyInterface : Interface
    {
        public DimensionSniperRifleHeavyInterface(nint addr) : base(addr) { }
        public DimensionSniperRifleHeavyInterface() : base(0) { }
        public void UpdateChargesLeft(UEObject ChargesLeft) { Invoke("UpdateChargesLeft", ChargesLeft); }
        public void _DimensionSniperRifleHeavyInterface() { Invoke("DimensionSniperRifleHeavyInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSlidingEffect : DimensionGameplayEffect
    {
        public DimensionSlidingEffect(nint addr) : base(addr) { }
        public DimensionSlidingEffect() : base(0) { }
    }
    public class SlidingEffectCustomCalculation : GameplayModMagnitudeCalculation
    {
        public SlidingEffectCustomCalculation(nint addr) : base(addr) { }
        public SlidingEffectCustomCalculation() : base(0) { }
    }
    public class DimensionSizeBox : SizeBox
    {
        public DimensionSizeBox(nint addr) : base(addr) { }
        public DimensionSizeBox() : base(0) { }
        public bool bCenteredContent { get { return this["bCenteredContent"].Flag; } set { this["bCenteredContent"].Flag = value; } }
    }
    public class DimensionShotgunHeavyInterface : Interface
    {
        public DimensionShotgunHeavyInterface(nint addr) : base(addr) { }
        public DimensionShotgunHeavyInterface() : base(0) { }
        public void StopCharge() { Invoke("StopCharge"); }
        public void _DimensionShotgunHeavyInterface() { Invoke("DimensionShotgunHeavyInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSettingsPresetData : DataAsset
    {
        public DimensionSettingsPresetData(nint addr) : base(addr) { }
        public DimensionSettingsPresetData() : base(0) { }
        public Array<DimensionSettingsPreset> Presets { get { return new Array<DimensionSettingsPreset>(this["Presets"]); } set { this["Presets"] = value; } }
    }
    public class DimensionSettingsSubsystem : GameInstanceSubsystem
    {
        public DimensionSettingsSubsystem(nint addr) : base(addr) { }
        public DimensionSettingsSubsystem() : base(0) { }
        public UEObject OnPropertySettingChanged { get { return this["OnPropertySettingChanged"]; } set { this["OnPropertySettingChanged"] = value; } }
        public void SetNumberSettingValue(UEObject SettingTag, UEObject Value) { Invoke("SetNumberSettingValue", SettingTag, Value); }
        public void _DimensionSettingsSubsystem(UEObject OnPropertySettingChanged) { Invoke("DimensionSettingsSubsystem", OnPropertySettingChanged); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSaveLoadSystem : DimensionObject
    {
        public DimensionSaveLoadSystem(nint addr) : base(addr) { }
        public DimensionSaveLoadSystem() : base(0) { }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public UEObject OnPreSaveSlotChangedDelegate { get { return this["OnPreSaveSlotChangedDelegate"]; } set { this["OnPreSaveSlotChangedDelegate"] = value; } }
        public UEObject OnSaveSlotChangedDelegate { get { return this["OnSaveSlotChangedDelegate"]; } set { this["OnSaveSlotChangedDelegate"] = value; } }
        public UEObject OnClearDataForNewSlotDelegate { get { return this["OnClearDataForNewSlotDelegate"]; } set { this["OnClearDataForNewSlotDelegate"] = value; } }
        public UEObject CachedGameLoopSubsystem { get { return this[nameof(CachedGameLoopSubsystem)]; } set { this["CachedGameLoopSubsystem"] = value; } }
        public Array<FileLoadStrategy> FileLoadStrategies { get { return new Array<FileLoadStrategy>(this["FileLoadStrategies"]); } set { this["FileLoadStrategies"] = value; } }
        public Array<FileLoadStrategy> SecondaryFileLoadStrategies { get { return new Array<FileLoadStrategy>(this["SecondaryFileLoadStrategies"]); } set { this["SecondaryFileLoadStrategies"] = value; } }
        public EFileLoadPolicy DefaultMainFileLoadPolicy { get { return (EFileLoadPolicy)this["DefaultMainFileLoadPolicy"].GetValue<int>(); } set { this["DefaultMainFileLoadPolicy"].SetValue<int>((int)value); } }
        public EFileLoadPolicy DefaultBackupMainFileLoadPolicy { get { return (EFileLoadPolicy)this["DefaultBackupMainFileLoadPolicy"].GetValue<int>(); } set { this["DefaultBackupMainFileLoadPolicy"].SetValue<int>((int)value); } }
        public EFileLoadPolicy DefaultBackupUpgradeFileLoadPolicy { get { return (EFileLoadPolicy)this["DefaultBackupUpgradeFileLoadPolicy"].GetValue<int>(); } set { this["DefaultBackupUpgradeFileLoadPolicy"].SetValue<int>((int)value); } }
        public List<int> AvailableSlotNumbers { get { return this["AvailableSlotNumbers"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<DimensionSaveGameData> AvailableSaveGameData { get { return new Array<DimensionSaveGameData>(this["AvailableSaveGameData"]); } set { this["AvailableSaveGameData"] = value; } }
        public Array<FileLoadResult> FileLoadResults { get { return new Array<FileLoadResult>(this["FileLoadResults"]); } set { this["FileLoadResults"] = value; } }
        public FileLoadResult SelectedFileLoadResult { get { return this[nameof(SelectedFileLoadResult)].As<FileLoadResult>(); } set { this["SelectedFileLoadResult"] = value; } }
        public List<int> FoundSlotNumbers { get { return this["FoundSlotNumbers"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public DimensionSaveGameData MainSaveGameData { get { return this[nameof(MainSaveGameData)].As<DimensionSaveGameData>(); } set { this["MainSaveGameData"] = value; } }
        public Array<DimensionSaveGameData> LoadedSaveGameData { get { return new Array<DimensionSaveGameData>(this["LoadedSaveGameData"]); } set { this["LoadedSaveGameData"] = value; } }
        public Array<DimensionSaveGameData> CachedSaveGameDataWithLowerVersion { get { return new Array<DimensionSaveGameData>(this["CachedSaveGameDataWithLowerVersion"]); } set { this["CachedSaveGameDataWithLowerVersion"] = value; } }
        public UEObject SaveRequiredCategoryToKeyTagsMap { get { return this["SaveRequiredCategoryToKeyTagsMap"]; } set { this["SaveRequiredCategoryToKeyTagsMap"] = value; } }
        public UEObject OnObjectSaveLoadFinishedDelegate { get { return this["OnObjectSaveLoadFinishedDelegate"]; } set { this["OnObjectSaveLoadFinishedDelegate"] = value; } }
        public string DefaultSaveSlotFileName { get { return this["DefaultSaveSlotFileName"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultSaveFolder { get { return this["DefaultSaveFolder"].ToString(); } set { /* String properties are read-only */ } }
        public int SaveSlotsLimit { get { return this["SaveSlotsLimit"].GetValue<int>(); } set { this["SaveSlotsLimit"].SetValue<int>(value); } }
        public ESaveSlotLoadOrder SlotLoadOrder { get { return (ESaveSlotLoadOrder)this["SlotLoadOrder"].GetValue<int>(); } set { this["SlotLoadOrder"].SetValue<int>((int)value); } }
        public float SaveLoadTaskTimeout { get { return this["SaveLoadTaskTimeout"].GetValue<float>(); } set { this["SaveLoadTaskTimeout"].SetValue<float>(value); } }
        public float LowPrioritySaveInterval { get { return this["LowPrioritySaveInterval"].GetValue<float>(); } set { this["LowPrioritySaveInterval"].SetValue<float>(value); } }
        public int MaxNumberOfBackups { get { return this["MaxNumberOfBackups"].GetValue<int>(); } set { this["MaxNumberOfBackups"].SetValue<int>(value); } }
        public float ScheduledBackupInterval { get { return this["ScheduledBackupInterval"].GetValue<float>(); } set { this["ScheduledBackupInterval"].SetValue<float>(value); } }
        public int CurrentSaveSlot { get { return this["CurrentSaveSlot"].GetValue<int>(); } set { this["CurrentSaveSlot"].SetValue<int>(value); } }
        public bool bAutoLoadEnabled { get { return this["bAutoLoadEnabled"].Flag; } set { this["bAutoLoadEnabled"].Flag = value; } }
        public bool bSaveFileInTextFormat { get { return this["bSaveFileInTextFormat"].Flag; } set { this["bSaveFileInTextFormat"].Flag = value; } }
        public bool bPrintNotificationsEnabled { get { return this["bPrintNotificationsEnabled"].Flag; } set { this["bPrintNotificationsEnabled"].Flag = value; } }
        public UEObject OnSaveLoadNotificationDelegate { get { return this["OnSaveLoadNotificationDelegate"]; } set { this["OnSaveLoadNotificationDelegate"] = value; } }
        public UEObject ShouldDisplaySaveSlot(UEObject SlotNumber) { return InvokeUEObject("ShouldDisplaySaveSlot", SlotNumber); }
        public void _DimensionSaveLoadSystem(UEObject PlayerController, UEObject OnPreSaveSlotChangedDelegate, UEObject OnSaveSlotChangedDelegate, UEObject OnClearDataForNewSlotDelegate, UEObject CachedGameLoopSubsystem, UEObject FileLoadStrategies, UEObject SecondaryFileLoadStrategies, UEObject DefaultMainFileLoadPolicy, UEObject DefaultBackupMainFileLoadPolicy, UEObject DefaultBackupUpgradeFileLoadPolicy, UEObject AvailableSlotNumbers, UEObject AvailableSaveGameData, UEObject FileLoadResults, UEObject SelectedFileLoadResult, UEObject FoundSlotNumbers, UEObject MainSaveGameData, UEObject LoadedSaveGameData, UEObject CachedSaveGameDataWithLowerVersion, UEObject SaveRequiredCategoryToKeyTagsMap, UEObject OnObjectSaveLoadFinishedDelegate, UEObject DefaultSaveSlotFileName, UEObject DefaultSaveFolder, UEObject SaveSlotsLimit, UEObject SlotLoadOrder, UEObject SaveLoadTaskTimeout, UEObject LowPrioritySaveInterval, UEObject MaxNumberOfBackups, UEObject ScheduledBackupInterval, UEObject CurrentSaveSlot, UEObject bAutoLoadEnabled, UEObject bSaveFileInTextFormat, UEObject bPrintNotificationsEnabled, UEObject OnSaveLoadNotificationDelegate) { Invoke("DimensionSaveLoadSystem", PlayerController, OnPreSaveSlotChangedDelegate, OnSaveSlotChangedDelegate, OnClearDataForNewSlotDelegate, CachedGameLoopSubsystem, FileLoadStrategies, SecondaryFileLoadStrategies, DefaultMainFileLoadPolicy, DefaultBackupMainFileLoadPolicy, DefaultBackupUpgradeFileLoadPolicy, AvailableSlotNumbers, AvailableSaveGameData, FileLoadResults, SelectedFileLoadResult, FoundSlotNumbers, MainSaveGameData, LoadedSaveGameData, CachedSaveGameDataWithLowerVersion, SaveRequiredCategoryToKeyTagsMap, OnObjectSaveLoadFinishedDelegate, DefaultSaveSlotFileName, DefaultSaveFolder, SaveSlotsLimit, SlotLoadOrder, SaveLoadTaskTimeout, LowPrioritySaveInterval, MaxNumberOfBackups, ScheduledBackupInterval, CurrentSaveSlot, bAutoLoadEnabled, bSaveFileInTextFormat, bPrintNotificationsEnabled, OnSaveLoadNotificationDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSaveLoadInterface : Interface
    {
        public DimensionSaveLoadInterface(nint addr) : base(addr) { }
        public DimensionSaveLoadInterface() : base(0) { }
        public UEObject RequestSaveRecursive(UEObject SaveLoadPriority, UEObject bForceSynchronousSave) { return InvokeUEObject("RequestSaveRecursive", SaveLoadPriority, bForceSynchronousSave); }
        public void _DimensionSaveLoadInterface() { Invoke("DimensionSaveLoadInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionSaveLoadComponent : DimensionActorComponent
    {
        public DimensionSaveLoadComponent(nint addr) : base(addr) { }
        public DimensionSaveLoadComponent() : base(0) { }
        public UEObject OnLoadedDelegate { get { return this["OnLoadedDelegate"]; } set { this["OnLoadedDelegate"] = value; } }
        public GameplayTag SaveLoadCategoryTag { get { return this[nameof(SaveLoadCategoryTag)].As<GameplayTag>(); } set { this["SaveLoadCategoryTag"] = value; } }
        public GameplayTag InitManagerTag { get { return this[nameof(InitManagerTag)].As<GameplayTag>(); } set { this["InitManagerTag"] = value; } }
    }
    public class DimensionSaveGame : SaveGame
    {
        public DimensionSaveGame(nint addr) : base(addr) { }
        public DimensionSaveGame() : base(0) { }
        public string SaveSlotName { get { return this["SaveSlotName"].ToString(); } set { /* String properties are read-only */ } }
        public uint UserIndex { get { return this["UserIndex"].GetValue<uint>(); } set { this["UserIndex"].SetValue<uint>(value); } }
        public uint SaveLoadVersion { get { return this["SaveLoadVersion"].GetValue<uint>(); } set { this["SaveLoadVersion"].SetValue<uint>(value); } }
        public DimensionSaveGameData SaveGameData { get { return this[nameof(SaveGameData)].As<DimensionSaveGameData>(); } set { this["SaveGameData"] = value; } }
    }
    public class DimensionRunningEffect : DimensionGameplayEffect
    {
        public DimensionRunningEffect(nint addr) : base(addr) { }
        public DimensionRunningEffect() : base(0) { }
    }
    public class RunningEffectCustomCalculation : GameplayModMagnitudeCalculation
    {
        public RunningEffectCustomCalculation(nint addr) : base(addr) { }
        public RunningEffectCustomCalculation() : base(0) { }
    }
    public class DimensionRosaryComponent : DimensionActorComponent
    {
        public DimensionRosaryComponent(nint addr) : base(addr) { }
        public DimensionRosaryComponent() : base(0) { }
        public List<string> SaveLoadActiveBeads { get { return this["SaveLoadActiveBeads"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> SaveLoadUnlockedBeads { get { return this["SaveLoadUnlockedBeads"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> SaveLoadNewBeads { get { return this["SaveLoadNewBeads"].GetStringList(); } set { /* Arrays are read-only */ } }
        public DataTable BeadsDataTable { get { return this[nameof(BeadsDataTable)].As<DataTable>(); } set { this["BeadsDataTable"] = value; } }
        public Array<DimensionBeadSlotRequirements> BeadSlotRequirements { get { return new Array<DimensionBeadSlotRequirements>(this["BeadSlotRequirements"]); } set { this["BeadSlotRequirements"] = value; } }
        public Array<DimensionBeadData> BeadsData { get { return new Array<DimensionBeadData>(this["BeadsData"]); } set { this["BeadsData"] = value; } }
        public List<int> ActiveBeadsIndexes { get { return this["ActiveBeadsIndexes"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public UEObject BeadRowNameToIndexMap { get { return this["BeadRowNameToIndexMap"]; } set { this["BeadRowNameToIndexMap"] = value; } }
        public List<string> NewBeads { get { return this["NewBeads"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject OnBeadSlotUpdatedDelegate { get { return this["OnBeadSlotUpdatedDelegate"]; } set { this["OnBeadSlotUpdatedDelegate"] = value; } }
        public Array<BeadPool> BeadPools { get { return new Array<BeadPool>(this["BeadPools"]); } set { this["BeadPools"] = value; } }
        public Array<DataTableRowHandle> BeadsWithoutPool { get { return new Array<DataTableRowHandle>(this["BeadsWithoutPool"]); } set { this["BeadsWithoutPool"] = value; } }
        public Array<DataTableRowHandle> ReservedBeads { get { return new Array<DataTableRowHandle>(this["ReservedBeads"]); } set { this["ReservedBeads"] = value; } }
        public void UnlockBead(UEObject BeadHandle) { Invoke("UnlockBead", BeadHandle); }
        public void _DimensionRosaryComponent(UEObject SaveLoadActiveBeads, UEObject SaveLoadUnlockedBeads, UEObject SaveLoadNewBeads, UEObject BeadsDataTable, UEObject BeadSlotRequirements, UEObject BeadsData, UEObject ActiveBeadsIndexes, UEObject BeadRowNameToIndexMap, UEObject NewBeads, UEObject OnBeadSlotUpdatedDelegate, UEObject BeadPools, UEObject BeadsWithoutPool, UEObject ReservedBeads) { Invoke("DimensionRosaryComponent", SaveLoadActiveBeads, SaveLoadUnlockedBeads, SaveLoadNewBeads, BeadsDataTable, BeadSlotRequirements, BeadsData, ActiveBeadsIndexes, BeadRowNameToIndexMap, NewBeads, OnBeadSlotUpdatedDelegate, BeadPools, BeadsWithoutPool, ReservedBeads); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRosaryBeadDropInterface : Interface
    {
        public DimensionRosaryBeadDropInterface(nint addr) : base(addr) { }
        public DimensionRosaryBeadDropInterface() : base(0) { }
        public UEObject GetRosaryBeadPoolID() { return InvokeUEObject("GetRosaryBeadPoolID"); }
        public void _DimensionRosaryBeadDropInterface() { Invoke("DimensionRosaryBeadDropInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRing : DimensionItem
    {
        public DimensionRing(nint addr) : base(addr) { }
        public DimensionRing() : base(0) { }
        public DimensionRingDataDetails RingDataDetails { get { return this[nameof(RingDataDetails)].As<DimensionRingDataDetails>(); } set { this["RingDataDetails"] = value; } }
    }
    public class DimensionRichTextBlockWidgetDecorator : RichTextBlockDecorator
    {
        public DimensionRichTextBlockWidgetDecorator(nint addr) : base(addr) { }
        public DimensionRichTextBlockWidgetDecorator() : base(0) { }
        public DataTable WidgetSet { get { return this[nameof(WidgetSet)].As<DataTable>(); } set { this["WidgetSet"] = value; } }
    }
    public class DimensionResistanceAttribSet : DimensionAttribSet
    {
        public DimensionResistanceAttribSet(nint addr) : base(addr) { }
        public DimensionResistanceAttribSet() : base(0) { }
        public float Resistance { get { return this["Resistance"].GetValue<float>(); } set { this["Resistance"].SetValue<float>(value); } }
        public float PhysicalResistance { get { return this["PhysicalResistance"].GetValue<float>(); } set { this["PhysicalResistance"].SetValue<float>(value); } }
        public float FireResistance { get { return this["FireResistance"].GetValue<float>(); } set { this["FireResistance"].SetValue<float>(value); } }
        public float EarthResistance { get { return this["EarthResistance"].GetValue<float>(); } set { this["EarthResistance"].SetValue<float>(value); } }
        public float WaterResistance { get { return this["WaterResistance"].GetValue<float>(); } set { this["WaterResistance"].SetValue<float>(value); } }
        public float AirResistance { get { return this["AirResistance"].GetValue<float>(); } set { this["AirResistance"].SetValue<float>(value); } }
        public float Vulnerability { get { return this["Vulnerability"].GetValue<float>(); } set { this["Vulnerability"].SetValue<float>(value); } }
        public float PhysicalVulnerability { get { return this["PhysicalVulnerability"].GetValue<float>(); } set { this["PhysicalVulnerability"].SetValue<float>(value); } }
        public float FireVulnerability { get { return this["FireVulnerability"].GetValue<float>(); } set { this["FireVulnerability"].SetValue<float>(value); } }
        public float EarthVulnerability { get { return this["EarthVulnerability"].GetValue<float>(); } set { this["EarthVulnerability"].SetValue<float>(value); } }
        public float WaterVulnerability { get { return this["WaterVulnerability"].GetValue<float>(); } set { this["WaterVulnerability"].SetValue<float>(value); } }
        public float AirVulnerability { get { return this["AirVulnerability"].GetValue<float>(); } set { this["AirVulnerability"].SetValue<float>(value); } }
        public float StatusResistance { get { return this["StatusResistance"].GetValue<float>(); } set { this["StatusResistance"].SetValue<float>(value); } }
        public float PhysicalStatusResistance { get { return this["PhysicalStatusResistance"].GetValue<float>(); } set { this["PhysicalStatusResistance"].SetValue<float>(value); } }
        public float FireStatusResistance { get { return this["FireStatusResistance"].GetValue<float>(); } set { this["FireStatusResistance"].SetValue<float>(value); } }
        public float EarthStatusResistance { get { return this["EarthStatusResistance"].GetValue<float>(); } set { this["EarthStatusResistance"].SetValue<float>(value); } }
        public float WaterStatusResistance { get { return this["WaterStatusResistance"].GetValue<float>(); } set { this["WaterStatusResistance"].SetValue<float>(value); } }
        public float AirStatusResistance { get { return this["AirStatusResistance"].GetValue<float>(); } set { this["AirStatusResistance"].SetValue<float>(value); } }
        public float StatusVulnerability { get { return this["StatusVulnerability"].GetValue<float>(); } set { this["StatusVulnerability"].SetValue<float>(value); } }
        public float PhysicalStatusVulnerability { get { return this["PhysicalStatusVulnerability"].GetValue<float>(); } set { this["PhysicalStatusVulnerability"].SetValue<float>(value); } }
        public float FireStatusVulnerability { get { return this["FireStatusVulnerability"].GetValue<float>(); } set { this["FireStatusVulnerability"].SetValue<float>(value); } }
        public float EarthStatusVulnerability { get { return this["EarthStatusVulnerability"].GetValue<float>(); } set { this["EarthStatusVulnerability"].SetValue<float>(value); } }
        public float WaterStatusVulnerability { get { return this["WaterStatusVulnerability"].GetValue<float>(); } set { this["WaterStatusVulnerability"].SetValue<float>(value); } }
        public float AirStatusVulnerability { get { return this["AirStatusVulnerability"].GetValue<float>(); } set { this["AirStatusVulnerability"].SetValue<float>(value); } }
        public float PhysicalMinResistanceModifier { get { return this["PhysicalMinResistanceModifier"].GetValue<float>(); } set { this["PhysicalMinResistanceModifier"].SetValue<float>(value); } }
        public float FireMinResistanceModifier { get { return this["FireMinResistanceModifier"].GetValue<float>(); } set { this["FireMinResistanceModifier"].SetValue<float>(value); } }
        public float EarthMinResistanceModifier { get { return this["EarthMinResistanceModifier"].GetValue<float>(); } set { this["EarthMinResistanceModifier"].SetValue<float>(value); } }
        public float WaterMinResistanceModifier { get { return this["WaterMinResistanceModifier"].GetValue<float>(); } set { this["WaterMinResistanceModifier"].SetValue<float>(value); } }
        public float AirMinResistanceModifier { get { return this["AirMinResistanceModifier"].GetValue<float>(); } set { this["AirMinResistanceModifier"].SetValue<float>(value); } }
        public float PhysicalMinStatusResistanceModifier { get { return this["PhysicalMinStatusResistanceModifier"].GetValue<float>(); } set { this["PhysicalMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float FireMinStatusResistanceModifier { get { return this["FireMinStatusResistanceModifier"].GetValue<float>(); } set { this["FireMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float EarthMinStatusResistanceModifier { get { return this["EarthMinStatusResistanceModifier"].GetValue<float>(); } set { this["EarthMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float WaterMinStatusResistanceModifier { get { return this["WaterMinStatusResistanceModifier"].GetValue<float>(); } set { this["WaterMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float AirMinStatusResistanceModifier { get { return this["AirMinStatusResistanceModifier"].GetValue<float>(); } set { this["AirMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float PhysicalStatusImmunityThreshold { get { return this["PhysicalStatusImmunityThreshold"].GetValue<float>(); } set { this["PhysicalStatusImmunityThreshold"].SetValue<float>(value); } }
        public float FireStatusImmunityThreshold { get { return this["FireStatusImmunityThreshold"].GetValue<float>(); } set { this["FireStatusImmunityThreshold"].SetValue<float>(value); } }
        public float EarthStatusImmunityThreshold { get { return this["EarthStatusImmunityThreshold"].GetValue<float>(); } set { this["EarthStatusImmunityThreshold"].SetValue<float>(value); } }
        public float WaterStatusImmunityThreshold { get { return this["WaterStatusImmunityThreshold"].GetValue<float>(); } set { this["WaterStatusImmunityThreshold"].SetValue<float>(value); } }
        public float AirStatusImmunityThreshold { get { return this["AirStatusImmunityThreshold"].GetValue<float>(); } set { this["AirStatusImmunityThreshold"].SetValue<float>(value); } }
    }
    public class DimensionResearchSubsystem : GameInstanceSubsystem
    {
        public DimensionResearchSubsystem(nint addr) : base(addr) { }
        public DimensionResearchSubsystem() : base(0) { }
        public UEObject SaveLoadResearchedProjects { get { return this["SaveLoadResearchedProjects"]; } set { this["SaveLoadResearchedProjects"] = value; } }
        public Array<SaveLoadResearchProjectInstance> SaveLoadCurrentProjects { get { return new Array<SaveLoadResearchProjectInstance>(this["SaveLoadCurrentProjects"]); } set { this["SaveLoadCurrentProjects"] = value; } }
        public DimensionPlayerControllerBase CachedPlayerController { get { return this[nameof(CachedPlayerController)].As<DimensionPlayerControllerBase>(); } set { this["CachedPlayerController"] = value; } }
        public DataTableRowHandle BoostingItemDataHandle { get { return this[nameof(BoostingItemDataHandle)].As<DataTableRowHandle>(); } set { this["BoostingItemDataHandle"] = value; } }
        public float TimeUnitsPerBoostingItem { get { return this["TimeUnitsPerBoostingItem"].GetValue<float>(); } set { this["TimeUnitsPerBoostingItem"].SetValue<float>(value); } }
        public int MaxCurrentProjects { get { return this["MaxCurrentProjects"].GetValue<int>(); } set { this["MaxCurrentProjects"].SetValue<int>(value); } }
        public CurveFloat TimeUnitsProgressMultiplierCurve { get { return this[nameof(TimeUnitsProgressMultiplierCurve)].As<CurveFloat>(); } set { this["TimeUnitsProgressMultiplierCurve"] = value; } }
        public GameplayTagContainer AllowedResearchCategories { get { return this[nameof(AllowedResearchCategories)].As<GameplayTagContainer>(); } set { this["AllowedResearchCategories"] = value; } }
        public bool bEnableManualProjectSelection { get { return this["bEnableManualProjectSelection"].Flag; } set { this["bEnableManualProjectSelection"].Flag = value; } }
        public DataTable ResearchProjectsDataTable { get { return this[nameof(ResearchProjectsDataTable)].As<DataTable>(); } set { this["ResearchProjectsDataTable"] = value; } }
        public Array<DataTableRowHandle> ResearchedProjects { get { return new Array<DataTableRowHandle>(this["ResearchedProjects"]); } set { this["ResearchedProjects"] = value; } }
        public Array<ResearchProjectInstance> CurrentProjects { get { return new Array<ResearchProjectInstance>(this["CurrentProjects"]); } set { this["CurrentProjects"] = value; } }
        public UEObject OnResearchStartedDelegate { get { return this["OnResearchStartedDelegate"]; } set { this["OnResearchStartedDelegate"] = value; } }
        public UEObject OnResearchProgressedDelegate { get { return this["OnResearchProgressedDelegate"]; } set { this["OnResearchProgressedDelegate"] = value; } }
        public UEObject OnResearchBoostedDelegate { get { return this["OnResearchBoostedDelegate"]; } set { this["OnResearchBoostedDelegate"] = value; } }
        public UEObject OnResearchCompletedDelegate { get { return this["OnResearchCompletedDelegate"]; } set { this["OnResearchCompletedDelegate"] = value; } }
        public UEObject OnResearchCancelledDelegate { get { return this["OnResearchCancelledDelegate"]; } set { this["OnResearchCancelledDelegate"] = value; } }
        public UEObject OnResearchClaimedDelegate { get { return this["OnResearchClaimedDelegate"]; } set { this["OnResearchClaimedDelegate"] = value; } }
        public void StartResearch(UEObject ProjectHandle) { Invoke("StartResearch", ProjectHandle); }
        public void _DimensionResearchSubsystem(UEObject SaveLoadResearchedProjects, UEObject SaveLoadCurrentProjects, UEObject CachedPlayerController, UEObject BoostingItemDataHandle, UEObject TimeUnitsPerBoostingItem, UEObject MaxCurrentProjects, UEObject TimeUnitsProgressMultiplierCurve, UEObject AllowedResearchCategories, UEObject bEnableManualProjectSelection, UEObject ResearchProjectsDataTable, UEObject ResearchedProjects, UEObject CurrentProjects, UEObject OnResearchStartedDelegate, UEObject OnResearchProgressedDelegate, UEObject OnResearchBoostedDelegate, UEObject OnResearchCompletedDelegate, UEObject OnResearchCancelledDelegate, UEObject OnResearchClaimedDelegate) { Invoke("DimensionResearchSubsystem", SaveLoadResearchedProjects, SaveLoadCurrentProjects, CachedPlayerController, BoostingItemDataHandle, TimeUnitsPerBoostingItem, MaxCurrentProjects, TimeUnitsProgressMultiplierCurve, AllowedResearchCategories, bEnableManualProjectSelection, ResearchProjectsDataTable, ResearchedProjects, CurrentProjects, OnResearchStartedDelegate, OnResearchProgressedDelegate, OnResearchBoostedDelegate, OnResearchCompletedDelegate, OnResearchCancelledDelegate, OnResearchClaimedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRequirementsLibrary : UEObject
    {
        public DimensionRequirementsLibrary(nint addr) : base(addr) { }
        public DimensionRequirementsLibrary() : base(0) { }
        public UEObject HasAttributeRequirementsForAttribute(UEObject AttributeRequirementSet, UEObject Attribute, UEObject PlayerOrController, UEObject OutRequiredValue, UEObject OutCurrentValue) { return InvokeUEObject("HasAttributeRequirementsForAttribute", AttributeRequirementSet, Attribute, PlayerOrController, OutRequiredValue, OutCurrentValue); }
        public void _DimensionRequirementsLibrary() { Invoke("DimensionRequirementsLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRequirementsConfig : DataAsset
    {
        public DimensionRequirementsConfig(nint addr) : base(addr) { }
        public DimensionRequirementsConfig() : base(0) { }
        public string DefaultAttributeRequirementDescription_Level { get { return this["DefaultAttributeRequirementDescription_Level"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_Level_Gnosis { get { return this["DefaultAttributeRequirementDescription_Level_Gnosis"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_Equal { get { return this["DefaultAttributeRequirementDescription_Equal"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_NotEqual { get { return this["DefaultAttributeRequirementDescription_NotEqual"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_Greater { get { return this["DefaultAttributeRequirementDescription_Greater"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_GreaterOrEqual { get { return this["DefaultAttributeRequirementDescription_GreaterOrEqual"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_Less { get { return this["DefaultAttributeRequirementDescription_Less"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_LessOrEqual { get { return this["DefaultAttributeRequirementDescription_LessOrEqual"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirementDescription_Combined { get { return this["DefaultAttributeRequirementDescription_Combined"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultAttributeRequirement_AttributesAndValuesFormat { get { return this["DefaultAttributeRequirement_AttributesAndValuesFormat"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject AttributeDisplayDataMap { get { return this["AttributeDisplayDataMap"]; } set { this["AttributeDisplayDataMap"] = value; } }
        public UEObject AttributeNameShareMap { get { return this["AttributeNameShareMap"]; } set { this["AttributeNameShareMap"] = value; } }
        public string DefaultItemRequirementDescription { get { return this["DefaultItemRequirementDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_Times { get { return this["DefaultItemRequirementDescription_Times"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_Consume { get { return this["DefaultItemRequirementDescription_Consume"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_Consume_Times { get { return this["DefaultItemRequirementDescription_Consume_Times"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_NoCount { get { return this["DefaultItemRequirementDescription_NoCount"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_Combined { get { return this["DefaultItemRequirementDescription_Combined"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirementDescription_Combined_Consume { get { return this["DefaultItemRequirementDescription_Combined_Consume"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirement_ItemsAndCountsFormat { get { return this["DefaultItemRequirement_ItemsAndCountsFormat"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirement_ItemsAndCountsFormat_Times { get { return this["DefaultItemRequirement_ItemsAndCountsFormat_Times"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultItemRequirement_ItemsAndCountsFormat_NoCount { get { return this["DefaultItemRequirement_ItemsAndCountsFormat_NoCount"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultLocationRequirementDescription_Single { get { return this["DefaultLocationRequirementDescription_Single"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultLocationRequirementDescription_Multiple { get { return this["DefaultLocationRequirementDescription_Multiple"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultLocationRequirementDescription_SingleBlocked { get { return this["DefaultLocationRequirementDescription_SingleBlocked"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultLocationRequirementDescription_MultipleBlocked { get { return this["DefaultLocationRequirementDescription_MultipleBlocked"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultInventoryRequirementDescription { get { return this["DefaultInventoryRequirementDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultInventoryRequirementDescription_Equipped { get { return this["DefaultInventoryRequirementDescription_Equipped"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GetItemCountFormattingData(UEObject bAsPercent) { return InvokeUEObject("GetItemCountFormattingData", bAsPercent); }
        public void _DimensionRequirementsConfig(UEObject DefaultAttributeRequirementDescription_Level, UEObject DefaultAttributeRequirementDescription_Level_Gnosis, UEObject DefaultAttributeRequirementDescription_Equal, UEObject DefaultAttributeRequirementDescription_NotEqual, UEObject DefaultAttributeRequirementDescription_Greater, UEObject DefaultAttributeRequirementDescription_GreaterOrEqual, UEObject DefaultAttributeRequirementDescription_Less, UEObject DefaultAttributeRequirementDescription_LessOrEqual, UEObject DefaultAttributeRequirementDescription_Combined, UEObject DefaultAttributeRequirement_AttributesAndValuesFormat, UEObject AttributeDisplayDataMap, UEObject AttributeNameShareMap, UEObject DefaultItemRequirementDescription, UEObject DefaultItemRequirementDescription_Times, UEObject DefaultItemRequirementDescription_Consume, UEObject DefaultItemRequirementDescription_Consume_Times, UEObject DefaultItemRequirementDescription_NoCount, UEObject DefaultItemRequirementDescription_Combined, UEObject DefaultItemRequirementDescription_Combined_Consume, UEObject DefaultItemRequirement_ItemsAndCountsFormat, UEObject DefaultItemRequirement_ItemsAndCountsFormat_Times, UEObject DefaultItemRequirement_ItemsAndCountsFormat_NoCount, UEObject DefaultLocationRequirementDescription_Single, UEObject DefaultLocationRequirementDescription_Multiple, UEObject DefaultLocationRequirementDescription_SingleBlocked, UEObject DefaultLocationRequirementDescription_MultipleBlocked, UEObject DefaultInventoryRequirementDescription, UEObject DefaultInventoryRequirementDescription_Equipped) { Invoke("DimensionRequirementsConfig", DefaultAttributeRequirementDescription_Level, DefaultAttributeRequirementDescription_Level_Gnosis, DefaultAttributeRequirementDescription_Equal, DefaultAttributeRequirementDescription_NotEqual, DefaultAttributeRequirementDescription_Greater, DefaultAttributeRequirementDescription_GreaterOrEqual, DefaultAttributeRequirementDescription_Less, DefaultAttributeRequirementDescription_LessOrEqual, DefaultAttributeRequirementDescription_Combined, DefaultAttributeRequirement_AttributesAndValuesFormat, AttributeDisplayDataMap, AttributeNameShareMap, DefaultItemRequirementDescription, DefaultItemRequirementDescription_Times, DefaultItemRequirementDescription_Consume, DefaultItemRequirementDescription_Consume_Times, DefaultItemRequirementDescription_NoCount, DefaultItemRequirementDescription_Combined, DefaultItemRequirementDescription_Combined_Consume, DefaultItemRequirement_ItemsAndCountsFormat, DefaultItemRequirement_ItemsAndCountsFormat_Times, DefaultItemRequirement_ItemsAndCountsFormat_NoCount, DefaultLocationRequirementDescription_Single, DefaultLocationRequirementDescription_Multiple, DefaultLocationRequirementDescription_SingleBlocked, DefaultLocationRequirementDescription_MultipleBlocked, DefaultInventoryRequirementDescription, DefaultInventoryRequirementDescription_Equipped); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionReplayPlayerController : PlayerController
    {
        public DimensionReplayPlayerController(nint addr) : base(addr) { }
        public DimensionReplayPlayerController() : base(0) { }
        public DimensionPlayerCharacter SpectatedCharacter { get { return this[nameof(SpectatedCharacter)].As<DimensionPlayerCharacter>(); } set { this["SpectatedCharacter"] = value; } }
    }
    public class DimensionReplayCameraManager : PlayerCameraManager
    {
        public DimensionReplayCameraManager(nint addr) : base(addr) { }
        public DimensionReplayCameraManager() : base(0) { }
    }
    public class DimensionReplayActor : Actor
    {
        public DimensionReplayActor(nint addr) : base(addr) { }
        public DimensionReplayActor() : base(0) { }
        public DimensionPlayerCharacter MyPawn { get { return this[nameof(MyPawn)].As<DimensionPlayerCharacter>(); } set { this["MyPawn"] = value; } }
    }
    public class DimensionRelic : DimensionItem
    {
        public DimensionRelic(nint addr) : base(addr) { }
        public DimensionRelic() : base(0) { }
        public DimensionRelicDataDetails RelicDataDetails { get { return this[nameof(RelicDataDetails)].As<DimensionRelicDataDetails>(); } set { this["RelicDataDetails"] = value; } }
    }
    public class DimensionRecoilComponent : DimensionActorComponent
    {
        public DimensionRecoilComponent(nint addr) : base(addr) { }
        public DimensionRecoilComponent() : base(0) { }
        public DataTableRowHandle RecoilProfileHandle { get { return this[nameof(RecoilProfileHandle)].As<DataTableRowHandle>(); } set { this["RecoilProfileHandle"] = value; } }
        public RecoilProfile RecoilProfile { get { return this[nameof(RecoilProfile)].As<RecoilProfile>(); } set { this["RecoilProfile"] = value; } }
        public Array<RecoilDebugAggregator> DebugData { get { return new Array<RecoilDebugAggregator>(this["DebugData"]); } set { this["DebugData"] = value; } }
        public int MaxNumberOfDebugEntries { get { return this["MaxNumberOfDebugEntries"].GetValue<int>(); } set { this["MaxNumberOfDebugEntries"].SetValue<int>(value); } }
        public bool bAddingRecoilEnabled { get { return this["bAddingRecoilEnabled"].Flag; } set { this["bAddingRecoilEnabled"].Flag = value; } }
        public bool bAddingRemainingRecoilEnabled { get { return this["bAddingRemainingRecoilEnabled"].Flag; } set { this["bAddingRemainingRecoilEnabled"].Flag = value; } }
        public bool bRecoilReductionEnabled { get { return this["bRecoilReductionEnabled"].Flag; } set { this["bRecoilReductionEnabled"].Flag = value; } }
        public bool bRecoilSettlingEnabled { get { return this["bRecoilSettlingEnabled"].Flag; } set { this["bRecoilSettlingEnabled"].Flag = value; } }
        public UEObject SimulateRecoilPattern(UEObject ShotCount, UEObject SimulationCount, UEObject Scale, UEObject OutPointsWithoutRandomAngle) { return InvokeUEObject("SimulateRecoilPattern", ShotCount, SimulationCount, Scale, OutPointsWithoutRandomAngle); }
        public void _DimensionRecoilComponent(UEObject RecoilProfileHandle, UEObject RecoilProfile, UEObject DebugData, UEObject MaxNumberOfDebugEntries, UEObject bAddingRecoilEnabled, UEObject bAddingRemainingRecoilEnabled, UEObject bRecoilReductionEnabled, UEObject bRecoilSettlingEnabled) { Invoke("DimensionRecoilComponent", RecoilProfileHandle, RecoilProfile, DebugData, MaxNumberOfDebugEntries, bAddingRecoilEnabled, bAddingRemainingRecoilEnabled, bRecoilReductionEnabled, bRecoilSettlingEnabled); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRecoilAttribSet : DimensionAttribSet
    {
        public DimensionRecoilAttribSet(nint addr) : base(addr) { }
        public DimensionRecoilAttribSet() : base(0) { }
        public float Stability { get { return this["Stability"].GetValue<float>(); } set { this["Stability"].SetValue<float>(value); } }
        public float RecoilReductionRange { get { return this["RecoilReductionRange"].GetValue<float>(); } set { this["RecoilReductionRange"].SetValue<float>(value); } }
        public float RecoilStabilityScale { get { return this["RecoilStabilityScale"].GetValue<float>(); } set { this["RecoilStabilityScale"].SetValue<float>(value); } }
        public float RecoilRateOfFireScale { get { return this["RecoilRateOfFireScale"].GetValue<float>(); } set { this["RecoilRateOfFireScale"].SetValue<float>(value); } }
        public float RecoilTimeMarginBeforeNextShot { get { return this["RecoilTimeMarginBeforeNextShot"].GetValue<float>(); } set { this["RecoilTimeMarginBeforeNextShot"].SetValue<float>(value); } }
        public float RecoilCrouchingModifier { get { return this["RecoilCrouchingModifier"].GetValue<float>(); } set { this["RecoilCrouchingModifier"].SetValue<float>(value); } }
        public float RecoilTargetingModifier { get { return this["RecoilTargetingModifier"].GetValue<float>(); } set { this["RecoilTargetingModifier"].SetValue<float>(value); } }
        public float RecoilStrengthStaminaModifier { get { return this["RecoilStrengthStaminaModifier"].GetValue<float>(); } set { this["RecoilStrengthStaminaModifier"].SetValue<float>(value); } }
        public float RecoilStrength { get { return this["RecoilStrength"].GetValue<float>(); } set { this["RecoilStrength"].SetValue<float>(value); } }
        public float RecoilAngle { get { return this["RecoilAngle"].GetValue<float>(); } set { this["RecoilAngle"].SetValue<float>(value); } }
        public float RecoilRandAngle { get { return this["RecoilRandAngle"].GetValue<float>(); } set { this["RecoilRandAngle"].SetValue<float>(value); } }
        public float ActualRecoilStrength { get { return this["ActualRecoilStrength"].GetValue<float>(); } set { this["ActualRecoilStrength"].SetValue<float>(value); } }
        public float ActualRecoilAngle { get { return this["ActualRecoilAngle"].GetValue<float>(); } set { this["ActualRecoilAngle"].SetValue<float>(value); } }
    }
    public class DimensionRandomComponent : DimensionActorComponent
    {
        public DimensionRandomComponent(nint addr) : base(addr) { }
        public DimensionRandomComponent() : base(0) { }
        public CurveFloat ScavengingChanceCurve { get { return this[nameof(ScavengingChanceCurve)].As<CurveFloat>(); } set { this["ScavengingChanceCurve"] = value; } }
        public CurveFloat ProvidenceChanceCurve { get { return this[nameof(ProvidenceChanceCurve)].As<CurveFloat>(); } set { this["ProvidenceChanceCurve"] = value; } }
        public UEObject OnProvidenceCheckSuccessfulDelegate { get { return this["OnProvidenceCheckSuccessfulDelegate"]; } set { this["OnProvidenceCheckSuccessfulDelegate"] = value; } }
        public bool bEnableDivineInterventionDamageTakenCheck { get { return this["bEnableDivineInterventionDamageTakenCheck"].Flag; } set { this["bEnableDivineInterventionDamageTakenCheck"].Flag = value; } }
        public string DivineInterventionDamageTakenID { get { return this["DivineInterventionDamageTakenID"].ToString(); } set { /* String properties are read-only */ } }
        public float DivineInterventionDamageTakenBaseChance { get { return this["DivineInterventionDamageTakenBaseChance"].GetValue<float>(); } set { this["DivineInterventionDamageTakenBaseChance"].SetValue<float>(value); } }
        public UEObject OnDivineInterventionSuccessfulDelegate { get { return this["OnDivineInterventionSuccessfulDelegate"]; } set { this["OnDivineInterventionSuccessfulDelegate"] = value; } }
        public CurveFloat BlessedAimChanceCurve { get { return this[nameof(BlessedAimChanceCurve)].As<CurveFloat>(); } set { this["BlessedAimChanceCurve"] = value; } }
        public UEObject OnBlessedAimCheckSuccessfulDelegate { get { return this["OnBlessedAimCheckSuccessfulDelegate"]; } set { this["OnBlessedAimCheckSuccessfulDelegate"] = value; } }
        public CurveFloat MetanoiaCrytallizedWitchfireChanceModifierCurve { get { return this[nameof(MetanoiaCrytallizedWitchfireChanceModifierCurve)].As<CurveFloat>(); } set { this["MetanoiaCrytallizedWitchfireChanceModifierCurve"] = value; } }
        public GameplayTagContainer CrystallizedWitchfireItemTags { get { return this[nameof(CrystallizedWitchfireItemTags)].As<GameplayTagContainer>(); } set { this["CrystallizedWitchfireItemTags"] = value; } }
        public Array<DimensionRandomCategory> RandomCategories { get { return new Array<DimensionRandomCategory>(this["RandomCategories"]); } set { this["RandomCategories"] = value; } }
        public void ResetThresholdModifiers(UEObject RandomCategoryTags, UEObject ContextString) { Invoke("ResetThresholdModifiers", RandomCategoryTags, ContextString); }
        public void _DimensionRandomComponent(UEObject ScavengingChanceCurve, UEObject ProvidenceChanceCurve, UEObject OnProvidenceCheckSuccessfulDelegate, UEObject bEnableDivineInterventionDamageTakenCheck, UEObject DivineInterventionDamageTakenID, UEObject DivineInterventionDamageTakenBaseChance, UEObject OnDivineInterventionSuccessfulDelegate, UEObject BlessedAimChanceCurve, UEObject OnBlessedAimCheckSuccessfulDelegate, UEObject MetanoiaCrytallizedWitchfireChanceModifierCurve, UEObject CrystallizedWitchfireItemTags, UEObject RandomCategories) { Invoke("DimensionRandomComponent", ScavengingChanceCurve, ProvidenceChanceCurve, OnProvidenceCheckSuccessfulDelegate, bEnableDivineInterventionDamageTakenCheck, DivineInterventionDamageTakenID, DivineInterventionDamageTakenBaseChance, OnDivineInterventionSuccessfulDelegate, BlessedAimChanceCurve, OnBlessedAimCheckSuccessfulDelegate, MetanoiaCrytallizedWitchfireChanceModifierCurve, CrystallizedWitchfireItemTags, RandomCategories); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRadarWidget : DimensionUserWidget
    {
        public DimensionRadarWidget(nint addr) : base(addr) { }
        public DimensionRadarWidget() : base(0) { }
        public Array<UEObject> RadarActors { get { return new Array<UEObject>(this["RadarActors"]); } set { this["RadarActors"] = value; } }
        public Array<UEObject> PendingRadarActors { get { return new Array<UEObject>(this["PendingRadarActors"]); } set { this["PendingRadarActors"] = value; } }
        public float Range { get { return this["Range"].GetValue<float>(); } set { this["Range"].SetValue<float>(value); } }
        public float VisibleRange { get { return this["VisibleRange"].GetValue<float>(); } set { this["VisibleRange"].SetValue<float>(value); } }
        public float FadeOutMargin { get { return this["FadeOutMargin"].GetValue<float>(); } set { this["FadeOutMargin"].SetValue<float>(value); } }
        public bool bInitializeOneDotPerFrame { get { return this["bInitializeOneDotPerFrame"].Flag; } set { this["bInitializeOneDotPerFrame"].Flag = value; } }
        public UEObject RadarDotWidgetClass { get { return this["RadarDotWidgetClass"]; } set { this["RadarDotWidgetClass"] = value; } }
        public UEObject DotGlowMaterial { get { return this["DotGlowMaterial"]; } set { this["DotGlowMaterial"] = value; } }
        public CanvasPanel CachedPlayerCanvasPanel { get { return this[nameof(CachedPlayerCanvasPanel)].As<CanvasPanel>(); } set { this["CachedPlayerCanvasPanel"] = value; } }
        public CanvasPanel CachedEnemyCanvasPanel { get { return this[nameof(CachedEnemyCanvasPanel)].As<CanvasPanel>(); } set { this["CachedEnemyCanvasPanel"] = value; } }
        public CanvasPanel CachedActorCanvasPanel { get { return this[nameof(CachedActorCanvasPanel)].As<CanvasPanel>(); } set { this["CachedActorCanvasPanel"] = value; } }
        public CanvasPanel CachedGlowCanvasPanel { get { return this[nameof(CachedGlowCanvasPanel)].As<CanvasPanel>(); } set { this["CachedGlowCanvasPanel"] = value; } }
        public DimensionObjectPool ObjectPool { get { return this[nameof(ObjectPool)].As<DimensionObjectPool>(); } set { this["ObjectPool"] = value; } }
        public void OnTagUpdated(UEObject OwningAbilitySystem, UEObject Tag, UEObject bTagExists) { Invoke("OnTagUpdated", OwningAbilitySystem, Tag, bTagExists); }
        public void _DimensionRadarWidget(UEObject RadarActors, UEObject PendingRadarActors, UEObject Range, UEObject VisibleRange, UEObject FadeOutMargin, UEObject bInitializeOneDotPerFrame, UEObject RadarDotWidgetClass, UEObject DotGlowMaterial, UEObject CachedPlayerCanvasPanel, UEObject CachedEnemyCanvasPanel, UEObject CachedActorCanvasPanel, UEObject CachedGlowCanvasPanel, UEObject ObjectPool) { Invoke("DimensionRadarWidget", RadarActors, PendingRadarActors, Range, VisibleRange, FadeOutMargin, bInitializeOneDotPerFrame, RadarDotWidgetClass, DotGlowMaterial, CachedPlayerCanvasPanel, CachedEnemyCanvasPanel, CachedActorCanvasPanel, CachedGlowCanvasPanel, ObjectPool); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRadarInterface : Interface
    {
        public DimensionRadarInterface(nint addr) : base(addr) { }
        public DimensionRadarInterface() : base(0) { }
        public UEObject IsVisibleOnRadar() { return InvokeUEObject("IsVisibleOnRadar"); }
        public void _DimensionRadarInterface() { Invoke("DimensionRadarInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionRadarDotWidget : DimensionUserWidget
    {
        public DimensionRadarDotWidget(nint addr) : base(addr) { }
        public DimensionRadarDotWidget() : base(0) { }
        //public UEObject RadarActor { get { return this["RadarActor"].GetValue<UEObject>(); } set { this["RadarActor"].SetValue<UEObject>(value); } }
        public DimensionRadarWidget RadarWidget { get { return this[nameof(RadarWidget)].As<DimensionRadarWidget>(); } set { this["RadarWidget"] = value; } }
        public UEObject CachedDotMaterial { get { return this["CachedDotMaterial"]; } set { this["CachedDotMaterial"] = value; } }
        public Actor Player { get { return this[nameof(Player)].As<Actor>(); } set { this["Player"] = value; } }
        public UserWidget DotGlowBorder { get { return this[nameof(DotGlowBorder)].As<UserWidget>(); } set { this["DotGlowBorder"] = value; } }
        public Border CachedDotBorder { get { return this[nameof(CachedDotBorder)].As<Border>(); } set { this["CachedDotBorder"] = value; } }
        public Image CachedDirectionImage { get { return this[nameof(CachedDirectionImage)].As<Image>(); } set { this["CachedDirectionImage"] = value; } }
        public UEObject ShouldRecycle() { return InvokeUEObject("ShouldRecycle"); }
        public void _DimensionRadarDotWidget(UEObject RadarActor, UEObject RadarWidget, UEObject CachedDotMaterial, UEObject Player, UEObject DotGlowBorder, UEObject CachedDotBorder, UEObject CachedDirectionImage) { Invoke("DimensionRadarDotWidget", RadarActor, RadarWidget, CachedDotMaterial, Player, DotGlowBorder, CachedDotBorder, CachedDirectionImage); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionQuestSubsystem : GameInstanceSubsystem
    {
        public DimensionQuestSubsystem(nint addr) : base(addr) { }
        public DimensionQuestSubsystem() : base(0) { }
        public Array<SaveLoadQuest> SaveLoadQuests { get { return new Array<SaveLoadQuest>(this["SaveLoadQuests"]); } set { this["SaveLoadQuests"] = value; } }
        public Array<SaveLoadQuestObjective> SaveLoadQuestObjectives { get { return new Array<SaveLoadQuestObjective>(this["SaveLoadQuestObjectives"]); } set { this["SaveLoadQuestObjectives"] = value; } }
        public Array<SaveLoadCustomQuest> SaveLoadCustomQuests { get { return new Array<SaveLoadCustomQuest>(this["SaveLoadCustomQuests"]); } set { this["SaveLoadCustomQuests"] = value; } }
        public Array<SaveLoadCustomQuestObjective> SaveLoadCustomQuestObjectives { get { return new Array<SaveLoadCustomQuestObjective>(this["SaveLoadCustomQuestObjectives"]); } set { this["SaveLoadCustomQuestObjectives"] = value; } }
        public Array<SaveLoadQuestReward> SaveLoadCustomQuestRewards { get { return new Array<SaveLoadQuestReward>(this["SaveLoadCustomQuestRewards"]); } set { this["SaveLoadCustomQuestRewards"] = value; } }
        public Array<SaveLoadQuestModifier> SaveLoadCustomQuestModifiers { get { return new Array<SaveLoadQuestModifier>(this["SaveLoadCustomQuestModifiers"]); } set { this["SaveLoadCustomQuestModifiers"] = value; } }
        public Array<SaveLoadQuestCondition> SaveLoadCustomQuestConditions { get { return new Array<SaveLoadQuestCondition>(this["SaveLoadCustomQuestConditions"]); } set { this["SaveLoadCustomQuestConditions"] = value; } }
        public GameMode CachedGameMode { get { return this[nameof(CachedGameMode)].As<GameMode>(); } set { this["CachedGameMode"] = value; } }
        public DimensionPlayerControllerBase CachedPlayerController { get { return this[nameof(CachedPlayerController)].As<DimensionPlayerControllerBase>(); } set { this["CachedPlayerController"] = value; } }
        public Array<DimensionQuest> ActiveQuests { get { return new Array<DimensionQuest>(this["ActiveQuests"]); } set { this["ActiveQuests"] = value; } }
        public DataTableRowHandle ResearchCurrencyItemHandle { get { return this[nameof(ResearchCurrencyItemHandle)].As<DataTableRowHandle>(); } set { this["ResearchCurrencyItemHandle"] = value; } }
        public DataTableRowHandle ShadowCubeScrapRewardHandle { get { return this[nameof(ShadowCubeScrapRewardHandle)].As<DataTableRowHandle>(); } set { this["ShadowCubeScrapRewardHandle"] = value; } }
        public DataTableRowHandle ShadowOrbScrapRewardHandle { get { return this[nameof(ShadowOrbScrapRewardHandle)].As<DataTableRowHandle>(); } set { this["ShadowOrbScrapRewardHandle"] = value; } }
        public UEObject OnInventoryCachedDelegate { get { return this["OnInventoryCachedDelegate"]; } set { this["OnInventoryCachedDelegate"] = value; } }
        public EnumArray<EItemAddReason> IgnoredItemAddReasons { get { return new EnumArray<EItemAddReason>(this["IgnoredItemAddReasons"]); } set { this["IgnoredItemAddReasons"] = value; } }
        public GameplayTagContainer InventoryConditionTrackedItemTypes { get { return this[nameof(InventoryConditionTrackedItemTypes)].As<GameplayTagContainer>(); } set { this["InventoryConditionTrackedItemTypes"] = value; } }
        public UEObject OnQuestAddedDelegate { get { return this["OnQuestAddedDelegate"]; } set { this["OnQuestAddedDelegate"] = value; } }
        public UEObject OnQuestRemovedDelegate { get { return this["OnQuestRemovedDelegate"]; } set { this["OnQuestRemovedDelegate"] = value; } }
        public UEObject OnQuestObjectiveCompletedDelegate { get { return this["OnQuestObjectiveCompletedDelegate"]; } set { this["OnQuestObjectiveCompletedDelegate"] = value; } }
        public UEObject OnQuestResetDelegate { get { return this["OnQuestResetDelegate"]; } set { this["OnQuestResetDelegate"] = value; } }
        public UEObject OnQuestProgressUpdateDelegate { get { return this["OnQuestProgressUpdateDelegate"]; } set { this["OnQuestProgressUpdateDelegate"] = value; } }
        public UEObject OnQuestClaimedDelegate { get { return this["OnQuestClaimedDelegate"]; } set { this["OnQuestClaimedDelegate"] = value; } }
        public UEObject OnQuestObjectiveFailedDelegate { get { return this["OnQuestObjectiveFailedDelegate"]; } set { this["OnQuestObjectiveFailedDelegate"] = value; } }
        public UEObject OnQuestObjectiveRemovedDelegate { get { return this["OnQuestObjectiveRemovedDelegate"]; } set { this["OnQuestObjectiveRemovedDelegate"] = value; } }
        public string DefaultObjectiveDescription_Kill { get { return this["DefaultObjectiveDescription_Kill"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Kill_ItemEquipped { get { return this["DefaultObjectiveDescription_Kill_ItemEquipped"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Target { get { return this["DefaultObjectiveDescription_Target"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Target_Magic { get { return this["DefaultObjectiveDescription_Target_Magic"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Damage { get { return this["DefaultObjectiveDescription_Damage"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Collect { get { return this["DefaultObjectiveDescription_Collect"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_Obtain { get { return this["DefaultObjectiveDescription_Obtain"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_CleanseNumber { get { return this["DefaultObjectiveDescription_CleanseNumber"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultObjectiveDescription_CleansePercent { get { return this["DefaultObjectiveDescription_CleansePercent"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultModifierDescription_Location { get { return this["DefaultModifierDescription_Location"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultModifierDescription_LocationWithArenas { get { return this["DefaultModifierDescription_LocationWithArenas"].ToString(); } set { /* String properties are read-only */ } }
        public string DefaultIndefiniteProgression { get { return this["DefaultIndefiniteProgression"].ToString(); } set { /* String properties are read-only */ } }
        public Array<DataTableRowHandle> ShadowCubeLocationTargetConditions { get { return new Array<DataTableRowHandle>(this["ShadowCubeLocationTargetConditions"]); } set { this["ShadowCubeLocationTargetConditions"] = value; } }
        public UEObject ShadowCubeConditionsMap { get { return this["ShadowCubeConditionsMap"]; } set { this["ShadowCubeConditionsMap"] = value; } }
        public List<float> ShadowCubeConditionCountProbabilityThresholds { get { return this["ShadowCubeConditionCountProbabilityThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public int ShadowOrbActiveQuestLimit { get { return this["ShadowOrbActiveQuestLimit"].GetValue<int>(); } set { this["ShadowOrbActiveQuestLimit"].SetValue<int>(value); } }
        public UEObject ShadowOrbTypeToConditionMap { get { return this["ShadowOrbTypeToConditionMap"]; } set { this["ShadowOrbTypeToConditionMap"] = value; } }
        public Array<DataTableHandleFloatPair> ShadowOrbCountReductionForConditions { get { return new Array<DataTableHandleFloatPair>(this["ShadowOrbCountReductionForConditions"]); } set { this["ShadowOrbCountReductionForConditions"] = value; } }
        public List<float> ShadowOrbConditionCountProbabilityThresholds { get { return this["ShadowOrbConditionCountProbabilityThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Array<DataTableHandlesPair> ShadowOrbBlockedObjectiveConditionPairs { get { return new Array<DataTableHandlesPair>(this["ShadowOrbBlockedObjectiveConditionPairs"]); } set { this["ShadowOrbBlockedObjectiveConditionPairs"] = value; } }
        public Array<DataTableRowHandle> EligibleCurses { get { return new Array<DataTableRowHandle>(this["EligibleCurses"]); } set { this["EligibleCurses"] = value; } }
        public Array<DataTableRowHandle> CurseQuests { get { return new Array<DataTableRowHandle>(this["CurseQuests"]); } set { this["CurseQuests"] = value; } }
        public Array<DimensionCursedItemData> CursedItemsData { get { return new Array<DimensionCursedItemData>(this["CursedItemsData"]); } set { this["CursedItemsData"] = value; } }
        public Array<TextFloatPair> CurseChanceThresholdsNames { get { return new Array<TextFloatPair>(this["CurseChanceThresholdsNames"]); } set { this["CurseChanceThresholdsNames"] = value; } }
        public int ActiveCurseLimit { get { return this["ActiveCurseLimit"].GetValue<int>(); } set { this["ActiveCurseLimit"].SetValue<int>(value); } }
        public Array<DimensionActiveCurse> ActiveCurses { get { return new Array<DimensionActiveCurse>(this["ActiveCurses"]); } set { this["ActiveCurses"] = value; } }
        public UEObject OnCurseCleansedDelegate { get { return this["OnCurseCleansedDelegate"]; } set { this["OnCurseCleansedDelegate"] = value; } }
        public UEObject OnCurseAppliedDelegate { get { return this["OnCurseAppliedDelegate"]; } set { this["OnCurseAppliedDelegate"] = value; } }
        public UEObject OnCurseProgressUpdatedDelegate { get { return this["OnCurseProgressUpdatedDelegate"]; } set { this["OnCurseProgressUpdatedDelegate"] = value; } }
        public UEObject OnCurseLiftedDelegate { get { return this["OnCurseLiftedDelegate"]; } set { this["OnCurseLiftedDelegate"] = value; } }
        public UEObject OnCurseRemovedDelegate { get { return this["OnCurseRemovedDelegate"]; } set { this["OnCurseRemovedDelegate"] = value; } }
        public UEObject ItemQuestBoosts { get { return this["ItemQuestBoosts"]; } set { this["ItemQuestBoosts"] = value; } }
        public Array<DataTableRowHandle> GnosisQuestHandles { get { return new Array<DataTableRowHandle>(this["GnosisQuestHandles"]); } set { this["GnosisQuestHandles"] = value; } }
        public UEObject UpdateObjectiveDeferredCount(UEObject QuestID, UEObject ObjectiveIndex, UEObject NewCount) { return InvokeUEObject("UpdateObjectiveDeferredCount", QuestID, ObjectiveIndex, NewCount); }
        public void _DimensionQuestSubsystem(UEObject SaveLoadQuests, UEObject SaveLoadQuestObjectives, UEObject SaveLoadCustomQuests, UEObject SaveLoadCustomQuestObjectives, UEObject SaveLoadCustomQuestRewards, UEObject SaveLoadCustomQuestModifiers, UEObject SaveLoadCustomQuestConditions, UEObject CachedGameMode, UEObject CachedPlayerController, UEObject ActiveQuests, UEObject ResearchCurrencyItemHandle, UEObject ShadowCubeScrapRewardHandle, UEObject ShadowOrbScrapRewardHandle, UEObject OnInventoryCachedDelegate, UEObject IgnoredItemAddReasons, UEObject InventoryConditionTrackedItemTypes, UEObject OnQuestAddedDelegate, UEObject OnQuestRemovedDelegate, UEObject OnQuestObjectiveCompletedDelegate, UEObject OnQuestResetDelegate, UEObject OnQuestProgressUpdateDelegate, UEObject OnQuestClaimedDelegate, UEObject OnQuestObjectiveFailedDelegate, UEObject OnQuestObjectiveRemovedDelegate, UEObject DefaultObjectiveDescription_Kill, UEObject DefaultObjectiveDescription_Kill_ItemEquipped, UEObject DefaultObjectiveDescription_Target, UEObject DefaultObjectiveDescription_Target_Magic, UEObject DefaultObjectiveDescription_Damage, UEObject DefaultObjectiveDescription_Collect, UEObject DefaultObjectiveDescription_Obtain, UEObject DefaultObjectiveDescription_CleanseNumber, UEObject DefaultObjectiveDescription_CleansePercent, UEObject DefaultModifierDescription_Location, UEObject DefaultModifierDescription_LocationWithArenas, UEObject DefaultIndefiniteProgression, UEObject ShadowCubeLocationTargetConditions, UEObject ShadowCubeConditionsMap, UEObject ShadowCubeConditionCountProbabilityThresholds, UEObject ShadowOrbActiveQuestLimit, UEObject ShadowOrbTypeToConditionMap, UEObject ShadowOrbCountReductionForConditions, UEObject ShadowOrbConditionCountProbabilityThresholds, UEObject ShadowOrbBlockedObjectiveConditionPairs, UEObject EligibleCurses, UEObject CurseQuests, UEObject CursedItemsData, UEObject CurseChanceThresholdsNames, UEObject ActiveCurseLimit, UEObject ActiveCurses, UEObject OnCurseCleansedDelegate, UEObject OnCurseAppliedDelegate, UEObject OnCurseProgressUpdatedDelegate, UEObject OnCurseLiftedDelegate, UEObject OnCurseRemovedDelegate, UEObject ItemQuestBoosts, UEObject GnosisQuestHandles) { Invoke("DimensionQuestSubsystem", SaveLoadQuests, SaveLoadQuestObjectives, SaveLoadCustomQuests, SaveLoadCustomQuestObjectives, SaveLoadCustomQuestRewards, SaveLoadCustomQuestModifiers, SaveLoadCustomQuestConditions, CachedGameMode, CachedPlayerController, ActiveQuests, ResearchCurrencyItemHandle, ShadowCubeScrapRewardHandle, ShadowOrbScrapRewardHandle, OnInventoryCachedDelegate, IgnoredItemAddReasons, InventoryConditionTrackedItemTypes, OnQuestAddedDelegate, OnQuestRemovedDelegate, OnQuestObjectiveCompletedDelegate, OnQuestResetDelegate, OnQuestProgressUpdateDelegate, OnQuestClaimedDelegate, OnQuestObjectiveFailedDelegate, OnQuestObjectiveRemovedDelegate, DefaultObjectiveDescription_Kill, DefaultObjectiveDescription_Kill_ItemEquipped, DefaultObjectiveDescription_Target, DefaultObjectiveDescription_Target_Magic, DefaultObjectiveDescription_Damage, DefaultObjectiveDescription_Collect, DefaultObjectiveDescription_Obtain, DefaultObjectiveDescription_CleanseNumber, DefaultObjectiveDescription_CleansePercent, DefaultModifierDescription_Location, DefaultModifierDescription_LocationWithArenas, DefaultIndefiniteProgression, ShadowCubeLocationTargetConditions, ShadowCubeConditionsMap, ShadowCubeConditionCountProbabilityThresholds, ShadowOrbActiveQuestLimit, ShadowOrbTypeToConditionMap, ShadowOrbCountReductionForConditions, ShadowOrbConditionCountProbabilityThresholds, ShadowOrbBlockedObjectiveConditionPairs, EligibleCurses, CurseQuests, CursedItemsData, CurseChanceThresholdsNames, ActiveCurseLimit, ActiveCurses, OnCurseCleansedDelegate, OnCurseAppliedDelegate, OnCurseProgressUpdatedDelegate, OnCurseLiftedDelegate, OnCurseRemovedDelegate, ItemQuestBoosts, GnosisQuestHandles); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionQuestItem : DimensionItem
    {
        public DimensionQuestItem(nint addr) : base(addr) { }
        public DimensionQuestItem() : base(0) { }
        public DimensionQuestItemDataDetails QuestItemDataDetails { get { return this[nameof(QuestItemDataDetails)].As<DimensionQuestItemDataDetails>(); } set { this["QuestItemDataDetails"] = value; } }
        public bool bAutoScheduleForRemoval { get { return this["bAutoScheduleForRemoval"].Flag; } set { this["bAutoScheduleForRemoval"].Flag = value; } }
        public UEObject StartQuests() { return InvokeUEObject("StartQuests"); }
        public void _DimensionQuestItem(UEObject QuestItemDataDetails, UEObject bAutoScheduleForRemoval) { Invoke("DimensionQuestItem", QuestItemDataDetails, bAutoScheduleForRemoval); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionProjectSettings : UEObject
    {
        public DimensionProjectSettings(nint addr) : base(addr) { }
        public DimensionProjectSettings() : base(0) { }
        public GameplayTag DefaultLevelTag { get { return this[nameof(DefaultLevelTag)].As<GameplayTag>(); } set { this["DefaultLevelTag"] = value; } }
        public GameplayTag MainMenuLevelTag { get { return this[nameof(MainMenuLevelTag)].As<GameplayTag>(); } set { this["MainMenuLevelTag"] = value; } }
        public GameplayTag BaseLevelTag { get { return this[nameof(BaseLevelTag)].As<GameplayTag>(); } set { this["BaseLevelTag"] = value; } }
        public GameplayTag PrologueLevelTag { get { return this[nameof(PrologueLevelTag)].As<GameplayTag>(); } set { this["PrologueLevelTag"] = value; } }
        public UEObject Levels { get { return this["Levels"]; } set { this["Levels"] = value; } }
        public UEObject DefaultLevelSeeds { get { return this["DefaultLevelSeeds"]; } set { this["DefaultLevelSeeds"] = value; } }
        public UEObject LevelNames { get { return this["LevelNames"]; } set { this["LevelNames"] = value; } }
        public UEObject LevelUnlockRequirements { get { return this["LevelUnlockRequirements"]; } set { this["LevelUnlockRequirements"] = value; } }
        public SoftObjectPath ArenasDataTable { get { return this[nameof(ArenasDataTable)].As<SoftObjectPath>(); } set { this["ArenasDataTable"] = value; } }
        public UEObject ArenasDataTablePtr { get { return this["ArenasDataTablePtr"]; } set { this["ArenasDataTablePtr"] = value; } }
        public UEObject ArenasDataTableInstance { get { return this["ArenasDataTableInstance"]; } set { this["ArenasDataTableInstance"] = value; } }
        public byte DefaultAttitude { get { return this["DefaultAttitude"].GetValue<byte>(); } set { this["DefaultAttitude"].SetValue<byte>(value); } }
        public Array<TeamRelation> Relations { get { return new Array<TeamRelation>(this["Relations"]); } set { this["Relations"] = value; } }
        public ELightSpellCastingBehavior LightSpellCastingBehavior { get { return (ELightSpellCastingBehavior)this["LightSpellCastingBehavior"].GetValue<int>(); } set { this["LightSpellCastingBehavior"].SetValue<int>((int)value); } }
        public Array<Key> BlocklistedKeys { get { return new Array<Key>(this["BlocklistedKeys"]); } set { this["BlocklistedKeys"] = value; } }
        public bool bEnableArcanaInRun { get { return this["bEnableArcanaInRun"].Flag; } set { this["bEnableArcanaInRun"].Flag = value; } }
        public bool bOpenArcanaAfterCollectingTotem { get { return this["bOpenArcanaAfterCollectingTotem"].Flag; } set { this["bOpenArcanaAfterCollectingTotem"].Flag = value; } }
        public int StartingBoosterTokens { get { return this["StartingBoosterTokens"].GetValue<int>(); } set { this["StartingBoosterTokens"].SetValue<int>(value); } }
        public float UIDoublePressDuration { get { return this["UIDoublePressDuration"].GetValue<float>(); } set { this["UIDoublePressDuration"].SetValue<float>(value); } }
        public float UIHoldDuration { get { return this["UIHoldDuration"].GetValue<float>(); } set { this["UIHoldDuration"].SetValue<float>(value); } }
        public bool bColorDamageNumbersFromLastElementalStatus { get { return this["bColorDamageNumbersFromLastElementalStatus"].Flag; } set { this["bColorDamageNumbersFromLastElementalStatus"].Flag = value; } }
        public bool bIgnoreAccuracyConeIncrease { get { return this["bIgnoreAccuracyConeIncrease"].Flag; } set { this["bIgnoreAccuracyConeIncrease"].Flag = value; } }
        public bool bIgnoreSpeedMultiplier { get { return this["bIgnoreSpeedMultiplier"].Flag; } set { this["bIgnoreSpeedMultiplier"].Flag = value; } }
        public bool bIgnoreSpeedMultiplierOnTargeting { get { return this["bIgnoreSpeedMultiplierOnTargeting"].Flag; } set { this["bIgnoreSpeedMultiplierOnTargeting"].Flag = value; } }
        public bool bIncreaseAmmoReservesForSingleWeapon { get { return this["bIncreaseAmmoReservesForSingleWeapon"].Flag; } set { this["bIncreaseAmmoReservesForSingleWeapon"].Flag = value; } }
        public bool bIncreaseAmmoReservesOnlyInRun { get { return this["bIncreaseAmmoReservesOnlyInRun"].Flag; } set { this["bIncreaseAmmoReservesOnlyInRun"].Flag = value; } }
        public float SingleWeaponAmmoReservesMultiplier { get { return this["SingleWeaponAmmoReservesMultiplier"].GetValue<float>(); } set { this["SingleWeaponAmmoReservesMultiplier"].SetValue<float>(value); } }
        public bool bIncreaseAmmoGainsForSingleWeapon { get { return this["bIncreaseAmmoGainsForSingleWeapon"].Flag; } set { this["bIncreaseAmmoGainsForSingleWeapon"].Flag = value; } }
        public float SingleWeaponAmmoGainsMultiplier { get { return this["SingleWeaponAmmoGainsMultiplier"].GetValue<float>(); } set { this["SingleWeaponAmmoGainsMultiplier"].SetValue<float>(value); } }
        public EModifierType MetanoiaWitchfireModifierType { get { return (EModifierType)this["MetanoiaWitchfireModifierType"].GetValue<int>(); } set { this["MetanoiaWitchfireModifierType"].SetValue<int>((int)value); } }
        public EModifierType GnosisWitchfireModifierType { get { return (EModifierType)this["GnosisWitchfireModifierType"].GetValue<int>(); } set { this["GnosisWitchfireModifierType"].SetValue<int>((int)value); } }
        public EModifierType GnosisWitchfireLevelModifierType { get { return (EModifierType)this["GnosisWitchfireLevelModifierType"].GetValue<int>(); } set { this["GnosisWitchfireLevelModifierType"].SetValue<int>((int)value); } }
        public UEObject IsArcanaEnabledInRun() { return InvokeUEObject("IsArcanaEnabledInRun"); }
        public void _DimensionProjectSettings(UEObject DefaultLevelTag, UEObject MainMenuLevelTag, UEObject BaseLevelTag, UEObject PrologueLevelTag, UEObject Levels, UEObject DefaultLevelSeeds, UEObject LevelNames, UEObject LevelUnlockRequirements, UEObject ArenasDataTable, UEObject ArenasDataTablePtr, UEObject ArenasDataTableInstance, UEObject DefaultAttitude, UEObject Relations, UEObject LightSpellCastingBehavior, UEObject BlocklistedKeys, UEObject bEnableArcanaInRun, UEObject bOpenArcanaAfterCollectingTotem, UEObject StartingBoosterTokens, UEObject UIDoublePressDuration, UEObject UIHoldDuration, UEObject bColorDamageNumbersFromLastElementalStatus, UEObject bIgnoreAccuracyConeIncrease, UEObject bIgnoreSpeedMultiplier, UEObject bIgnoreSpeedMultiplierOnTargeting, UEObject bIncreaseAmmoReservesForSingleWeapon, UEObject bIncreaseAmmoReservesOnlyInRun, UEObject SingleWeaponAmmoReservesMultiplier, UEObject bIncreaseAmmoGainsForSingleWeapon, UEObject SingleWeaponAmmoGainsMultiplier, UEObject MetanoiaWitchfireModifierType, UEObject GnosisWitchfireModifierType, UEObject GnosisWitchfireLevelModifierType) { Invoke("DimensionProjectSettings", DefaultLevelTag, MainMenuLevelTag, BaseLevelTag, PrologueLevelTag, Levels, DefaultLevelSeeds, LevelNames, LevelUnlockRequirements, ArenasDataTable, ArenasDataTablePtr, ArenasDataTableInstance, DefaultAttitude, Relations, LightSpellCastingBehavior, BlocklistedKeys, bEnableArcanaInRun, bOpenArcanaAfterCollectingTotem, StartingBoosterTokens, UIDoublePressDuration, UIHoldDuration, bColorDamageNumbersFromLastElementalStatus, bIgnoreAccuracyConeIncrease, bIgnoreSpeedMultiplier, bIgnoreSpeedMultiplierOnTargeting, bIncreaseAmmoReservesForSingleWeapon, bIncreaseAmmoReservesOnlyInRun, SingleWeaponAmmoReservesMultiplier, bIncreaseAmmoGainsForSingleWeapon, SingleWeaponAmmoGainsMultiplier, MetanoiaWitchfireModifierType, GnosisWitchfireModifierType, GnosisWitchfireLevelModifierType); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionProjectLocalSettings : UEObject
    {
        public DimensionProjectLocalSettings(nint addr) : base(addr) { }
        public DimensionProjectLocalSettings() : base(0) { }
        public bool bHideDamageNumbers { get { return this["bHideDamageNumbers"].Flag; } set { this["bHideDamageNumbers"].Flag = value; } }
        public bool bShowAccumulatedDamageOnHealthBar { get { return this["bShowAccumulatedDamageOnHealthBar"].Flag; } set { this["bShowAccumulatedDamageOnHealthBar"].Flag = value; } }
        public bool bSkipBase { get { return this["bSkipBase"].Flag; } set { this["bSkipBase"].Flag = value; } }
        public bool bSkipTutorial { get { return this["bSkipTutorial"].Flag; } set { this["bSkipTutorial"].Flag = value; } }
        public bool bSkipSplashScreens { get { return this["bSkipSplashScreens"].Flag; } set { this["bSkipSplashScreens"].Flag = value; } }
        public bool bSkipMenuCameraMovement { get { return this["bSkipMenuCameraMovement"].Flag; } set { this["bSkipMenuCameraMovement"].Flag = value; } }
        public bool bSkipRunSummaryScreen { get { return this["bSkipRunSummaryScreen"].Flag; } set { this["bSkipRunSummaryScreen"].Flag = value; } }
        public bool bOverrideAbilityCooldownToDurationBased { get { return this["bOverrideAbilityCooldownToDurationBased"].Flag; } set { this["bOverrideAbilityCooldownToDurationBased"].Flag = value; } }
        public bool bUseDefaultElementalStatusDurations { get { return this["bUseDefaultElementalStatusDurations"].Flag; } set { this["bUseDefaultElementalStatusDurations"].Flag = value; } }
        public bool bEnableElementalStatusFromPureDamage { get { return this["bEnableElementalStatusFromPureDamage"].Flag; } set { this["bEnableElementalStatusFromPureDamage"].Flag = value; } }
        public bool bDisableGrowingElementalImmunity { get { return this["bDisableGrowingElementalImmunity"].Flag; } set { this["bDisableGrowingElementalImmunity"].Flag = value; } }
        public bool bEnableAddingLockedItems { get { return this["bEnableAddingLockedItems"].Flag; } set { this["bEnableAddingLockedItems"].Flag = value; } }
        public bool bEnableMultipleItemRarities { get { return this["bEnableMultipleItemRarities"].Flag; } set { this["bEnableMultipleItemRarities"].Flag = value; } }
        public bool bEnableAllWeaponsOnDemonicSlots { get { return this["bEnableAllWeaponsOnDemonicSlots"].Flag; } set { this["bEnableAllWeaponsOnDemonicSlots"].Flag = value; } }
        public float WitchfireGainedMultiplier { get { return this["WitchfireGainedMultiplier"].GetValue<float>(); } set { this["WitchfireGainedMultiplier"].SetValue<float>(value); } }
        public float PlayerStatCostMultiplier { get { return this["PlayerStatCostMultiplier"].GetValue<float>(); } set { this["PlayerStatCostMultiplier"].SetValue<float>(value); } }
        public bool bEnableFreeAttributeLevelUp { get { return this["bEnableFreeAttributeLevelUp"].Flag; } set { this["bEnableFreeAttributeLevelUp"].Flag = value; } }
        public bool bEnableQuestProgressionAnywhere { get { return this["bEnableQuestProgressionAnywhere"].Flag; } set { this["bEnableQuestProgressionAnywhere"].Flag = value; } }
        public bool bEnableQuestProgressionFromAnyItemAddReason { get { return this["bEnableQuestProgressionFromAnyItemAddReason"].Flag; } set { this["bEnableQuestProgressionFromAnyItemAddReason"].Flag = value; } }
        public bool bEnableMenuSubscreensEditAnywhere { get { return this["bEnableMenuSubscreensEditAnywhere"].Flag; } set { this["bEnableMenuSubscreensEditAnywhere"].Flag = value; } }
        public bool bEnableArcanaAnywhere { get { return this["bEnableArcanaAnywhere"].Flag; } set { this["bEnableArcanaAnywhere"].Flag = value; } }
        public bool bRestoreOldShopLayout { get { return this["bRestoreOldShopLayout"].Flag; } set { this["bRestoreOldShopLayout"].Flag = value; } }
        public bool bOverrideArcanaCategories { get { return this["bOverrideArcanaCategories"].Flag; } set { this["bOverrideArcanaCategories"].Flag = value; } }
        public UEObject CustomArcanaCategoriesDataTable { get { return this["CustomArcanaCategoriesDataTable"]; } set { this["CustomArcanaCategoriesDataTable"] = value; } }
        public bool bEnableCorruptedArcanaAnywhere { get { return this["bEnableCorruptedArcanaAnywhere"].Flag; } set { this["bEnableCorruptedArcanaAnywhere"].Flag = value; } }
        public bool bOverrideCorruptedArcanaCategories { get { return this["bOverrideCorruptedArcanaCategories"].Flag; } set { this["bOverrideCorruptedArcanaCategories"].Flag = value; } }
        public UEObject CustomCorruptedArcanaCategoriesDataTable { get { return this["CustomCorruptedArcanaCategoriesDataTable"]; } set { this["CustomCorruptedArcanaCategoriesDataTable"] = value; } }
        public bool bEnableBoosterPropheciesEditAnywhere { get { return this["bEnableBoosterPropheciesEditAnywhere"].Flag; } set { this["bEnableBoosterPropheciesEditAnywhere"].Flag = value; } }
        public bool bEnableArcanaTesting { get { return this["bEnableArcanaTesting"].Flag; } set { this["bEnableArcanaTesting"].Flag = value; } }
        public bool bUseAlternativeArcanaCategories { get { return this["bUseAlternativeArcanaCategories"].Flag; } set { this["bUseAlternativeArcanaCategories"].Flag = value; } }
        public bool bEnableArcanaCategoryChoice { get { return this["bEnableArcanaCategoryChoice"].Flag; } set { this["bEnableArcanaCategoryChoice"].Flag = value; } }
        public bool bIgnoreLevelTypeForSaveLoadOperations { get { return this["bIgnoreLevelTypeForSaveLoadOperations"].Flag; } set { this["bIgnoreLevelTypeForSaveLoadOperations"].Flag = value; } }
        public bool bEnableYawRotationWithArrows { get { return this["bEnableYawRotationWithArrows"].Flag; } set { this["bEnableYawRotationWithArrows"].Flag = value; } }
        public bool bEnablePitchRotationWithArrows { get { return this["bEnablePitchRotationWithArrows"].Flag; } set { this["bEnablePitchRotationWithArrows"].Flag = value; } }
        public bool bIgnoreWhitelistForItems { get { return this["bIgnoreWhitelistForItems"].Flag; } set { this["bIgnoreWhitelistForItems"].Flag = value; } }
        public bool bEnableAssetLoaderDebugTools { get { return this["bEnableAssetLoaderDebugTools"].Flag; } set { this["bEnableAssetLoaderDebugTools"].Flag = value; } }
        public bool bEnableWitchfireEssenceTestSpawn { get { return this["bEnableWitchfireEssenceTestSpawn"].Flag; } set { this["bEnableWitchfireEssenceTestSpawn"].Flag = value; } }
        public bool bEnableWeaponTraceDebug { get { return this["bEnableWeaponTraceDebug"].Flag; } set { this["bEnableWeaponTraceDebug"].Flag = value; } }
        public bool bEnableRadialDamageSphereDebug { get { return this["bEnableRadialDamageSphereDebug"].Flag; } set { this["bEnableRadialDamageSphereDebug"].Flag = value; } }
        public bool bEnableRadialDamageVisibilityTraces { get { return this["bEnableRadialDamageVisibilityTraces"].Flag; } set { this["bEnableRadialDamageVisibilityTraces"].Flag = value; } }
        public bool bEnableRadialConeAngleTraces { get { return this["bEnableRadialConeAngleTraces"].Flag; } set { this["bEnableRadialConeAngleTraces"].Flag = value; } }
        public bool bEnableRandomComponentDebugTools { get { return this["bEnableRandomComponentDebugTools"].Flag; } set { this["bEnableRandomComponentDebugTools"].Flag = value; } }
        public bool bEnableResearchDebugTools { get { return this["bEnableResearchDebugTools"].Flag; } set { this["bEnableResearchDebugTools"].Flag = value; } }
        public bool bEnableTimeDebugTools { get { return this["bEnableTimeDebugTools"].Flag; } set { this["bEnableTimeDebugTools"].Flag = value; } }
        public bool bEnableGameplayEventDebugTools { get { return this["bEnableGameplayEventDebugTools"].Flag; } set { this["bEnableGameplayEventDebugTools"].Flag = value; } }
        public bool bEnableSpawnManagerDebugTools { get { return this["bEnableSpawnManagerDebugTools"].Flag; } set { this["bEnableSpawnManagerDebugTools"].Flag = value; } }
        public bool bEnableAchievementDebugTools { get { return this["bEnableAchievementDebugTools"].Flag; } set { this["bEnableAchievementDebugTools"].Flag = value; } }
        public bool bEnableGameplayAttributeDebugTools { get { return this["bEnableGameplayAttributeDebugTools"].Flag; } set { this["bEnableGameplayAttributeDebugTools"].Flag = value; } }
        public UEObject GetWitchfireGainedMultiplier() { return InvokeUEObject("GetWitchfireGainedMultiplier"); }
        public void _DimensionProjectLocalSettings(UEObject bHideDamageNumbers, UEObject bShowAccumulatedDamageOnHealthBar, UEObject bSkipBase, UEObject bSkipTutorial, UEObject bSkipSplashScreens, UEObject bSkipMenuCameraMovement, UEObject bSkipRunSummaryScreen, UEObject bOverrideAbilityCooldownToDurationBased, UEObject bUseDefaultElementalStatusDurations, UEObject bEnableElementalStatusFromPureDamage, UEObject bDisableGrowingElementalImmunity, UEObject bEnableAddingLockedItems, UEObject bEnableMultipleItemRarities, UEObject bEnableAllWeaponsOnDemonicSlots, UEObject WitchfireGainedMultiplier, UEObject PlayerStatCostMultiplier, UEObject bEnableFreeAttributeLevelUp, UEObject bEnableQuestProgressionAnywhere, UEObject bEnableQuestProgressionFromAnyItemAddReason, UEObject bEnableMenuSubscreensEditAnywhere, UEObject bEnableArcanaAnywhere, UEObject bRestoreOldShopLayout, UEObject bOverrideArcanaCategories, UEObject CustomArcanaCategoriesDataTable, UEObject bEnableCorruptedArcanaAnywhere, UEObject bOverrideCorruptedArcanaCategories, UEObject CustomCorruptedArcanaCategoriesDataTable, UEObject bEnableBoosterPropheciesEditAnywhere, UEObject bEnableArcanaTesting, UEObject bUseAlternativeArcanaCategories, UEObject bEnableArcanaCategoryChoice, UEObject bIgnoreLevelTypeForSaveLoadOperations, UEObject bEnableYawRotationWithArrows, UEObject bEnablePitchRotationWithArrows, UEObject bIgnoreWhitelistForItems, UEObject bEnableAssetLoaderDebugTools, UEObject bEnableWitchfireEssenceTestSpawn, UEObject bEnableWeaponTraceDebug, UEObject bEnableRadialDamageSphereDebug, UEObject bEnableRadialDamageVisibilityTraces, UEObject bEnableRadialConeAngleTraces, UEObject bEnableRandomComponentDebugTools, UEObject bEnableResearchDebugTools, UEObject bEnableTimeDebugTools, UEObject bEnableGameplayEventDebugTools, UEObject bEnableSpawnManagerDebugTools, UEObject bEnableAchievementDebugTools, UEObject bEnableGameplayAttributeDebugTools) { Invoke("DimensionProjectLocalSettings", bHideDamageNumbers, bShowAccumulatedDamageOnHealthBar, bSkipBase, bSkipTutorial, bSkipSplashScreens, bSkipMenuCameraMovement, bSkipRunSummaryScreen, bOverrideAbilityCooldownToDurationBased, bUseDefaultElementalStatusDurations, bEnableElementalStatusFromPureDamage, bDisableGrowingElementalImmunity, bEnableAddingLockedItems, bEnableMultipleItemRarities, bEnableAllWeaponsOnDemonicSlots, WitchfireGainedMultiplier, PlayerStatCostMultiplier, bEnableFreeAttributeLevelUp, bEnableQuestProgressionAnywhere, bEnableQuestProgressionFromAnyItemAddReason, bEnableMenuSubscreensEditAnywhere, bEnableArcanaAnywhere, bRestoreOldShopLayout, bOverrideArcanaCategories, CustomArcanaCategoriesDataTable, bEnableCorruptedArcanaAnywhere, bOverrideCorruptedArcanaCategories, CustomCorruptedArcanaCategoriesDataTable, bEnableBoosterPropheciesEditAnywhere, bEnableArcanaTesting, bUseAlternativeArcanaCategories, bEnableArcanaCategoryChoice, bIgnoreLevelTypeForSaveLoadOperations, bEnableYawRotationWithArrows, bEnablePitchRotationWithArrows, bIgnoreWhitelistForItems, bEnableAssetLoaderDebugTools, bEnableWitchfireEssenceTestSpawn, bEnableWeaponTraceDebug, bEnableRadialDamageSphereDebug, bEnableRadialDamageVisibilityTraces, bEnableRadialConeAngleTraces, bEnableRandomComponentDebugTools, bEnableResearchDebugTools, bEnableTimeDebugTools, bEnableGameplayEventDebugTools, bEnableSpawnManagerDebugTools, bEnableAchievementDebugTools, bEnableGameplayAttributeDebugTools); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionProjectileMovementComponent : ProjectileMovementComponent
    {
        public DimensionProjectileMovementComponent(nint addr) : base(addr) { }
        public DimensionProjectileMovementComponent() : base(0) { }
        public UEObject OnHandleImpactDelegate { get { return this["OnHandleImpactDelegate"]; } set { this["OnHandleImpactDelegate"] = value; } }
        public bool bContinueSimulationAfterHit { get { return this["bContinueSimulationAfterHit"].Flag; } set { this["bContinueSimulationAfterHit"].Flag = value; } }
        public float SimulationFactor { get { return this["SimulationFactor"].GetValue<float>(); } set { this["SimulationFactor"].SetValue<float>(value); } }
        public Vector GravityDirection { get { return this[nameof(GravityDirection)].As<Vector>(); } set { this["GravityDirection"] = value; } }
        public bool bUseGravitationalHoming { get { return this["bUseGravitationalHoming"].Flag; } set { this["bUseGravitationalHoming"].Flag = value; } }
        public bool bPrioritizeDirectionWhileHoming { get { return this["bPrioritizeDirectionWhileHoming"].Flag; } set { this["bPrioritizeDirectionWhileHoming"].Flag = value; } }
        public string HomingTargetBoneName { get { return this["HomingTargetBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public PrimitiveComponent DamageCollider { get { return this[nameof(DamageCollider)].As<PrimitiveComponent>(); } set { this["DamageCollider"] = value; } }
        public bool bHomingAimForCriticalSection { get { return this["bHomingAimForCriticalSection"].Flag; } set { this["bHomingAimForCriticalSection"].Flag = value; } }
        public UEObject OnHomingTargetLostDelegate { get { return this["OnHomingTargetLostDelegate"]; } set { this["OnHomingTargetLostDelegate"] = value; } }
        public UEObject OnHomingTargetUpdatedDelegate { get { return this["OnHomingTargetUpdatedDelegate"]; } set { this["OnHomingTargetUpdatedDelegate"] = value; } }
        public EProjectileHomingRetargetingMode HomingRetargetingMode { get { return (EProjectileHomingRetargetingMode)this["HomingRetargetingMode"].GetValue<int>(); } set { this["HomingRetargetingMode"].SetValue<int>((int)value); } }
        public bool bRetargetOnKill { get { return this["bRetargetOnKill"].Flag; } set { this["bRetargetOnKill"].Flag = value; } }
        public UEObject HomingTargetClass { get { return this["HomingTargetClass"]; } set { this["HomingTargetClass"] = value; } }
        public float HomingTargetSearchRadius { get { return this["HomingTargetSearchRadius"].GetValue<float>(); } set { this["HomingTargetSearchRadius"].SetValue<float>(value); } }
        public Vector LastHomingLocation { get { return this[nameof(LastHomingLocation)].As<Vector>(); } set { this["LastHomingLocation"] = value; } }
        public DummyHomingActor DummyHomingActor { get { return this[nameof(DummyHomingActor)].As<DummyHomingActor>(); } set { this["DummyHomingActor"] = value; } }
        public Actor LastHomingActor { get { return this[nameof(LastHomingActor)].As<Actor>(); } set { this["LastHomingActor"] = value; } }
        public bool bUsePathingHoming { get { return this["bUsePathingHoming"].Flag; } set { this["bUsePathingHoming"].Flag = value; } }
        public float PathingRefreshDelay { get { return this["PathingRefreshDelay"].GetValue<float>(); } set { this["PathingRefreshDelay"].SetValue<float>(value); } }
        public bool bPathHomingDirectPathCollisionCheck { get { return this["bPathHomingDirectPathCollisionCheck"].Flag; } set { this["bPathHomingDirectPathCollisionCheck"].Flag = value; } }
        public UEObject NavigationFilterClass { get { return this["NavigationFilterClass"]; } set { this["NavigationFilterClass"] = value; } }
        public void SetRetargetOnKill(UEObject bInRetargetOnKill) { Invoke("SetRetargetOnKill", bInRetargetOnKill); }
        public void _DimensionProjectileMovementComponent(UEObject OnHandleImpactDelegate, UEObject bContinueSimulationAfterHit, UEObject SimulationFactor, UEObject GravityDirection, UEObject bUseGravitationalHoming, UEObject bPrioritizeDirectionWhileHoming, UEObject HomingTargetBoneName, UEObject DamageCollider, UEObject bHomingAimForCriticalSection, UEObject OnHomingTargetLostDelegate, UEObject OnHomingTargetUpdatedDelegate, UEObject HomingRetargetingMode, UEObject bRetargetOnKill, UEObject HomingTargetClass, UEObject HomingTargetSearchRadius, UEObject LastHomingLocation, UEObject DummyHomingActor, UEObject LastHomingActor, UEObject bUsePathingHoming, UEObject PathingRefreshDelay, UEObject bPathHomingDirectPathCollisionCheck, UEObject NavigationFilterClass) { Invoke("DimensionProjectileMovementComponent", OnHandleImpactDelegate, bContinueSimulationAfterHit, SimulationFactor, GravityDirection, bUseGravitationalHoming, bPrioritizeDirectionWhileHoming, HomingTargetBoneName, DamageCollider, bHomingAimForCriticalSection, OnHomingTargetLostDelegate, OnHomingTargetUpdatedDelegate, HomingRetargetingMode, bRetargetOnKill, HomingTargetClass, HomingTargetSearchRadius, LastHomingLocation, DummyHomingActor, LastHomingActor, bUsePathingHoming, PathingRefreshDelay, bPathHomingDirectPathCollisionCheck, NavigationFilterClass); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionProjectile : Actor
    {
        public DimensionProjectile(nint addr) : base(addr) { }
        public DimensionProjectile() : base(0) { }
        public DimensionProjectileMovementComponent ProjectileMovementComponent { get { return this[nameof(ProjectileMovementComponent)].As<DimensionProjectileMovementComponent>(); } set { this["ProjectileMovementComponent"] = value; } }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public SceneComponent ProjectileVisualRootComponent { get { return this[nameof(ProjectileVisualRootComponent)].As<SceneComponent>(); } set { this["ProjectileVisualRootComponent"] = value; } }
        public UEObject OnTierChangedDelegate { get { return this["OnTierChangedDelegate"]; } set { this["OnTierChangedDelegate"] = value; } }
        public float TimeToLive { get { return this["TimeToLive"].GetValue<float>(); } set { this["TimeToLive"].SetValue<float>(value); } }
        public bool bDealDamageOnStop { get { return this["bDealDamageOnStop"].Flag; } set { this["bDealDamageOnStop"].Flag = value; } }
        public bool bDisableOnStop { get { return this["bDisableOnStop"].Flag; } set { this["bDisableOnStop"].Flag = value; } }
        public bool bSpawnImpactDecalOnStop { get { return this["bSpawnImpactDecalOnStop"].Flag; } set { this["bSpawnImpactDecalOnStop"].Flag = value; } }
        public DamageDeferredData DamageDeferredData { get { return this[nameof(DamageDeferredData)].As<DamageDeferredData>(); } set { this["DamageDeferredData"] = value; } }
        public HitResult FirstHitResult { get { return this[nameof(FirstHitResult)].As<HitResult>(); } set { this["FirstHitResult"] = value; } }
        public UEObject ImpactTemplate { get { return this["ImpactTemplate"]; } set { this["ImpactTemplate"] = value; } }
        public DimensionProjectileSoundData ProjectileSoundData { get { return this[nameof(ProjectileSoundData)].As<DimensionProjectileSoundData>(); } set { this["ProjectileSoundData"] = value; } }
        public bool bUseSoundDataHandle { get { return this["bUseSoundDataHandle"].Flag; } set { this["bUseSoundDataHandle"].Flag = value; } }
        public DataTableRowHandle SoundDataHandle { get { return this[nameof(SoundDataHandle)].As<DataTableRowHandle>(); } set { this["SoundDataHandle"] = value; } }
        public Plane ProjectileVisualPlane { get { return this[nameof(ProjectileVisualPlane)].As<Plane>(); } set { this["ProjectileVisualPlane"] = value; } }
        public float LastFrameDistanceToPlane { get { return this["LastFrameDistanceToPlane"].GetValue<float>(); } set { this["LastFrameDistanceToPlane"].SetValue<float>(value); } }
        public UEObject WasFirstHitCritical(UEObject bOutFirstHitValid) { return InvokeUEObject("WasFirstHitCritical", bOutFirstHitValid); }
        public void _DimensionProjectile(UEObject ProjectileMovementComponent, UEObject CapsuleComponent, UEObject ProjectileVisualRootComponent, UEObject OnTierChangedDelegate, UEObject TimeToLive, UEObject bDealDamageOnStop, UEObject bDisableOnStop, UEObject bSpawnImpactDecalOnStop, UEObject DamageDeferredData, UEObject FirstHitResult, UEObject ImpactTemplate, UEObject ProjectileSoundData, UEObject bUseSoundDataHandle, UEObject SoundDataHandle, UEObject ProjectileVisualPlane, UEObject LastFrameDistanceToPlane) { Invoke("DimensionProjectile", ProjectileMovementComponent, CapsuleComponent, ProjectileVisualRootComponent, OnTierChangedDelegate, TimeToLive, bDealDamageOnStop, bDisableOnStop, bSpawnImpactDecalOnStop, DamageDeferredData, FirstHitResult, ImpactTemplate, ProjectileSoundData, bUseSoundDataHandle, SoundDataHandle, ProjectileVisualPlane, LastFrameDistanceToPlane); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionProgressManager : DimensionObject
    {
        public DimensionProgressManager(nint addr) : base(addr) { }
        public DimensionProgressManager() : base(0) { }
        public Array<ProgressManagerRequest> StartupRequests { get { return new Array<ProgressManagerRequest>(this["StartupRequests"]); } set { this["StartupRequests"] = value; } }
        public Array<DataTableRowHandle> StartupItemHandles { get { return new Array<DataTableRowHandle>(this["StartupItemHandles"]); } set { this["StartupItemHandles"] = value; } }
        public UEObject IntegerMaps { get { return this["IntegerMaps"]; } set { this["IntegerMaps"] = value; } }
        public UEObject FloatMaps { get { return this["FloatMaps"]; } set { this["FloatMaps"] = value; } }
        public UEObject StringMaps { get { return this["StringMaps"]; } set { this["StringMaps"] = value; } }
        public UEObject GameplayTagMaps { get { return this["GameplayTagMaps"]; } set { this["GameplayTagMaps"] = value; } }
        public UEObject OnProgressionChangedDelegate { get { return this["OnProgressionChangedDelegate"]; } set { this["OnProgressionChangedDelegate"] = value; } }
        public UEObject TryGettingStringValueArray(UEObject CategoryKey, UEObject TagKey, UEObject OutValueArray) { return InvokeUEObject("TryGettingStringValueArray", CategoryKey, TagKey, OutValueArray); }
        public void _DimensionProgressManager(UEObject StartupRequests, UEObject StartupItemHandles, UEObject IntegerMaps, UEObject FloatMaps, UEObject StringMaps, UEObject GameplayTagMaps, UEObject OnProgressionChangedDelegate) { Invoke("DimensionProgressManager", StartupRequests, StartupItemHandles, IntegerMaps, FloatMaps, StringMaps, GameplayTagMaps, OnProgressionChangedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPreyerAnimInstance : AnimInstance
    {
        public DimensionPreyerAnimInstance(nint addr) : base(addr) { }
        public DimensionPreyerAnimInstance() : base(0) { }
        public bool bUseUnarmedAnimation { get { return this["bUseUnarmedAnimation"].Flag; } set { this["bUseUnarmedAnimation"].Flag = value; } }
        public Vector DashDirection { get { return this[nameof(DashDirection)].As<Vector>(); } set { this["DashDirection"] = value; } }
        public float DashAlpha { get { return this["DashAlpha"].GetValue<float>(); } set { this["DashAlpha"].SetValue<float>(value); } }
        public float DashAlphaRight { get { return this["DashAlphaRight"].GetValue<float>(); } set { this["DashAlphaRight"].SetValue<float>(value); } }
        public float DashAlphaLeft { get { return this["DashAlphaLeft"].GetValue<float>(); } set { this["DashAlphaLeft"].SetValue<float>(value); } }
        public float DashAlphaForward { get { return this["DashAlphaForward"].GetValue<float>(); } set { this["DashAlphaForward"].SetValue<float>(value); } }
        public float DashAlphaBack { get { return this["DashAlphaBack"].GetValue<float>(); } set { this["DashAlphaBack"].SetValue<float>(value); } }
        public float MovementInputVectorLenghtSquared { get { return this["MovementInputVectorLenghtSquared"].GetValue<float>(); } set { this["MovementInputVectorLenghtSquared"].SetValue<float>(value); } }
        public DimensionPawnWeaponAnimationSet AnimationSet { get { return this[nameof(AnimationSet)].As<DimensionPawnWeaponAnimationSet>(); } set { this["AnimationSet"] = value; } }
        public float AimStartSequenceLenght { get { return this["AimStartSequenceLenght"].GetValue<float>(); } set { this["AimStartSequenceLenght"].SetValue<float>(value); } }
        public Vector DotADSOffset { get { return this[nameof(DotADSOffset)].As<Vector>(); } set { this["DotADSOffset"] = value; } }
        public float Speed { get { return this["Speed"].GetValue<float>(); } set { this["Speed"].SetValue<float>(value); } }
        public float MaxSpeed { get { return this["MaxSpeed"].GetValue<float>(); } set { this["MaxSpeed"].SetValue<float>(value); } }
        public Vector InputVector { get { return this[nameof(InputVector)].As<Vector>(); } set { this["InputVector"] = value; } }
        public Vector MovementNormalVector { get { return this[nameof(MovementNormalVector)].As<Vector>(); } set { this["MovementNormalVector"] = value; } }
        public bool bIsRunning { get { return this["bIsRunning"].Flag; } set { this["bIsRunning"].Flag = value; } }
        public bool bIsSliding { get { return this["bIsSliding"].Flag; } set { this["bIsSliding"].Flag = value; } }
        public bool bIsFalling { get { return this["bIsFalling"].Flag; } set { this["bIsFalling"].Flag = value; } }
        public float ADSAcceleration { get { return this["ADSAcceleration"].GetValue<float>(); } set { this["ADSAcceleration"].SetValue<float>(value); } }
        public float ADS { get { return this["ADS"].GetValue<float>(); } set { this["ADS"].SetValue<float>(value); } }
        public bool bHasWalkStopAnim { get { return this["bHasWalkStopAnim"].Flag; } set { this["bHasWalkStopAnim"].Flag = value; } }
        public bool bHasWalkADSStopAnim { get { return this["bHasWalkADSStopAnim"].Flag; } set { this["bHasWalkADSStopAnim"].Flag = value; } }
        public bool bIsAiming { get { return this["bIsAiming"].Flag; } set { this["bIsAiming"].Flag = value; } }
        public Rotator OffsetWeaponRotation { get { return this[nameof(OffsetWeaponRotation)].As<Rotator>(); } set { this["OffsetWeaponRotation"] = value; } }
        public Vector RecoilVector { get { return this[nameof(RecoilVector)].As<Vector>(); } set { this["RecoilVector"] = value; } }
        public Vector CurrentRecoilVector { get { return this[nameof(CurrentRecoilVector)].As<Vector>(); } set { this["CurrentRecoilVector"] = value; } }
        public Vector DotOffsetLocation { get { return this[nameof(DotOffsetLocation)].As<Vector>(); } set { this["DotOffsetLocation"] = value; } }
        public float StartAimTime { get { return this["StartAimTime"].GetValue<float>(); } set { this["StartAimTime"].SetValue<float>(value); } }
        public float StopAimTime { get { return this["StopAimTime"].GetValue<float>(); } set { this["StopAimTime"].SetValue<float>(value); } }
        public float FallTime { get { return this["FallTime"].GetValue<float>(); } set { this["FallTime"].SetValue<float>(value); } }
        public float Vertical { get { return this["Vertical"].GetValue<float>(); } set { this["Vertical"].SetValue<float>(value); } }
        public float Horizontal { get { return this["Horizontal"].GetValue<float>(); } set { this["Horizontal"].SetValue<float>(value); } }
        public bool bCanWalkToStopWalk { get { return this["bCanWalkToStopWalk"].Flag; } set { this["bCanWalkToStopWalk"].Flag = value; } }
        public bool bCanIdleToWalk { get { return this["bCanIdleToWalk"].Flag; } set { this["bCanIdleToWalk"].Flag = value; } }
        public bool bCanStopWalkToWalk { get { return this["bCanStopWalkToWalk"].Flag; } set { this["bCanStopWalkToWalk"].Flag = value; } }
        public bool bCanWalkToIdle { get { return this["bCanWalkToIdle"].Flag; } set { this["bCanWalkToIdle"].Flag = value; } }
        public DimensionPlayerCharacter PlayerCharacter { get { return this[nameof(PlayerCharacter)].As<DimensionPlayerCharacter>(); } set { this["PlayerCharacter"] = value; } }
        public AnimMontage CurrentMontageInstance { get { return this[nameof(CurrentMontageInstance)].As<AnimMontage>(); } set { this["CurrentMontageInstance"] = value; } }
        public UEObject OnNotifyTriggeredDelegate { get { return this["OnNotifyTriggeredDelegate"]; } set { this["OnNotifyTriggeredDelegate"] = value; } }
        public void UpdateAnimationSet(UEObject AnimationSetToSet) { Invoke("UpdateAnimationSet", AnimationSetToSet); }
        public void _DimensionPreyerAnimInstance(UEObject bUseUnarmedAnimation, UEObject DashDirection, UEObject DashAlpha, UEObject DashAlphaRight, UEObject DashAlphaLeft, UEObject DashAlphaForward, UEObject DashAlphaBack, UEObject MovementInputVectorLenghtSquared, UEObject AnimationSet, UEObject AimStartSequenceLenght, UEObject DotADSOffset, UEObject Speed, UEObject MaxSpeed, UEObject InputVector, UEObject MovementNormalVector, UEObject bIsRunning, UEObject bIsSliding, UEObject bIsFalling, UEObject ADSAcceleration, UEObject ADS, UEObject bHasWalkStopAnim, UEObject bHasWalkADSStopAnim, UEObject bIsAiming, UEObject OffsetWeaponRotation, UEObject RecoilVector, UEObject CurrentRecoilVector, UEObject DotOffsetLocation, UEObject StartAimTime, UEObject StopAimTime, UEObject FallTime, UEObject Vertical, UEObject Horizontal, UEObject bCanWalkToStopWalk, UEObject bCanIdleToWalk, UEObject bCanStopWalkToWalk, UEObject bCanWalkToIdle, UEObject PlayerCharacter, UEObject CurrentMontageInstance, UEObject OnNotifyTriggeredDelegate) { Invoke("DimensionPreyerAnimInstance", bUseUnarmedAnimation, DashDirection, DashAlpha, DashAlphaRight, DashAlphaLeft, DashAlphaForward, DashAlphaBack, MovementInputVectorLenghtSquared, AnimationSet, AimStartSequenceLenght, DotADSOffset, Speed, MaxSpeed, InputVector, MovementNormalVector, bIsRunning, bIsSliding, bIsFalling, ADSAcceleration, ADS, bHasWalkStopAnim, bHasWalkADSStopAnim, bIsAiming, OffsetWeaponRotation, RecoilVector, CurrentRecoilVector, DotOffsetLocation, StartAimTime, StopAimTime, FallTime, Vertical, Horizontal, bCanWalkToStopWalk, bCanIdleToWalk, bCanStopWalkToWalk, bCanWalkToIdle, PlayerCharacter, CurrentMontageInstance, OnNotifyTriggeredDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPowerAttribSet : DimensionAttribSet
    {
        public DimensionPowerAttribSet(nint addr) : base(addr) { }
        public DimensionPowerAttribSet() : base(0) { }
        public float Power { get { return this["Power"].GetValue<float>(); } set { this["Power"].SetValue<float>(value); } }
        public float ElementalPower { get { return this["ElementalPower"].GetValue<float>(); } set { this["ElementalPower"].SetValue<float>(value); } }
        public float PhysicalPower { get { return this["PhysicalPower"].GetValue<float>(); } set { this["PhysicalPower"].SetValue<float>(value); } }
        public float FirePower { get { return this["FirePower"].GetValue<float>(); } set { this["FirePower"].SetValue<float>(value); } }
        public float EarthPower { get { return this["EarthPower"].GetValue<float>(); } set { this["EarthPower"].SetValue<float>(value); } }
        public float WaterPower { get { return this["WaterPower"].GetValue<float>(); } set { this["WaterPower"].SetValue<float>(value); } }
        public float AirPower { get { return this["AirPower"].GetValue<float>(); } set { this["AirPower"].SetValue<float>(value); } }
        public float StatusPower { get { return this["StatusPower"].GetValue<float>(); } set { this["StatusPower"].SetValue<float>(value); } }
        public float ElementalStatusPower { get { return this["ElementalStatusPower"].GetValue<float>(); } set { this["ElementalStatusPower"].SetValue<float>(value); } }
        public float PhysicalStatusPower { get { return this["PhysicalStatusPower"].GetValue<float>(); } set { this["PhysicalStatusPower"].SetValue<float>(value); } }
        public float FireStatusPower { get { return this["FireStatusPower"].GetValue<float>(); } set { this["FireStatusPower"].SetValue<float>(value); } }
        public float EarthStatusPower { get { return this["EarthStatusPower"].GetValue<float>(); } set { this["EarthStatusPower"].SetValue<float>(value); } }
        public float WaterStatusPower { get { return this["WaterStatusPower"].GetValue<float>(); } set { this["WaterStatusPower"].SetValue<float>(value); } }
        public float AirStatusPower { get { return this["AirStatusPower"].GetValue<float>(); } set { this["AirStatusPower"].SetValue<float>(value); } }
        public float ElementalInstancePowerModifier { get { return this["ElementalInstancePowerModifier"].GetValue<float>(); } set { this["ElementalInstancePowerModifier"].SetValue<float>(value); } }
        public float PhysicalInstancePowerModifier { get { return this["PhysicalInstancePowerModifier"].GetValue<float>(); } set { this["PhysicalInstancePowerModifier"].SetValue<float>(value); } }
        public float FireInstancePowerModifier { get { return this["FireInstancePowerModifier"].GetValue<float>(); } set { this["FireInstancePowerModifier"].SetValue<float>(value); } }
        public float EarthInstancePowerModifier { get { return this["EarthInstancePowerModifier"].GetValue<float>(); } set { this["EarthInstancePowerModifier"].SetValue<float>(value); } }
        public float WaterInstancePowerModifier { get { return this["WaterInstancePowerModifier"].GetValue<float>(); } set { this["WaterInstancePowerModifier"].SetValue<float>(value); } }
        public float AirInstancePowerModifier { get { return this["AirInstancePowerModifier"].GetValue<float>(); } set { this["AirInstancePowerModifier"].SetValue<float>(value); } }
        public float WeaponPower { get { return this["WeaponPower"].GetValue<float>(); } set { this["WeaponPower"].SetValue<float>(value); } }
        public float WeaponStatusPower { get { return this["WeaponStatusPower"].GetValue<float>(); } set { this["WeaponStatusPower"].SetValue<float>(value); } }
        public float PrimaryWeaponPower { get { return this["PrimaryWeaponPower"].GetValue<float>(); } set { this["PrimaryWeaponPower"].SetValue<float>(value); } }
        public float PrimaryWeaponStatusPower { get { return this["PrimaryWeaponStatusPower"].GetValue<float>(); } set { this["PrimaryWeaponStatusPower"].SetValue<float>(value); } }
        public float SecondaryWeaponPower { get { return this["SecondaryWeaponPower"].GetValue<float>(); } set { this["SecondaryWeaponPower"].SetValue<float>(value); } }
        public float SecondaryWeaponStatusPower { get { return this["SecondaryWeaponStatusPower"].GetValue<float>(); } set { this["SecondaryWeaponStatusPower"].SetValue<float>(value); } }
        public float TertiaryWeaponPower { get { return this["TertiaryWeaponPower"].GetValue<float>(); } set { this["TertiaryWeaponPower"].SetValue<float>(value); } }
        public float TertiaryWeaponStatusPower { get { return this["TertiaryWeaponStatusPower"].GetValue<float>(); } set { this["TertiaryWeaponStatusPower"].SetValue<float>(value); } }
        public float SpellPower { get { return this["SpellPower"].GetValue<float>(); } set { this["SpellPower"].SetValue<float>(value); } }
        public float SpellStatusPower { get { return this["SpellStatusPower"].GetValue<float>(); } set { this["SpellStatusPower"].SetValue<float>(value); } }
        public float LightSpellPower { get { return this["LightSpellPower"].GetValue<float>(); } set { this["LightSpellPower"].SetValue<float>(value); } }
        public float LightSpellStatusPower { get { return this["LightSpellStatusPower"].GetValue<float>(); } set { this["LightSpellStatusPower"].SetValue<float>(value); } }
        public float HeavySpellPower { get { return this["HeavySpellPower"].GetValue<float>(); } set { this["HeavySpellPower"].SetValue<float>(value); } }
        public float HeavySpellStatusPower { get { return this["HeavySpellStatusPower"].GetValue<float>(); } set { this["HeavySpellStatusPower"].SetValue<float>(value); } }
        public float MeleePower { get { return this["MeleePower"].GetValue<float>(); } set { this["MeleePower"].SetValue<float>(value); } }
        public float MeleeStatusPower { get { return this["MeleeStatusPower"].GetValue<float>(); } set { this["MeleeStatusPower"].SetValue<float>(value); } }
        public float HealingPower { get { return this["HealingPower"].GetValue<float>(); } set { this["HealingPower"].SetValue<float>(value); } }
    }
    public class DimensionPointLeash : DimensionDistanceLeash
    {
        public DimensionPointLeash(nint addr) : base(addr) { }
        public DimensionPointLeash() : base(0) { }
        public Vector LeashPoint { get { return this[nameof(LeashPoint)].As<Vector>(); } set { this["LeashPoint"] = value; } }
    }
    public class DimensionPlayerWalkingState : DimensionPlayerState
    {
        public DimensionPlayerWalkingState(nint addr) : base(addr) { }
        public DimensionPlayerWalkingState() : base(0) { }
    }
    public class DimensionPlayerStateMachineComponent : DimensionStateMachineComponent
    {
        public DimensionPlayerStateMachineComponent(nint addr) : base(addr) { }
        public DimensionPlayerStateMachineComponent() : base(0) { }
        public float MovementInputDecayTime { get { return this["MovementInputDecayTime"].GetValue<float>(); } set { this["MovementInputDecayTime"].SetValue<float>(value); } }
        public float SlidingDuration { get { return this["SlidingDuration"].GetValue<float>(); } set { this["SlidingDuration"].SetValue<float>(value); } }
        public float SlidingEnabledDelay { get { return this["SlidingEnabledDelay"].GetValue<float>(); } set { this["SlidingEnabledDelay"].SetValue<float>(value); } }
        public float WeaponFireLockDuration { get { return this["WeaponFireLockDuration"].GetValue<float>(); } set { this["WeaponFireLockDuration"].SetValue<float>(value); } }
        public EStateInterruptionPolicy RunningToAbilityInterruptionPolicy { get { return (EStateInterruptionPolicy)this["RunningToAbilityInterruptionPolicy"].GetValue<int>(); } set { this["RunningToAbilityInterruptionPolicy"].SetValue<int>((int)value); } }
        public void OnGameplayEventTriggered(UEObject EventData) { Invoke("OnGameplayEventTriggered", EventData); }
        public void _DimensionPlayerStateMachineComponent(UEObject MovementInputDecayTime, UEObject SlidingDuration, UEObject SlidingEnabledDelay, UEObject WeaponFireLockDuration, UEObject RunningToAbilityInterruptionPolicy) { Invoke("DimensionPlayerStateMachineComponent", MovementInputDecayTime, SlidingDuration, SlidingEnabledDelay, WeaponFireLockDuration, RunningToAbilityInterruptionPolicy); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionStateMachineComponent : DimensionActorComponent
    {
        public DimensionStateMachineComponent(nint addr) : base(addr) { }
        public DimensionStateMachineComponent() : base(0) { }
        public UEObject OnRestartDelegate { get { return this["OnRestartDelegate"]; } set { this["OnRestartDelegate"] = value; } }
        public Array<UEObject> StateClasses { get { return new Array<UEObject>(this["StateClasses"]); } set { this["StateClasses"] = value; } }
        public GameplayTag StartStateCategoryTag { get { return this[nameof(StartStateCategoryTag)].As<GameplayTag>(); } set { this["StartStateCategoryTag"] = value; } }
        public GameplayTagContainer TagsToCapture { get { return this[nameof(TagsToCapture)].As<GameplayTagContainer>(); } set { this["TagsToCapture"] = value; } }
        public Array<CountableGameplayTag> CustomConditions { get { return new Array<CountableGameplayTag>(this["CustomConditions"]); } set { this["CustomConditions"] = value; } }
        public Array<DimensionStateCustomProperty> CustomProperties { get { return new Array<DimensionStateCustomProperty>(this["CustomProperties"]); } set { this["CustomProperties"] = value; } }
        public Array<InputActionDefinition> InputsToCapture { get { return new Array<InputActionDefinition>(this["InputsToCapture"]); } set { this["InputsToCapture"] = value; } }
        public int TransitionLogLimit { get { return this["TransitionLogLimit"].GetValue<int>(); } set { this["TransitionLogLimit"].SetValue<int>(value); } }
        public Array<DimensionState> States { get { return new Array<DimensionState>(this["States"]); } set { this["States"] = value; } }
        public Array<DimensionStateEntry> StateEntries { get { return new Array<DimensionStateEntry>(this["StateEntries"]); } set { this["StateEntries"] = value; } }
        public UEObject OnStateChangeDelegate { get { return this["OnStateChangeDelegate"]; } set { this["OnStateChangeDelegate"] = value; } }
        public UEObject OnStateAddedOrReplacedDelegate { get { return this["OnStateAddedOrReplacedDelegate"]; } set { this["OnStateAddedOrReplacedDelegate"] = value; } }
        public UEObject PendingStateSubstitutions { get { return this["PendingStateSubstitutions"]; } set { this["PendingStateSubstitutions"] = value; } }
        public UEObject OnPostTransitionDelegate { get { return this["OnPostTransitionDelegate"]; } set { this["OnPostTransitionDelegate"] = value; } }
        public UEObject OnCustomConditionUpdateDelegate { get { return this["OnCustomConditionUpdateDelegate"]; } set { this["OnCustomConditionUpdateDelegate"] = value; } }
        public UEObject OnConditionTimerUpdateDelegate { get { return this["OnConditionTimerUpdateDelegate"]; } set { this["OnConditionTimerUpdateDelegate"] = value; } }
        public UEObject OnInputActionChangeDelegate { get { return this["OnInputActionChangeDelegate"]; } set { this["OnInputActionChangeDelegate"] = value; } }
        public UEObject OnCachedTagUpdateDelegate { get { return this["OnCachedTagUpdateDelegate"]; } set { this["OnCachedTagUpdateDelegate"] = value; } }
        public UEObject OnCustomPropertyUpdateDelegate { get { return this["OnCustomPropertyUpdateDelegate"]; } set { this["OnCustomPropertyUpdateDelegate"] = value; } }
        public UEObject OnInterruptionTriggerDelegate { get { return this["OnInterruptionTriggerDelegate"]; } set { this["OnInterruptionTriggerDelegate"] = value; } }
        public void UpdateCustomConditionBool(UEObject Condition, UEObject bValue) { Invoke("UpdateCustomConditionBool", Condition, bValue); }
        public void _DimensionStateMachineComponent(UEObject OnRestartDelegate, UEObject StateClasses, UEObject StartStateCategoryTag, UEObject TagsToCapture, UEObject CustomConditions, UEObject CustomProperties, UEObject InputsToCapture, UEObject TransitionLogLimit, UEObject States, UEObject StateEntries, UEObject OnStateChangeDelegate, UEObject OnStateAddedOrReplacedDelegate, UEObject PendingStateSubstitutions, UEObject OnPostTransitionDelegate, UEObject OnCustomConditionUpdateDelegate, UEObject OnConditionTimerUpdateDelegate, UEObject OnInputActionChangeDelegate, UEObject OnCachedTagUpdateDelegate, UEObject OnCustomPropertyUpdateDelegate, UEObject OnInterruptionTriggerDelegate) { Invoke("DimensionStateMachineComponent", OnRestartDelegate, StateClasses, StartStateCategoryTag, TagsToCapture, CustomConditions, CustomProperties, InputsToCapture, TransitionLogLimit, States, StateEntries, OnStateChangeDelegate, OnStateAddedOrReplacedDelegate, PendingStateSubstitutions, OnPostTransitionDelegate, OnCustomConditionUpdateDelegate, OnConditionTimerUpdateDelegate, OnInputActionChangeDelegate, OnCachedTagUpdateDelegate, OnCustomPropertyUpdateDelegate, OnInterruptionTriggerDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerSlidingState : DimensionPlayerState
    {
        public DimensionPlayerSlidingState(nint addr) : base(addr) { }
        public DimensionPlayerSlidingState() : base(0) { }
        public bool bEnableJumpingWhileSliding { get { return this["bEnableJumpingWhileSliding"].Flag; } set { this["bEnableJumpingWhileSliding"].Flag = value; } }
        public Vector SlidingDirection { get { return this[nameof(SlidingDirection)].As<Vector>(); } set { this["SlidingDirection"] = value; } }
    }
    public class DimensionPlayerRunningState : DimensionPlayerState
    {
        public DimensionPlayerRunningState(nint addr) : base(addr) { }
        public DimensionPlayerRunningState() : base(0) { }
    }
    public class DimensionPlayerInput : PlayerInput
    {
        public DimensionPlayerInput(nint addr) : base(addr) { }
        public DimensionPlayerInput() : base(0) { }
        public UEObject OnKeyMapsModifiedDelegate { get { return this["OnKeyMapsModifiedDelegate"]; } set { this["OnKeyMapsModifiedDelegate"] = value; } }
        public void StopBufferingInputActionForAll(UEObject ActionName) { Invoke("StopBufferingInputActionForAll", ActionName); }
        public void _DimensionPlayerInput(UEObject OnKeyMapsModifiedDelegate) { Invoke("DimensionPlayerInput", OnKeyMapsModifiedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerIdleState : DimensionPlayerState
    {
        public DimensionPlayerIdleState(nint addr) : base(addr) { }
        public DimensionPlayerIdleState() : base(0) { }
    }
    public class DimensionPlayerCrouchingState : DimensionPlayerState
    {
        public DimensionPlayerCrouchingState(nint addr) : base(addr) { }
        public DimensionPlayerCrouchingState() : base(0) { }
    }
    public class DimensionPlayerControllerBase : PlayerController
    {
        public DimensionPlayerControllerBase(nint addr) : base(addr) { }
        public DimensionPlayerControllerBase() : base(0) { }
        public UEObject OnGamePausedUnpausedDelegate { get { return this["OnGamePausedUnpausedDelegate"]; } set { this["OnGamePausedUnpausedDelegate"] = value; } }
        public UEObject OnUnpossessDelegate { get { return this["OnUnpossessDelegate"]; } set { this["OnUnpossessDelegate"] = value; } }
        public UEObject OnAnyKeyActionDelegate { get { return this["OnAnyKeyActionDelegate"]; } set { this["OnAnyKeyActionDelegate"] = value; } }
        public UEObject OnAnyAxisActionDelegate { get { return this["OnAnyAxisActionDelegate"]; } set { this["OnAnyAxisActionDelegate"] = value; } }
        public UEObject OnPlatformTypeSwitchDelegate { get { return this["OnPlatformTypeSwitchDelegate"]; } set { this["OnPlatformTypeSwitchDelegate"] = value; } }
        public bool bEnableInputSmoothing { get { return this["bEnableInputSmoothing"].Flag; } set { this["bEnableInputSmoothing"].Flag = value; } }
        public float InputSmoothingScale { get { return this["InputSmoothingScale"].GetValue<float>(); } set { this["InputSmoothingScale"].SetValue<float>(value); } }
        public bool bAllowGamepadSmoothing { get { return this["bAllowGamepadSmoothing"].Flag; } set { this["bAllowGamepadSmoothing"].Flag = value; } }
        public DimensionGamepadThumbstickProfile GamepadRotationProfile { get { return this[nameof(GamepadRotationProfile)].As<DimensionGamepadThumbstickProfile>(); } set { this["GamepadRotationProfile"] = value; } }
        public DimensionGamepadThumbstickProfile GamepadMovementProfile { get { return this[nameof(GamepadMovementProfile)].As<DimensionGamepadThumbstickProfile>(); } set { this["GamepadMovementProfile"] = value; } }
        public bool bLastInputFromGamepad { get { return this["bLastInputFromGamepad"].Flag; } set { this["bLastInputFromGamepad"].Flag = value; } }
        public float HipfireFOV { get { return this["HipfireFOV"].GetValue<float>(); } set { this["HipfireFOV"].SetValue<float>(value); } }
        public bool bLoweredCrosshair { get { return this["bLoweredCrosshair"].Flag; } set { this["bLoweredCrosshair"].Flag = value; } }
        public float AASlowDownControlMultiplier { get { return this["AASlowDownControlMultiplier"].GetValue<float>(); } set { this["AASlowDownControlMultiplier"].SetValue<float>(value); } }
        public Actor CurrentStickinessTarget { get { return this[nameof(CurrentStickinessTarget)].As<Actor>(); } set { this["CurrentStickinessTarget"] = value; } }
        public Actor BulletMagnetismTarget { get { return this[nameof(BulletMagnetismTarget)].As<Actor>(); } set { this["BulletMagnetismTarget"] = value; } }
        public Actor MainTargetActor { get { return this[nameof(MainTargetActor)].As<Actor>(); } set { this["MainTargetActor"] = value; } }
        public float AAStickinessRadiusMultiplier { get { return this["AAStickinessRadiusMultiplier"].GetValue<float>(); } set { this["AAStickinessRadiusMultiplier"].SetValue<float>(value); } }
        public float MinAAStickinessCircleRadius { get { return this["MinAAStickinessCircleRadius"].GetValue<float>(); } set { this["MinAAStickinessCircleRadius"].SetValue<float>(value); } }
        public float AAStickinessOuterHalfAngle { get { return this["AAStickinessOuterHalfAngle"].GetValue<float>(); } set { this["AAStickinessOuterHalfAngle"].SetValue<float>(value); } }
        public float AAStickinessInnerHalfAngle { get { return this["AAStickinessInnerHalfAngle"].GetValue<float>(); } set { this["AAStickinessInnerHalfAngle"].SetValue<float>(value); } }
        public float StickinessDotPower { get { return this["StickinessDotPower"].GetValue<float>(); } set { this["StickinessDotPower"].SetValue<float>(value); } }
        public bool bStickinessEnabled { get { return this["bStickinessEnabled"].Flag; } set { this["bStickinessEnabled"].Flag = value; } }
        public UEObject WeaponTraceDelegate { get { return this["WeaponTraceDelegate"]; } set { this["WeaponTraceDelegate"] = value; } }
        public UEObject OnBulletMagnetismTargetUpdateDelegate { get { return this["OnBulletMagnetismTargetUpdateDelegate"]; } set { this["OnBulletMagnetismTargetUpdateDelegate"] = value; } }
        public UEObject OnStickinessTargetUpdateDelegate { get { return this["OnStickinessTargetUpdateDelegate"]; } set { this["OnStickinessTargetUpdateDelegate"] = value; } }
        public UEObject OnMainTargetActorUpdateDelegate { get { return this["OnMainTargetActorUpdateDelegate"]; } set { this["OnMainTargetActorUpdateDelegate"] = value; } }
        public float AnalogGamepadCursorRadius { get { return this["AnalogGamepadCursorRadius"].GetValue<float>(); } set { this["AnalogGamepadCursorRadius"].SetValue<float>(value); } }
        public float AnalogMouseCursorRadius { get { return this["AnalogMouseCursorRadius"].GetValue<float>(); } set { this["AnalogMouseCursorRadius"].SetValue<float>(value); } }
        public float AnalogCursorDeadzone { get { return this["AnalogCursorDeadzone"].GetValue<float>(); } set { this["AnalogCursorDeadzone"].SetValue<float>(value); } }
        public float AnalogCursorMaxSpeed { get { return this["AnalogCursorMaxSpeed"].GetValue<float>(); } set { this["AnalogCursorMaxSpeed"].SetValue<float>(value); } }
        public float AnalogCursorStickySlowdown { get { return this["AnalogCursorStickySlowdown"].GetValue<float>(); } set { this["AnalogCursorStickySlowdown"].SetValue<float>(value); } }
        public UEObject ItemDropClass { get { return this["ItemDropClass"]; } set { this["ItemDropClass"] = value; } }
        public DimensionItemStorage ItemStorage { get { return this[nameof(ItemStorage)].As<DimensionItemStorage>(); } set { this["ItemStorage"] = value; } }
        public UEObject OnInventoryRefreshRequestedDelegate { get { return this["OnInventoryRefreshRequestedDelegate"]; } set { this["OnInventoryRefreshRequestedDelegate"] = value; } }
        public bool bHitMarkersEnabled { get { return this["bHitMarkersEnabled"].Flag; } set { this["bHitMarkersEnabled"].Flag = value; } }
        public bool bWarningMarkersEnabled { get { return this["bWarningMarkersEnabled"].Flag; } set { this["bWarningMarkersEnabled"].Flag = value; } }
        public List<string> PauserIDs { get { return this["PauserIDs"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<bool> WindowCursorEnabledStack { get { return this["WindowCursorEnabledStack"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public UEObject OnMenuWindowOpenedDelegate { get { return this["OnMenuWindowOpenedDelegate"]; } set { this["OnMenuWindowOpenedDelegate"] = value; } }
        public Vector2D HudAspectRatioLimit { get { return this[nameof(HudAspectRatioLimit)].As<Vector2D>(); } set { this["HudAspectRatioLimit"] = value; } }
        public UEObject OnInteractionComponentStackUpdatedDelegate { get { return this["OnInteractionComponentStackUpdatedDelegate"]; } set { this["OnInteractionComponentStackUpdatedDelegate"] = value; } }
        public void UpdateFOV(UEObject NewFOV) { Invoke("UpdateFOV", NewFOV); }
        public void _DimensionPlayerControllerBase(UEObject OnGamePausedUnpausedDelegate, UEObject OnUnpossessDelegate, UEObject OnAnyKeyActionDelegate, UEObject OnAnyAxisActionDelegate, UEObject OnPlatformTypeSwitchDelegate, UEObject bEnableInputSmoothing, UEObject InputSmoothingScale, UEObject bAllowGamepadSmoothing, UEObject GamepadRotationProfile, UEObject GamepadMovementProfile, UEObject bLastInputFromGamepad, UEObject HipfireFOV, UEObject bLoweredCrosshair, UEObject AASlowDownControlMultiplier, UEObject CurrentStickinessTarget, UEObject BulletMagnetismTarget, UEObject MainTargetActor, UEObject AAStickinessRadiusMultiplier, UEObject MinAAStickinessCircleRadius, UEObject AAStickinessOuterHalfAngle, UEObject AAStickinessInnerHalfAngle, UEObject StickinessDotPower, UEObject bStickinessEnabled, UEObject WeaponTraceDelegate, UEObject OnBulletMagnetismTargetUpdateDelegate, UEObject OnStickinessTargetUpdateDelegate, UEObject OnMainTargetActorUpdateDelegate, UEObject AnalogGamepadCursorRadius, UEObject AnalogMouseCursorRadius, UEObject AnalogCursorDeadzone, UEObject AnalogCursorMaxSpeed, UEObject AnalogCursorStickySlowdown, UEObject ItemDropClass, UEObject ItemStorage, UEObject OnInventoryRefreshRequestedDelegate, UEObject bHitMarkersEnabled, UEObject bWarningMarkersEnabled, UEObject PauserIDs, UEObject WindowCursorEnabledStack, UEObject OnMenuWindowOpenedDelegate, UEObject HudAspectRatioLimit, UEObject OnInteractionComponentStackUpdatedDelegate) { Invoke("DimensionPlayerControllerBase", OnGamePausedUnpausedDelegate, OnUnpossessDelegate, OnAnyKeyActionDelegate, OnAnyAxisActionDelegate, OnPlatformTypeSwitchDelegate, bEnableInputSmoothing, InputSmoothingScale, bAllowGamepadSmoothing, GamepadRotationProfile, GamepadMovementProfile, bLastInputFromGamepad, HipfireFOV, bLoweredCrosshair, AASlowDownControlMultiplier, CurrentStickinessTarget, BulletMagnetismTarget, MainTargetActor, AAStickinessRadiusMultiplier, MinAAStickinessCircleRadius, AAStickinessOuterHalfAngle, AAStickinessInnerHalfAngle, StickinessDotPower, bStickinessEnabled, WeaponTraceDelegate, OnBulletMagnetismTargetUpdateDelegate, OnStickinessTargetUpdateDelegate, OnMainTargetActorUpdateDelegate, AnalogGamepadCursorRadius, AnalogMouseCursorRadius, AnalogCursorDeadzone, AnalogCursorMaxSpeed, AnalogCursorStickySlowdown, ItemDropClass, ItemStorage, OnInventoryRefreshRequestedDelegate, bHitMarkersEnabled, bWarningMarkersEnabled, PauserIDs, WindowCursorEnabledStack, OnMenuWindowOpenedDelegate, HudAspectRatioLimit, OnInteractionComponentStackUpdatedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerCharacter : DimensionCharacter
    {
        public DimensionPlayerCharacter(nint addr) : base(addr) { }
        public DimensionPlayerCharacter() : base(0) { }
        public SkeletalMeshComponent Mesh1P { get { return this[nameof(Mesh1P)].As<SkeletalMeshComponent>(); } set { this["Mesh1P"] = value; } }
        public DimensionInventoryComponent InventoryComponent { get { return this[nameof(InventoryComponent)].As<DimensionInventoryComponent>(); } set { this["InventoryComponent"] = value; } }
        public DimensionPlayerStateMachineComponent StateMachine { get { return this[nameof(StateMachine)].As<DimensionPlayerStateMachineComponent>(); } set { this["StateMachine"] = value; } }
        public DimensionAimAssistComponent AimAssistComponent { get { return this[nameof(AimAssistComponent)].As<DimensionAimAssistComponent>(); } set { this["AimAssistComponent"] = value; } }
        public DimensionPlayerAttributeComponent PlayerAttributeComponent { get { return this[nameof(PlayerAttributeComponent)].As<DimensionPlayerAttributeComponent>(); } set { this["PlayerAttributeComponent"] = value; } }
        public DimensionRosaryComponent RosaryComponent { get { return this[nameof(RosaryComponent)].As<DimensionRosaryComponent>(); } set { this["RosaryComponent"] = value; } }
        public UEObject OnInstigatedDamageDelegate { get { return this["OnInstigatedDamageDelegate"]; } set { this["OnInstigatedDamageDelegate"] = value; } }
        public string SaveLoadActiveIncense { get { return this["SaveLoadActiveIncense"].ToString(); } set { /* String properties are read-only */ } }
        public string SaveLoadLastSelectedIncense { get { return this["SaveLoadLastSelectedIncense"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject OnAbilityCooldownUpdatedDelegate { get { return this["OnAbilityCooldownUpdatedDelegate"]; } set { this["OnAbilityCooldownUpdatedDelegate"] = value; } }
        public UEObject OnIncenseAttributeUpdatedDelegate { get { return this["OnIncenseAttributeUpdatedDelegate"]; } set { this["OnIncenseAttributeUpdatedDelegate"] = value; } }
        public float RemotePitch { get { return this["RemotePitch"].GetValue<float>(); } set { this["RemotePitch"].SetValue<float>(value); } }
        public float RemoteYaw { get { return this["RemoteYaw"].GetValue<float>(); } set { this["RemoteYaw"].SetValue<float>(value); } }
        public bool bColorReticleOnTargetingEnemy { get { return this["bColorReticleOnTargetingEnemy"].Flag; } set { this["bColorReticleOnTargetingEnemy"].Flag = value; } }
        public float OuterBulletMagnetismHalfAngle { get { return this["OuterBulletMagnetismHalfAngle"].GetValue<float>(); } set { this["OuterBulletMagnetismHalfAngle"].SetValue<float>(value); } }
        public float InnerBulletMagnetismHalfAngle { get { return this["InnerBulletMagnetismHalfAngle"].GetValue<float>(); } set { this["InnerBulletMagnetismHalfAngle"].SetValue<float>(value); } }
        public float CritShotBulletMagnetismHalfAngle { get { return this["CritShotBulletMagnetismHalfAngle"].GetValue<float>(); } set { this["CritShotBulletMagnetismHalfAngle"].SetValue<float>(value); } }
        public float InnerBulletMagnetismDot { get { return this["InnerBulletMagnetismDot"].GetValue<float>(); } set { this["InnerBulletMagnetismDot"].SetValue<float>(value); } }
        public float OuterBulletMagnetismDot { get { return this["OuterBulletMagnetismDot"].GetValue<float>(); } set { this["OuterBulletMagnetismDot"].SetValue<float>(value); } }
        public UEObject PreselectedBestBulletMagnetismTargetsThisFrame { get { return this["PreselectedBestBulletMagnetismTargetsThisFrame"]; } set { this["PreselectedBestBulletMagnetismTargetsThisFrame"] = value; } }
        public Vector HipfireAim { get { return this[nameof(HipfireAim)].As<Vector>(); } set { this["HipfireAim"] = value; } }
        public float BulletMagnetismCacheTime { get { return this["BulletMagnetismCacheTime"].GetValue<float>(); } set { this["BulletMagnetismCacheTime"].SetValue<float>(value); } }
        public float SmoothingHeightOffset { get { return this["SmoothingHeightOffset"].GetValue<float>(); } set { this["SmoothingHeightOffset"].SetValue<float>(value); } }
        public UEObject OnMeshOffsetUpdatedDelegate { get { return this["OnMeshOffsetUpdatedDelegate"]; } set { this["OnMeshOffsetUpdatedDelegate"] = value; } }
        public float LoweringModifier { get { return this["LoweringModifier"].GetValue<float>(); } set { this["LoweringModifier"].SetValue<float>(value); } }
        public bool bForceUnarmedAnimation { get { return this["bForceUnarmedAnimation"].Flag; } set { this["bForceUnarmedAnimation"].Flag = value; } }
        public bool bOverrideAutoReloadEnabled { get { return this["bOverrideAutoReloadEnabled"].Flag; } set { this["bOverrideAutoReloadEnabled"].Flag = value; } }
        public bool bAutoReloadEnabled { get { return this["bAutoReloadEnabled"].Flag; } set { this["bAutoReloadEnabled"].Flag = value; } }
        public UEObject JumpAbilityClass { get { return this["JumpAbilityClass"]; } set { this["JumpAbilityClass"] = value; } }
        public UEObject ExtraJumpsAbilityClass { get { return this["ExtraJumpsAbilityClass"]; } set { this["ExtraJumpsAbilityClass"] = value; } }
        public UEObject LandingSpeedThresholds { get { return this["LandingSpeedThresholds"]; } set { this["LandingSpeedThresholds"] = value; } }
        public float CrouchTime { get { return this["CrouchTime"].GetValue<float>(); } set { this["CrouchTime"].SetValue<float>(value); } }
        public float SlideCrouchTime { get { return this["SlideCrouchTime"].GetValue<float>(); } set { this["SlideCrouchTime"].SetValue<float>(value); } }
        public UEObject RunningGameplayEffectClass { get { return this["RunningGameplayEffectClass"]; } set { this["RunningGameplayEffectClass"] = value; } }
        public UEObject SlidingGameplayEffectClass { get { return this["SlidingGameplayEffectClass"]; } set { this["SlidingGameplayEffectClass"] = value; } }
        public float SprintOffset { get { return this["SprintOffset"].GetValue<float>(); } set { this["SprintOffset"].SetValue<float>(value); } }
        public UEObject OnPlayerJumpedDelegate { get { return this["OnPlayerJumpedDelegate"]; } set { this["OnPlayerJumpedDelegate"] = value; } }
        public UEObject OnPlayerDodged { get { return this["OnPlayerDodged"]; } set { this["OnPlayerDodged"] = value; } }
        public UEObject OnPlayerDashStart { get { return this["OnPlayerDashStart"]; } set { this["OnPlayerDashStart"] = value; } }
        public UEObject OnPlayerDashEnd { get { return this["OnPlayerDashEnd"]; } set { this["OnPlayerDashEnd"] = value; } }
        public bool bTriggeredDashInputDirectionValid { get { return this["bTriggeredDashInputDirectionValid"].Flag; } set { this["bTriggeredDashInputDirectionValid"].Flag = value; } }
        public EDimensionMovementDirection TriggeredDashInputDirection { get { return (EDimensionMovementDirection)this["TriggeredDashInputDirection"].GetValue<int>(); } set { this["TriggeredDashInputDirection"].SetValue<int>((int)value); } }
        public UEObject OnExhaustedStatusUpdateDelegate { get { return this["OnExhaustedStatusUpdateDelegate"]; } set { this["OnExhaustedStatusUpdateDelegate"] = value; } }
        public string CameraBoneName { get { return this["CameraBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public float InversedScreenRatio { get { return this["InversedScreenRatio"].GetValue<float>(); } set { this["InversedScreenRatio"].SetValue<float>(value); } }
        public float HorizontalFOV { get { return this["HorizontalFOV"].GetValue<float>(); } set { this["HorizontalFOV"].SetValue<float>(value); } }
        public bool bFirstPerson { get { return this["bFirstPerson"].Flag; } set { this["bFirstPerson"].Flag = value; } }
        public bool EnableThirdPerson { get { return this["EnableThirdPerson"].Flag; } set { this["EnableThirdPerson"].Flag = value; } }
        public bool EnableFirstPersonTargeting { get { return this["EnableFirstPersonTargeting"].Flag; } set { this["EnableFirstPersonTargeting"].Flag = value; } }
        public DimensionWeaponMontageSet SkillsMontageSet { get { return this[nameof(SkillsMontageSet)].As<DimensionWeaponMontageSet>(); } set { this["SkillsMontageSet"] = value; } }
        public DataTableRowHandle SkillsMontageSetHandle { get { return this[nameof(SkillsMontageSetHandle)].As<DataTableRowHandle>(); } set { this["SkillsMontageSetHandle"] = value; } }
        public DimensionWeaponMontageSet UnarmedMontageSet { get { return this[nameof(UnarmedMontageSet)].As<DimensionWeaponMontageSet>(); } set { this["UnarmedMontageSet"] = value; } }
        public DataTableRowHandle UnarmedMontageSetHandle { get { return this[nameof(UnarmedMontageSetHandle)].As<DataTableRowHandle>(); } set { this["UnarmedMontageSetHandle"] = value; } }
        public float AnimationControlScale { get { return this["AnimationControlScale"].GetValue<float>(); } set { this["AnimationControlScale"].SetValue<float>(value); } }
        public bool bForceAnimationControlRotationAndLocation { get { return this["bForceAnimationControlRotationAndLocation"].Flag; } set { this["bForceAnimationControlRotationAndLocation"].Flag = value; } }
        public GameplayTag PlayerClassTag { get { return this[nameof(PlayerClassTag)].As<GameplayTag>(); } set { this["PlayerClassTag"] = value; } }
        public DataTableRowHandle ActiveIncense { get { return this[nameof(ActiveIncense)].As<DataTableRowHandle>(); } set { this["ActiveIncense"] = value; } }
        public DataTableRowHandle LastSelectedIncense { get { return this[nameof(LastSelectedIncense)].As<DataTableRowHandle>(); } set { this["LastSelectedIncense"] = value; } }
        public GameplayAbilitySpecHandle ActiveIncenseHandle { get { return this[nameof(ActiveIncenseHandle)].As<GameplayAbilitySpecHandle>(); } set { this["ActiveIncenseHandle"] = value; } }
        public float MadnessThreshold { get { return this["MadnessThreshold"].GetValue<float>(); } set { this["MadnessThreshold"].SetValue<float>(value); } }
        public bool bMadnessRegenDelayed { get { return this["bMadnessRegenDelayed"].Flag; } set { this["bMadnessRegenDelayed"].Flag = value; } }
        public UEObject OnMadnessValueChangedDelegate { get { return this["OnMadnessValueChangedDelegate"]; } set { this["OnMadnessValueChangedDelegate"] = value; } }
        public UEObject OnMadnessThresholdCrossedDelegate { get { return this["OnMadnessThresholdCrossedDelegate"]; } set { this["OnMadnessThresholdCrossedDelegate"] = value; } }
        public UEObject OnMadnessDamageTakenDelegate { get { return this["OnMadnessDamageTakenDelegate"]; } set { this["OnMadnessDamageTakenDelegate"] = value; } }
        public UEObject OnGnosisValueChangedDelegate { get { return this["OnGnosisValueChangedDelegate"]; } set { this["OnGnosisValueChangedDelegate"] = value; } }
        public UEObject OnGnosisLevelUpCounterValueChangedDelegate { get { return this["OnGnosisLevelUpCounterValueChangedDelegate"]; } set { this["OnGnosisLevelUpCounterValueChangedDelegate"] = value; } }
        public Array<DimensionPerkComponent> SupportedPerkComponents { get { return new Array<DimensionPerkComponent>(this["SupportedPerkComponents"]); } set { this["SupportedPerkComponents"] = value; } }
        public Vector PositionOffset { get { return this[nameof(PositionOffset)].As<Vector>(); } set { this["PositionOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public UEObject OnPlayerEnterInteraction { get { return this["OnPlayerEnterInteraction"]; } set { this["OnPlayerEnterInteraction"] = value; } }
        public UEObject OnPlayerLeaveInteraction { get { return this["OnPlayerLeaveInteraction"]; } set { this["OnPlayerLeaveInteraction"] = value; } }
        public void UseStamina(UEObject StaminaUsed, UEObject StaminaUsagePolicy) { Invoke("UseStamina", StaminaUsed, StaminaUsagePolicy); }
        public void _DimensionPlayerCharacter(UEObject Mesh1P, UEObject InventoryComponent, UEObject StateMachine, UEObject AimAssistComponent, UEObject PlayerAttributeComponent, UEObject RosaryComponent, UEObject OnInstigatedDamageDelegate, UEObject SaveLoadActiveIncense, UEObject SaveLoadLastSelectedIncense, UEObject OnAbilityCooldownUpdatedDelegate, UEObject OnIncenseAttributeUpdatedDelegate, UEObject RemotePitch, UEObject RemoteYaw, UEObject bColorReticleOnTargetingEnemy, UEObject OuterBulletMagnetismHalfAngle, UEObject InnerBulletMagnetismHalfAngle, UEObject CritShotBulletMagnetismHalfAngle, UEObject InnerBulletMagnetismDot, UEObject OuterBulletMagnetismDot, UEObject PreselectedBestBulletMagnetismTargetsThisFrame, UEObject HipfireAim, UEObject BulletMagnetismCacheTime, UEObject SmoothingHeightOffset, UEObject OnMeshOffsetUpdatedDelegate, UEObject LoweringModifier, UEObject bForceUnarmedAnimation, UEObject bOverrideAutoReloadEnabled, UEObject bAutoReloadEnabled, UEObject JumpAbilityClass, UEObject ExtraJumpsAbilityClass, UEObject LandingSpeedThresholds, UEObject CrouchTime, UEObject SlideCrouchTime, UEObject RunningGameplayEffectClass, UEObject SlidingGameplayEffectClass, UEObject SprintOffset, UEObject OnPlayerJumpedDelegate, UEObject OnPlayerDodged, UEObject OnPlayerDashStart, UEObject OnPlayerDashEnd, UEObject bTriggeredDashInputDirectionValid, UEObject TriggeredDashInputDirection, UEObject OnExhaustedStatusUpdateDelegate, UEObject CameraBoneName, UEObject InversedScreenRatio, UEObject HorizontalFOV, UEObject bFirstPerson, UEObject EnableThirdPerson, UEObject EnableFirstPersonTargeting, UEObject SkillsMontageSet, UEObject SkillsMontageSetHandle, UEObject UnarmedMontageSet, UEObject UnarmedMontageSetHandle, UEObject AnimationControlScale, UEObject bForceAnimationControlRotationAndLocation, UEObject PlayerClassTag, UEObject ActiveIncense, UEObject LastSelectedIncense, UEObject ActiveIncenseHandle, UEObject MadnessThreshold, UEObject bMadnessRegenDelayed, UEObject OnMadnessValueChangedDelegate, UEObject OnMadnessThresholdCrossedDelegate, UEObject OnMadnessDamageTakenDelegate, UEObject OnGnosisValueChangedDelegate, UEObject OnGnosisLevelUpCounterValueChangedDelegate, UEObject SupportedPerkComponents, UEObject PositionOffset, UEObject RotationOffset, UEObject OnPlayerEnterInteraction, UEObject OnPlayerLeaveInteraction) { Invoke("DimensionPlayerCharacter", Mesh1P, InventoryComponent, StateMachine, AimAssistComponent, PlayerAttributeComponent, RosaryComponent, OnInstigatedDamageDelegate, SaveLoadActiveIncense, SaveLoadLastSelectedIncense, OnAbilityCooldownUpdatedDelegate, OnIncenseAttributeUpdatedDelegate, RemotePitch, RemoteYaw, bColorReticleOnTargetingEnemy, OuterBulletMagnetismHalfAngle, InnerBulletMagnetismHalfAngle, CritShotBulletMagnetismHalfAngle, InnerBulletMagnetismDot, OuterBulletMagnetismDot, PreselectedBestBulletMagnetismTargetsThisFrame, HipfireAim, BulletMagnetismCacheTime, SmoothingHeightOffset, OnMeshOffsetUpdatedDelegate, LoweringModifier, bForceUnarmedAnimation, bOverrideAutoReloadEnabled, bAutoReloadEnabled, JumpAbilityClass, ExtraJumpsAbilityClass, LandingSpeedThresholds, CrouchTime, SlideCrouchTime, RunningGameplayEffectClass, SlidingGameplayEffectClass, SprintOffset, OnPlayerJumpedDelegate, OnPlayerDodged, OnPlayerDashStart, OnPlayerDashEnd, bTriggeredDashInputDirectionValid, TriggeredDashInputDirection, OnExhaustedStatusUpdateDelegate, CameraBoneName, InversedScreenRatio, HorizontalFOV, bFirstPerson, EnableThirdPerson, EnableFirstPersonTargeting, SkillsMontageSet, SkillsMontageSetHandle, UnarmedMontageSet, UnarmedMontageSetHandle, AnimationControlScale, bForceAnimationControlRotationAndLocation, PlayerClassTag, ActiveIncense, LastSelectedIncense, ActiveIncenseHandle, MadnessThreshold, bMadnessRegenDelayed, OnMadnessValueChangedDelegate, OnMadnessThresholdCrossedDelegate, OnMadnessDamageTakenDelegate, OnGnosisValueChangedDelegate, OnGnosisLevelUpCounterValueChangedDelegate, SupportedPerkComponents, PositionOffset, RotationOffset, OnPlayerEnterInteraction, OnPlayerLeaveInteraction); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerCameraManager : PlayerCameraManager
    {
        public DimensionPlayerCameraManager(nint addr) : base(addr) { }
        public DimensionPlayerCameraManager() : base(0) { }
        public Vector FrontSightWorldLocation { get { return this[nameof(FrontSightWorldLocation)].As<Vector>(); } set { this["FrontSightWorldLocation"] = value; } }
        public void SetOverrideFOV(UEObject NewOverrideFOV) { Invoke("SetOverrideFOV", NewOverrideFOV); }
        public void _DimensionPlayerCameraManager(UEObject FrontSightWorldLocation) { Invoke("DimensionPlayerCameraManager", FrontSightWorldLocation); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerAttributeComponent : DimensionActorComponent
    {
        public DimensionPlayerAttributeComponent(nint addr) : base(addr) { }
        public DimensionPlayerAttributeComponent() : base(0) { }
        public int AttributeMaxValue { get { return this["AttributeMaxValue"].GetValue<int>(); } set { this["AttributeMaxValue"].SetValue<int>(value); } }
        public DataTableRowHandle RespecItemHandle { get { return this[nameof(RespecItemHandle)].As<DataTableRowHandle>(); } set { this["RespecItemHandle"] = value; } }
        public UEObject OnRespecTriggeredDelegate { get { return this["OnRespecTriggeredDelegate"]; } set { this["OnRespecTriggeredDelegate"] = value; } }
        public DataTable StatDataTable { get { return this[nameof(StatDataTable)].As<DataTable>(); } set { this["StatDataTable"] = value; } }
        public UEObject OnPlayerAttributeUpdatedDelegate { get { return this["OnPlayerAttributeUpdatedDelegate"]; } set { this["OnPlayerAttributeUpdatedDelegate"] = value; } }
        public CurveFloat LevelUpCostCurve { get { return this[nameof(LevelUpCostCurve)].As<CurveFloat>(); } set { this["LevelUpCostCurve"] = value; } }
        public void UpdateAttribute(UEObject PlayerAttribute, UEObject LevelDelta, UEObject OutUpdatedStats, UEObject bPayCost) { Invoke("UpdateAttribute", PlayerAttribute, LevelDelta, OutUpdatedStats, bPayCost); }
        public void _DimensionPlayerAttributeComponent(UEObject AttributeMaxValue, UEObject RespecItemHandle, UEObject OnRespecTriggeredDelegate, UEObject StatDataTable, UEObject OnPlayerAttributeUpdatedDelegate, UEObject LevelUpCostCurve) { Invoke("DimensionPlayerAttributeComponent", AttributeMaxValue, RespecItemHandle, OnRespecTriggeredDelegate, StatDataTable, OnPlayerAttributeUpdatedDelegate, LevelUpCostCurve); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerAttribSet : DimensionAttribSet
    {
        public DimensionPlayerAttribSet(nint addr) : base(addr) { }
        public DimensionPlayerAttribSet() : base(0) { }
        public float FleshLevel { get { return this["FleshLevel"].GetValue<float>(); } set { this["FleshLevel"].SetValue<float>(value); } }
        public float MindLevel { get { return this["MindLevel"].GetValue<float>(); } set { this["MindLevel"].SetValue<float>(value); } }
        public float BloodLevel { get { return this["BloodLevel"].GetValue<float>(); } set { this["BloodLevel"].SetValue<float>(value); } }
        public float WitcheryLevel { get { return this["WitcheryLevel"].GetValue<float>(); } set { this["WitcheryLevel"].SetValue<float>(value); } }
        public float ArsenalLevel { get { return this["ArsenalLevel"].GetValue<float>(); } set { this["ArsenalLevel"].SetValue<float>(value); } }
        public float FaithLevel { get { return this["FaithLevel"].GetValue<float>(); } set { this["FaithLevel"].SetValue<float>(value); } }
        public float FleshLevelModifier { get { return this["FleshLevelModifier"].GetValue<float>(); } set { this["FleshLevelModifier"].SetValue<float>(value); } }
        public float MindLevelModifier { get { return this["MindLevelModifier"].GetValue<float>(); } set { this["MindLevelModifier"].SetValue<float>(value); } }
        public float BloodLevelModifier { get { return this["BloodLevelModifier"].GetValue<float>(); } set { this["BloodLevelModifier"].SetValue<float>(value); } }
        public float WitcheryLevelModifier { get { return this["WitcheryLevelModifier"].GetValue<float>(); } set { this["WitcheryLevelModifier"].SetValue<float>(value); } }
        public float ArsenalLevelModifier { get { return this["ArsenalLevelModifier"].GetValue<float>(); } set { this["ArsenalLevelModifier"].SetValue<float>(value); } }
        public float FaithLevelModifier { get { return this["FaithLevelModifier"].GetValue<float>(); } set { this["FaithLevelModifier"].SetValue<float>(value); } }
        public float StartingFleshLevel { get { return this["StartingFleshLevel"].GetValue<float>(); } set { this["StartingFleshLevel"].SetValue<float>(value); } }
        public float StartingMindLevel { get { return this["StartingMindLevel"].GetValue<float>(); } set { this["StartingMindLevel"].SetValue<float>(value); } }
        public float StartingBloodLevel { get { return this["StartingBloodLevel"].GetValue<float>(); } set { this["StartingBloodLevel"].SetValue<float>(value); } }
        public float StartingWitcheryLevel { get { return this["StartingWitcheryLevel"].GetValue<float>(); } set { this["StartingWitcheryLevel"].SetValue<float>(value); } }
        public float StartingArsenalLevel { get { return this["StartingArsenalLevel"].GetValue<float>(); } set { this["StartingArsenalLevel"].SetValue<float>(value); } }
        public float StartingFaithLevel { get { return this["StartingFaithLevel"].GetValue<float>(); } set { this["StartingFaithLevel"].SetValue<float>(value); } }
        public float ActualFleshLevel { get { return this["ActualFleshLevel"].GetValue<float>(); } set { this["ActualFleshLevel"].SetValue<float>(value); } }
        public float ActualMindLevel { get { return this["ActualMindLevel"].GetValue<float>(); } set { this["ActualMindLevel"].SetValue<float>(value); } }
        public float ActualBloodLevel { get { return this["ActualBloodLevel"].GetValue<float>(); } set { this["ActualBloodLevel"].SetValue<float>(value); } }
        public float ActualWitcheryLevel { get { return this["ActualWitcheryLevel"].GetValue<float>(); } set { this["ActualWitcheryLevel"].SetValue<float>(value); } }
        public float ActualArsenalLevel { get { return this["ActualArsenalLevel"].GetValue<float>(); } set { this["ActualArsenalLevel"].SetValue<float>(value); } }
        public float ActualFaithLevel { get { return this["ActualFaithLevel"].GetValue<float>(); } set { this["ActualFaithLevel"].SetValue<float>(value); } }
        public float LevelPoints { get { return this["LevelPoints"].GetValue<float>(); } set { this["LevelPoints"].SetValue<float>(value); } }
        public float AvailableLevelPoints { get { return this["AvailableLevelPoints"].GetValue<float>(); } set { this["AvailableLevelPoints"].SetValue<float>(value); } }
        public float ActualLevel { get { return this["ActualLevel"].GetValue<float>(); } set { this["ActualLevel"].SetValue<float>(value); } }
        public float NormalizedLevel { get { return this["NormalizedLevel"].GetValue<float>(); } set { this["NormalizedLevel"].SetValue<float>(value); } }
        public float LightSpellCooldownMultiplier { get { return this["LightSpellCooldownMultiplier"].GetValue<float>(); } set { this["LightSpellCooldownMultiplier"].SetValue<float>(value); } }
        public float HeavySpellCooldownMultiplier { get { return this["HeavySpellCooldownMultiplier"].GetValue<float>(); } set { this["HeavySpellCooldownMultiplier"].SetValue<float>(value); } }
        public float MeleeCooldownMultiplier { get { return this["MeleeCooldownMultiplier"].GetValue<float>(); } set { this["MeleeCooldownMultiplier"].SetValue<float>(value); } }
        public float DashCooldownMultiplier { get { return this["DashCooldownMultiplier"].GetValue<float>(); } set { this["DashCooldownMultiplier"].SetValue<float>(value); } }
        public float LightSpellRechargeSpeed { get { return this["LightSpellRechargeSpeed"].GetValue<float>(); } set { this["LightSpellRechargeSpeed"].SetValue<float>(value); } }
        public float HeavySpellRechargeSpeed { get { return this["HeavySpellRechargeSpeed"].GetValue<float>(); } set { this["HeavySpellRechargeSpeed"].SetValue<float>(value); } }
        public float MeleeRechargeSpeed { get { return this["MeleeRechargeSpeed"].GetValue<float>(); } set { this["MeleeRechargeSpeed"].SetValue<float>(value); } }
        public float DashRechargeSpeed { get { return this["DashRechargeSpeed"].GetValue<float>(); } set { this["DashRechargeSpeed"].SetValue<float>(value); } }
        public float FinalLightSpellCooldownMultiplier { get { return this["FinalLightSpellCooldownMultiplier"].GetValue<float>(); } set { this["FinalLightSpellCooldownMultiplier"].SetValue<float>(value); } }
        public float FinalHeavySpellCooldownMultiplier { get { return this["FinalHeavySpellCooldownMultiplier"].GetValue<float>(); } set { this["FinalHeavySpellCooldownMultiplier"].SetValue<float>(value); } }
        public float FinalMeleeCooldownMultiplier { get { return this["FinalMeleeCooldownMultiplier"].GetValue<float>(); } set { this["FinalMeleeCooldownMultiplier"].SetValue<float>(value); } }
        public float FinalDashCooldownMultiplier { get { return this["FinalDashCooldownMultiplier"].GetValue<float>(); } set { this["FinalDashCooldownMultiplier"].SetValue<float>(value); } }
        public float LightSpellCostMultiplier { get { return this["LightSpellCostMultiplier"].GetValue<float>(); } set { this["LightSpellCostMultiplier"].SetValue<float>(value); } }
        public float HeavySpellCostMultiplier { get { return this["HeavySpellCostMultiplier"].GetValue<float>(); } set { this["HeavySpellCostMultiplier"].SetValue<float>(value); } }
        public float MeleeCostMultiplier { get { return this["MeleeCostMultiplier"].GetValue<float>(); } set { this["MeleeCostMultiplier"].SetValue<float>(value); } }
        public float DashCostMultiplier { get { return this["DashCostMultiplier"].GetValue<float>(); } set { this["DashCostMultiplier"].SetValue<float>(value); } }
        public float DamageCooldownRequiredPerSecond { get { return this["DamageCooldownRequiredPerSecond"].GetValue<float>(); } set { this["DamageCooldownRequiredPerSecond"].SetValue<float>(value); } }
        public float Metanoia { get { return this["Metanoia"].GetValue<float>(); } set { this["Metanoia"].SetValue<float>(value); } }
        public float FinalWitchfireGainMultiplier { get { return this["FinalWitchfireGainMultiplier"].GetValue<float>(); } set { this["FinalWitchfireGainMultiplier"].SetValue<float>(value); } }
        public float WitchfireSavedOnDeath { get { return this["WitchfireSavedOnDeath"].GetValue<float>(); } set { this["WitchfireSavedOnDeath"].SetValue<float>(value); } }
        public float MaxMadness { get { return this["MaxMadness"].GetValue<float>(); } set { this["MaxMadness"].SetValue<float>(value); } }
        public float Madness { get { return this["Madness"].GetValue<float>(); } set { this["Madness"].SetValue<float>(value); } }
        public float MadnessResistance { get { return this["MadnessResistance"].GetValue<float>(); } set { this["MadnessResistance"].SetValue<float>(value); } }
        public float MadnessMaxHealthDamage { get { return this["MadnessMaxHealthDamage"].GetValue<float>(); } set { this["MadnessMaxHealthDamage"].SetValue<float>(value); } }
        public float MadnessRegenSpeed { get { return this["MadnessRegenSpeed"].GetValue<float>(); } set { this["MadnessRegenSpeed"].SetValue<float>(value); } }
        public float MadnessRegenDelay { get { return this["MadnessRegenDelay"].GetValue<float>(); } set { this["MadnessRegenDelay"].SetValue<float>(value); } }
        public float MaxCalamityLevel { get { return this["MaxCalamityLevel"].GetValue<float>(); } set { this["MaxCalamityLevel"].SetValue<float>(value); } }
        public float MinGnosisLevel { get { return this["MinGnosisLevel"].GetValue<float>(); } set { this["MinGnosisLevel"].SetValue<float>(value); } }
        public float MaxGnosisLevel { get { return this["MaxGnosisLevel"].GetValue<float>(); } set { this["MaxGnosisLevel"].SetValue<float>(value); } }
        public float GnosisLevel { get { return this["GnosisLevel"].GetValue<float>(); } set { this["GnosisLevel"].SetValue<float>(value); } }
        public float GnosisLevelUpCounter { get { return this["GnosisLevelUpCounter"].GetValue<float>(); } set { this["GnosisLevelUpCounter"].SetValue<float>(value); } }
        public float GnosisWitchfireMultiplier { get { return this["GnosisWitchfireMultiplier"].GetValue<float>(); } set { this["GnosisWitchfireMultiplier"].SetValue<float>(value); } }
        public float Scavenging { get { return this["Scavenging"].GetValue<float>(); } set { this["Scavenging"].SetValue<float>(value); } }
        public float Providence { get { return this["Providence"].GetValue<float>(); } set { this["Providence"].SetValue<float>(value); } }
        public float DivineIntervention { get { return this["DivineIntervention"].GetValue<float>(); } set { this["DivineIntervention"].SetValue<float>(value); } }
        public float BlessedAim { get { return this["BlessedAim"].GetValue<float>(); } set { this["BlessedAim"].SetValue<float>(value); } }
        public float ProvidenceTripleRewardsChance { get { return this["ProvidenceTripleRewardsChance"].GetValue<float>(); } set { this["ProvidenceTripleRewardsChance"].SetValue<float>(value); } }
        public float BlessedAimDamageMultiplier { get { return this["BlessedAimDamageMultiplier"].GetValue<float>(); } set { this["BlessedAimDamageMultiplier"].SetValue<float>(value); } }
        public float WeaponHandlingStat { get { return this["WeaponHandlingStat"].GetValue<float>(); } set { this["WeaponHandlingStat"].SetValue<float>(value); } }
        public float WeaponMaxAmmoStat { get { return this["WeaponMaxAmmoStat"].GetValue<float>(); } set { this["WeaponMaxAmmoStat"].SetValue<float>(value); } }
        public float WeaponRangeStat { get { return this["WeaponRangeStat"].GetValue<float>(); } set { this["WeaponRangeStat"].SetValue<float>(value); } }
        public float IncenseActivationChanceModifier { get { return this["IncenseActivationChanceModifier"].GetValue<float>(); } set { this["IncenseActivationChanceModifier"].SetValue<float>(value); } }
        public float IncensePowerModifier { get { return this["IncensePowerModifier"].GetValue<float>(); } set { this["IncensePowerModifier"].SetValue<float>(value); } }
    }
    public class DimensionPlayerAirborneState : DimensionPlayerState
    {
        public DimensionPlayerAirborneState(nint addr) : base(addr) { }
        public DimensionPlayerAirborneState() : base(0) { }
        public UEObject CanContinueRunningAfterLanding() { return InvokeUEObject("CanContinueRunningAfterLanding"); }
        public void _DimensionPlayerAirborneState() { Invoke("DimensionPlayerAirborneState"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlayerState : DimensionState
    {
        public DimensionPlayerState(nint addr) : base(addr) { }
        public DimensionPlayerState() : base(0) { }
    }
    public class DimensionState : DimensionObject
    {
        public DimensionState(nint addr) : base(addr) { }
        public DimensionState() : base(0) { }
        public GameplayTag StateTag { get { return this[nameof(StateTag)].As<GameplayTag>(); } set { this["StateTag"] = value; } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public Array<DimensionStateTransition> IncomingTransitions { get { return new Array<DimensionStateTransition>(this["IncomingTransitions"]); } set { this["IncomingTransitions"] = value; } }
        public Array<DimensionStateTransition> OutgoingTransitions { get { return new Array<DimensionStateTransition>(this["OutgoingTransitions"]); } set { this["OutgoingTransitions"] = value; } }
        public Array<GameplayTag> TransitionCategoryTagPriorityList { get { return new Array<GameplayTag>(this["TransitionCategoryTagPriorityList"]); } set { this["TransitionCategoryTagPriorityList"] = value; } }
        public Array<DimensionStateInterruptDefinition> StateInterruptions { get { return new Array<DimensionStateInterruptDefinition>(this["StateInterruptions"]); } set { this["StateInterruptions"] = value; } }
        public Array<CountableGameplayTag> LockingTags { get { return new Array<CountableGameplayTag>(this["LockingTags"]); } set { this["LockingTags"] = value; } }
        public Array<CountableGameplayTag> OwnerLockingTags { get { return new Array<CountableGameplayTag>(this["OwnerLockingTags"]); } set { this["OwnerLockingTags"] = value; } }
        public UEObject OnLockUpdatedDelegate { get { return this["OnLockUpdatedDelegate"]; } set { this["OnLockUpdatedDelegate"] = value; } }
        public void RemoveOwnerLockingTag(UEObject OwnerLockingTag) { Invoke("RemoveOwnerLockingTag", OwnerLockingTag); }
        public void _DimensionState(UEObject StateTag, UEObject CategoryTag, UEObject Name, UEObject IncomingTransitions, UEObject OutgoingTransitions, UEObject TransitionCategoryTagPriorityList, UEObject StateInterruptions, UEObject LockingTags, UEObject OwnerLockingTags, UEObject OnLockUpdatedDelegate) { Invoke("DimensionState", StateTag, CategoryTag, Name, IncomingTransitions, OutgoingTransitions, TransitionCategoryTagPriorityList, StateInterruptions, LockingTags, OwnerLockingTags, OnLockUpdatedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPlanarReflection : PlanarReflection
    {
        public DimensionPlanarReflection(nint addr) : base(addr) { }
        public DimensionPlanarReflection() : base(0) { }
        public Array<UEObject> PlanarReflectionConditionActors { get { return new Array<UEObject>(this["PlanarReflectionConditionActors"]); } set { this["PlanarReflectionConditionActors"] = value; } }
    }
    public class DimensionPerkInterface : Interface
    {
        public DimensionPerkInterface(nint addr) : base(addr) { }
        public DimensionPerkInterface() : base(0) { }
    }
    public class DimensionPerkComponent : DimensionActorComponent
    {
        public DimensionPerkComponent(nint addr) : base(addr) { }
        public DimensionPerkComponent() : base(0) { }
        public UEObject OnPerkUpdateDelegate { get { return this["OnPerkUpdateDelegate"]; } set { this["OnPerkUpdateDelegate"] = value; } }
        public UEObject OnInstancedPerkUpdateDelegate { get { return this["OnInstancedPerkUpdateDelegate"]; } set { this["OnInstancedPerkUpdateDelegate"] = value; } }
        public Array<DimensionPerkAbility> Perks { get { return new Array<DimensionPerkAbility>(this["Perks"]); } set { this["Perks"] = value; } }
        public Array<DimensionPerkAbility> PendingDisablePerks { get { return new Array<DimensionPerkAbility>(this["PendingDisablePerks"]); } set { this["PendingDisablePerks"] = value; } }
        public UEObject PerkCooldownHandles { get { return this["PerkCooldownHandles"]; } set { this["PerkCooldownHandles"] = value; } }
        public void RemovePerk(UEObject PerkClass) { Invoke("RemovePerk", PerkClass); }
        public void _DimensionPerkComponent(UEObject OnPerkUpdateDelegate, UEObject OnInstancedPerkUpdateDelegate, UEObject Perks, UEObject PendingDisablePerks, UEObject PerkCooldownHandles) { Invoke("DimensionPerkComponent", OnPerkUpdateDelegate, OnInstancedPerkUpdateDelegate, Perks, PendingDisablePerks, PerkCooldownHandles); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPerkAbility : DimensionGameplayAbility
    {
        public DimensionPerkAbility(nint addr) : base(addr) { }
        public DimensionPerkAbility() : base(0) { }
        public bool bTickWhenDisabled { get { return this["bTickWhenDisabled"].Flag; } set { this["bTickWhenDisabled"].Flag = value; } }
        public bool bEnabled { get { return this["bEnabled"].Flag; } set { this["bEnabled"].Flag = value; } }
        public bool bInstanced { get { return this["bInstanced"].Flag; } set { this["bInstanced"].Flag = value; } }
        public bool bPendingRemove { get { return this["bPendingRemove"].Flag; } set { this["bPendingRemove"].Flag = value; } }
        public EPerkAbilityActivationType ActivationPolicy { get { return (EPerkAbilityActivationType)this["ActivationPolicy"].GetValue<int>(); } set { this["ActivationPolicy"].SetValue<int>((int)value); } }
        public GameplayTagContainer ActivationTags { get { return this[nameof(ActivationTags)].As<GameplayTagContainer>(); } set { this["ActivationTags"] = value; } }
        public bool bExclusiveTriggerPolicy { get { return this["bExclusiveTriggerPolicy"].Flag; } set { this["bExclusiveTriggerPolicy"].Flag = value; } }
        public bool bEnableSupport { get { return this["bEnableSupport"].Flag; } set { this["bEnableSupport"].Flag = value; } }
        public Actor SupportedActor { get { return this[nameof(SupportedActor)].As<Actor>(); } set { this["SupportedActor"] = value; } }
        public bool bEnableNonInstancedAbilityNotifies { get { return this["bEnableNonInstancedAbilityNotifies"].Flag; } set { this["bEnableNonInstancedAbilityNotifies"].Flag = value; } }
        public bool bTriggerOnInstigatedDamageWhenDisabled { get { return this["bTriggerOnInstigatedDamageWhenDisabled"].Flag; } set { this["bTriggerOnInstigatedDamageWhenDisabled"].Flag = value; } }
        public bool bTriggerOnNonDamageHitWhenDisabled { get { return this["bTriggerOnNonDamageHitWhenDisabled"].Flag; } set { this["bTriggerOnNonDamageHitWhenDisabled"].Flag = value; } }
        public bool bTriggerOnDamageTakenWhenDisabled { get { return this["bTriggerOnDamageTakenWhenDisabled"].Flag; } set { this["bTriggerOnDamageTakenWhenDisabled"].Flag = value; } }
        public bool bTriggerGameplayEventsWhenDisabled { get { return this["bTriggerGameplayEventsWhenDisabled"].Flag; } set { this["bTriggerGameplayEventsWhenDisabled"].Flag = value; } }
        public void SynchronizeInstancedPerk(UEObject DefaultPerk, UEObject bInstancedPerkEnabled) { Invoke("SynchronizeInstancedPerk", DefaultPerk, bInstancedPerkEnabled); }
        public void _DimensionPerkAbility(UEObject bTickWhenDisabled, UEObject bEnabled, UEObject bInstanced, UEObject bPendingRemove, UEObject ActivationPolicy, UEObject ActivationTags, UEObject bExclusiveTriggerPolicy, UEObject bEnableSupport, UEObject SupportedActor, UEObject bEnableNonInstancedAbilityNotifies, UEObject bTriggerOnInstigatedDamageWhenDisabled, UEObject bTriggerOnNonDamageHitWhenDisabled, UEObject bTriggerOnDamageTakenWhenDisabled, UEObject bTriggerGameplayEventsWhenDisabled) { Invoke("DimensionPerkAbility", bTickWhenDisabled, bEnabled, bInstanced, bPendingRemove, ActivationPolicy, ActivationTags, bExclusiveTriggerPolicy, bEnableSupport, SupportedActor, bEnableNonInstancedAbilityNotifies, bTriggerOnInstigatedDamageWhenDisabled, bTriggerOnNonDamageHitWhenDisabled, bTriggerOnDamageTakenWhenDisabled, bTriggerGameplayEventsWhenDisabled); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionPathFollowingComponent : CrowdFollowingComponent
    {
        public DimensionPathFollowingComponent(nint addr) : base(addr) { }
        public DimensionPathFollowingComponent() : base(0) { }
        public UEObject PathWaypoints { get { return this["PathWaypoints"]; } set { this["PathWaypoints"] = value; } }
        public UEObject IsStopping() { return InvokeUEObject("IsStopping"); }
        public void _DimensionPathFollowingComponent(UEObject PathWaypoints) { Invoke("DimensionPathFollowingComponent", PathWaypoints); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionParticleSystemComponent : ParticleSystemComponent
    {
        public DimensionParticleSystemComponent(nint addr) : base(addr) { }
        public DimensionParticleSystemComponent() : base(0) { }
        public void SetTickEnabled(UEObject bEnabled) { Invoke("SetTickEnabled", bEnabled); }
        public void _DimensionParticleSystemComponent() { Invoke("DimensionParticleSystemComponent"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionObjectPoolInterface : Interface
    {
        public DimensionObjectPoolInterface(nint addr) : base(addr) { }
        public DimensionObjectPoolInterface() : base(0) { }
        public UEObject ShouldRecycle() { return InvokeUEObject("ShouldRecycle"); }
        public void _DimensionObjectPoolInterface() { Invoke("DimensionObjectPoolInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionObjectPool : DimensionObject
    {
        public DimensionObjectPool(nint addr) : base(addr) { }
        public DimensionObjectPool() : base(0) { }
        public UEObject ObjectPoolClass { get { return this["ObjectPoolClass"]; } set { this["ObjectPoolClass"] = value; } }
        public UEObject ObjectOuter { get { return this[nameof(ObjectOuter)]; } set { this["ObjectOuter"] = value; } }
        public bool bCycleThroughAvailableObjects { get { return this["bCycleThroughAvailableObjects"].Flag; } set { this["bCycleThroughAvailableObjects"].Flag = value; } }
        public bool bAutoRefill { get { return this["bAutoRefill"].Flag; } set { this["bAutoRefill"].Flag = value; } }
        public bool bCallDelegatesForScheduledObjectsOnly { get { return this["bCallDelegatesForScheduledObjectsOnly"].Flag; } set { this["bCallDelegatesForScheduledObjectsOnly"].Flag = value; } }
        public bool bAutoRecycle { get { return this["bAutoRecycle"].Flag; } set { this["bAutoRecycle"].Flag = value; } }
        public Array<UEObject> ObjectsInUse { get { return new Array<UEObject>(this["ObjectsInUse"]); } set { this["ObjectsInUse"] = value; } }
        public Array<UEObject> AvailableObjects { get { return new Array<UEObject>(this["AvailableObjects"]); } set { this["AvailableObjects"] = value; } }
        public UEObject TimestampMap { get { return this["TimestampMap"]; } set { this["TimestampMap"] = value; } }
        public Array<UEObject> DynamicObjectBindings { get { return new Array<UEObject>(this["DynamicObjectBindings"]); } set { this["DynamicObjectBindings"] = value; } }
        public Array<UEObject> DynamicActorBindings { get { return new Array<UEObject>(this["DynamicActorBindings"]); } set { this["DynamicActorBindings"] = value; } }
        public Array<UEObject> DynamicDeferredActorBindings { get { return new Array<UEObject>(this["DynamicDeferredActorBindings"]); } set { this["DynamicDeferredActorBindings"] = value; } }
        public int AutoIncrement { get { return this["AutoIncrement"].GetValue<int>(); } set { this["AutoIncrement"].SetValue<int>(value); } }
        public int AutoShrinkThreshold { get { return this["AutoShrinkThreshold"].GetValue<int>(); } set { this["AutoShrinkThreshold"].SetValue<int>(value); } }
        public SDK.Script.CoreUObject.Transform ActorTransform { get { return this[nameof(ActorTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["ActorTransform"] = value; } }
        public Pawn ActorInstigator { get { return this[nameof(ActorInstigator)].As<Pawn>(); } set { this["ActorInstigator"] = value; } }
        public ESpawnActorCollisionHandlingMethod ActorSpawnCollisionHandlingMethod { get { return (ESpawnActorCollisionHandlingMethod)this["ActorSpawnCollisionHandlingMethod"].GetValue<int>(); } set { this["ActorSpawnCollisionHandlingMethod"].SetValue<int>((int)value); } }
        public DimensionAllocator Allocator { get { return this[nameof(Allocator)].As<DimensionAllocator>(); } set { this["Allocator"] = value; } }
        public void ShrinkTo(UEObject Count) { Invoke("ShrinkTo", Count); }
        public void _DimensionObjectPool(UEObject ObjectPoolClass, UEObject ObjectOuter, UEObject bCycleThroughAvailableObjects, UEObject bAutoRefill, UEObject bCallDelegatesForScheduledObjectsOnly, UEObject bAutoRecycle, UEObject ObjectsInUse, UEObject AvailableObjects, UEObject TimestampMap, UEObject DynamicObjectBindings, UEObject DynamicActorBindings, UEObject DynamicDeferredActorBindings, UEObject AutoIncrement, UEObject AutoShrinkThreshold, UEObject ActorTransform, UEObject ActorInstigator, UEObject ActorSpawnCollisionHandlingMethod, UEObject Allocator) { Invoke("DimensionObjectPool", ObjectPoolClass, ObjectOuter, bCycleThroughAvailableObjects, bAutoRefill, bCallDelegatesForScheduledObjectsOnly, bAutoRecycle, ObjectsInUse, AvailableObjects, TimestampMap, DynamicObjectBindings, DynamicActorBindings, DynamicDeferredActorBindings, AutoIncrement, AutoShrinkThreshold, ActorTransform, ActorInstigator, ActorSpawnCollisionHandlingMethod, Allocator); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class MissionObjective : UEObject
    {
        public MissionObjective(nint addr) : base(addr) { }
        public MissionObjective() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public void BindObjective(UEObject Text, UEObject BindingName) { Invoke("BindObjective", Text, BindingName); }
        public void _MissionObjective(UEObject Name) { Invoke("MissionObjective", Name); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionObjectInterface : Interface
    {
        public DimensionObjectInterface(nint addr) : base(addr) { }
        public DimensionObjectInterface() : base(0) { }
        public UEObject GetObjectTag() { return InvokeUEObject("GetObjectTag"); }
        public void _DimensionObjectInterface() { Invoke("DimensionObjectInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionNodeTriggerVolume : TriggerVolume
    {
        public DimensionNodeTriggerVolume(nint addr) : base(addr) { }
        public DimensionNodeTriggerVolume() : base(0) { }
        public Array<DimensionSpawnNode> SpawnNodesToActivate { get { return new Array<DimensionSpawnNode>(this["SpawnNodesToActivate"]); } set { this["SpawnNodesToActivate"] = value; } }
    }
    public class DimensionNavGraphFilter_RestrictedVolume : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_RestrictedVolume(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_RestrictedVolume() : base(0) { }
    }
    public class DimensionNavGraphFilter_ProjectilePosition : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_ProjectilePosition(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_ProjectilePosition() : base(0) { }
    }
    public class DimensionNavGraphFilter_EnemyVisibility : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_EnemyVisibility(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_EnemyVisibility() : base(0) { }
    }
    public class DimensionNavGraphFilter_EnemyProximity : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_EnemyProximity(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_EnemyProximity() : base(0) { }
    }
    public class DimensionNavGraphFilter_EnemyInfluence : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_EnemyInfluence(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_EnemyInfluence() : base(0) { }
    }
    public class DimensionNavGraphFilter_DistanceToNavMeshEdge : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_DistanceToNavMeshEdge(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_DistanceToNavMeshEdge() : base(0) { }
        public float MinDistanceToNavMesh { get { return this["MinDistanceToNavMesh"].GetValue<float>(); } set { this["MinDistanceToNavMesh"].SetValue<float>(value); } }
    }
    public class DimensionNavGraphFilter_AllyPosition : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_AllyPosition(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_AllyPosition() : base(0) { }
    }
    public class DimensionNavGraphFilter_AllyPath : DimensionNavGraphFilter
    {
        public DimensionNavGraphFilter_AllyPath(nint addr) : base(addr) { }
        public DimensionNavGraphFilter_AllyPath() : base(0) { }
    }
    public class DimensionNavActor : AbilityActor
    {
        public DimensionNavActor(nint addr) : base(addr) { }
        public DimensionNavActor() : base(0) { }
        public NavAgentProperties NavAgentProps { get { return this[nameof(NavAgentProps)].As<NavAgentProperties>(); } set { this["NavAgentProps"] = value; } }
    }
    public class DimensionMovementComponent : CharacterMovementComponent
    {
        public DimensionMovementComponent(nint addr) : base(addr) { }
        public DimensionMovementComponent() : base(0) { }
        public EStaminaRequirementPolicy RunningStaminaRequirementPolicy { get { return (EStaminaRequirementPolicy)this["RunningStaminaRequirementPolicy"].GetValue<int>(); } set { this["RunningStaminaRequirementPolicy"].SetValue<int>((int)value); } }
        public EStaminaUsagePolicy RunningStaminaUsagePolicy { get { return (EStaminaUsagePolicy)this["RunningStaminaUsagePolicy"].GetValue<int>(); } set { this["RunningStaminaUsagePolicy"].SetValue<int>((int)value); } }
        public float RunningMinimumStamina { get { return this["RunningMinimumStamina"].GetValue<float>(); } set { this["RunningMinimumStamina"].SetValue<float>(value); } }
        public bool bNeedStaminaToContinueRunning { get { return this["bNeedStaminaToContinueRunning"].Flag; } set { this["bNeedStaminaToContinueRunning"].Flag = value; } }
        public bool bUseStaminaForRunning { get { return this["bUseStaminaForRunning"].Flag; } set { this["bUseStaminaForRunning"].Flag = value; } }
        public float ExhaustedRunningMultiplier { get { return this["ExhaustedRunningMultiplier"].GetValue<float>(); } set { this["ExhaustedRunningMultiplier"].SetValue<float>(value); } }
        public bool bApplyStaminaMovementModifierOnlyIfExhausted { get { return this["bApplyStaminaMovementModifierOnlyIfExhausted"].Flag; } set { this["bApplyStaminaMovementModifierOnlyIfExhausted"].Flag = value; } }
        public bool bAlwaysApplyExhaustionMultiplier { get { return this["bAlwaysApplyExhaustionMultiplier"].Flag; } set { this["bAlwaysApplyExhaustionMultiplier"].Flag = value; } }
        public bool bAlwaysApplyStaminaModifier { get { return this["bAlwaysApplyStaminaModifier"].Flag; } set { this["bAlwaysApplyStaminaModifier"].Flag = value; } }
        public bool bAlwaysApplyOnHitPenaltyModifier { get { return this["bAlwaysApplyOnHitPenaltyModifier"].Flag; } set { this["bAlwaysApplyOnHitPenaltyModifier"].Flag = value; } }
        public bool bAlwaysApplySlowedModifier { get { return this["bAlwaysApplySlowedModifier"].Flag; } set { this["bAlwaysApplySlowedModifier"].Flag = value; } }
        public bool bAlwaysApplySnaredModifier { get { return this["bAlwaysApplySnaredModifier"].Flag; } set { this["bAlwaysApplySnaredModifier"].Flag = value; } }
        public bool bAlwaysApplyWaterStatusModifier { get { return this["bAlwaysApplyWaterStatusModifier"].Flag; } set { this["bAlwaysApplyWaterStatusModifier"].Flag = value; } }
        public EStaminaRequirementPolicy SlideStaminaRequirementPolicy { get { return (EStaminaRequirementPolicy)this["SlideStaminaRequirementPolicy"].GetValue<int>(); } set { this["SlideStaminaRequirementPolicy"].SetValue<int>((int)value); } }
        public EStaminaUsagePolicy SlideStaminaUsagePolicy { get { return (EStaminaUsagePolicy)this["SlideStaminaUsagePolicy"].GetValue<int>(); } set { this["SlideStaminaUsagePolicy"].SetValue<int>((int)value); } }
        public float ExhaustedSlideMultiplier { get { return this["ExhaustedSlideMultiplier"].GetValue<float>(); } set { this["ExhaustedSlideMultiplier"].SetValue<float>(value); } }
        public bool bStopSlideMovementWhenBlocked { get { return this["bStopSlideMovementWhenBlocked"].Flag; } set { this["bStopSlideMovementWhenBlocked"].Flag = value; } }
        public float DoubleJumpVelocityBoost { get { return this["DoubleJumpVelocityBoost"].GetValue<float>(); } set { this["DoubleJumpVelocityBoost"].SetValue<float>(value); } }
        public Array<StringFloatPair> GravityOverrides { get { return new Array<StringFloatPair>(this["GravityOverrides"]); } set { this["GravityOverrides"] = value; } }
        public float MinDashMultiplier { get { return this["MinDashMultiplier"].GetValue<float>(); } set { this["MinDashMultiplier"].SetValue<float>(value); } }
        public bool bScaleDashLengthWithSlowedModifier { get { return this["bScaleDashLengthWithSlowedModifier"].Flag; } set { this["bScaleDashLengthWithSlowedModifier"].Flag = value; } }
        public bool bScaleDashLengthWithSnaredModifier { get { return this["bScaleDashLengthWithSnaredModifier"].Flag; } set { this["bScaleDashLengthWithSnaredModifier"].Flag = value; } }
        public bool bScaleDashLengthWithWaterStatusModifier { get { return this["bScaleDashLengthWithWaterStatusModifier"].Flag; } set { this["bScaleDashLengthWithWaterStatusModifier"].Flag = value; } }
        public float OverrideTerminalVelocity { get { return this["OverrideTerminalVelocity"].GetValue<float>(); } set { this["OverrideTerminalVelocity"].SetValue<float>(value); } }
        public void UpdatePermanentCheats() { Invoke("UpdatePermanentCheats"); }
        public void _DimensionMovementComponent(UEObject RunningStaminaRequirementPolicy, UEObject RunningStaminaUsagePolicy, UEObject RunningMinimumStamina, UEObject bNeedStaminaToContinueRunning, UEObject bUseStaminaForRunning, UEObject ExhaustedRunningMultiplier, UEObject bApplyStaminaMovementModifierOnlyIfExhausted, UEObject bAlwaysApplyExhaustionMultiplier, UEObject bAlwaysApplyStaminaModifier, UEObject bAlwaysApplyOnHitPenaltyModifier, UEObject bAlwaysApplySlowedModifier, UEObject bAlwaysApplySnaredModifier, UEObject bAlwaysApplyWaterStatusModifier, UEObject SlideStaminaRequirementPolicy, UEObject SlideStaminaUsagePolicy, UEObject ExhaustedSlideMultiplier, UEObject bStopSlideMovementWhenBlocked, UEObject DoubleJumpVelocityBoost, UEObject GravityOverrides, UEObject MinDashMultiplier, UEObject bScaleDashLengthWithSlowedModifier, UEObject bScaleDashLengthWithSnaredModifier, UEObject bScaleDashLengthWithWaterStatusModifier, UEObject OverrideTerminalVelocity) { Invoke("DimensionMovementComponent", RunningStaminaRequirementPolicy, RunningStaminaUsagePolicy, RunningMinimumStamina, bNeedStaminaToContinueRunning, bUseStaminaForRunning, ExhaustedRunningMultiplier, bApplyStaminaMovementModifierOnlyIfExhausted, bAlwaysApplyExhaustionMultiplier, bAlwaysApplyStaminaModifier, bAlwaysApplyOnHitPenaltyModifier, bAlwaysApplySlowedModifier, bAlwaysApplySnaredModifier, bAlwaysApplyWaterStatusModifier, SlideStaminaRequirementPolicy, SlideStaminaUsagePolicy, ExhaustedSlideMultiplier, bStopSlideMovementWhenBlocked, DoubleJumpVelocityBoost, GravityOverrides, MinDashMultiplier, bScaleDashLengthWithSlowedModifier, bScaleDashLengthWithSnaredModifier, bScaleDashLengthWithWaterStatusModifier, OverrideTerminalVelocity); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionMovementAttribSet : DimensionAttribSet
    {
        public DimensionMovementAttribSet(nint addr) : base(addr) { }
        public DimensionMovementAttribSet() : base(0) { }
        public float WalkSpeed { get { return this["WalkSpeed"].GetValue<float>(); } set { this["WalkSpeed"].SetValue<float>(value); } }
        public float NormalSpeed { get { return this["NormalSpeed"].GetValue<float>(); } set { this["NormalSpeed"].SetValue<float>(value); } }
        public float SprintSpeed { get { return this["SprintSpeed"].GetValue<float>(); } set { this["SprintSpeed"].SetValue<float>(value); } }
        public float CrouchSpeed { get { return this["CrouchSpeed"].GetValue<float>(); } set { this["CrouchSpeed"].SetValue<float>(value); } }
        public float SlideSpeed { get { return this["SlideSpeed"].GetValue<float>(); } set { this["SlideSpeed"].SetValue<float>(value); } }
        public float Acceleration { get { return this["Acceleration"].GetValue<float>(); } set { this["Acceleration"].SetValue<float>(value); } }
        public float MovementModifier { get { return this["MovementModifier"].GetValue<float>(); } set { this["MovementModifier"].SetValue<float>(value); } }
        public float StrafeModifier { get { return this["StrafeModifier"].GetValue<float>(); } set { this["StrafeModifier"].SetValue<float>(value); } }
        public float ForwardMovementModifier { get { return this["ForwardMovementModifier"].GetValue<float>(); } set { this["ForwardMovementModifier"].SetValue<float>(value); } }
        public float BackwardMovementModifier { get { return this["BackwardMovementModifier"].GetValue<float>(); } set { this["BackwardMovementModifier"].SetValue<float>(value); } }
        public float MovementModifierOnTargeting { get { return this["MovementModifierOnTargeting"].GetValue<float>(); } set { this["MovementModifierOnTargeting"].SetValue<float>(value); } }
        public float SlowedModifier { get { return this["SlowedModifier"].GetValue<float>(); } set { this["SlowedModifier"].SetValue<float>(value); } }
        public float SnaredModifier { get { return this["SnaredModifier"].GetValue<float>(); } set { this["SnaredModifier"].SetValue<float>(value); } }
        public float DashLength { get { return this["DashLength"].GetValue<float>(); } set { this["DashLength"].SetValue<float>(value); } }
        public float JumpCostModifier { get { return this["JumpCostModifier"].GetValue<float>(); } set { this["JumpCostModifier"].SetValue<float>(value); } }
        public float ExtraJumpCostModifier { get { return this["ExtraJumpCostModifier"].GetValue<float>(); } set { this["ExtraJumpCostModifier"].SetValue<float>(value); } }
        public float JumpVelocity { get { return this["JumpVelocity"].GetValue<float>(); } set { this["JumpVelocity"].SetValue<float>(value); } }
        public float AirControl { get { return this["AirControl"].GetValue<float>(); } set { this["AirControl"].SetValue<float>(value); } }
        public float FallDamageModifier { get { return this["FallDamageModifier"].GetValue<float>(); } set { this["FallDamageModifier"].SetValue<float>(value); } }
        public float OnHitMovementPenalty { get { return this["OnHitMovementPenalty"].GetValue<float>(); } set { this["OnHitMovementPenalty"].SetValue<float>(value); } }
        public float OnHitFlinchModifier { get { return this["OnHitFlinchModifier"].GetValue<float>(); } set { this["OnHitFlinchModifier"].SetValue<float>(value); } }
    }
    public class Mission : Actor
    {
        public Mission(nint addr) : base(addr) { }
        public Mission() : base(0) { }
        public float TimeRemaining { get { return this["TimeRemaining"].GetValue<float>(); } set { this["TimeRemaining"].SetValue<float>(value); } }
        public DataTableRowHandle MissionDataHandle { get { return this[nameof(MissionDataHandle)].As<DataTableRowHandle>(); } set { this["MissionDataHandle"] = value; } }
        public DimensionMissionData MissionData { get { return this[nameof(MissionData)].As<DimensionMissionData>(); } set { this["MissionData"] = value; } }
        public void Initialize(UEObject DifficultyLevel, UEObject Arena) { Invoke("Initialize", DifficultyLevel, Arena); }
        public void _Mission(UEObject TimeRemaining, UEObject MissionDataHandle, UEObject MissionData) { Invoke("Mission", TimeRemaining, MissionDataHandle, MissionData); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionMetaLibrary : UEObject
    {
        public DimensionMetaLibrary(nint addr) : base(addr) { }
        public DimensionMetaLibrary() : base(0) { }
    }
    public class DimensionMeleeComponent : ActorComponent
    {
        public DimensionMeleeComponent(nint addr) : base(addr) { }
        public DimensionMeleeComponent() : base(0) { }
        public UEObject OnHitDelegate { get { return this["OnHitDelegate"]; } set { this["OnHitDelegate"] = value; } }
        public UEObject MeleeShapes { get { return this["MeleeShapes"]; } set { this["MeleeShapes"] = value; } }
        public UEObject Shapes { get { return this["Shapes"]; } set { this["Shapes"] = value; } }
        public bool bDrawDebug { get { return this["bDrawDebug"].Flag; } set { this["bDrawDebug"].Flag = value; } }
        public UEObject AttackData { get { return this["AttackData"]; } set { this["AttackData"] = value; } }
        public GameplayTagContainer ActiveTags { get { return this[nameof(ActiveTags)].As<GameplayTagContainer>(); } set { this["ActiveTags"] = value; } }
        public void StartMeleeAttack(UEObject Tag) { Invoke("StartMeleeAttack", Tag); }
        public void _DimensionMeleeComponent(UEObject OnHitDelegate, UEObject MeleeShapes, UEObject Shapes, UEObject bDrawDebug, UEObject AttackData, UEObject ActiveTags) { Invoke("DimensionMeleeComponent", OnHitDelegate, MeleeShapes, Shapes, bDrawDebug, AttackData, ActiveTags); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionMeleeActorInterface : Interface
    {
        public DimensionMeleeActorInterface(nint addr) : base(addr) { }
        public DimensionMeleeActorInterface() : base(0) { }
        public void GetMeleeMeshComponents(UEObject OutMeleeMeshComponents) { Invoke("GetMeleeMeshComponents", OutMeleeMeshComponents); }
        public void _DimensionMeleeActorInterface() { Invoke("DimensionMeleeActorInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class AnimNotifyMelee : AnimNotifyState
    {
        public AnimNotifyMelee(nint addr) : base(addr) { }
        public AnimNotifyMelee() : base(0) { }
        public GameplayTagContainer MeleeTags { get { return this[nameof(MeleeTags)].As<GameplayTagContainer>(); } set { this["MeleeTags"] = value; } }
        public UEObject PreviewCharacterClass { get { return this["PreviewCharacterClass"]; } set { this["PreviewCharacterClass"] = value; } }
        public bool bDrawDebug { get { return this["bDrawDebug"].Flag; } set { this["bDrawDebug"].Flag = value; } }
        public SkeletalMeshComponent MeshComponent { get { return this[nameof(MeshComponent)].As<SkeletalMeshComponent>(); } set { this["MeshComponent"] = value; } }
        public bool bInMeleeState { get { return this["bInMeleeState"].Flag; } set { this["bInMeleeState"].Flag = value; } }
    }
    public class DimensionMapInterface : Interface
    {
        public DimensionMapInterface(nint addr) : base(addr) { }
        public DimensionMapInterface() : base(0) { }
        public UEObject IsVisibleOnMap() { return InvokeUEObject("IsVisibleOnMap"); }
        public void _DimensionMapInterface() { Invoke("DimensionMapInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionMachinePistolLightInterface : Interface
    {
        public DimensionMachinePistolLightInterface(nint addr) : base(addr) { }
        public DimensionMachinePistolLightInterface() : base(0) { }
        public UEObject GetBoostedFireValue() { return InvokeUEObject("GetBoostedFireValue"); }
        public void _DimensionMachinePistolLightInterface() { Invoke("DimensionMachinePistolLightInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLocalPlayer : LocalPlayer
    {
        public DimensionLocalPlayer(nint addr) : base(addr) { }
        public DimensionLocalPlayer() : base(0) { }
    }
    public class DimensionLightScenarioSwitcher : Actor
    {
        public DimensionLightScenarioSwitcher(nint addr) : base(addr) { }
        public DimensionLightScenarioSwitcher() : base(0) { }
        public DimensionBaseLightingScenariosConfig LightScenariosConfig { get { return this[nameof(LightScenariosConfig)].As<DimensionBaseLightingScenariosConfig>(); } set { this["LightScenariosConfig"] = value; } }
        public void LoadLightScenario(UEObject LightScenarioID, UEObject Mood) { Invoke("LoadLightScenario", LightScenarioID, Mood); }
        public void _DimensionLightScenarioSwitcher(UEObject LightScenariosConfig) { Invoke("DimensionLightScenarioSwitcher", LightScenariosConfig); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLevelMapWidget : DimensionUserWidget
    {
        public DimensionLevelMapWidget(nint addr) : base(addr) { }
        public DimensionLevelMapWidget() : base(0) { }
        public float CoefficientA { get { return this["CoefficientA"].GetValue<float>(); } set { this["CoefficientA"].SetValue<float>(value); } }
        public float CoefficientB { get { return this["CoefficientB"].GetValue<float>(); } set { this["CoefficientB"].SetValue<float>(value); } }
        public float CoefficientC { get { return this["CoefficientC"].GetValue<float>(); } set { this["CoefficientC"].SetValue<float>(value); } }
        public float CoefficientU { get { return this["CoefficientU"].GetValue<float>(); } set { this["CoefficientU"].SetValue<float>(value); } }
        public float CoefficientV { get { return this["CoefficientV"].GetValue<float>(); } set { this["CoefficientV"].SetValue<float>(value); } }
        public float CoefficientW { get { return this["CoefficientW"].GetValue<float>(); } set { this["CoefficientW"].SetValue<float>(value); } }
        public UEObject TranslateWorldToMap(UEObject WorldPosition) { return InvokeUEObject("TranslateWorldToMap", WorldPosition); }
        public void _DimensionLevelMapWidget(UEObject CoefficientA, UEObject CoefficientB, UEObject CoefficientC, UEObject CoefficientU, UEObject CoefficientV, UEObject CoefficientW) { Invoke("DimensionLevelMapWidget", CoefficientA, CoefficientB, CoefficientC, CoefficientU, CoefficientV, CoefficientW); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLevelMapCalibratorWidget : DimensionUserWidget
    {
        public DimensionLevelMapCalibratorWidget(nint addr) : base(addr) { }
        public DimensionLevelMapCalibratorWidget() : base(0) { }
        public Vector CorrespondingWorldPoint { get { return this[nameof(CorrespondingWorldPoint)].As<Vector>(); } set { this["CorrespondingWorldPoint"] = value; } }
        public UEObject GetWorldPosition() { return InvokeUEObject("GetWorldPosition"); }
        public void _DimensionLevelMapCalibratorWidget(UEObject CorrespondingWorldPoint) { Invoke("DimensionLevelMapCalibratorWidget", CorrespondingWorldPoint); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLeashManager : UEObject
    {
        public DimensionLeashManager(nint addr) : base(addr) { }
        public DimensionLeashManager() : base(0) { }
        public Array<DimensionLeash> Leashes { get { return new Array<DimensionLeash>(this["Leashes"]); } set { this["Leashes"] = value; } }
        public void RemoveLeash(UEObject LeashName) { Invoke("RemoveLeash", LeashName); }
        public void _DimensionLeashManager(UEObject Leashes) { Invoke("DimensionLeashManager", Leashes); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionItemStorage : DimensionObject
    {
        public DimensionItemStorage(nint addr) : base(addr) { }
        public DimensionItemStorage() : base(0) { }
        public UEObject OnLoadedDelegate { get { return this["OnLoadedDelegate"]; } set { this["OnLoadedDelegate"] = value; } }
        public UEObject SaveLoadEquippedItems { get { return this["SaveLoadEquippedItems"]; } set { this["SaveLoadEquippedItems"] = value; } }
        public Array<SaveLoadItemDataContainer> SaveLoadItemDataContainers { get { return new Array<SaveLoadItemDataContainer>(this["SaveLoadItemDataContainers"]); } set { this["SaveLoadItemDataContainers"] = value; } }
        public Array<SaveLoadWeaponDataDetails> SaveLoadWeaponDataDetails { get { return new Array<SaveLoadWeaponDataDetails>(this["SaveLoadWeaponDataDetails"]); } set { this["SaveLoadWeaponDataDetails"] = value; } }
        public Array<SaveLoadRingDataDetails> SaveLoadRingDataDetails { get { return new Array<SaveLoadRingDataDetails>(this["SaveLoadRingDataDetails"]); } set { this["SaveLoadRingDataDetails"] = value; } }
        public Array<SaveLoadRelicDataDetails> SaveLoadRelicDataDetails { get { return new Array<SaveLoadRelicDataDetails>(this["SaveLoadRelicDataDetails"]); } set { this["SaveLoadRelicDataDetails"] = value; } }
        public Array<SaveLoadFetishDataDetails> SaveLoadFetishDataDetails { get { return new Array<SaveLoadFetishDataDetails>(this["SaveLoadFetishDataDetails"]); } set { this["SaveLoadFetishDataDetails"] = value; } }
        public Array<SaveLoadAbilityItemDataDetails> SaveLoadAbilityItemDataDetails { get { return new Array<SaveLoadAbilityItemDataDetails>(this["SaveLoadAbilityItemDataDetails"]); } set { this["SaveLoadAbilityItemDataDetails"] = value; } }
        public Array<SaveLoadQuestItemDataDetails> SaveLoadQuestItemDataDetails { get { return new Array<SaveLoadQuestItemDataDetails>(this["SaveLoadQuestItemDataDetails"]); } set { this["SaveLoadQuestItemDataDetails"] = value; } }
        public Array<SaveLoadBoosterDataDetails> SaveLoadBoosterDataDetails { get { return new Array<SaveLoadBoosterDataDetails>(this["SaveLoadBoosterDataDetails"]); } set { this["SaveLoadBoosterDataDetails"] = value; } }
        public Array<SaveLoadBoosterProphecyDataDetails> SaveLoadBoosterProphecyDataDetails { get { return new Array<SaveLoadBoosterProphecyDataDetails>(this["SaveLoadBoosterProphecyDataDetails"]); } set { this["SaveLoadBoosterProphecyDataDetails"] = value; } }
        public Array<SaveLoadItemDataDetails> SaveLoadItemDataDetails { get { return new Array<SaveLoadItemDataDetails>(this["SaveLoadItemDataDetails"]); } set { this["SaveLoadItemDataDetails"] = value; } }
        public Array<SaveLoadEquippedSlotData> SaveLoadEquippedSlotData { get { return new Array<SaveLoadEquippedSlotData>(this["SaveLoadEquippedSlotData"]); } set { this["SaveLoadEquippedSlotData"] = value; } }
        public UEObject OnItemAddedDelegate { get { return this["OnItemAddedDelegate"]; } set { this["OnItemAddedDelegate"] = value; } }
        public UEObject OnMultipleItemsAddedDelegate { get { return this["OnMultipleItemsAddedDelegate"]; } set { this["OnMultipleItemsAddedDelegate"] = value; } }
        public UEObject OnItemRemovedDelegate { get { return this["OnItemRemovedDelegate"]; } set { this["OnItemRemovedDelegate"] = value; } }
        public UEObject OnMultipleItemsRemovedDelegate { get { return this["OnMultipleItemsRemovedDelegate"]; } set { this["OnMultipleItemsRemovedDelegate"] = value; } }
        public Array<DimensionItemDataContainer> ItemContainers { get { return new Array<DimensionItemDataContainer>(this["ItemContainers"]); } set { this["ItemContainers"] = value; } }
        public UEObject WeaponDataDetailsMap { get { return this["WeaponDataDetailsMap"]; } set { this["WeaponDataDetailsMap"] = value; } }
        public UEObject RingDataDetailsMap { get { return this["RingDataDetailsMap"]; } set { this["RingDataDetailsMap"] = value; } }
        public UEObject RelicDataDetailsMap { get { return this["RelicDataDetailsMap"]; } set { this["RelicDataDetailsMap"] = value; } }
        public UEObject FetishDataDetailsMap { get { return this["FetishDataDetailsMap"]; } set { this["FetishDataDetailsMap"] = value; } }
        public UEObject AbilityItemDataDetailsMap { get { return this["AbilityItemDataDetailsMap"]; } set { this["AbilityItemDataDetailsMap"] = value; } }
        public UEObject QuestItemDataDetailsMap { get { return this["QuestItemDataDetailsMap"]; } set { this["QuestItemDataDetailsMap"] = value; } }
        public UEObject BoosterDataDetailsMap { get { return this["BoosterDataDetailsMap"]; } set { this["BoosterDataDetailsMap"] = value; } }
        public UEObject BoosterProphecyDataDetailsMap { get { return this["BoosterProphecyDataDetailsMap"]; } set { this["BoosterProphecyDataDetailsMap"] = value; } }
        public UEObject ItemDataDetailsMap { get { return this["ItemDataDetailsMap"]; } set { this["ItemDataDetailsMap"] = value; } }
        public UEObject OnItemInstanceUpdatedDelegate { get { return this["OnItemInstanceUpdatedDelegate"]; } set { this["OnItemInstanceUpdatedDelegate"] = value; } }
        public UEObject EquippedItems { get { return this["EquippedItems"]; } set { this["EquippedItems"] = value; } }
        public UEObject OnItemEquipUpdatedDelegate { get { return this["OnItemEquipUpdatedDelegate"]; } set { this["OnItemEquipUpdatedDelegate"] = value; } }
        public UEObject UnstashItemByHandle(UEObject ItemDataHandle, UEObject StacksToUnstash, UEObject StashAccessPolicy) { return InvokeUEObject("UnstashItemByHandle", ItemDataHandle, StacksToUnstash, StashAccessPolicy); }
        public void _DimensionItemStorage(UEObject OnLoadedDelegate, UEObject SaveLoadEquippedItems, UEObject SaveLoadItemDataContainers, UEObject SaveLoadWeaponDataDetails, UEObject SaveLoadRingDataDetails, UEObject SaveLoadRelicDataDetails, UEObject SaveLoadFetishDataDetails, UEObject SaveLoadAbilityItemDataDetails, UEObject SaveLoadQuestItemDataDetails, UEObject SaveLoadBoosterDataDetails, UEObject SaveLoadBoosterProphecyDataDetails, UEObject SaveLoadItemDataDetails, UEObject SaveLoadEquippedSlotData, UEObject OnItemAddedDelegate, UEObject OnMultipleItemsAddedDelegate, UEObject OnItemRemovedDelegate, UEObject OnMultipleItemsRemovedDelegate, UEObject ItemContainers, UEObject WeaponDataDetailsMap, UEObject RingDataDetailsMap, UEObject RelicDataDetailsMap, UEObject FetishDataDetailsMap, UEObject AbilityItemDataDetailsMap, UEObject QuestItemDataDetailsMap, UEObject BoosterDataDetailsMap, UEObject BoosterProphecyDataDetailsMap, UEObject ItemDataDetailsMap, UEObject OnItemInstanceUpdatedDelegate, UEObject EquippedItems, UEObject OnItemEquipUpdatedDelegate) { Invoke("DimensionItemStorage", OnLoadedDelegate, SaveLoadEquippedItems, SaveLoadItemDataContainers, SaveLoadWeaponDataDetails, SaveLoadRingDataDetails, SaveLoadRelicDataDetails, SaveLoadFetishDataDetails, SaveLoadAbilityItemDataDetails, SaveLoadQuestItemDataDetails, SaveLoadBoosterDataDetails, SaveLoadBoosterProphecyDataDetails, SaveLoadItemDataDetails, SaveLoadEquippedSlotData, OnItemAddedDelegate, OnMultipleItemsAddedDelegate, OnItemRemovedDelegate, OnMultipleItemsRemovedDelegate, ItemContainers, WeaponDataDetailsMap, RingDataDetailsMap, RelicDataDetailsMap, FetishDataDetailsMap, AbilityItemDataDetailsMap, QuestItemDataDetailsMap, BoosterDataDetailsMap, BoosterProphecyDataDetailsMap, ItemDataDetailsMap, OnItemInstanceUpdatedDelegate, EquippedItems, OnItemEquipUpdatedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionItemDropManager : Actor
    {
        public DimensionItemDropManager(nint addr) : base(addr) { }
        public DimensionItemDropManager() : base(0) { }
        public DataTableRowHandle WitchfireVolatileItemDataHandle { get { return this[nameof(WitchfireVolatileItemDataHandle)].As<DataTableRowHandle>(); } set { this["WitchfireVolatileItemDataHandle"] = value; } }
        public Array<DataTableRowHandle> CustomItems { get { return new Array<DataTableRowHandle>(this["CustomItems"]); } set { this["CustomItems"] = value; } }
        public Array<DimensionItemDropRule> DropRules { get { return new Array<DimensionItemDropRule>(this["DropRules"]); } set { this["DropRules"] = value; } }
        public bool bBoundVolatileWitchfireToOnDeathEssence { get { return this["bBoundVolatileWitchfireToOnDeathEssence"].Flag; } set { this["bBoundVolatileWitchfireToOnDeathEssence"].Flag = value; } }
        public float WitchfireEssenceHealthThreshold { get { return this["WitchfireEssenceHealthThreshold"].GetValue<float>(); } set { this["WitchfireEssenceHealthThreshold"].SetValue<float>(value); } }
        public float WitchfireEssenceTimeToLive { get { return this["WitchfireEssenceTimeToLive"].GetValue<float>(); } set { this["WitchfireEssenceTimeToLive"].SetValue<float>(value); } }
        public float WitchfireEssenceDestroyDelay { get { return this["WitchfireEssenceDestroyDelay"].GetValue<float>(); } set { this["WitchfireEssenceDestroyDelay"].SetValue<float>(value); } }
        public float WitchfireEssenceSelfHomingTriggerDelay { get { return this["WitchfireEssenceSelfHomingTriggerDelay"].GetValue<float>(); } set { this["WitchfireEssenceSelfHomingTriggerDelay"].SetValue<float>(value); } }
        public float WitchfireEssenceDirectionConeHalfAngle { get { return this["WitchfireEssenceDirectionConeHalfAngle"].GetValue<float>(); } set { this["WitchfireEssenceDirectionConeHalfAngle"].SetValue<float>(value); } }
        public float WitchfireEssenceDirectionBaseAngle { get { return this["WitchfireEssenceDirectionBaseAngle"].GetValue<float>(); } set { this["WitchfireEssenceDirectionBaseAngle"].SetValue<float>(value); } }
        public float WitchfireEssenceDirectionMaxRandomAngle { get { return this["WitchfireEssenceDirectionMaxRandomAngle"].GetValue<float>(); } set { this["WitchfireEssenceDirectionMaxRandomAngle"].SetValue<float>(value); } }
        public CustomActorHomingMovementData DefaultWitchfireEssenceMovementData { get { return this[nameof(DefaultWitchfireEssenceMovementData)].As<CustomActorHomingMovementData>(); } set { this["DefaultWitchfireEssenceMovementData"] = value; } }
        public Vector WitchfireEssenceParticleScale { get { return this[nameof(WitchfireEssenceParticleScale)].As<Vector>(); } set { this["WitchfireEssenceParticleScale"] = value; } }
        public UEObject NormalWitchfireEssenceParticle { get { return this["NormalWitchfireEssenceParticle"]; } set { this["NormalWitchfireEssenceParticle"] = value; } }
        public UEObject OnDeathWitchfireEssenceParticle { get { return this["OnDeathWitchfireEssenceParticle"]; } set { this["OnDeathWitchfireEssenceParticle"] = value; } }
        public float WitchfireEssenceIncomingSFXTime { get { return this["WitchfireEssenceIncomingSFXTime"].GetValue<float>(); } set { this["WitchfireEssenceIncomingSFXTime"].SetValue<float>(value); } }
        public bool bPlayWitchfireEssenceSpawnSFX { get { return this["bPlayWitchfireEssenceSpawnSFX"].Flag; } set { this["bPlayWitchfireEssenceSpawnSFX"].Flag = value; } }
        public UEObject NormalWitchfireEssenceSpawnSFX { get { return this["NormalWitchfireEssenceSpawnSFX"]; } set { this["NormalWitchfireEssenceSpawnSFX"] = value; } }
        public UEObject OnDeathWitchfireEssenceSpawnSFX { get { return this["OnDeathWitchfireEssenceSpawnSFX"]; } set { this["OnDeathWitchfireEssenceSpawnSFX"] = value; } }
        public bool bPlayWitchfireEssenceIncomingSFX { get { return this["bPlayWitchfireEssenceIncomingSFX"].Flag; } set { this["bPlayWitchfireEssenceIncomingSFX"].Flag = value; } }
        public UEObject NormalWitchfireEssenceIncomingSFX { get { return this["NormalWitchfireEssenceIncomingSFX"]; } set { this["NormalWitchfireEssenceIncomingSFX"] = value; } }
        public UEObject OnDeathWitchfireEssenceIncomingSFX { get { return this["OnDeathWitchfireEssenceIncomingSFX"]; } set { this["OnDeathWitchfireEssenceIncomingSFX"] = value; } }
        public bool bPlayWitchfireEssenceTriggerSFX { get { return this["bPlayWitchfireEssenceTriggerSFX"].Flag; } set { this["bPlayWitchfireEssenceTriggerSFX"].Flag = value; } }
        public UEObject NormalWitchfireEssenceTriggerSFX { get { return this["NormalWitchfireEssenceTriggerSFX"]; } set { this["NormalWitchfireEssenceTriggerSFX"] = value; } }
        public UEObject OnDeathWitchfireEssenceTriggerSFX { get { return this["OnDeathWitchfireEssenceTriggerSFX"]; } set { this["OnDeathWitchfireEssenceTriggerSFX"] = value; } }
        public Array<WitchfireEssenceData> ActiveWitchfireEssences { get { return new Array<WitchfireEssenceData>(this["ActiveWitchfireEssences"]); } set { this["ActiveWitchfireEssences"] = value; } }
        public UEObject OnWitchfireEssenceTriggeredDelegate { get { return this["OnWitchfireEssenceTriggeredDelegate"]; } set { this["OnWitchfireEssenceTriggeredDelegate"] = value; } }
        public UEObject OnWitchfireEssenceDelayedDelegate { get { return this["OnWitchfireEssenceDelayedDelegate"]; } set { this["OnWitchfireEssenceDelayedDelegate"] = value; } }
        public UEObject WitchfireEssenceAggregatedDamageMap { get { return this["WitchfireEssenceAggregatedDamageMap"]; } set { this["WitchfireEssenceAggregatedDamageMap"] = value; } }
        public Array<WitchfireEssenceData> PendingWitchfireEssences { get { return new Array<WitchfireEssenceData>(this["PendingWitchfireEssences"]); } set { this["PendingWitchfireEssences"] = value; } }
        public Array<Actor> PendingDestroyActors { get { return new Array<Actor>(this["PendingDestroyActors"]); } set { this["PendingDestroyActors"] = value; } }
        public UEObject WitchfireEssenceTargetOverrides { get { return this["WitchfireEssenceTargetOverrides"]; } set { this["WitchfireEssenceTargetOverrides"] = value; } }
        public Array<UEObject> LoadedVFX { get { return new Array<UEObject>(this["LoadedVFX"]); } set { this["LoadedVFX"] = value; } }
        public Array<SoundCue> LoadedSFX { get { return new Array<SoundCue>(this["LoadedSFX"]); } set { this["LoadedSFX"] = value; } }
        public void UpdateRotationData(UEObject WitchfireEssenceIndex, UEObject RotationAxisStartingPoint, UEObject LocationOffset) { Invoke("UpdateRotationData", WitchfireEssenceIndex, RotationAxisStartingPoint, LocationOffset); }
        public void _DimensionItemDropManager(UEObject WitchfireVolatileItemDataHandle, UEObject CustomItems, UEObject DropRules, UEObject bBoundVolatileWitchfireToOnDeathEssence, UEObject WitchfireEssenceHealthThreshold, UEObject WitchfireEssenceTimeToLive, UEObject WitchfireEssenceDestroyDelay, UEObject WitchfireEssenceSelfHomingTriggerDelay, UEObject WitchfireEssenceDirectionConeHalfAngle, UEObject WitchfireEssenceDirectionBaseAngle, UEObject WitchfireEssenceDirectionMaxRandomAngle, UEObject DefaultWitchfireEssenceMovementData, UEObject WitchfireEssenceParticleScale, UEObject NormalWitchfireEssenceParticle, UEObject OnDeathWitchfireEssenceParticle, UEObject WitchfireEssenceIncomingSFXTime, UEObject bPlayWitchfireEssenceSpawnSFX, UEObject NormalWitchfireEssenceSpawnSFX, UEObject OnDeathWitchfireEssenceSpawnSFX, UEObject bPlayWitchfireEssenceIncomingSFX, UEObject NormalWitchfireEssenceIncomingSFX, UEObject OnDeathWitchfireEssenceIncomingSFX, UEObject bPlayWitchfireEssenceTriggerSFX, UEObject NormalWitchfireEssenceTriggerSFX, UEObject OnDeathWitchfireEssenceTriggerSFX, UEObject ActiveWitchfireEssences, UEObject OnWitchfireEssenceTriggeredDelegate, UEObject OnWitchfireEssenceDelayedDelegate, UEObject WitchfireEssenceAggregatedDamageMap, UEObject PendingWitchfireEssences, UEObject PendingDestroyActors, UEObject WitchfireEssenceTargetOverrides, UEObject LoadedVFX, UEObject LoadedSFX) { Invoke("DimensionItemDropManager", WitchfireVolatileItemDataHandle, CustomItems, DropRules, bBoundVolatileWitchfireToOnDeathEssence, WitchfireEssenceHealthThreshold, WitchfireEssenceTimeToLive, WitchfireEssenceDestroyDelay, WitchfireEssenceSelfHomingTriggerDelay, WitchfireEssenceDirectionConeHalfAngle, WitchfireEssenceDirectionBaseAngle, WitchfireEssenceDirectionMaxRandomAngle, DefaultWitchfireEssenceMovementData, WitchfireEssenceParticleScale, NormalWitchfireEssenceParticle, OnDeathWitchfireEssenceParticle, WitchfireEssenceIncomingSFXTime, bPlayWitchfireEssenceSpawnSFX, NormalWitchfireEssenceSpawnSFX, OnDeathWitchfireEssenceSpawnSFX, bPlayWitchfireEssenceIncomingSFX, NormalWitchfireEssenceIncomingSFX, OnDeathWitchfireEssenceIncomingSFX, bPlayWitchfireEssenceTriggerSFX, NormalWitchfireEssenceTriggerSFX, OnDeathWitchfireEssenceTriggerSFX, ActiveWitchfireEssences, OnWitchfireEssenceTriggeredDelegate, OnWitchfireEssenceDelayedDelegate, WitchfireEssenceAggregatedDamageMap, PendingWitchfireEssences, PendingDestroyActors, WitchfireEssenceTargetOverrides, LoadedVFX, LoadedSFX); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionItemDrop : Actor
    {
        public DimensionItemDrop(nint addr) : base(addr) { }
        public DimensionItemDrop() : base(0) { }
        public bool bPicked { get { return this["bPicked"].Flag; } set { this["bPicked"].Flag = value; } }
        public bool bLocked { get { return this["bLocked"].Flag; } set { this["bLocked"].Flag = value; } }
        public bool bCanBeMutuallyExclusiveWithOtherDrops { get { return this["bCanBeMutuallyExclusiveWithOtherDrops"].Flag; } set { this["bCanBeMutuallyExclusiveWithOtherDrops"].Flag = value; } }
        public UEObject OnPickup { get { return this["OnPickup"]; } set { this["OnPickup"] = value; } }
        public Array<DimensionItemDataPackage> ItemsToDrop { get { return new Array<DimensionItemDataPackage>(this["ItemsToDrop"]); } set { this["ItemsToDrop"] = value; } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public float TimeToLive { get { return this["TimeToLive"].GetValue<float>(); } set { this["TimeToLive"].SetValue<float>(value); } }
        public SoundBase PickupSound { get { return this[nameof(PickupSound)].As<SoundBase>(); } set { this["PickupSound"] = value; } }
        public bool bCombineMathingItems { get { return this["bCombineMathingItems"].Flag; } set { this["bCombineMathingItems"].Flag = value; } }
        public bool bAllowEmptyDrop { get { return this["bAllowEmptyDrop"].Flag; } set { this["bAllowEmptyDrop"].Flag = value; } }
        public bool bAlwaysDestroyAfterPickup { get { return this["bAlwaysDestroyAfterPickup"].Flag; } set { this["bAlwaysDestroyAfterPickup"].Flag = value; } }
        public DimensionItemDropSpawnData SpawnData { get { return this[nameof(SpawnData)].As<DimensionItemDropSpawnData>(); } set { this["SpawnData"] = value; } }
        public TimerHandle TimeToLiveTimerHandle { get { return this[nameof(TimeToLiveTimerHandle)].As<TimerHandle>(); } set { this["TimeToLiveTimerHandle"] = value; } }
        public void SetTimeToLive(UEObject InTimeToLive) { Invoke("SetTimeToLive", InTimeToLive); }
        public void _DimensionItemDrop(UEObject bPicked, UEObject bLocked, UEObject bCanBeMutuallyExclusiveWithOtherDrops, UEObject OnPickup, UEObject ItemsToDrop, UEObject AddReason, UEObject TimeToLive, UEObject PickupSound, UEObject bCombineMathingItems, UEObject bAllowEmptyDrop, UEObject bAlwaysDestroyAfterPickup, UEObject SpawnData, UEObject TimeToLiveTimerHandle) { Invoke("DimensionItemDrop", bPicked, bLocked, bCanBeMutuallyExclusiveWithOtherDrops, OnPickup, ItemsToDrop, AddReason, TimeToLive, PickupSound, bCombineMathingItems, bAllowEmptyDrop, bAlwaysDestroyAfterPickup, SpawnData, TimeToLiveTimerHandle); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionItemDataWrapper : DimensionObject
    {
        public DimensionItemDataWrapper(nint addr) : base(addr) { }
        public DimensionItemDataWrapper() : base(0) { }
        public int ItemSlotID { get { return this["ItemSlotID"].GetValue<int>(); } set { this["ItemSlotID"].SetValue<int>(value); } }
        public DimensionItemStorage ItemStorage { get { return this[nameof(ItemStorage)].As<DimensionItemStorage>(); } set { this["ItemStorage"] = value; } }
        public UEObject GetWeaponDataDetails(UEObject OutWeaponDataDetails) { return InvokeUEObject("GetWeaponDataDetails", OutWeaponDataDetails); }
        public void _DimensionItemDataWrapper(UEObject ItemSlotID, UEObject ItemStorage) { Invoke("DimensionItemDataWrapper", ItemSlotID, ItemStorage); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInventoryWidgetController2 : DimensionWidgetController
    {
        public DimensionInventoryWidgetController2(nint addr) : base(addr) { }
        public DimensionInventoryWidgetController2() : base(0) { }
        public UEObject EquippedItemSlots { get { return this["EquippedItemSlots"]; } set { this["EquippedItemSlots"] = value; } }
        public UEObject OnEquippedSlotUpdateDelegate { get { return this["OnEquippedSlotUpdateDelegate"]; } set { this["OnEquippedSlotUpdateDelegate"] = value; } }
        public void UnequipSlot(UEObject EquipTypeTag, UEObject EquipSlotIndex) { Invoke("UnequipSlot", EquipTypeTag, EquipSlotIndex); }
        public void _DimensionInventoryWidgetController2(UEObject EquippedItemSlots, UEObject OnEquippedSlotUpdateDelegate) { Invoke("DimensionInventoryWidgetController2", EquippedItemSlots, OnEquippedSlotUpdateDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionWidgetController : DimensionObject
    {
        public DimensionWidgetController(nint addr) : base(addr) { }
        public DimensionWidgetController() : base(0) { }
        public Array<DimensionUserWidget> Widgets { get { return new Array<DimensionUserWidget>(this["Widgets"]); } set { this["Widgets"] = value; } }
        public UEObject OnLockUpdateDelegate { get { return this["OnLockUpdateDelegate"]; } set { this["OnLockUpdateDelegate"] = value; } }
        public void Unlock() { Invoke("Unlock"); }
        public void _DimensionWidgetController(UEObject Widgets, UEObject OnLockUpdateDelegate) { Invoke("DimensionWidgetController", Widgets, OnLockUpdateDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInventorySubsystem : GameInstanceSubsystem
    {
        public DimensionInventorySubsystem(nint addr) : base(addr) { }
        public DimensionInventorySubsystem() : base(0) { }
        public SaveLoadItemDropAggregator SaveLoadOnDeathItemDrop { get { return this[nameof(SaveLoadOnDeathItemDrop)].As<SaveLoadItemDropAggregator>(); } set { this["SaveLoadOnDeathItemDrop"] = value; } }
        public GameMode CachedGameMode { get { return this[nameof(CachedGameMode)].As<GameMode>(); } set { this["CachedGameMode"] = value; } }
        public DimensionPlayerControllerBase CachedPlayerController { get { return this[nameof(CachedPlayerController)].As<DimensionPlayerControllerBase>(); } set { this["CachedPlayerController"] = value; } }
        public UEObject OnItemBatchLoadedDelegate { get { return this["OnItemBatchLoadedDelegate"]; } set { this["OnItemBatchLoadedDelegate"] = value; } }
        public UEObject OnItemBatchGrantRequestedDelegate { get { return this["OnItemBatchGrantRequestedDelegate"]; } set { this["OnItemBatchGrantRequestedDelegate"] = value; } }
        public UEObject OnItemBatchDropsMappedDelegate { get { return this["OnItemBatchDropsMappedDelegate"]; } set { this["OnItemBatchDropsMappedDelegate"] = value; } }
        public UEObject OnItemDropSpawnRequestedDelegate { get { return this["OnItemDropSpawnRequestedDelegate"]; } set { this["OnItemDropSpawnRequestedDelegate"] = value; } }
        public UEObject OnItemDropSpawnedDelegate { get { return this["OnItemDropSpawnedDelegate"]; } set { this["OnItemDropSpawnedDelegate"] = value; } }
        public Array<UEObject> ItemPackageReadyDelegates { get { return new Array<UEObject>(this["ItemPackageReadyDelegates"]); } set { this["ItemPackageReadyDelegates"] = value; } }
        public Array<DimensionItemDropAggregator> PendingItemAggregators { get { return new Array<DimensionItemDropAggregator>(this["PendingItemAggregators"]); } set { this["PendingItemAggregators"] = value; } }
        public Array<DimensionItemBatch> AwaitingItemBatches { get { return new Array<DimensionItemBatch>(this["AwaitingItemBatches"]); } set { this["AwaitingItemBatches"] = value; } }
        public UEObject OnItemSwitchLockUpdateDelegate { get { return this["OnItemSwitchLockUpdateDelegate"]; } set { this["OnItemSwitchLockUpdateDelegate"] = value; } }
        public UEObject OnPendingSwitchItemsUpdateDelegate { get { return this["OnPendingSwitchItemsUpdateDelegate"]; } set { this["OnPendingSwitchItemsUpdateDelegate"] = value; } }
        public UEObject OnDeathDropPickedDelegate { get { return this["OnDeathDropPickedDelegate"]; } set { this["OnDeathDropPickedDelegate"] = value; } }
        public DimensionItemDropAggregator OnDeathItemDrop { get { return this[nameof(OnDeathItemDrop)].As<DimensionItemDropAggregator>(); } set { this["OnDeathItemDrop"] = value; } }
        public Array<DimensionItemHandleCount> CachedItemsRemovedOnDeath { get { return new Array<DimensionItemHandleCount>(this["CachedItemsRemovedOnDeath"]); } set { this["CachedItemsRemovedOnDeath"] = value; } }
        public Actor CachedKilledPlayer { get { return this[nameof(CachedKilledPlayer)].As<Actor>(); } set { this["CachedKilledPlayer"] = value; } }
        public UEObject OnDebugItemPackageAddedDelegate { get { return this["OnDebugItemPackageAddedDelegate"]; } set { this["OnDebugItemPackageAddedDelegate"] = value; } }
        public UEObject UpgradeItem(UEObject ItemDataHandle, UEObject OutUpgradedItemDataHandle, UEObject bMarkAsNewItem, UEObject bConsumeUpgradeItem) { return InvokeUEObject("UpgradeItem", ItemDataHandle, OutUpgradedItemDataHandle, bMarkAsNewItem, bConsumeUpgradeItem); }
        public void _DimensionInventorySubsystem(UEObject SaveLoadOnDeathItemDrop, UEObject CachedGameMode, UEObject CachedPlayerController, UEObject OnItemBatchLoadedDelegate, UEObject OnItemBatchGrantRequestedDelegate, UEObject OnItemBatchDropsMappedDelegate, UEObject OnItemDropSpawnRequestedDelegate, UEObject OnItemDropSpawnedDelegate, UEObject ItemPackageReadyDelegates, UEObject PendingItemAggregators, UEObject AwaitingItemBatches, UEObject OnItemSwitchLockUpdateDelegate, UEObject OnPendingSwitchItemsUpdateDelegate, UEObject OnDeathDropPickedDelegate, UEObject OnDeathItemDrop, UEObject CachedItemsRemovedOnDeath, UEObject CachedKilledPlayer, UEObject OnDebugItemPackageAddedDelegate) { Invoke("DimensionInventorySubsystem", SaveLoadOnDeathItemDrop, CachedGameMode, CachedPlayerController, OnItemBatchLoadedDelegate, OnItemBatchGrantRequestedDelegate, OnItemBatchDropsMappedDelegate, OnItemDropSpawnRequestedDelegate, OnItemDropSpawnedDelegate, ItemPackageReadyDelegates, PendingItemAggregators, AwaitingItemBatches, OnItemSwitchLockUpdateDelegate, OnPendingSwitchItemsUpdateDelegate, OnDeathDropPickedDelegate, OnDeathItemDrop, CachedItemsRemovedOnDeath, CachedKilledPlayer, OnDebugItemPackageAddedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInventoryConfig : DataAsset
    {
        public DimensionInventoryConfig(nint addr) : base(addr) { }
        public DimensionInventoryConfig() : base(0) { }
        public UEObject SlotLimits { get { return this["SlotLimits"]; } set { this["SlotLimits"] = value; } }
        public int TotalSlotsLimit { get { return this["TotalSlotsLimit"].GetValue<int>(); } set { this["TotalSlotsLimit"].SetValue<int>(value); } }
        public UEObject DefaultItemDropClass { get { return this["DefaultItemDropClass"]; } set { this["DefaultItemDropClass"] = value; } }
        public UEObject OnDeathItemDropClass { get { return this["OnDeathItemDropClass"]; } set { this["OnDeathItemDropClass"] = value; } }
        public GameplayTagContainer OnDeathItemDropEligibleItemTags { get { return this[nameof(OnDeathItemDropEligibleItemTags)].As<GameplayTagContainer>(); } set { this["OnDeathItemDropEligibleItemTags"] = value; } }
        public Array<DConditionalDrop> GlobalConditionalDrops { get { return new Array<DConditionalDrop>(this["GlobalConditionalDrops"]); } set { this["GlobalConditionalDrops"] = value; } }
        public UEObject ItemHandlesMap { get { return this["ItemHandlesMap"]; } set { this["ItemHandlesMap"] = value; } }
        public UEObject ItemTypeDataTablesMap { get { return this["ItemTypeDataTablesMap"]; } set { this["ItemTypeDataTablesMap"] = value; } }
        public UEObject ItemTypeToDisplayDataMap { get { return this["ItemTypeToDisplayDataMap"]; } set { this["ItemTypeToDisplayDataMap"] = value; } }
        public Array<DataTableRowHandle> ItemsClearedWhenEnteringRunLevel { get { return new Array<DataTableRowHandle>(this["ItemsClearedWhenEnteringRunLevel"]); } set { this["ItemsClearedWhenEnteringRunLevel"] = value; } }
        public Array<DataTableRowHandle> ItemsClearedWhenExitingRunLevel { get { return new Array<DataTableRowHandle>(this["ItemsClearedWhenExitingRunLevel"]); } set { this["ItemsClearedWhenExitingRunLevel"] = value; } }
        public Array<UEObject> AllItemDataTables { get { return new Array<UEObject>(this["AllItemDataTables"]); } set { this["AllItemDataTables"] = value; } }
        public UEObject SolidWitchfireConversionValues { get { return this["SolidWitchfireConversionValues"]; } set { this["SolidWitchfireConversionValues"] = value; } }
        public UEObject LevelTagToGnosisWitchfireMultiplierMap { get { return this["LevelTagToGnosisWitchfireMultiplierMap"]; } set { this["LevelTagToGnosisWitchfireMultiplierMap"] = value; } }
        public UEObject GoldConversionValues { get { return this["GoldConversionValues"]; } set { this["GoldConversionValues"] = value; } }
        public Array<InventorySectionDefinition> InventorySectionDefinitions { get { return new Array<InventorySectionDefinition>(this["InventorySectionDefinitions"]); } set { this["InventorySectionDefinitions"] = value; } }
        public Array<InventoryEquipSlotDefinition> InventoryEquipSlotDefinitions { get { return new Array<InventoryEquipSlotDefinition>(this["InventoryEquipSlotDefinitions"]); } set { this["InventoryEquipSlotDefinitions"] = value; } }
        public GameplayTagContainer UnlockableItemTypeTags { get { return this[nameof(UnlockableItemTypeTags)].As<GameplayTagContainer>(); } set { this["UnlockableItemTypeTags"] = value; } }
        public GameplayTagContainer RaritySupportingItemTypeTags { get { return this[nameof(RaritySupportingItemTypeTags)].As<GameplayTagContainer>(); } set { this["RaritySupportingItemTypeTags"] = value; } }
        public UEObject BoosterProphecyEquipSlotIndexToRequirementsMap { get { return this["BoosterProphecyEquipSlotIndexToRequirementsMap"]; } set { this["BoosterProphecyEquipSlotIndexToRequirementsMap"] = value; } }
        public UEObject TierUpgradeToRequiredItemMap { get { return this["TierUpgradeToRequiredItemMap"]; } set { this["TierUpgradeToRequiredItemMap"] = value; } }
        public GameplayTagContainer WhitelistedItemTypeTags { get { return this[nameof(WhitelistedItemTypeTags)].As<GameplayTagContainer>(); } set { this["WhitelistedItemTypeTags"] = value; } }
        public Array<ItemWhitelistEntry> ItemWhitelistEntries { get { return new Array<ItemWhitelistEntry>(this["ItemWhitelistEntries"]); } set { this["ItemWhitelistEntries"] = value; } }
    }
    public class DimensionInventoryComponent : DimensionActorComponent
    {
        public DimensionInventoryComponent(nint addr) : base(addr) { }
        public DimensionInventoryComponent() : base(0) { }
        public DataTableRowHandle DefaultItemBatchHandle { get { return this[nameof(DefaultItemBatchHandle)].As<DataTableRowHandle>(); } set { this["DefaultItemBatchHandle"] = value; } }
        public CurveFloat HealthPotionMaxStacksForLevelCurve { get { return this[nameof(HealthPotionMaxStacksForLevelCurve)].As<CurveFloat>(); } set { this["HealthPotionMaxStacksForLevelCurve"] = value; } }
        public int MaxHealthPotionStacksModifier { get { return this["MaxHealthPotionStacksModifier"].GetValue<int>(); } set { this["MaxHealthPotionStacksModifier"].SetValue<int>(value); } }
        public Array<DataTableRowHandle> RequiredStartingItems { get { return new Array<DataTableRowHandle>(this["RequiredStartingItems"]); } set { this["RequiredStartingItems"] = value; } }
        public bool bAutoEquipAddedWeapons { get { return this["bAutoEquipAddedWeapons"].Flag; } set { this["bAutoEquipAddedWeapons"].Flag = value; } }
        public bool bAutoEquipAddedSpells { get { return this["bAutoEquipAddedSpells"].Flag; } set { this["bAutoEquipAddedSpells"].Flag = value; } }
        public bool bAutoEquipAddedMagicItems { get { return this["bAutoEquipAddedMagicItems"].Flag; } set { this["bAutoEquipAddedMagicItems"].Flag = value; } }
        public int CurrentWeaponIndex { get { return this["CurrentWeaponIndex"].GetValue<int>(); } set { this["CurrentWeaponIndex"].SetValue<int>(value); } }
        public float QuickWeaponSwapMinDelay { get { return this["QuickWeaponSwapMinDelay"].GetValue<float>(); } set { this["QuickWeaponSwapMinDelay"].SetValue<float>(value); } }
        public UEObject OnWeaponSwitchDelegate { get { return this["OnWeaponSwitchDelegate"]; } set { this["OnWeaponSwitchDelegate"] = value; } }
        public bool bDefaultDemonicAmmoBasedOnClipSize { get { return this["bDefaultDemonicAmmoBasedOnClipSize"].Flag; } set { this["bDefaultDemonicAmmoBasedOnClipSize"].Flag = value; } }
        public float DefaultDemonicAmmoLoadPercent { get { return this["DefaultDemonicAmmoLoadPercent"].GetValue<float>(); } set { this["DefaultDemonicAmmoLoadPercent"].SetValue<float>(value); } }
        public int DefaultDemonicAmmoLoadMinCount { get { return this["DefaultDemonicAmmoLoadMinCount"].GetValue<int>(); } set { this["DefaultDemonicAmmoLoadMinCount"].SetValue<int>(value); } }
        public UEObject SingleWeaponAmmoIncreaseEffect { get { return this["SingleWeaponAmmoIncreaseEffect"]; } set { this["SingleWeaponAmmoIncreaseEffect"] = value; } }
        public UEObject OnUsedItemSpawnedDelegate { get { return this["OnUsedItemSpawnedDelegate"]; } set { this["OnUsedItemSpawnedDelegate"] = value; } }
        public UEObject UseItemFromInventorySlot(UEObject SlotID, UEObject ItemCount) { return InvokeUEObject("UseItemFromInventorySlot", SlotID, ItemCount); }
        public void _DimensionInventoryComponent(UEObject DefaultItemBatchHandle, UEObject HealthPotionMaxStacksForLevelCurve, UEObject MaxHealthPotionStacksModifier, UEObject RequiredStartingItems, UEObject bAutoEquipAddedWeapons, UEObject bAutoEquipAddedSpells, UEObject bAutoEquipAddedMagicItems, UEObject CurrentWeaponIndex, UEObject QuickWeaponSwapMinDelay, UEObject OnWeaponSwitchDelegate, UEObject bDefaultDemonicAmmoBasedOnClipSize, UEObject DefaultDemonicAmmoLoadPercent, UEObject DefaultDemonicAmmoLoadMinCount, UEObject SingleWeaponAmmoIncreaseEffect, UEObject OnUsedItemSpawnedDelegate) { Invoke("DimensionInventoryComponent", DefaultItemBatchHandle, HealthPotionMaxStacksForLevelCurve, MaxHealthPotionStacksModifier, RequiredStartingItems, bAutoEquipAddedWeapons, bAutoEquipAddedSpells, bAutoEquipAddedMagicItems, CurrentWeaponIndex, QuickWeaponSwapMinDelay, OnWeaponSwitchDelegate, bDefaultDemonicAmmoBasedOnClipSize, DefaultDemonicAmmoLoadPercent, DefaultDemonicAmmoLoadMinCount, SingleWeaponAmmoIncreaseEffect, OnUsedItemSpawnedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInteractionInterface : Interface
    {
        public DimensionInteractionInterface(nint addr) : base(addr) { }
        public DimensionInteractionInterface() : base(0) { }
        public UEObject GetInteractionTraceComponent(UEObject InteractingController, UEObject bOutUseOnlyForOverlappingComponents) { return InvokeUEObject("GetInteractionTraceComponent", InteractingController, bOutUseOnlyForOverlappingComponents); }
        public void _DimensionInteractionInterface() { Invoke("DimensionInteractionInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInteractionComponent : SphereComponent
    {
        public DimensionInteractionComponent(nint addr) : base(addr) { }
        public DimensionInteractionComponent() : base(0) { }
        public UEObject OnPlayerEnterInteraction { get { return this["OnPlayerEnterInteraction"]; } set { this["OnPlayerEnterInteraction"] = value; } }
        public UEObject OnPlayerLeaveInteraction { get { return this["OnPlayerLeaveInteraction"]; } set { this["OnPlayerLeaveInteraction"] = value; } }
        public UEObject OnComponentInteractionBegin { get { return this["OnComponentInteractionBegin"]; } set { this["OnComponentInteractionBegin"] = value; } }
        public UEObject OnComponentInteractionFailure { get { return this["OnComponentInteractionFailure"]; } set { this["OnComponentInteractionFailure"] = value; } }
        public UEObject OnComponentInteractionSuccess { get { return this["OnComponentInteractionSuccess"]; } set { this["OnComponentInteractionSuccess"] = value; } }
        public UEObject OnComponentInteractionInterrupt { get { return this["OnComponentInteractionInterrupt"]; } set { this["OnComponentInteractionInterrupt"] = value; } }
        public UEObject OnInteractionUpdatedDelegate { get { return this["OnInteractionUpdatedDelegate"]; } set { this["OnInteractionUpdatedDelegate"] = value; } }
        public UEObject OnPromptVisibilityUpdatedDelegate { get { return this["OnPromptVisibilityUpdatedDelegate"]; } set { this["OnPromptVisibilityUpdatedDelegate"] = value; } }
        public UEObject OnComponentPendingStatusUpdated { get { return this["OnComponentPendingStatusUpdated"]; } set { this["OnComponentPendingStatusUpdated"] = value; } }
        public PlayerController InteractingController { get { return this[nameof(InteractingController)].As<PlayerController>(); } set { this["InteractingController"] = value; } }
        public bool bInteractionEnabled { get { return this["bInteractionEnabled"].Flag; } set { this["bInteractionEnabled"].Flag = value; } }
        public bool bInteractionVisible { get { return this["bInteractionVisible"].Flag; } set { this["bInteractionVisible"].Flag = value; } }
        public bool bInteractionInputEnabled { get { return this["bInteractionInputEnabled"].Flag; } set { this["bInteractionInputEnabled"].Flag = value; } }
        public bool bInteractionPending { get { return this["bInteractionPending"].Flag; } set { this["bInteractionPending"].Flag = value; } }
        public bool bInteractionInputPressed { get { return this["bInteractionInputPressed"].Flag; } set { this["bInteractionInputPressed"].Flag = value; } }
        public bool bRequirementsMet { get { return this["bRequirementsMet"].Flag; } set { this["bRequirementsMet"].Flag = value; } }
        public bool bCorrectLocationAndRotation { get { return this["bCorrectLocationAndRotation"].Flag; } set { this["bCorrectLocationAndRotation"].Flag = value; } }
        public PlayerController CollidingController { get { return this[nameof(CollidingController)].As<PlayerController>(); } set { this["CollidingController"] = value; } }
        public EInteractionDurationType DurationType { get { return (EInteractionDurationType)this["DurationType"].GetValue<int>(); } set { this["DurationType"].SetValue<int>((int)value); } }
        public string InputActionName { get { return this["InputActionName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bShowInputActionIcon { get { return this["bShowInputActionIcon"].Flag; } set { this["bShowInputActionIcon"].Flag = value; } }
        public bool bSingleInteractionOnly { get { return this["bSingleInteractionOnly"].Flag; } set { this["bSingleInteractionOnly"].Flag = value; } }
        public bool bAllowContinousInteraction { get { return this["bAllowContinousInteraction"].Flag; } set { this["bAllowContinousInteraction"].Flag = value; } }
        public float InteractionAngle { get { return this["InteractionAngle"].GetValue<float>(); } set { this["InteractionAngle"].SetValue<float>(value); } }
        public string Prompt { get { return this["Prompt"].ToString(); } set { /* String properties are read-only */ } }
        public string ErrorPrompt { get { return this["ErrorPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public string MissingItemsPrompt { get { return this["MissingItemsPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDisplayErrorPromptBelow { get { return this["bDisplayErrorPromptBelow"].Flag; } set { this["bDisplayErrorPromptBelow"].Flag = value; } }
        public UEObject WidgetPromptClass { get { return this["WidgetPromptClass"]; } set { this["WidgetPromptClass"] = value; } }
        public string CurrentPrompt { get { return this["CurrentPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public string CurrentErrorPrompt { get { return this["CurrentErrorPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionUserWidget WidgetPrompt { get { return this[nameof(WidgetPrompt)].As<DimensionUserWidget>(); } set { this["WidgetPrompt"] = value; } }
        public DataTableRowHandle RequirementsHandle { get { return this[nameof(RequirementsHandle)].As<DataTableRowHandle>(); } set { this["RequirementsHandle"] = value; } }
        public bool bDisplayItemRequirements { get { return this["bDisplayItemRequirements"].Flag; } set { this["bDisplayItemRequirements"].Flag = value; } }
        public bool bDisplayMissingItems { get { return this["bDisplayMissingItems"].Flag; } set { this["bDisplayMissingItems"].Flag = value; } }
        public InteractionRequirements Requirements { get { return this[nameof(Requirements)].As<InteractionRequirements>(); } set { this["Requirements"] = value; } }
        public bool bUseCustomHoldSound { get { return this["bUseCustomHoldSound"].Flag; } set { this["bUseCustomHoldSound"].Flag = value; } }
        public SoundBase CustomHoldSound { get { return this[nameof(CustomHoldSound)].As<SoundBase>(); } set { this["CustomHoldSound"] = value; } }
        public bool bUseCustomActionTriggerSound { get { return this["bUseCustomActionTriggerSound"].Flag; } set { this["bUseCustomActionTriggerSound"].Flag = value; } }
        public SoundBase CustomActionTriggerSound { get { return this[nameof(CustomActionTriggerSound)].As<SoundBase>(); } set { this["CustomActionTriggerSound"] = value; } }
        public void UpdateRequirementsFromHandle(UEObject NewInteractionRequirementsHandle) { Invoke("UpdateRequirementsFromHandle", NewInteractionRequirementsHandle); }
        public void _DimensionInteractionComponent(UEObject OnPlayerEnterInteraction, UEObject OnPlayerLeaveInteraction, UEObject OnComponentInteractionBegin, UEObject OnComponentInteractionFailure, UEObject OnComponentInteractionSuccess, UEObject OnComponentInteractionInterrupt, UEObject OnInteractionUpdatedDelegate, UEObject OnPromptVisibilityUpdatedDelegate, UEObject OnComponentPendingStatusUpdated, UEObject InteractingController, UEObject bInteractionEnabled, UEObject bInteractionVisible, UEObject bInteractionInputEnabled, UEObject bInteractionPending, UEObject bInteractionInputPressed, UEObject bRequirementsMet, UEObject bCorrectLocationAndRotation, UEObject CollidingController, UEObject DurationType, UEObject InputActionName, UEObject bShowInputActionIcon, UEObject bSingleInteractionOnly, UEObject bAllowContinousInteraction, UEObject InteractionAngle, UEObject Prompt, UEObject ErrorPrompt, UEObject MissingItemsPrompt, UEObject bDisplayErrorPromptBelow, UEObject WidgetPromptClass, UEObject CurrentPrompt, UEObject CurrentErrorPrompt, UEObject WidgetPrompt, UEObject RequirementsHandle, UEObject bDisplayItemRequirements, UEObject bDisplayMissingItems, UEObject Requirements, UEObject bUseCustomHoldSound, UEObject CustomHoldSound, UEObject bUseCustomActionTriggerSound, UEObject CustomActionTriggerSound) { Invoke("DimensionInteractionComponent", OnPlayerEnterInteraction, OnPlayerLeaveInteraction, OnComponentInteractionBegin, OnComponentInteractionFailure, OnComponentInteractionSuccess, OnComponentInteractionInterrupt, OnInteractionUpdatedDelegate, OnPromptVisibilityUpdatedDelegate, OnComponentPendingStatusUpdated, InteractingController, bInteractionEnabled, bInteractionVisible, bInteractionInputEnabled, bInteractionPending, bInteractionInputPressed, bRequirementsMet, bCorrectLocationAndRotation, CollidingController, DurationType, InputActionName, bShowInputActionIcon, bSingleInteractionOnly, bAllowContinousInteraction, InteractionAngle, Prompt, ErrorPrompt, MissingItemsPrompt, bDisplayErrorPromptBelow, WidgetPromptClass, CurrentPrompt, CurrentErrorPrompt, WidgetPrompt, RequirementsHandle, bDisplayItemRequirements, bDisplayMissingItems, Requirements, bUseCustomHoldSound, CustomHoldSound, bUseCustomActionTriggerSound, CustomActionTriggerSound); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInteractionUserWidget : DimensionUserWidget
    {
        public DimensionInteractionUserWidget(nint addr) : base(addr) { }
        public DimensionInteractionUserWidget() : base(0) { }
    }
    public class DimensionInteractionActor : Actor
    {
        public DimensionInteractionActor(nint addr) : base(addr) { }
        public DimensionInteractionActor() : base(0) { }
    }
    public class DimensionInstantHealEffect : DimensionGameplayEffect
    {
        public DimensionInstantHealEffect(nint addr) : base(addr) { }
        public DimensionInstantHealEffect() : base(0) { }
    }
    public class DimensionInputInterface : Interface
    {
        public DimensionInputInterface(nint addr) : base(addr) { }
        public DimensionInputInterface() : base(0) { }
        public void InputCallback(UEObject ActionName, UEObject KeyEvent) { Invoke("InputCallback", ActionName, KeyEvent); }
        public void _DimensionInputInterface() { Invoke("DimensionInputInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInputConfig : DataAsset
    {
        public DimensionInputConfig(nint addr) : base(addr) { }
        public DimensionInputConfig() : base(0) { }
        public UEObject BindingContextGroup { get { return this["BindingContextGroup"]; } set { this["BindingContextGroup"] = value; } }
        public ActionCollection KBMEssentialBoundActions { get { return this[nameof(KBMEssentialBoundActions)].As<ActionCollection>(); } set { this["KBMEssentialBoundActions"] = value; } }
        public ActionCollection GamepadEssentialBoundActions { get { return this[nameof(GamepadEssentialBoundActions)].As<ActionCollection>(); } set { this["GamepadEssentialBoundActions"] = value; } }
        public UEObject MissingInputIcon { get { return this["MissingInputIcon"]; } set { this["MissingInputIcon"] = value; } }
        public UEObject IconMappings { get { return this["IconMappings"]; } set { this["IconMappings"] = value; } }
        public DimensionGamepadThumbstickProfile GamepadRotationProfile { get { return this[nameof(GamepadRotationProfile)].As<DimensionGamepadThumbstickProfile>(); } set { this["GamepadRotationProfile"] = value; } }
        public DimensionGamepadThumbstickProfile GamepadMovementProfile { get { return this[nameof(GamepadMovementProfile)].As<DimensionGamepadThumbstickProfile>(); } set { this["GamepadMovementProfile"] = value; } }
        public UEObject MakeDimensionKeyFromKey(UEObject Key, UEObject Scale) { return InvokeUEObject("MakeDimensionKeyFromKey", Key, Scale); }
        public void _DimensionInputConfig(UEObject BindingContextGroup, UEObject KBMEssentialBoundActions, UEObject GamepadEssentialBoundActions, UEObject MissingInputIcon, UEObject IconMappings, UEObject GamepadRotationProfile, UEObject GamepadMovementProfile) { Invoke("DimensionInputConfig", BindingContextGroup, KBMEssentialBoundActions, GamepadEssentialBoundActions, MissingInputIcon, IconMappings, GamepadRotationProfile, GamepadMovementProfile); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInputComponent : InputComponent
    {
        public DimensionInputComponent(nint addr) : base(addr) { }
        public DimensionInputComponent() : base(0) { }
        public UEObject OnActionChangeDelegate { get { return this["OnActionChangeDelegate"]; } set { this["OnActionChangeDelegate"] = value; } }
        public UEObject GetActionBindingsAsString() { return InvokeUEObject("GetActionBindingsAsString"); }
        public void _DimensionInputComponent(UEObject OnActionChangeDelegate) { Invoke("DimensionInputComponent", OnActionChangeDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInitManager : DimensionObject
    {
        public DimensionInitManager(nint addr) : base(addr) { }
        public DimensionInitManager() : base(0) { }
        public GameplayTagContainer PersistentTags { get { return this[nameof(PersistentTags)].As<GameplayTagContainer>(); } set { this["PersistentTags"] = value; } }
        public GameplayTagContainer RegisteredInitTags { get { return this[nameof(RegisteredInitTags)].As<GameplayTagContainer>(); } set { this["RegisteredInitTags"] = value; } }
        public Array<DimensionInitManagerData> PendingObjectRequests { get { return new Array<DimensionInitManagerData>(this["PendingObjectRequests"]); } set { this["PendingObjectRequests"] = value; } }
        public UEObject OnObjectInitDelegate { get { return this["OnObjectInitDelegate"]; } set { this["OnObjectInitDelegate"] = value; } }
        public UEObject OnObjectUnregisteredDelegate { get { return this["OnObjectUnregisteredDelegate"]; } set { this["OnObjectUnregisteredDelegate"] = value; } }
        public UEObject ObjectMap { get { return this["ObjectMap"]; } set { this["ObjectMap"] = value; } }
        public UEObject PriorityReceiversMap { get { return this["PriorityReceiversMap"]; } set { this["PriorityReceiversMap"] = value; } }
        public void UnregisterObject(UEObject InitObjectTag, UEObject InitObject) { Invoke("UnregisterObject", InitObjectTag, InitObject); }
        public void _DimensionInitManager(UEObject PersistentTags, UEObject RegisteredInitTags, UEObject PendingObjectRequests, UEObject OnObjectInitDelegate, UEObject OnObjectUnregisteredDelegate, UEObject ObjectMap, UEObject PriorityReceiversMap) { Invoke("DimensionInitManager", PersistentTags, RegisteredInitTags, PendingObjectRequests, OnObjectInitDelegate, OnObjectUnregisteredDelegate, ObjectMap, PriorityReceiversMap); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionInfluenceMap : UEObject
    {
        public DimensionInfluenceMap(nint addr) : base(addr) { }
        public DimensionInfluenceMap() : base(0) { }
        public Array<InfluencePoint> InfluencePoints { get { return new Array<InfluencePoint>(this["InfluencePoints"]); } set { this["InfluencePoints"] = value; } }
        public Array<InfluenceSegment> InfluenceSegments { get { return new Array<InfluenceSegment>(this["InfluenceSegments"]); } set { this["InfluenceSegments"] = value; } }
        public Array<InfluenceCone> InfluenceCones { get { return new Array<InfluenceCone>(this["InfluenceCones"]); } set { this["InfluenceCones"] = value; } }
        public void SpawnInfluenceSegment(UEObject WorldContextObject, UEObject InfluenceSegment) { Invoke("SpawnInfluenceSegment", WorldContextObject, InfluenceSegment); }
        public void _DimensionInfluenceMap(UEObject InfluencePoints, UEObject InfluenceSegments, UEObject InfluenceCones) { Invoke("DimensionInfluenceMap", InfluencePoints, InfluenceSegments, InfluenceCones); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHUD : HUD
    {
        public DimensionHUD(nint addr) : base(addr) { }
        public DimensionHUD() : base(0) { }
        public Array<DimensionUserWidget> TickPauseWidgetStack { get { return new Array<DimensionUserWidget>(this["TickPauseWidgetStack"]); } set { this["TickPauseWidgetStack"] = value; } }
        public Array<DimensionWidgetController> WidgetControllers { get { return new Array<DimensionWidgetController>(this["WidgetControllers"]); } set { this["WidgetControllers"] = value; } }
        public void UpdateObjectiveStatus(UEObject ObjectiveID, UEObject NewStatus) { Invoke("UpdateObjectiveStatus", ObjectiveID, NewStatus); }
        public void _DimensionHUD(UEObject TickPauseWidgetStack, UEObject WidgetControllers) { Invoke("DimensionHUD", TickPauseWidgetStack, WidgetControllers); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHitReactionInterface : Interface
    {
        public DimensionHitReactionInterface(nint addr) : base(addr) { }
        public DimensionHitReactionInterface() : base(0) { }
        public UEObject ShouldTriggerOnHitOnDeath() { return InvokeUEObject("ShouldTriggerOnHitOnDeath"); }
        public void _DimensionHitReactionInterface() { Invoke("DimensionHitReactionInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHelpGuidePageWidgetBase : DimensionUserWidget
    {
        public DimensionHelpGuidePageWidgetBase(nint addr) : base(addr) { }
        public DimensionHelpGuidePageWidgetBase() : base(0) { }
    }
    public class DimensionHelpGuideController : DimensionUserWidget
    {
        public DimensionHelpGuideController(nint addr) : base(addr) { }
        public DimensionHelpGuideController() : base(0) { }
        public DataTable PagesDataTable { get { return this[nameof(PagesDataTable)].As<DataTable>(); } set { this["PagesDataTable"] = value; } }
        public DataTable HotspotsDataTable { get { return this[nameof(HotspotsDataTable)].As<DataTable>(); } set { this["HotspotsDataTable"] = value; } }
        public UEObject WereAllDisplayedPagesSeen() { return InvokeUEObject("WereAllDisplayedPagesSeen"); }
        public void _DimensionHelpGuideController(UEObject PagesDataTable, UEObject HotspotsDataTable) { Invoke("DimensionHelpGuideController", PagesDataTable, HotspotsDataTable); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHealthRegenEffect_FullHealSameRate : DimensionGameplayEffect
    {
        public DimensionHealthRegenEffect_FullHealSameRate(nint addr) : base(addr) { }
        public DimensionHealthRegenEffect_FullHealSameRate() : base(0) { }
    }
    public class HealthRegenEffectCustomCalculation_FullHealSameRate : GameplayModMagnitudeCalculation
    {
        public HealthRegenEffectCustomCalculation_FullHealSameRate(nint addr) : base(addr) { }
        public HealthRegenEffectCustomCalculation_FullHealSameRate() : base(0) { }
    }
    public class DimensionHealthRegenEffect : DimensionGameplayEffect
    {
        public DimensionHealthRegenEffect(nint addr) : base(addr) { }
        public DimensionHealthRegenEffect() : base(0) { }
    }
    public class HealthRegenEffectCustomCalculation : GameplayModMagnitudeCalculation
    {
        public HealthRegenEffectCustomCalculation(nint addr) : base(addr) { }
        public HealthRegenEffectCustomCalculation() : base(0) { }
    }
    public class DimensionHealthBarWidgetInterface : Interface
    {
        public DimensionHealthBarWidgetInterface(nint addr) : base(addr) { }
        public DimensionHealthBarWidgetInterface() : base(0) { }
        public void UpdateHealthBarVisibility() { Invoke("UpdateHealthBarVisibility"); }
        public void _DimensionHealthBarWidgetInterface() { Invoke("DimensionHealthBarWidgetInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHealthBarPanelWidget : DimensionUserWidget
    {
        public DimensionHealthBarPanelWidget(nint addr) : base(addr) { }
        public DimensionHealthBarPanelWidget() : base(0) { }
        //public UEObject CurrentHealthBarWidget { get { return this["CurrentHealthBarWidget"].GetValue<UEObject>(); } set { this["CurrentHealthBarWidget"].SetValue<UEObject>(value); } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public UEObject ActorHealthBarWidgetClass { get { return this["ActorHealthBarWidgetClass"]; } set { this["ActorHealthBarWidgetClass"] = value; } }
        public UEObject EnemyHealthBarWidgetClass { get { return this["EnemyHealthBarWidgetClass"]; } set { this["EnemyHealthBarWidgetClass"] = value; } }
        public UEObject BossHealthBarWidgetClass { get { return this["BossHealthBarWidgetClass"]; } set { this["BossHealthBarWidgetClass"] = value; } }
        public Vector2D ActorHealthBarRenderScale { get { return this[nameof(ActorHealthBarRenderScale)].As<Vector2D>(); } set { this["ActorHealthBarRenderScale"] = value; } }
        public CanvasPanel CachedHealthBarsCanvasPanel { get { return this[nameof(CachedHealthBarsCanvasPanel)].As<CanvasPanel>(); } set { this["CachedHealthBarsCanvasPanel"] = value; } }
        public DimensionBossHealthBarStackWidget CachedBossHealthBarStack { get { return this[nameof(CachedBossHealthBarStack)].As<DimensionBossHealthBarStackWidget>(); } set { this["CachedBossHealthBarStack"] = value; } }
        public DimensionObjectPool ActorObjectPool { get { return this[nameof(ActorObjectPool)].As<DimensionObjectPool>(); } set { this["ActorObjectPool"] = value; } }
        public DimensionObjectPool EnemyObjectPool { get { return this[nameof(EnemyObjectPool)].As<DimensionObjectPool>(); } set { this["EnemyObjectPool"] = value; } }
        public DimensionObjectPool BossObjectPool { get { return this[nameof(BossObjectPool)].As<DimensionObjectPool>(); } set { this["BossObjectPool"] = value; } }
        public void OnPlayerTagUpdated(UEObject OwningAbilitySystem, UEObject Tag, UEObject bTagExists) { Invoke("OnPlayerTagUpdated", OwningAbilitySystem, Tag, bTagExists); }
        public void _DimensionHealthBarPanelWidget(UEObject CurrentHealthBarWidget, UEObject TargetActor, UEObject ActorHealthBarWidgetClass, UEObject EnemyHealthBarWidgetClass, UEObject BossHealthBarWidgetClass, UEObject ActorHealthBarRenderScale, UEObject CachedHealthBarsCanvasPanel, UEObject CachedBossHealthBarStack, UEObject ActorObjectPool, UEObject EnemyObjectPool, UEObject BossObjectPool) { Invoke("DimensionHealthBarPanelWidget", CurrentHealthBarWidget, TargetActor, ActorHealthBarWidgetClass, EnemyHealthBarWidgetClass, BossHealthBarWidgetClass, ActorHealthBarRenderScale, CachedHealthBarsCanvasPanel, CachedBossHealthBarStack, ActorObjectPool, EnemyObjectPool, BossObjectPool); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHealthBarInterface : Interface
    {
        public DimensionHealthBarInterface(nint addr) : base(addr) { }
        public DimensionHealthBarInterface() : base(0) { }
        public UEObject IsHealthBarVisible() { return InvokeUEObject("IsHealthBarVisible"); }
        public void _DimensionHealthBarInterface() { Invoke("DimensionHealthBarInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHealthAttribSet : DimensionAttribSet
    {
        public DimensionHealthAttribSet(nint addr) : base(addr) { }
        public DimensionHealthAttribSet() : base(0) { }
        public float MaxHealth { get { return this["MaxHealth"].GetValue<float>(); } set { this["MaxHealth"].SetValue<float>(value); } }
        public float Health { get { return this["Health"].GetValue<float>(); } set { this["Health"].SetValue<float>(value); } }
        public float Lives { get { return this["Lives"].GetValue<float>(); } set { this["Lives"].SetValue<float>(value); } }
        public float ReviveHealthPercentage { get { return this["ReviveHealthPercentage"].GetValue<float>(); } set { this["ReviveHealthPercentage"].SetValue<float>(value); } }
        public float HealingValue { get { return this["HealingValue"].GetValue<float>(); } set { this["HealingValue"].SetValue<float>(value); } }
        public float HealingDuration { get { return this["HealingDuration"].GetValue<float>(); } set { this["HealingDuration"].SetValue<float>(value); } }
        public float HealingValuePerSecond { get { return this["HealingValuePerSecond"].GetValue<float>(); } set { this["HealingValuePerSecond"].SetValue<float>(value); } }
        public float HealingEffectiveness { get { return this["HealingEffectiveness"].GetValue<float>(); } set { this["HealingEffectiveness"].SetValue<float>(value); } }
        public float FlatHealingModifier { get { return this["FlatHealingModifier"].GetValue<float>(); } set { this["FlatHealingModifier"].SetValue<float>(value); } }
        public float FlatHealingValue { get { return this["FlatHealingValue"].GetValue<float>(); } set { this["FlatHealingValue"].SetValue<float>(value); } }
        public void OnRep_Health(UEObject OldValue) { Invoke("OnRep_Health", OldValue); }
        public void _DimensionHealthAttribSet(UEObject MaxHealth, UEObject Health, UEObject Lives, UEObject ReviveHealthPercentage, UEObject HealingValue, UEObject HealingDuration, UEObject HealingValuePerSecond, UEObject HealingEffectiveness, UEObject FlatHealingModifier, UEObject FlatHealingValue) { Invoke("DimensionHealthAttribSet", MaxHealth, Health, Lives, ReviveHealthPercentage, HealingValue, HealingDuration, HealingValuePerSecond, HealingEffectiveness, FlatHealingModifier, FlatHealingValue); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHandCannonMediumInterface : Interface
    {
        public DimensionHandCannonMediumInterface(nint addr) : base(addr) { }
        public DimensionHandCannonMediumInterface() : base(0) { }
        public void OnFreezingBulletUpdated(UEObject bFreezingBulletReady) { Invoke("OnFreezingBulletUpdated", bFreezingBulletReady); }
        public void _DimensionHandCannonMediumInterface() { Invoke("DimensionHandCannonMediumInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHandCannonLightInterface : Interface
    {
        public DimensionHandCannonLightInterface(nint addr) : base(addr) { }
        public DimensionHandCannonLightInterface() : base(0) { }
        public UEObject IsChargedReloadEnabled(UEObject bOutShouldAutoReload) { return InvokeUEObject("IsChargedReloadEnabled", bOutShouldAutoReload); }
        public void _DimensionHandCannonLightInterface() { Invoke("DimensionHandCannonLightInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGrenadeLauncherInterface : Interface
    {
        public DimensionGrenadeLauncherInterface(nint addr) : base(addr) { }
        public DimensionGrenadeLauncherInterface() : base(0) { }
        public void OnTargetTagged(UEObject Target) { Invoke("OnTargetTagged", Target); }
        public void _DimensionGrenadeLauncherInterface() { Invoke("DimensionGrenadeLauncherInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameViewportClient : GameViewportClient
    {
        public DimensionGameViewportClient(nint addr) : base(addr) { }
        public DimensionGameViewportClient() : base(0) { }
        public bool bLastInputFromGamepad { get { return this["bLastInputFromGamepad"].Flag; } set { this["bLastInputFromGamepad"].Flag = value; } }
        public Array<Key> PlatformChangeIgnoreKeys { get { return new Array<Key>(this["PlatformChangeIgnoreKeys"]); } set { this["PlatformChangeIgnoreKeys"] = value; } }
        public UEObject RequiredPlatformChangeAxisKeyAmount { get { return this["RequiredPlatformChangeAxisKeyAmount"]; } set { this["RequiredPlatformChangeAxisKeyAmount"] = value; } }
        public UEObject OnGamepadAClicked { get { return this["OnGamepadAClicked"]; } set { this["OnGamepadAClicked"] = value; } }
        public float AnalogGamepadCursorRadius { get { return this["AnalogGamepadCursorRadius"].GetValue<float>(); } set { this["AnalogGamepadCursorRadius"].SetValue<float>(value); } }
        public float AnalogMouseCursorRadius { get { return this["AnalogMouseCursorRadius"].GetValue<float>(); } set { this["AnalogMouseCursorRadius"].SetValue<float>(value); } }
        public float DeadZone { get { return this["DeadZone"].GetValue<float>(); } set { this["DeadZone"].SetValue<float>(value); } }
        public float MaxSpeed { get { return this["MaxSpeed"].GetValue<float>(); } set { this["MaxSpeed"].SetValue<float>(value); } }
        public float StickySlowdown { get { return this["StickySlowdown"].GetValue<float>(); } set { this["StickySlowdown"].SetValue<float>(value); } }
        public UEObject AnalogCursorWidgetClass { get { return this["AnalogCursorWidgetClass"]; } set { this["AnalogCursorWidgetClass"] = value; } }
        public UserWidget AnalogCursorWidget { get { return this[nameof(AnalogCursorWidget)].As<UserWidget>(); } set { this["AnalogCursorWidget"] = value; } }
        public void OnVirtualAcceptKeyEventChange(UEObject bPressed) { Invoke("OnVirtualAcceptKeyEventChange", bPressed); }
        public void _DimensionGameViewportClient(UEObject bLastInputFromGamepad, UEObject PlatformChangeIgnoreKeys, UEObject RequiredPlatformChangeAxisKeyAmount, UEObject OnGamepadAClicked, UEObject AnalogGamepadCursorRadius, UEObject AnalogMouseCursorRadius, UEObject DeadZone, UEObject MaxSpeed, UEObject StickySlowdown, UEObject AnalogCursorWidgetClass, UEObject AnalogCursorWidget) { Invoke("DimensionGameViewportClient", bLastInputFromGamepad, PlatformChangeIgnoreKeys, RequiredPlatformChangeAxisKeyAmount, OnGamepadAClicked, AnalogGamepadCursorRadius, AnalogMouseCursorRadius, DeadZone, MaxSpeed, StickySlowdown, AnalogCursorWidgetClass, AnalogCursorWidget); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameUserSettings : GameUserSettings
    {
        public DimensionGameUserSettings(nint addr) : base(addr) { }
        public DimensionGameUserSettings() : base(0) { }
        public int SettingsVersion { get { return this["SettingsVersion"].GetValue<int>(); } set { this["SettingsVersion"].SetValue<int>(value); } }
        public int OriginalSettingsVersion { get { return this["OriginalSettingsVersion"].GetValue<int>(); } set { this["OriginalSettingsVersion"].SetValue<int>(value); } }
        public float MouseSensitivity { get { return this["MouseSensitivity"].GetValue<float>(); } set { this["MouseSensitivity"].SetValue<float>(value); } }
        public float MouseADSSensitivityModifier { get { return this["MouseADSSensitivityModifier"].GetValue<float>(); } set { this["MouseADSSensitivityModifier"].SetValue<float>(value); } }
        public float GamepadSensitivity { get { return this["GamepadSensitivity"].GetValue<float>(); } set { this["GamepadSensitivity"].SetValue<float>(value); } }
        public float GamepadADSSensitivityModifier { get { return this["GamepadADSSensitivityModifier"].GetValue<float>(); } set { this["GamepadADSSensitivityModifier"].SetValue<float>(value); } }
        public bool bMouseVerticalInversion { get { return this["bMouseVerticalInversion"].Flag; } set { this["bMouseVerticalInversion"].Flag = value; } }
        public bool bMouseHorizontalInversion { get { return this["bMouseHorizontalInversion"].Flag; } set { this["bMouseHorizontalInversion"].Flag = value; } }
        public bool bGamepadVerticalInversion { get { return this["bGamepadVerticalInversion"].Flag; } set { this["bGamepadVerticalInversion"].Flag = value; } }
        public bool bGamepadHorizontalInversion { get { return this["bGamepadHorizontalInversion"].Flag; } set { this["bGamepadHorizontalInversion"].Flag = value; } }
        public bool bAlwaysShowBoosterNames { get { return this["bAlwaysShowBoosterNames"].Flag; } set { this["bAlwaysShowBoosterNames"].Flag = value; } }
        public UEObject OnPropertySettingChanged { get { return this["OnPropertySettingChanged"]; } set { this["OnPropertySettingChanged"] = value; } }
        public UEObject OnSettingsLoaded { get { return this["OnSettingsLoaded"]; } set { this["OnSettingsLoaded"] = value; } }
        public float HipfireFOV { get { return this["HipfireFOV"].GetValue<float>(); } set { this["HipfireFOV"].SetValue<float>(value); } }
        public int EnemiesVisibilityBoost { get { return this["EnemiesVisibilityBoost"].GetValue<int>(); } set { this["EnemiesVisibilityBoost"].SetValue<int>(value); } }
        public bool ScreenEffectsEnabled { get { return this["ScreenEffectsEnabled"].Flag; } set { this["ScreenEffectsEnabled"].Flag = value; } }
        public int GraphicsPreset { get { return this["GraphicsPreset"].GetValue<int>(); } set { this["GraphicsPreset"].SetValue<int>(value); } }
        public float Brightness { get { return this["Brightness"].GetValue<float>(); } set { this["Brightness"].SetValue<float>(value); } }
        public float ResolutionScale { get { return this["ResolutionScale"].GetValue<float>(); } set { this["ResolutionScale"].SetValue<float>(value); } }
        public bool bFPSLimitEnabled { get { return this["bFPSLimitEnabled"].Flag; } set { this["bFPSLimitEnabled"].Flag = value; } }
        public float FPSLimit { get { return this["FPSLimit"].GetValue<float>(); } set { this["FPSLimit"].SetValue<float>(value); } }
        public int ReflectionsMode { get { return this["ReflectionsMode"].GetValue<int>(); } set { this["ReflectionsMode"].SetValue<int>(value); } }
        public int RenderingInUI { get { return this["RenderingInUI"].GetValue<int>(); } set { this["RenderingInUI"].SetValue<int>(value); } }
        public int RenderingInUIMode { get { return this["RenderingInUIMode"].GetValue<int>(); } set { this["RenderingInUIMode"].SetValue<int>(value); } }
        public bool Bloom { get { return this["Bloom"].Flag; } set { this["Bloom"].Flag = value; } }
        public bool DOF { get { return this["DOF"].Flag; } set { this["DOF"].Flag = value; } }
        public bool Vignette { get { return this["Vignette"].Flag; } set { this["Vignette"].Flag = value; } }
        public bool MotionBlur { get { return this["MotionBlur"].Flag; } set { this["MotionBlur"].Flag = value; } }
        public bool Sharpen { get { return this["Sharpen"].Flag; } set { this["Sharpen"].Flag = value; } }
        public bool LensFlares { get { return this["LensFlares"].Flag; } set { this["LensFlares"].Flag = value; } }
        public bool Grain { get { return this["Grain"].Flag; } set { this["Grain"].Flag = value; } }
        public bool ChromaticAberration { get { return this["ChromaticAberration"].Flag; } set { this["ChromaticAberration"].Flag = value; } }
        public float ReshadeStrength { get { return this["ReshadeStrength"].GetValue<float>(); } set { this["ReshadeStrength"].SetValue<float>(value); } }
        public int LimitHUDAspectRatio { get { return this["LimitHUDAspectRatio"].GetValue<int>(); } set { this["LimitHUDAspectRatio"].SetValue<int>(value); } }
        public bool CrosshairVisibility { get { return this["CrosshairVisibility"].Flag; } set { this["CrosshairVisibility"].Flag = value; } }
        public bool CrosshairLowered { get { return this["CrosshairLowered"].Flag; } set { this["CrosshairLowered"].Flag = value; } }
        public bool CrosshairNotifiers { get { return this["CrosshairNotifiers"].Flag; } set { this["CrosshairNotifiers"].Flag = value; } }
        public int HUDPreset { get { return this["HUDPreset"].GetValue<int>(); } set { this["HUDPreset"].SetValue<int>(value); } }
        public bool DamageNumbers { get { return this["DamageNumbers"].Flag; } set { this["DamageNumbers"].Flag = value; } }
        public bool HealthBars { get { return this["HealthBars"].Flag; } set { this["HealthBars"].Flag = value; } }
        public bool ItemPickupNotifications { get { return this["ItemPickupNotifications"].Flag; } set { this["ItemPickupNotifications"].Flag = value; } }
        public int BoosterIcons { get { return this["BoosterIcons"].GetValue<int>(); } set { this["BoosterIcons"].SetValue<int>(value); } }
        public int WarningSystem { get { return this["WarningSystem"].GetValue<int>(); } set { this["WarningSystem"].SetValue<int>(value); } }
        public bool PLayerHPStamina { get { return this["PLayerHPStamina"].Flag; } set { this["PLayerHPStamina"].Flag = value; } }
        public bool Radar { get { return this["Radar"].Flag; } set { this["Radar"].Flag = value; } }
        public bool MeleeSpellsIcons { get { return this["MeleeSpellsIcons"].Flag; } set { this["MeleeSpellsIcons"].Flag = value; } }
        public bool AmmoCountWeaponPerk { get { return this["AmmoCountWeaponPerk"].Flag; } set { this["AmmoCountWeaponPerk"].Flag = value; } }
        public bool InteractionPrompt { get { return this["InteractionPrompt"].Flag; } set { this["InteractionPrompt"].Flag = value; } }
        public bool OtherHUDElements { get { return this["OtherHUDElements"].Flag; } set { this["OtherHUDElements"].Flag = value; } }
        public float MastVolume { get { return this["MastVolume"].GetValue<float>(); } set { this["MastVolume"].SetValue<float>(value); } }
        public float MusicVolume { get { return this["MusicVolume"].GetValue<float>(); } set { this["MusicVolume"].SetValue<float>(value); } }
        public float SoundFXVolume { get { return this["SoundFXVolume"].GetValue<float>(); } set { this["SoundFXVolume"].SetValue<float>(value); } }
        public float UIVolume { get { return this["UIVolume"].GetValue<float>(); } set { this["UIVolume"].SetValue<float>(value); } }
        public float CutsceneVolume { get { return this["CutsceneVolume"].GetValue<float>(); } set { this["CutsceneVolume"].SetValue<float>(value); } }
        public float DialogueVolume { get { return this["DialogueVolume"].GetValue<float>(); } set { this["DialogueVolume"].SetValue<float>(value); } }
        public bool CrouchActionToggle { get { return this["CrouchActionToggle"].Flag; } set { this["CrouchActionToggle"].Flag = value; } }
        public bool RunActionToggle { get { return this["RunActionToggle"].Flag; } set { this["RunActionToggle"].Flag = value; } }
        public bool AimActionToggle { get { return this["AimActionToggle"].Flag; } set { this["AimActionToggle"].Flag = value; } }
        public bool ControllerStickiness { get { return this["ControllerStickiness"].Flag; } set { this["ControllerStickiness"].Flag = value; } }
        public int UIHoldDelay { get { return this["UIHoldDelay"].GetValue<int>(); } set { this["UIHoldDelay"].SetValue<int>(value); } }
        public bool GamepadLeftXAxisInverted { get { return this["GamepadLeftXAxisInverted"].Flag; } set { this["GamepadLeftXAxisInverted"].Flag = value; } }
        public bool GamepadLeftYAxisInverted { get { return this["GamepadLeftYAxisInverted"].Flag; } set { this["GamepadLeftYAxisInverted"].Flag = value; } }
        public bool GamepadRightXAxisInverted { get { return this["GamepadRightXAxisInverted"].Flag; } set { this["GamepadRightXAxisInverted"].Flag = value; } }
        public bool GamepadRightYAxisInverted { get { return this["GamepadRightYAxisInverted"].Flag; } set { this["GamepadRightYAxisInverted"].Flag = value; } }
        public float GamepadLeftThumbstickCenterDeadzone { get { return this["GamepadLeftThumbstickCenterDeadzone"].GetValue<float>(); } set { this["GamepadLeftThumbstickCenterDeadzone"].SetValue<float>(value); } }
        public float GamepadLeftThumbstickAxialDeadzone { get { return this["GamepadLeftThumbstickAxialDeadzone"].GetValue<float>(); } set { this["GamepadLeftThumbstickAxialDeadzone"].SetValue<float>(value); } }
        public float GamepadRightThumbstickCenterDeadzone { get { return this["GamepadRightThumbstickCenterDeadzone"].GetValue<float>(); } set { this["GamepadRightThumbstickCenterDeadzone"].SetValue<float>(value); } }
        public float GamepadRightThumbstickAxialDeadzone { get { return this["GamepadRightThumbstickAxialDeadzone"].GetValue<float>(); } set { this["GamepadRightThumbstickAxialDeadzone"].SetValue<float>(value); } }
        public bool MovementLeftStick { get { return this["MovementLeftStick"].Flag; } set { this["MovementLeftStick"].Flag = value; } }
        public bool bMouseSmoothing { get { return this["bMouseSmoothing"].Flag; } set { this["bMouseSmoothing"].Flag = value; } }
        public int DashMode { get { return this["DashMode"].GetValue<int>(); } set { this["DashMode"].SetValue<int>(value); } }
        public float DashPressWindowTime { get { return this["DashPressWindowTime"].GetValue<float>(); } set { this["DashPressWindowTime"].SetValue<float>(value); } }
        public int SpellMode { get { return this["SpellMode"].GetValue<int>(); } set { this["SpellMode"].SetValue<int>(value); } }
        public int ChoosenUpscaler { get { return this["ChoosenUpscaler"].GetValue<int>(); } set { this["ChoosenUpscaler"].SetValue<int>(value); } }
        public bool DLSS_FG { get { return this["DLSS_FG"].Flag; } set { this["DLSS_FG"].Flag = value; } }
        public int DLSS_SR { get { return this["DLSS_SR"].GetValue<int>(); } set { this["DLSS_SR"].SetValue<int>(value); } }
        public float DLSS_Sharpness { get { return this["DLSS_Sharpness"].GetValue<float>(); } set { this["DLSS_Sharpness"].SetValue<float>(value); } }
        public int DLSS_Reflex { get { return this["DLSS_Reflex"].GetValue<int>(); } set { this["DLSS_Reflex"].SetValue<int>(value); } }
        public int NIS_Mode { get { return this["NIS_Mode"].GetValue<int>(); } set { this["NIS_Mode"].SetValue<int>(value); } }
        public float NIS_Sharpness { get { return this["NIS_Sharpness"].GetValue<float>(); } set { this["NIS_Sharpness"].SetValue<float>(value); } }
        public int FSR1_Mode { get { return this["FSR1_Mode"].GetValue<int>(); } set { this["FSR1_Mode"].SetValue<int>(value); } }
        public float FSR1_Sharpness { get { return this["FSR1_Sharpness"].GetValue<float>(); } set { this["FSR1_Sharpness"].SetValue<float>(value); } }
        public bool FSR1_Denoise { get { return this["FSR1_Denoise"].Flag; } set { this["FSR1_Denoise"].Flag = value; } }
        public int FSR2_Mode { get { return this["FSR2_Mode"].GetValue<int>(); } set { this["FSR2_Mode"].SetValue<int>(value); } }
        public float FSR2_Sharpness { get { return this["FSR2_Sharpness"].GetValue<float>(); } set { this["FSR2_Sharpness"].SetValue<float>(value); } }
        public int XESS_Mode { get { return this["XESS_Mode"].GetValue<int>(); } set { this["XESS_Mode"].SetValue<int>(value); } }
        public bool XEFG { get { return this["XEFG"].Flag; } set { this["XEFG"].Flag = value; } }
        public bool XELL { get { return this["XELL"].Flag; } set { this["XELL"].Flag = value; } }
        public int TAAU_Mode { get { return this["TAAU_Mode"].GetValue<int>(); } set { this["TAAU_Mode"].SetValue<int>(value); } }
        public void SetStringSettingValue(UEObject SettingTag, UEObject Value, UEObject ShouldSaveAfterChange) { Invoke("SetStringSettingValue", SettingTag, Value, ShouldSaveAfterChange); }
        public void _DimensionGameUserSettings(UEObject SettingsVersion, UEObject OriginalSettingsVersion, UEObject MouseSensitivity, UEObject MouseADSSensitivityModifier, UEObject GamepadSensitivity, UEObject GamepadADSSensitivityModifier, UEObject bMouseVerticalInversion, UEObject bMouseHorizontalInversion, UEObject bGamepadVerticalInversion, UEObject bGamepadHorizontalInversion, UEObject bAlwaysShowBoosterNames, UEObject OnPropertySettingChanged, UEObject OnSettingsLoaded, UEObject HipfireFOV, UEObject EnemiesVisibilityBoost, UEObject ScreenEffectsEnabled, UEObject GraphicsPreset, UEObject Brightness, UEObject ResolutionScale, UEObject bFPSLimitEnabled, UEObject FPSLimit, UEObject ReflectionsMode, UEObject RenderingInUI, UEObject RenderingInUIMode, UEObject Bloom, UEObject DOF, UEObject Vignette, UEObject MotionBlur, UEObject Sharpen, UEObject LensFlares, UEObject Grain, UEObject ChromaticAberration, UEObject ReshadeStrength, UEObject LimitHUDAspectRatio, UEObject CrosshairVisibility, UEObject CrosshairLowered, UEObject CrosshairNotifiers, UEObject HUDPreset, UEObject DamageNumbers, UEObject HealthBars, UEObject ItemPickupNotifications, UEObject BoosterIcons, UEObject WarningSystem, UEObject PLayerHPStamina, UEObject Radar, UEObject MeleeSpellsIcons, UEObject AmmoCountWeaponPerk, UEObject InteractionPrompt, UEObject OtherHUDElements, UEObject MastVolume, UEObject MusicVolume, UEObject SoundFXVolume, UEObject UIVolume, UEObject CutsceneVolume, UEObject DialogueVolume, UEObject CrouchActionToggle, UEObject RunActionToggle, UEObject AimActionToggle, UEObject ControllerStickiness, UEObject UIHoldDelay, UEObject GamepadLeftXAxisInverted, UEObject GamepadLeftYAxisInverted, UEObject GamepadRightXAxisInverted, UEObject GamepadRightYAxisInverted, UEObject GamepadLeftThumbstickCenterDeadzone, UEObject GamepadLeftThumbstickAxialDeadzone, UEObject GamepadRightThumbstickCenterDeadzone, UEObject GamepadRightThumbstickAxialDeadzone, UEObject MovementLeftStick, UEObject bMouseSmoothing, UEObject DashMode, UEObject DashPressWindowTime, UEObject SpellMode, UEObject ChoosenUpscaler, UEObject DLSS_FG, UEObject DLSS_SR, UEObject DLSS_Sharpness, UEObject DLSS_Reflex, UEObject NIS_Mode, UEObject NIS_Sharpness, UEObject FSR1_Mode, UEObject FSR1_Sharpness, UEObject FSR1_Denoise, UEObject FSR2_Mode, UEObject FSR2_Sharpness, UEObject XESS_Mode, UEObject XEFG, UEObject XELL, UEObject TAAU_Mode) { Invoke("DimensionGameUserSettings", SettingsVersion, OriginalSettingsVersion, MouseSensitivity, MouseADSSensitivityModifier, GamepadSensitivity, GamepadADSSensitivityModifier, bMouseVerticalInversion, bMouseHorizontalInversion, bGamepadVerticalInversion, bGamepadHorizontalInversion, bAlwaysShowBoosterNames, OnPropertySettingChanged, OnSettingsLoaded, HipfireFOV, EnemiesVisibilityBoost, ScreenEffectsEnabled, GraphicsPreset, Brightness, ResolutionScale, bFPSLimitEnabled, FPSLimit, ReflectionsMode, RenderingInUI, RenderingInUIMode, Bloom, DOF, Vignette, MotionBlur, Sharpen, LensFlares, Grain, ChromaticAberration, ReshadeStrength, LimitHUDAspectRatio, CrosshairVisibility, CrosshairLowered, CrosshairNotifiers, HUDPreset, DamageNumbers, HealthBars, ItemPickupNotifications, BoosterIcons, WarningSystem, PLayerHPStamina, Radar, MeleeSpellsIcons, AmmoCountWeaponPerk, InteractionPrompt, OtherHUDElements, MastVolume, MusicVolume, SoundFXVolume, UIVolume, CutsceneVolume, DialogueVolume, CrouchActionToggle, RunActionToggle, AimActionToggle, ControllerStickiness, UIHoldDelay, GamepadLeftXAxisInverted, GamepadLeftYAxisInverted, GamepadRightXAxisInverted, GamepadRightYAxisInverted, GamepadLeftThumbstickCenterDeadzone, GamepadLeftThumbstickAxialDeadzone, GamepadRightThumbstickCenterDeadzone, GamepadRightThumbstickAxialDeadzone, MovementLeftStick, bMouseSmoothing, DashMode, DashPressWindowTime, SpellMode, ChoosenUpscaler, DLSS_FG, DLSS_SR, DLSS_Sharpness, DLSS_Reflex, NIS_Mode, NIS_Sharpness, FSR1_Mode, FSR1_Sharpness, FSR1_Denoise, FSR2_Mode, FSR2_Sharpness, XESS_Mode, XEFG, XELL, TAAU_Mode); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameStateBase : GameState
    {
        public DimensionGameStateBase(nint addr) : base(addr) { }
        public DimensionGameStateBase() : base(0) { }
        public void GetActivePlayersAsActors(UEObject OutPlayers) { Invoke("GetActivePlayersAsActors", OutPlayers); }
        public void _DimensionGameStateBase() { Invoke("DimensionGameStateBase"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplaySpawningComponent : DimensionActorComponent
    {
        public DimensionGameplaySpawningComponent(nint addr) : base(addr) { }
        public DimensionGameplaySpawningComponent() : base(0) { }
        public UEObject OnAnyActorSpawned { get { return this["OnAnyActorSpawned"]; } set { this["OnAnyActorSpawned"] = value; } }
        public UEObject OnGroupSpawned { get { return this["OnGroupSpawned"]; } set { this["OnGroupSpawned"] = value; } }
        public UEObject OnAllGroupsSpawned { get { return this["OnAllGroupsSpawned"]; } set { this["OnAllGroupsSpawned"] = value; } }
        public void SpawnEnemies(UEObject WorldContextObject, UEObject LatentInfo, UEObject SpawnGroupID, UEObject Output, UEObject SpawnInfos, UEObject ScenarioID, UEObject EnemyTags, UEObject bUseDefaultSpawnQueryWhenNotSet, UEObject SpawnBehaviour, UEObject bDormant, UEObject bPlaySpawnSFX, UEObject SpawnSFXSelectionPolicy) { Invoke("SpawnEnemies", WorldContextObject, LatentInfo, SpawnGroupID, Output, SpawnInfos, ScenarioID, EnemyTags, bUseDefaultSpawnQueryWhenNotSet, SpawnBehaviour, bDormant, bPlaySpawnSFX, SpawnSFXSelectionPolicy); }
        public void _DimensionGameplaySpawningComponent(UEObject OnAnyActorSpawned, UEObject OnGroupSpawned, UEObject OnAllGroupsSpawned) { Invoke("DimensionGameplaySpawningComponent", OnAnyActorSpawned, OnGroupSpawned, OnAllGroupsSpawned); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayScenario : Actor
    {
        public DimensionGameplayScenario(nint addr) : base(addr) { }
        public DimensionGameplayScenario() : base(0) { }
        public DimensionGameplayDirector Director { get { return this[nameof(Director)].As<DimensionGameplayDirector>(); } set { this["Director"] = value; } }
        public DimensionGameplayFolder Folder { get { return this[nameof(Folder)].As<DimensionGameplayFolder>(); } set { this["Folder"] = value; } }
        public UEObject MakeEnemyTagsArray(UEObject EnemyTag) { return InvokeUEObject("MakeEnemyTagsArray", EnemyTag); }
        public void _DimensionGameplayScenario(UEObject Director, UEObject Folder) { Invoke("DimensionGameplayScenario", Director, Folder); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayPropsDatabase : DimensionActorComponent
    {
        public DimensionGameplayPropsDatabase(nint addr) : base(addr) { }
        public DimensionGameplayPropsDatabase() : base(0) { }
        public UEObject QuerySinglePropByNameAndType(UEObject RequestedName, UEObject RequestedType) { return InvokeUEObject("QuerySinglePropByNameAndType", RequestedName, RequestedType); }
        public void _DimensionGameplayPropsDatabase() { Invoke("DimensionGameplayPropsDatabase"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayPropComponent : DimensionActorComponent
    {
        public DimensionGameplayPropComponent(nint addr) : base(addr) { }
        public DimensionGameplayPropComponent() : base(0) { }
        public DimensionGameplayDirector Director { get { return this[nameof(Director)].As<DimensionGameplayDirector>(); } set { this["Director"] = value; } }
        public DimensionGameplayFolder Folder { get { return this[nameof(Folder)].As<DimensionGameplayFolder>(); } set { this["Folder"] = value; } }
        public DimensionGameplayScenario Scenario { get { return this[nameof(Scenario)].As<DimensionGameplayScenario>(); } set { this["Scenario"] = value; } }
        public bool bSerializedActorLabelSet { get { return this["bSerializedActorLabelSet"].Flag; } set { this["bSerializedActorLabelSet"].Flag = value; } }
        public string SerializedActorLabel { get { return this["SerializedActorLabel"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject RegisterDynamicProp() { return InvokeUEObject("RegisterDynamicProp"); }
        public void _DimensionGameplayPropComponent(UEObject Director, UEObject Folder, UEObject Scenario, UEObject bSerializedActorLabelSet, UEObject SerializedActorLabel) { Invoke("DimensionGameplayPropComponent", Director, Folder, Scenario, bSerializedActorLabelSet, SerializedActorLabel); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayLevel : Actor
    {
        public DimensionGameplayLevel(nint addr) : base(addr) { }
        public DimensionGameplayLevel() : base(0) { }
        public DataTableRowHandle GameplayLevelDataHandle { get { return this[nameof(GameplayLevelDataHandle)].As<DataTableRowHandle>(); } set { this["GameplayLevelDataHandle"] = value; } }
        public DimensionGameplayLevelData GameplayLevelData { get { return this[nameof(GameplayLevelData)].As<DimensionGameplayLevelData>(); } set { this["GameplayLevelData"] = value; } }
        public bool bInitialized { get { return this["bInitialized"].Flag; } set { this["bInitialized"].Flag = value; } }
        public Array<DimensionArena> Arenas { get { return new Array<DimensionArena>(this["Arenas"]); } set { this["Arenas"] = value; } }
        public void SetArenaInstances(UEObject ArenaInstances) { Invoke("SetArenaInstances", ArenaInstances); }
        public void _DimensionGameplayLevel(UEObject GameplayLevelDataHandle, UEObject GameplayLevelData, UEObject bInitialized, UEObject Arenas) { Invoke("DimensionGameplayLevel", GameplayLevelDataHandle, GameplayLevelData, bInitialized, Arenas); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayDirector : Actor
    {
        public DimensionGameplayDirector(nint addr) : base(addr) { }
        public DimensionGameplayDirector() : base(0) { }
        public void UpdateAmbientMusic() { Invoke("UpdateAmbientMusic"); }
        public void _DimensionGameplayDirector() { Invoke("DimensionGameplayDirector"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayDifficultyComponent : DimensionActorComponent
    {
        public DimensionGameplayDifficultyComponent(nint addr) : base(addr) { }
        public DimensionGameplayDifficultyComponent() : base(0) { }
    }
    public class DimensionGameplayArena : DimensionGameplayFolder
    {
        public DimensionGameplayArena(nint addr) : base(addr) { }
        public DimensionGameplayArena() : base(0) { }
        public UEObject ActorCacheTransformMap { get { return this["ActorCacheTransformMap"]; } set { this["ActorCacheTransformMap"] = value; } }
        public DataTableRowHandle ArenaDataHandle { get { return this[nameof(ArenaDataHandle)].As<DataTableRowHandle>(); } set { this["ArenaDataHandle"] = value; } }
        public GameplayArenaData ArenaData { get { return this[nameof(ArenaData)].As<GameplayArenaData>(); } set { this["ArenaData"] = value; } }
        public UEObject RemoveTransformMapActorClass(UEObject SoftClassPtr) { return InvokeUEObject("RemoveTransformMapActorClass", SoftClassPtr); }
        public void _DimensionGameplayArena(UEObject ActorCacheTransformMap, UEObject ArenaDataHandle, UEObject ArenaData) { Invoke("DimensionGameplayArena", ActorCacheTransformMap, ArenaDataHandle, ArenaData); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayFolder : Actor
    {
        public DimensionGameplayFolder(nint addr) : base(addr) { }
        public DimensionGameplayFolder() : base(0) { }
        public DimensionGameplayDirector Director { get { return this[nameof(Director)].As<DimensionGameplayDirector>(); } set { this["Director"] = value; } }
        public UEObject IsArena() { return InvokeUEObject("IsArena"); }
        public void _DimensionGameplayFolder(UEObject Director) { Invoke("DimensionGameplayFolder", Director); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayAreaDebugDrawComponent : ActorComponent
    {
        public DimensionGameplayAreaDebugDrawComponent(nint addr) : base(addr) { }
        public DimensionGameplayAreaDebugDrawComponent() : base(0) { }
    }
    public class DimensionGameplayAIAbility : DimensionGameplayAbility
    {
        public DimensionGameplayAIAbility(nint addr) : base(addr) { }
        public DimensionGameplayAIAbility() : base(0) { }
        public EnvQuery AbilityTargetEQS { get { return this[nameof(AbilityTargetEQS)].As<EnvQuery>(); } set { this["AbilityTargetEQS"] = value; } }
        public int RequiredTargetsNum { get { return this["RequiredTargetsNum"].GetValue<int>(); } set { this["RequiredTargetsNum"].SetValue<int>(value); } }
        public bool bRefreshTargetOnAITick { get { return this["bRefreshTargetOnAITick"].Flag; } set { this["bRefreshTargetOnAITick"].Flag = value; } }
        public bool bRequiresTokenInPlace { get { return this["bRequiresTokenInPlace"].Flag; } set { this["bRequiresTokenInPlace"].Flag = value; } }
        public bool bAddPreparationTagOnStart { get { return this["bAddPreparationTagOnStart"].Flag; } set { this["bAddPreparationTagOnStart"].Flag = value; } }
        public GameplayTag AbilityPreparationTag { get { return this[nameof(AbilityPreparationTag)].As<GameplayTag>(); } set { this["AbilityPreparationTag"] = value; } }
        public bool bAddEnemyChangeLockTagOnStart { get { return this["bAddEnemyChangeLockTagOnStart"].Flag; } set { this["bAddEnemyChangeLockTagOnStart"].Flag = value; } }
        public GameplayTag EnemyChangeLockTag { get { return this[nameof(EnemyChangeLockTag)].As<GameplayTag>(); } set { this["EnemyChangeLockTag"] = value; } }
        public void UpdateLocationScore() { Invoke("UpdateLocationScore"); }
        public void _DimensionGameplayAIAbility(UEObject AbilityTargetEQS, UEObject RequiredTargetsNum, UEObject bRefreshTargetOnAITick, UEObject bRequiresTokenInPlace, UEObject bAddPreparationTagOnStart, UEObject AbilityPreparationTag, UEObject bAddEnemyChangeLockTagOnStart, UEObject EnemyChangeLockTag) { Invoke("DimensionGameplayAIAbility", AbilityTargetEQS, RequiredTargetsNum, bRefreshTargetOnAITick, bRequiresTokenInPlace, bAddPreparationTagOnStart, AbilityPreparationTag, bAddEnemyChangeLockTagOnStart, EnemyChangeLockTag); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameModeBase : GameMode
    {
        public DimensionGameModeBase(nint addr) : base(addr) { }
        public DimensionGameModeBase() : base(0) { }
        public DataTable TokenSettingsDataTable { get { return this[nameof(TokenSettingsDataTable)].As<DataTable>(); } set { this["TokenSettingsDataTable"] = value; } }
        public int DifficultyLevel { get { return this["DifficultyLevel"].GetValue<int>(); } set { this["DifficultyLevel"].SetValue<int>(value); } }
        public UEObject DeadPlayers { get { return this["DeadPlayers"]; } set { this["DeadPlayers"] = value; } }
        public UEObject OnPlayerLoginOrLogoutDelegate { get { return this["OnPlayerLoginOrLogoutDelegate"]; } set { this["OnPlayerLoginOrLogoutDelegate"] = value; } }
        public Array<PlayerController> ActivePlayerControllers { get { return new Array<PlayerController>(this["ActivePlayerControllers"]); } set { this["ActivePlayerControllers"] = value; } }
        public Array<DimensionGameplayEventCallbackData> GameplayEventCallbacks { get { return new Array<DimensionGameplayEventCallbackData>(this["GameplayEventCallbacks"]); } set { this["GameplayEventCallbacks"] = value; } }
        public DimensionGameplayEventCallbackData CurrentlyExecutingCallback { get { return this[nameof(CurrentlyExecutingCallback)].As<DimensionGameplayEventCallbackData>(); } set { this["CurrentlyExecutingCallback"] = value; } }
        public UEObject ItemDropManagerClass { get { return this["ItemDropManagerClass"]; } set { this["ItemDropManagerClass"] = value; } }
        public DimensionItemDropManager ItemDropManagerInstance { get { return this[nameof(ItemDropManagerInstance)].As<DimensionItemDropManager>(); } set { this["ItemDropManagerInstance"] = value; } }
        public bool bTriggeredArenaExists { get { return this["bTriggeredArenaExists"].Flag; } set { this["bTriggeredArenaExists"].Flag = value; } }
        public void UnbindFromGameplayEvents(UEObject Object) { Invoke("UnbindFromGameplayEvents", Object); }
        public void _DimensionGameModeBase(UEObject TokenSettingsDataTable, UEObject DifficultyLevel, UEObject DeadPlayers, UEObject OnPlayerLoginOrLogoutDelegate, UEObject ActivePlayerControllers, UEObject GameplayEventCallbacks, UEObject CurrentlyExecutingCallback, UEObject ItemDropManagerClass, UEObject ItemDropManagerInstance, UEObject bTriggeredArenaExists) { Invoke("DimensionGameModeBase", TokenSettingsDataTable, DifficultyLevel, DeadPlayers, OnPlayerLoginOrLogoutDelegate, ActivePlayerControllers, GameplayEventCallbacks, CurrentlyExecutingCallback, ItemDropManagerClass, ItemDropManagerInstance, bTriggeredArenaExists); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameLoopSubsystem : GameInstanceSubsystem
    {
        public DimensionGameLoopSubsystem(nint addr) : base(addr) { }
        public DimensionGameLoopSubsystem() : base(0) { }
        public UEObject OnQuitGameRequestedDelegate { get { return this["OnQuitGameRequestedDelegate"]; } set { this["OnQuitGameRequestedDelegate"] = value; } }
        public Array<UEObject> ObjectsNotReadyForQuitGame { get { return new Array<UEObject>(this["ObjectsNotReadyForQuitGame"]); } set { this["ObjectsNotReadyForQuitGame"] = value; } }
        public UEObject OnBackToMainMenuRequestedDelegate { get { return this["OnBackToMainMenuRequestedDelegate"]; } set { this["OnBackToMainMenuRequestedDelegate"] = value; } }
        public Array<UEObject> ObjectsNotReadyForBackToMainMenu { get { return new Array<UEObject>(this["ObjectsNotReadyForBackToMainMenu"]); } set { this["ObjectsNotReadyForBackToMainMenu"] = value; } }
        public GameplayTag CurrentLevelTag { get { return this[nameof(CurrentLevelTag)].As<GameplayTag>(); } set { this["CurrentLevelTag"] = value; } }
        public GameplayTag PreviousLevelTag { get { return this[nameof(PreviousLevelTag)].As<GameplayTag>(); } set { this["PreviousLevelTag"] = value; } }
        public GameplayTag PendingLevelTag { get { return this[nameof(PendingLevelTag)].As<GameplayTag>(); } set { this["PendingLevelTag"] = value; } }
        public UEObject OnLevelChangeRequestedDelegate { get { return this["OnLevelChangeRequestedDelegate"]; } set { this["OnLevelChangeRequestedDelegate"] = value; } }
        public UEObject OnLevelChangeStartedDelegate { get { return this["OnLevelChangeStartedDelegate"]; } set { this["OnLevelChangeStartedDelegate"] = value; } }
        public UEObject OnLevelChangeCompletedDelegate { get { return this["OnLevelChangeCompletedDelegate"]; } set { this["OnLevelChangeCompletedDelegate"] = value; } }
        public UEObject OnLevelChangeInEditorDelegate { get { return this["OnLevelChangeInEditorDelegate"]; } set { this["OnLevelChangeInEditorDelegate"] = value; } }
        public Array<UEObject> ObjectsNotReadyForLevelChange { get { return new Array<UEObject>(this["ObjectsNotReadyForLevelChange"]); } set { this["ObjectsNotReadyForLevelChange"] = value; } }
        public UEObject OnSeedsLoadedDelegate { get { return this["OnSeedsLoadedDelegate"]; } set { this["OnSeedsLoadedDelegate"] = value; } }
        public UEObject OnSeedChangedDelegate { get { return this["OnSeedChangedDelegate"]; } set { this["OnSeedChangedDelegate"] = value; } }
        public void StopQuitGame() { Invoke("StopQuitGame"); }
        public void _DimensionGameLoopSubsystem(UEObject OnQuitGameRequestedDelegate, UEObject ObjectsNotReadyForQuitGame, UEObject OnBackToMainMenuRequestedDelegate, UEObject ObjectsNotReadyForBackToMainMenu, UEObject CurrentLevelTag, UEObject PreviousLevelTag, UEObject PendingLevelTag, UEObject OnLevelChangeRequestedDelegate, UEObject OnLevelChangeStartedDelegate, UEObject OnLevelChangeCompletedDelegate, UEObject OnLevelChangeInEditorDelegate, UEObject ObjectsNotReadyForLevelChange, UEObject OnSeedsLoadedDelegate, UEObject OnSeedChangedDelegate) { Invoke("DimensionGameLoopSubsystem", OnQuitGameRequestedDelegate, ObjectsNotReadyForQuitGame, OnBackToMainMenuRequestedDelegate, ObjectsNotReadyForBackToMainMenu, CurrentLevelTag, PreviousLevelTag, PendingLevelTag, OnLevelChangeRequestedDelegate, OnLevelChangeStartedDelegate, OnLevelChangeCompletedDelegate, OnLevelChangeInEditorDelegate, ObjectsNotReadyForLevelChange, OnSeedsLoadedDelegate, OnSeedChangedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameInstance : GameInstance
    {
        public DimensionGameInstance(nint addr) : base(addr) { }
        public DimensionGameInstance() : base(0) { }
        public UEObject AssetLoaderDefaultClass { get { return this["AssetLoaderDefaultClass"]; } set { this["AssetLoaderDefaultClass"] = value; } }
        public DimensionAssetLoader AssetLoaderInstance { get { return this[nameof(AssetLoaderInstance)].As<DimensionAssetLoader>(); } set { this["AssetLoaderInstance"] = value; } }
        public UEObject SpawnManagerDefaultClass { get { return this["SpawnManagerDefaultClass"]; } set { this["SpawnManagerDefaultClass"] = value; } }
        public DimensionSpawnManager SpawnManagerInstance { get { return this[nameof(SpawnManagerInstance)].As<DimensionSpawnManager>(); } set { this["SpawnManagerInstance"] = value; } }
        public UEObject SteamOverlayToggledDelegate { get { return this["SteamOverlayToggledDelegate"]; } set { this["SteamOverlayToggledDelegate"] = value; } }
        public UEObject SaveLoadSystemDefaultClass { get { return this["SaveLoadSystemDefaultClass"]; } set { this["SaveLoadSystemDefaultClass"] = value; } }
        public UEObject SaveLoadSystemInstance { get { return this[nameof(SaveLoadSystemInstance)]; } set { this["SaveLoadSystemInstance"] = value; } }
        public UEObject CombatDesignerAIClasses { get { return this["CombatDesignerAIClasses"]; } set { this["CombatDesignerAIClasses"] = value; } }
        public MaterialInterface CombatDesignerMaterial { get { return this[nameof(CombatDesignerMaterial)].As<MaterialInterface>(); } set { this["CombatDesignerMaterial"] = value; } }
        public UEObject BoosterManagerDefaultClass { get { return this["BoosterManagerDefaultClass"]; } set { this["BoosterManagerDefaultClass"] = value; } }
        public DimensionBoosterManager BoosterManagerInstance { get { return this[nameof(BoosterManagerInstance)].As<DimensionBoosterManager>(); } set { this["BoosterManagerInstance"] = value; } }
        public UEObject ProgressManagerDefaultClass { get { return this["ProgressManagerDefaultClass"]; } set { this["ProgressManagerDefaultClass"] = value; } }
        public DimensionProgressManager ProgressManagerInstance { get { return this[nameof(ProgressManagerInstance)].As<DimensionProgressManager>(); } set { this["ProgressManagerInstance"] = value; } }
        public UEObject InitManagerDefaultClass { get { return this["InitManagerDefaultClass"]; } set { this["InitManagerDefaultClass"] = value; } }
        public DimensionInitManager InitManagerInstance { get { return this[nameof(InitManagerInstance)].As<DimensionInitManager>(); } set { this["InitManagerInstance"] = value; } }
        public UEObject AnalyticsDefaultClass { get { return this["AnalyticsDefaultClass"]; } set { this["AnalyticsDefaultClass"] = value; } }
        public DimensionAnalytics AnalyticsInstance { get { return this[nameof(AnalyticsInstance)].As<DimensionAnalytics>(); } set { this["AnalyticsInstance"] = value; } }
        public UEObject OnGlobalInputEnabledDelegate { get { return this["OnGlobalInputEnabledDelegate"]; } set { this["OnGlobalInputEnabledDelegate"] = value; } }
        public UEObject OnPlayerPermanentCheatsUpdatedDelegate { get { return this["OnPlayerPermanentCheatsUpdatedDelegate"]; } set { this["OnPlayerPermanentCheatsUpdatedDelegate"] = value; } }
        public UEObject OnWeaponPermanentCheatsUpdatedDelegate { get { return this["OnWeaponPermanentCheatsUpdatedDelegate"]; } set { this["OnWeaponPermanentCheatsUpdatedDelegate"] = value; } }
        public void StartNewGame(UEObject bStartInPrologue) { Invoke("StartNewGame", bStartInPrologue); }
        public void _DimensionGameInstance(UEObject AssetLoaderDefaultClass, UEObject AssetLoaderInstance, UEObject SpawnManagerDefaultClass, UEObject SpawnManagerInstance, UEObject SteamOverlayToggledDelegate, UEObject SaveLoadSystemDefaultClass, UEObject SaveLoadSystemInstance, UEObject CombatDesignerAIClasses, UEObject CombatDesignerMaterial, UEObject BoosterManagerDefaultClass, UEObject BoosterManagerInstance, UEObject ProgressManagerDefaultClass, UEObject ProgressManagerInstance, UEObject InitManagerDefaultClass, UEObject InitManagerInstance, UEObject AnalyticsDefaultClass, UEObject AnalyticsInstance, UEObject OnGlobalInputEnabledDelegate, UEObject OnPlayerPermanentCheatsUpdatedDelegate, UEObject OnWeaponPermanentCheatsUpdatedDelegate) { Invoke("DimensionGameInstance", AssetLoaderDefaultClass, AssetLoaderInstance, SpawnManagerDefaultClass, SpawnManagerInstance, SteamOverlayToggledDelegate, SaveLoadSystemDefaultClass, SaveLoadSystemInstance, CombatDesignerAIClasses, CombatDesignerMaterial, BoosterManagerDefaultClass, BoosterManagerInstance, ProgressManagerDefaultClass, ProgressManagerInstance, InitManagerDefaultClass, InitManagerInstance, AnalyticsDefaultClass, AnalyticsInstance, OnGlobalInputEnabledDelegate, OnPlayerPermanentCheatsUpdatedDelegate, OnWeaponPermanentCheatsUpdatedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionFunctionLibrary : UEObject
    {
        public DimensionFunctionLibrary(nint addr) : base(addr) { }
        public DimensionFunctionLibrary() : base(0) { }
        public UEObject WasRecentlyRenderedOnScreen(UEObject PrimitiveComponent, UEObject Tolerance) { return InvokeUEObject("WasRecentlyRenderedOnScreen", PrimitiveComponent, Tolerance); }
        public void _DimensionFunctionLibrary() { Invoke("DimensionFunctionLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionFetish : DimensionItem
    {
        public DimensionFetish(nint addr) : base(addr) { }
        public DimensionFetish() : base(0) { }
        public DimensionFetishDataDetails FetishDataDetails { get { return this[nameof(FetishDataDetails)].As<DimensionFetishDataDetails>(); } set { this["FetishDataDetails"] = value; } }
    }
    public class DimensionEventAttribSet : DimensionAttribSet
    {
        public DimensionEventAttribSet(nint addr) : base(addr) { }
        public DimensionEventAttribSet() : base(0) { }
        public float WitchCurseLevel { get { return this["WitchCurseLevel"].GetValue<float>(); } set { this["WitchCurseLevel"].SetValue<float>(value); } }
    }
    public class DimensionEnemyTagData : DataAsset
    {
        public DimensionEnemyTagData(nint addr) : base(addr) { }
        public DimensionEnemyTagData() : base(0) { }
        public UEObject EnemyTagConfigs { get { return this["EnemyTagConfigs"]; } set { this["EnemyTagConfigs"] = value; } }
    }
    public class DimensionEnemyAttribSet : DimensionAttribSet
    {
        public DimensionEnemyAttribSet(nint addr) : base(addr) { }
        public DimensionEnemyAttribSet() : base(0) { }
        public float MovementSpeedModifier { get { return this["MovementSpeedModifier"].GetValue<float>(); } set { this["MovementSpeedModifier"].SetValue<float>(value); } }
    }
    public class DimensionElementalComponent : DimensionActorComponent
    {
        public DimensionElementalComponent(nint addr) : base(addr) { }
        public DimensionElementalComponent() : base(0) { }
        public UEObject ElementalInstanceAggregators { get { return this["ElementalInstanceAggregators"]; } set { this["ElementalInstanceAggregators"] = value; } }
        public UEObject OnStatusUpdateDelegate { get { return this["OnStatusUpdateDelegate"]; } set { this["OnStatusUpdateDelegate"] = value; } }
        public UEObject OnStatusRefreshDelegate { get { return this["OnStatusRefreshDelegate"]; } set { this["OnStatusRefreshDelegate"] = value; } }
        public UEObject OnStatusPreExpireDelegate { get { return this["OnStatusPreExpireDelegate"]; } set { this["OnStatusPreExpireDelegate"] = value; } }
        public UEObject OnStatusExpireDelegate { get { return this["OnStatusExpireDelegate"]; } set { this["OnStatusExpireDelegate"] = value; } }
        public UEObject OnInstanceSelectionUpdateDelegate { get { return this["OnInstanceSelectionUpdateDelegate"]; } set { this["OnInstanceSelectionUpdateDelegate"] = value; } }
        public UEObject OnInstanceAppliedOrRemovedDelegate { get { return this["OnInstanceAppliedOrRemovedDelegate"]; } set { this["OnInstanceAppliedOrRemovedDelegate"] = value; } }
        public UEObject OnStatusTriggeredDelegate { get { return this["OnStatusTriggeredDelegate"]; } set { this["OnStatusTriggeredDelegate"] = value; } }
        public UEObject OnStatusTickDamageDelegate { get { return this["OnStatusTickDamageDelegate"]; } set { this["OnStatusTickDamageDelegate"] = value; } }
        public UEObject OnStatusPausedDelegate { get { return this["OnStatusPausedDelegate"]; } set { this["OnStatusPausedDelegate"] = value; } }
        public UEObject BaseStatusDurations { get { return this["BaseStatusDurations"]; } set { this["BaseStatusDurations"] = value; } }
        public UEObject BaseMajorStatusDurations { get { return this["BaseMajorStatusDurations"]; } set { this["BaseMajorStatusDurations"] = value; } }
        public UEObject BaseBossStatusDurations { get { return this["BaseBossStatusDurations"]; } set { this["BaseBossStatusDurations"] = value; } }
        public UEObject StatusPreExpireTimes { get { return this["StatusPreExpireTimes"]; } set { this["StatusPreExpireTimes"] = value; } }
        public float BaseFireDamageModifier { get { return this["BaseFireDamageModifier"].GetValue<float>(); } set { this["BaseFireDamageModifier"].SetValue<float>(value); } }
        public float BaseAirElectrocuteRange { get { return this["BaseAirElectrocuteRange"].GetValue<float>(); } set { this["BaseAirElectrocuteRange"].SetValue<float>(value); } }
        public float BaseAirElectrocuteDamageModifier { get { return this["BaseAirElectrocuteDamageModifier"].GetValue<float>(); } set { this["BaseAirElectrocuteDamageModifier"].SetValue<float>(value); } }
        public float BaseAirElectrocuteStatusDamageModifier { get { return this["BaseAirElectrocuteStatusDamageModifier"].GetValue<float>(); } set { this["BaseAirElectrocuteStatusDamageModifier"].SetValue<float>(value); } }
        public float BaseAirElectrocuteCooldown { get { return this["BaseAirElectrocuteCooldown"].GetValue<float>(); } set { this["BaseAirElectrocuteCooldown"].SetValue<float>(value); } }
        public int BaseAirElectrocuteCount { get { return this["BaseAirElectrocuteCount"].GetValue<int>(); } set { this["BaseAirElectrocuteCount"].SetValue<int>(value); } }
        public int BaseAirElectrocuteJumps { get { return this["BaseAirElectrocuteJumps"].GetValue<int>(); } set { this["BaseAirElectrocuteJumps"].SetValue<int>(value); } }
        public float BaseAirElectrocuteJumpDamageModifier { get { return this["BaseAirElectrocuteJumpDamageModifier"].GetValue<float>(); } set { this["BaseAirElectrocuteJumpDamageModifier"].SetValue<float>(value); } }
        public float BaseEarthTickInterval { get { return this["BaseEarthTickInterval"].GetValue<float>(); } set { this["BaseEarthTickInterval"].SetValue<float>(value); } }
        public float BaseEarthDamagePerSecond { get { return this["BaseEarthDamagePerSecond"].GetValue<float>(); } set { this["BaseEarthDamagePerSecond"].SetValue<float>(value); } }
        public float BaseWaterDamageModifier { get { return this["BaseWaterDamageModifier"].GetValue<float>(); } set { this["BaseWaterDamageModifier"].SetValue<float>(value); } }
        public float BaseWaterFreezeCooldown { get { return this["BaseWaterFreezeCooldown"].GetValue<float>(); } set { this["BaseWaterFreezeCooldown"].SetValue<float>(value); } }
        public float FireAirDamageTakenModifierBonus { get { return this["FireAirDamageTakenModifierBonus"].GetValue<float>(); } set { this["FireAirDamageTakenModifierBonus"].SetValue<float>(value); } }
        public float FireAirElectrocuteDamageBonus { get { return this["FireAirElectrocuteDamageBonus"].GetValue<float>(); } set { this["FireAirElectrocuteDamageBonus"].SetValue<float>(value); } }
        public float FireEarthDamagePerSecondBonus { get { return this["FireEarthDamagePerSecondBonus"].GetValue<float>(); } set { this["FireEarthDamagePerSecondBonus"].SetValue<float>(value); } }
        public float AirWaterElectrocuteCooldownReduction { get { return this["AirWaterElectrocuteCooldownReduction"].GetValue<float>(); } set { this["AirWaterElectrocuteCooldownReduction"].SetValue<float>(value); } }
        public float AirWaterElectrocuteRangeBonus { get { return this["AirWaterElectrocuteRangeBonus"].GetValue<float>(); } set { this["AirWaterElectrocuteRangeBonus"].SetValue<float>(value); } }
        public float AirEarthElectrocuteTickDamage { get { return this["AirEarthElectrocuteTickDamage"].GetValue<float>(); } set { this["AirEarthElectrocuteTickDamage"].SetValue<float>(value); } }
        public float EarthWaterStunDamageThreshold { get { return this["EarthWaterStunDamageThreshold"].GetValue<float>(); } set { this["EarthWaterStunDamageThreshold"].SetValue<float>(value); } }
        public float FireEarthWaterExplosionDamageMultiplier { get { return this["FireEarthWaterExplosionDamageMultiplier"].GetValue<float>(); } set { this["FireEarthWaterExplosionDamageMultiplier"].SetValue<float>(value); } }
        public float FireAirWaterExplosionElectrocuteDamage { get { return this["FireAirWaterExplosionElectrocuteDamage"].GetValue<float>(); } set { this["FireAirWaterExplosionElectrocuteDamage"].SetValue<float>(value); } }
        public float FreezeAccumulatedDamage { get { return this["FreezeAccumulatedDamage"].GetValue<float>(); } set { this["FreezeAccumulatedDamage"].SetValue<float>(value); } }
        public UEObject OnLightningSpawnedDelegate { get { return this["OnLightningSpawnedDelegate"]; } set { this["OnLightningSpawnedDelegate"] = value; } }
        public float MaxLightningDuration { get { return this["MaxLightningDuration"].GetValue<float>(); } set { this["MaxLightningDuration"].SetValue<float>(value); } }
        public float DefaultLightningSpawnDelay { get { return this["DefaultLightningSpawnDelay"].GetValue<float>(); } set { this["DefaultLightningSpawnDelay"].SetValue<float>(value); } }
        public float DefaultLightningSpawnDelayVariance { get { return this["DefaultLightningSpawnDelayVariance"].GetValue<float>(); } set { this["DefaultLightningSpawnDelayVariance"].SetValue<float>(value); } }
        public UEObject LightningHeadShotParticle { get { return this["LightningHeadShotParticle"]; } set { this["LightningHeadShotParticle"] = value; } }
        public UEObject FireLightningHeadShotParticle { get { return this["FireLightningHeadShotParticle"]; } set { this["FireLightningHeadShotParticle"] = value; } }
        public UEObject LightningParticleShort { get { return this["LightningParticleShort"]; } set { this["LightningParticleShort"] = value; } }
        public UEObject LightningParticleLong { get { return this["LightningParticleLong"]; } set { this["LightningParticleLong"] = value; } }
        public UEObject FireLightningParticleShort { get { return this["FireLightningParticleShort"]; } set { this["FireLightningParticleShort"] = value; } }
        public UEObject FireLightningParticleLong { get { return this["FireLightningParticleLong"]; } set { this["FireLightningParticleLong"] = value; } }
        public DimensionSoundEntry LightningHitSoundEntry { get { return this[nameof(LightningHitSoundEntry)].As<DimensionSoundEntry>(); } set { this["LightningHitSoundEntry"] = value; } }
        public DimensionSoundEntry FireLightningHitSoundEntry { get { return this[nameof(FireLightningHitSoundEntry)].As<DimensionSoundEntry>(); } set { this["FireLightningHitSoundEntry"] = value; } }
        public EActionApplyType LightningDamageApplyPolicy { get { return (EActionApplyType)this["LightningDamageApplyPolicy"].GetValue<int>(); } set { this["LightningDamageApplyPolicy"].SetValue<int>((int)value); } }
        public Array<AirStatusLightningInstanceData> LightningQueue { get { return new Array<AirStatusLightningInstanceData>(this["LightningQueue"]); } set { this["LightningQueue"] = value; } }
        public UEObject LightningParticleMap { get { return this["LightningParticleMap"]; } set { this["LightningParticleMap"] = value; } }
        public AirStatusLightningInstanceData LightningSpawnCallbackData { get { return this[nameof(LightningSpawnCallbackData)].As<AirStatusLightningInstanceData>(); } set { this["LightningSpawnCallbackData"] = value; } }
        public UEObject DebugElementalIcons { get { return this["DebugElementalIcons"]; } set { this["DebugElementalIcons"] = value; } }
        public UEObject DebugStatusEnabledMap { get { return this["DebugStatusEnabledMap"]; } set { this["DebugStatusEnabledMap"] = value; } }
        public void TriggerStatusEffect(UEObject DamageType, UEObject AggregatedDamageData) { Invoke("TriggerStatusEffect", DamageType, AggregatedDamageData); }
        public void _DimensionElementalComponent(UEObject ElementalInstanceAggregators, UEObject OnStatusUpdateDelegate, UEObject OnStatusRefreshDelegate, UEObject OnStatusPreExpireDelegate, UEObject OnStatusExpireDelegate, UEObject OnInstanceSelectionUpdateDelegate, UEObject OnInstanceAppliedOrRemovedDelegate, UEObject OnStatusTriggeredDelegate, UEObject OnStatusTickDamageDelegate, UEObject OnStatusPausedDelegate, UEObject BaseStatusDurations, UEObject BaseMajorStatusDurations, UEObject BaseBossStatusDurations, UEObject StatusPreExpireTimes, UEObject BaseFireDamageModifier, UEObject BaseAirElectrocuteRange, UEObject BaseAirElectrocuteDamageModifier, UEObject BaseAirElectrocuteStatusDamageModifier, UEObject BaseAirElectrocuteCooldown, UEObject BaseAirElectrocuteCount, UEObject BaseAirElectrocuteJumps, UEObject BaseAirElectrocuteJumpDamageModifier, UEObject BaseEarthTickInterval, UEObject BaseEarthDamagePerSecond, UEObject BaseWaterDamageModifier, UEObject BaseWaterFreezeCooldown, UEObject FireAirDamageTakenModifierBonus, UEObject FireAirElectrocuteDamageBonus, UEObject FireEarthDamagePerSecondBonus, UEObject AirWaterElectrocuteCooldownReduction, UEObject AirWaterElectrocuteRangeBonus, UEObject AirEarthElectrocuteTickDamage, UEObject EarthWaterStunDamageThreshold, UEObject FireEarthWaterExplosionDamageMultiplier, UEObject FireAirWaterExplosionElectrocuteDamage, UEObject FreezeAccumulatedDamage, UEObject OnLightningSpawnedDelegate, UEObject MaxLightningDuration, UEObject DefaultLightningSpawnDelay, UEObject DefaultLightningSpawnDelayVariance, UEObject LightningHeadShotParticle, UEObject FireLightningHeadShotParticle, UEObject LightningParticleShort, UEObject LightningParticleLong, UEObject FireLightningParticleShort, UEObject FireLightningParticleLong, UEObject LightningHitSoundEntry, UEObject FireLightningHitSoundEntry, UEObject LightningDamageApplyPolicy, UEObject LightningQueue, UEObject LightningParticleMap, UEObject LightningSpawnCallbackData, UEObject DebugElementalIcons, UEObject DebugStatusEnabledMap) { Invoke("DimensionElementalComponent", ElementalInstanceAggregators, OnStatusUpdateDelegate, OnStatusRefreshDelegate, OnStatusPreExpireDelegate, OnStatusExpireDelegate, OnInstanceSelectionUpdateDelegate, OnInstanceAppliedOrRemovedDelegate, OnStatusTriggeredDelegate, OnStatusTickDamageDelegate, OnStatusPausedDelegate, BaseStatusDurations, BaseMajorStatusDurations, BaseBossStatusDurations, StatusPreExpireTimes, BaseFireDamageModifier, BaseAirElectrocuteRange, BaseAirElectrocuteDamageModifier, BaseAirElectrocuteStatusDamageModifier, BaseAirElectrocuteCooldown, BaseAirElectrocuteCount, BaseAirElectrocuteJumps, BaseAirElectrocuteJumpDamageModifier, BaseEarthTickInterval, BaseEarthDamagePerSecond, BaseWaterDamageModifier, BaseWaterFreezeCooldown, FireAirDamageTakenModifierBonus, FireAirElectrocuteDamageBonus, FireEarthDamagePerSecondBonus, AirWaterElectrocuteCooldownReduction, AirWaterElectrocuteRangeBonus, AirEarthElectrocuteTickDamage, EarthWaterStunDamageThreshold, FireEarthWaterExplosionDamageMultiplier, FireAirWaterExplosionElectrocuteDamage, FreezeAccumulatedDamage, OnLightningSpawnedDelegate, MaxLightningDuration, DefaultLightningSpawnDelay, DefaultLightningSpawnDelayVariance, LightningHeadShotParticle, FireLightningHeadShotParticle, LightningParticleShort, LightningParticleLong, FireLightningParticleShort, FireLightningParticleLong, LightningHitSoundEntry, FireLightningHitSoundEntry, LightningDamageApplyPolicy, LightningQueue, LightningParticleMap, LightningSpawnCallbackData, DebugElementalIcons, DebugStatusEnabledMap); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionElementalAttribSet : DimensionAttribSet
    {
        public DimensionElementalAttribSet(nint addr) : base(addr) { }
        public DimensionElementalAttribSet() : base(0) { }
        public float FireDurationModifier { get { return this["FireDurationModifier"].GetValue<float>(); } set { this["FireDurationModifier"].SetValue<float>(value); } }
        public float AirDurationModifier { get { return this["AirDurationModifier"].GetValue<float>(); } set { this["AirDurationModifier"].SetValue<float>(value); } }
        public float EarthDurationModifier { get { return this["EarthDurationModifier"].GetValue<float>(); } set { this["EarthDurationModifier"].SetValue<float>(value); } }
        public float WaterDurationModifier { get { return this["WaterDurationModifier"].GetValue<float>(); } set { this["WaterDurationModifier"].SetValue<float>(value); } }
        public float FireDamageModifier { get { return this["FireDamageModifier"].GetValue<float>(); } set { this["FireDamageModifier"].SetValue<float>(value); } }
        public float AirElectrocuteJumps { get { return this["AirElectrocuteJumps"].GetValue<float>(); } set { this["AirElectrocuteJumps"].SetValue<float>(value); } }
        public float AirElectrocuteCount { get { return this["AirElectrocuteCount"].GetValue<float>(); } set { this["AirElectrocuteCount"].SetValue<float>(value); } }
        public float AirDamageModifier { get { return this["AirDamageModifier"].GetValue<float>(); } set { this["AirDamageModifier"].SetValue<float>(value); } }
        public float AirElectrocuteRangeModifier { get { return this["AirElectrocuteRangeModifier"].GetValue<float>(); } set { this["AirElectrocuteRangeModifier"].SetValue<float>(value); } }
        public float AirElectrocuteCooldownModifier { get { return this["AirElectrocuteCooldownModifier"].GetValue<float>(); } set { this["AirElectrocuteCooldownModifier"].SetValue<float>(value); } }
        public float EarthTickDamageModifier { get { return this["EarthTickDamageModifier"].GetValue<float>(); } set { this["EarthTickDamageModifier"].SetValue<float>(value); } }
        public float EarthLastTickDamagePercentage { get { return this["EarthLastTickDamagePercentage"].GetValue<float>(); } set { this["EarthLastTickDamagePercentage"].SetValue<float>(value); } }
        public float WaterDamageModifier { get { return this["WaterDamageModifier"].GetValue<float>(); } set { this["WaterDamageModifier"].SetValue<float>(value); } }
        public float WaterMajorFreezeDurationModifier { get { return this["WaterMajorFreezeDurationModifier"].GetValue<float>(); } set { this["WaterMajorFreezeDurationModifier"].SetValue<float>(value); } }
        public float WaterMajorFreezeDurationMultiplier { get { return this["WaterMajorFreezeDurationMultiplier"].GetValue<float>(); } set { this["WaterMajorFreezeDurationMultiplier"].SetValue<float>(value); } }
        public float WaterMovementMultiplier { get { return this["WaterMovementMultiplier"].GetValue<float>(); } set { this["WaterMovementMultiplier"].SetValue<float>(value); } }
        public float FireWaterSteamExplosionStunChance { get { return this["FireWaterSteamExplosionStunChance"].GetValue<float>(); } set { this["FireWaterSteamExplosionStunChance"].SetValue<float>(value); } }
        public float FireWaterSteamExplosionMajorStunChance { get { return this["FireWaterSteamExplosionMajorStunChance"].GetValue<float>(); } set { this["FireWaterSteamExplosionMajorStunChance"].SetValue<float>(value); } }
    }
    public class DimensionDelayAirStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayAirStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayAirStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayEarthStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayEarthStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayEarthStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayWaterStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayWaterStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayWaterStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayFireStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayFireStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayFireStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayHardPhysicalStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayHardPhysicalStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayHardPhysicalStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelaySoftPhysicalStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelaySoftPhysicalStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelaySoftPhysicalStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayDefaultPhysicalStatusRegenEffect : DimensionDelayStatusRegenEffect
    {
        public DimensionDelayDefaultPhysicalStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayDefaultPhysicalStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayStatusRegenEffect : DimensionGameplayEffect
    {
        public DimensionDelayStatusRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayStatusRegenEffect() : base(0) { }
    }
    public class DimensionDelayStaminaRegenEffect : DimensionGameplayEffect
    {
        public DimensionDelayStaminaRegenEffect(nint addr) : base(addr) { }
        public DimensionDelayStaminaRegenEffect() : base(0) { }
    }
    public class DimensionDefenseComponent : DimensionActorComponent
    {
        public DimensionDefenseComponent(nint addr) : base(addr) { }
        public DimensionDefenseComponent() : base(0) { }
        public UEObject OnComponentAddedOrRemovedDelegate { get { return this["OnComponentAddedOrRemovedDelegate"]; } set { this["OnComponentAddedOrRemovedDelegate"] = value; } }
        public UEObject OnComponentUpdatedDelegate { get { return this["OnComponentUpdatedDelegate"]; } set { this["OnComponentUpdatedDelegate"] = value; } }
        public UEObject OnComponentDamageProcessedDelegate { get { return this["OnComponentDamageProcessedDelegate"]; } set { this["OnComponentDamageProcessedDelegate"] = value; } }
        public UEObject OnDamagePreventedDelegate { get { return this["OnDamagePreventedDelegate"]; } set { this["OnDamagePreventedDelegate"] = value; } }
        public UEObject OnDamageInstanceProcessedDelegate { get { return this["OnDamageInstanceProcessedDelegate"]; } set { this["OnDamageInstanceProcessedDelegate"] = value; } }
        public UEObject OnComponentWithstandCheckDelegate { get { return this["OnComponentWithstandCheckDelegate"]; } set { this["OnComponentWithstandCheckDelegate"] = value; } }
        public Array<DimensionDefenseComponentData> Components { get { return new Array<DimensionDefenseComponentData>(this["Components"]); } set { this["Components"] = value; } }
        public void SetDefenseComponentWithstandChance(UEObject Handle, UEObject NewWithstandChance) { Invoke("SetDefenseComponentWithstandChance", Handle, NewWithstandChance); }
        public void _DimensionDefenseComponent(UEObject OnComponentAddedOrRemovedDelegate, UEObject OnComponentUpdatedDelegate, UEObject OnComponentDamageProcessedDelegate, UEObject OnDamagePreventedDelegate, UEObject OnDamageInstanceProcessedDelegate, UEObject OnComponentWithstandCheckDelegate, UEObject Components) { Invoke("DimensionDefenseComponent", OnComponentAddedOrRemovedDelegate, OnComponentUpdatedDelegate, OnComponentDamageProcessedDelegate, OnDamagePreventedDelegate, OnDamageInstanceProcessedDelegate, OnComponentWithstandCheckDelegate, Components); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionDamageSubsystem : GameInstanceSubsystem
    {
        public DimensionDamageSubsystem(nint addr) : base(addr) { }
        public DimensionDamageSubsystem() : base(0) { }
        public Array<DelayedDamageData> CachedDelayedDamageData { get { return new Array<DelayedDamageData>(this["CachedDelayedDamageData"]); } set { this["CachedDelayedDamageData"] = value; } }
    }
    public class DimensionDamageReactionInterface : Interface
    {
        public DimensionDamageReactionInterface(nint addr) : base(addr) { }
        public DimensionDamageReactionInterface() : base(0) { }
        public void OnRevive(UEObject AggregatedDamageData) { Invoke("OnRevive", AggregatedDamageData); }
        public void _DimensionDamageReactionInterface() { Invoke("DimensionDamageReactionInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionDamageLibrary : UEObject
    {
        public DimensionDamageLibrary(nint addr) : base(addr) { }
        public DimensionDamageLibrary() : base(0) { }
        public UEObject ShouldDealDamage(UEObject Target, UEObject DeferredDamageActors, UEObject DamageApplyPolicy, UEObject NetData, UEObject bOutShouldApplyAction, UEObject ActionModifiers) { return InvokeUEObject("ShouldDealDamage", Target, DeferredDamageActors, DamageApplyPolicy, NetData, bOutShouldApplyAction, ActionModifiers); }
        public void _DimensionDamageLibrary() { Invoke("DimensionDamageLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionDamageInstigatorInterface : Interface
    {
        public DimensionDamageInstigatorInterface(nint addr) : base(addr) { }
        public DimensionDamageInstigatorInterface() : base(0) { }
        public void OnNonDamageHit(UEObject AggregatedDamageData) { Invoke("OnNonDamageHit", AggregatedDamageData); }
        public void _DimensionDamageInstigatorInterface() { Invoke("DimensionDamageInstigatorInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionDamageComponent : DimensionActorComponent
    {
        public DimensionDamageComponent(nint addr) : base(addr) { }
        public DimensionDamageComponent() : base(0) { }
        public UEObject OnModifierUpdateDelegate { get { return this["OnModifierUpdateDelegate"]; } set { this["OnModifierUpdateDelegate"] = value; } }
        public Array<DamageComponentModifier> DamageModifiers { get { return new Array<DamageComponentModifier>(this["DamageModifiers"]); } set { this["DamageModifiers"] = value; } }
        public Array<UEObject> DefaultModifiers { get { return new Array<UEObject>(this["DefaultModifiers"]); } set { this["DefaultModifiers"] = value; } }
        public void SetModifierUses(UEObject Handle, UEObject NewUses) { Invoke("SetModifierUses", Handle, NewUses); }
        public void _DimensionDamageComponent(UEObject OnModifierUpdateDelegate, UEObject DamageModifiers, UEObject DefaultModifiers) { Invoke("DimensionDamageComponent", OnModifierUpdateDelegate, DamageModifiers, DefaultModifiers); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionDamageAttribSet : DimensionAttribSet
    {
        public DimensionDamageAttribSet(nint addr) : base(addr) { }
        public DimensionDamageAttribSet() : base(0) { }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public float BaseDamage { get { return this["BaseDamage"].GetValue<float>(); } set { this["BaseDamage"].SetValue<float>(value); } }
    }
    public class DimensionConsumableItem : DimensionItem
    {
        public DimensionConsumableItem(nint addr) : base(addr) { }
        public DimensionConsumableItem() : base(0) { }
        public bool bIsReusable { get { return this["bIsReusable"].Flag; } set { this["bIsReusable"].Flag = value; } }
        public bool bIsQuickItem { get { return this["bIsQuickItem"].Flag; } set { this["bIsQuickItem"].Flag = value; } }
        public bool bClientAuthority { get { return this["bClientAuthority"].Flag; } set { this["bClientAuthority"].Flag = value; } }
        public float CoolDown { get { return this["CoolDown"].GetValue<float>(); } set { this["CoolDown"].SetValue<float>(value); } }
        public ConsumableItemUseInfo Usage { get { return this[nameof(Usage)].As<ConsumableItemUseInfo>(); } set { this["Usage"] = value; } }
        public UEObject IsReusable() { return InvokeUEObject("IsReusable"); }
        public void _DimensionConsumableItem(UEObject bIsReusable, UEObject bIsQuickItem, UEObject bClientAuthority, UEObject CoolDown, UEObject Usage) { Invoke("DimensionConsumableItem", bIsReusable, bIsQuickItem, bClientAuthority, CoolDown, Usage); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionConfigLibrary : UEObject
    {
        public DimensionConfigLibrary(nint addr) : base(addr) { }
        public DimensionConfigLibrary() : base(0) { }
        public UEObject IsSupportingRarity(UEObject ItemTypeTag) { return InvokeUEObject("IsSupportingRarity", ItemTypeTag); }
        public void _DimensionConfigLibrary() { Invoke("DimensionConfigLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionConfig : UEObject
    {
        public DimensionConfig(nint addr) : base(addr) { }
        public DimensionConfig() : base(0) { }
        public DataTable WeaponArchetypes { get { return this[nameof(WeaponArchetypes)].As<DataTable>(); } set { this["WeaponArchetypes"] = value; } }
        public DataTable AutoRiflesData { get { return this[nameof(AutoRiflesData)].As<DataTable>(); } set { this["AutoRiflesData"] = value; } }
        public DataTable ShotgunsData { get { return this[nameof(ShotgunsData)].As<DataTable>(); } set { this["ShotgunsData"] = value; } }
        public DataTable HandCannonData { get { return this[nameof(HandCannonData)].As<DataTable>(); } set { this["HandCannonData"] = value; } }
        public DataTable MachinePistolData { get { return this[nameof(MachinePistolData)].As<DataTable>(); } set { this["MachinePistolData"] = value; } }
        public DataTable BoltActionRifleData { get { return this[nameof(BoltActionRifleData)].As<DataTable>(); } set { this["BoltActionRifleData"] = value; } }
        public DataTable CrossbowData { get { return this[nameof(CrossbowData)].As<DataTable>(); } set { this["CrossbowData"] = value; } }
        public DataTable MachineGunData { get { return this[nameof(MachineGunData)].As<DataTable>(); } set { this["MachineGunData"] = value; } }
        public DataTable GrenadeLauncherData { get { return this[nameof(GrenadeLauncherData)].As<DataTable>(); } set { this["GrenadeLauncherData"] = value; } }
        public DataTable RayGunData { get { return this[nameof(RayGunData)].As<DataTable>(); } set { this["RayGunData"] = value; } }
        public DataTable StunGunData { get { return this[nameof(StunGunData)].As<DataTable>(); } set { this["StunGunData"] = value; } }
        public DataTable StakeGunData { get { return this[nameof(StakeGunData)].As<DataTable>(); } set { this["StakeGunData"] = value; } }
        public DataTable LeverActionRifleData { get { return this[nameof(LeverActionRifleData)].As<DataTable>(); } set { this["LeverActionRifleData"] = value; } }
        public DimensionWeaponConfig WeaponConfig { get { return this[nameof(WeaponConfig)].As<DimensionWeaponConfig>(); } set { this["WeaponConfig"] = value; } }
        public UEObject WeaponItemDataMap { get { return this["WeaponItemDataMap"]; } set { this["WeaponItemDataMap"] = value; } }
        public DataTable EnemyData { get { return this[nameof(EnemyData)].As<DataTable>(); } set { this["EnemyData"] = value; } }
        public DataTable PlayerData { get { return this[nameof(PlayerData)].As<DataTable>(); } set { this["PlayerData"] = value; } }
        public DimensionInventoryConfig InventoryConfig { get { return this[nameof(InventoryConfig)].As<DimensionInventoryConfig>(); } set { this["InventoryConfig"] = value; } }
        public UEObject AttributeAggregatorMap { get { return this["AttributeAggregatorMap"]; } set { this["AttributeAggregatorMap"] = value; } }
        public DataTable ResearchProjectsData { get { return this[nameof(ResearchProjectsData)].As<DataTable>(); } set { this["ResearchProjectsData"] = value; } }
        public DataTable ResearchCategoriesData { get { return this[nameof(ResearchCategoriesData)].As<DataTable>(); } set { this["ResearchCategoriesData"] = value; } }
        public DimensionInputConfig InputConfig { get { return this[nameof(InputConfig)].As<DimensionInputConfig>(); } set { this["InputConfig"] = value; } }
        public DataTable WeaponBoostersData { get { return this[nameof(WeaponBoostersData)].As<DataTable>(); } set { this["WeaponBoostersData"] = value; } }
        public DataTable SpellBoostersData { get { return this[nameof(SpellBoostersData)].As<DataTable>(); } set { this["SpellBoostersData"] = value; } }
        public DataTable VariaBoostersData { get { return this[nameof(VariaBoostersData)].As<DataTable>(); } set { this["VariaBoostersData"] = value; } }
        public DataTable CorruptedBoostersData { get { return this[nameof(CorruptedBoostersData)].As<DataTable>(); } set { this["CorruptedBoostersData"] = value; } }
        public DataTable BoosterPropheciesData { get { return this[nameof(BoosterPropheciesData)].As<DataTable>(); } set { this["BoosterPropheciesData"] = value; } }
        public DataTable BoosterProphecyCategoriesData { get { return this[nameof(BoosterProphecyCategoriesData)].As<DataTable>(); } set { this["BoosterProphecyCategoriesData"] = value; } }
        public DataTable BoosterProphecyItemsData { get { return this[nameof(BoosterProphecyItemsData)].As<DataTable>(); } set { this["BoosterProphecyItemsData"] = value; } }
        public DataTable SettingsDefinitionsData { get { return this[nameof(SettingsDefinitionsData)].As<DataTable>(); } set { this["SettingsDefinitionsData"] = value; } }
        public DimensionSettingsPresetData SettingsPresetsData { get { return this[nameof(SettingsPresetsData)].As<DimensionSettingsPresetData>(); } set { this["SettingsPresetsData"] = value; } }
        public DimensionClassConfig ClassConfig { get { return this[nameof(ClassConfig)].As<DimensionClassConfig>(); } set { this["ClassConfig"] = value; } }
        public DimensionRequirementsConfig RequirementsConfig { get { return this[nameof(RequirementsConfig)].As<DimensionRequirementsConfig>(); } set { this["RequirementsConfig"] = value; } }
        public Array<UEObject> BlueprintSubsystems { get { return new Array<UEObject>(this["BlueprintSubsystems"]); } set { this["BlueprintSubsystems"] = value; } }
        public UEObject CompanionsConfig { get { return this["CompanionsConfig"]; } set { this["CompanionsConfig"] = value; } }
    }
    public class DimensionComponentLibrary : UEObject
    {
        public DimensionComponentLibrary(nint addr) : base(addr) { }
        public DimensionComponentLibrary() : base(0) { }
        public UEObject NotEqual_DefenseComponentHandle(UEObject A, UEObject B) { return InvokeUEObject("NotEqual_DefenseComponentHandle", A, B); }
        public void _DimensionComponentLibrary() { Invoke("DimensionComponentLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCompanionsSubsystem : GameInstanceSubsystem
    {
        public DimensionCompanionsSubsystem(nint addr) : base(addr) { }
        public DimensionCompanionsSubsystem() : base(0) { }
        public UEObject OnCompanionAddedToSquad { get { return this["OnCompanionAddedToSquad"]; } set { this["OnCompanionAddedToSquad"] = value; } }
        public UEObject OnCompanionRemovedFromSquad { get { return this["OnCompanionRemovedFromSquad"]; } set { this["OnCompanionRemovedFromSquad"] = value; } }
        public UEObject OnCompanionAbilityActivated { get { return this["OnCompanionAbilityActivated"]; } set { this["OnCompanionAbilityActivated"] = value; } }
        public UEObject OnCompanionsLoaded { get { return this["OnCompanionsLoaded"]; } set { this["OnCompanionsLoaded"] = value; } }
        public UEObject OnBoonsChangedDelegate { get { return this["OnBoonsChangedDelegate"]; } set { this["OnBoonsChangedDelegate"] = value; } }
        public GameplayTagContainer ActiveCompanions { get { return this[nameof(ActiveCompanions)].As<GameplayTagContainer>(); } set { this["ActiveCompanions"] = value; } }
        public GameplayTagContainer SummonedCompanions { get { return this[nameof(SummonedCompanions)].As<GameplayTagContainer>(); } set { this["SummonedCompanions"] = value; } }
        public GameplayTagContainer LoadedCompanions { get { return this[nameof(LoadedCompanions)].As<GameplayTagContainer>(); } set { this["LoadedCompanions"] = value; } }
        public UEObject CompanionsUnlockSteps { get { return this["CompanionsUnlockSteps"]; } set { this["CompanionsUnlockSteps"] = value; } }
        public UEObject CompanionsMap { get { return this["CompanionsMap"]; } set { this["CompanionsMap"] = value; } }
        public DimensionProgressManager CachedProgressManager { get { return this[nameof(CachedProgressManager)].As<DimensionProgressManager>(); } set { this["CachedProgressManager"] = value; } }
        public DimensionCompanionsConfig CachedConfig { get { return this[nameof(CachedConfig)].As<DimensionCompanionsConfig>(); } set { this["CachedConfig"] = value; } }
        public DimensionHUD CachedHUD { get { return this[nameof(CachedHUD)].As<DimensionHUD>(); } set { this["CachedHUD"] = value; } }
        public int RemainingBoons { get { return this["RemainingBoons"].GetValue<int>(); } set { this["RemainingBoons"].SetValue<int>(value); } }
        public List<string> SaveLoadActiveCompanions { get { return this["SaveLoadActiveCompanions"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject SaveLoadCompanionsUnlockSteps { get { return this["SaveLoadCompanionsUnlockSteps"]; } set { this["SaveLoadCompanionsUnlockSteps"] = value; } }
        public int SaveLoadRemainingBoons { get { return this["SaveLoadRemainingBoons"].GetValue<int>(); } set { this["SaveLoadRemainingBoons"].SetValue<int>(value); } }
        public void UnlockCompanion(UEObject CompanionTag) { Invoke("UnlockCompanion", CompanionTag); }
        public void _DimensionCompanionsSubsystem(UEObject OnCompanionAddedToSquad, UEObject OnCompanionRemovedFromSquad, UEObject OnCompanionAbilityActivated, UEObject OnCompanionsLoaded, UEObject OnBoonsChangedDelegate, UEObject ActiveCompanions, UEObject SummonedCompanions, UEObject LoadedCompanions, UEObject CompanionsUnlockSteps, UEObject CompanionsMap, UEObject CachedProgressManager, UEObject CachedConfig, UEObject CachedHUD, UEObject RemainingBoons, UEObject SaveLoadActiveCompanions, UEObject SaveLoadCompanionsUnlockSteps, UEObject SaveLoadRemainingBoons) { Invoke("DimensionCompanionsSubsystem", OnCompanionAddedToSquad, OnCompanionRemovedFromSquad, OnCompanionAbilityActivated, OnCompanionsLoaded, OnBoonsChangedDelegate, ActiveCompanions, SummonedCompanions, LoadedCompanions, CompanionsUnlockSteps, CompanionsMap, CachedProgressManager, CachedConfig, CachedHUD, RemainingBoons, SaveLoadActiveCompanions, SaveLoadCompanionsUnlockSteps, SaveLoadRemainingBoons); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCompanionsFunctionLibrary : UEObject
    {
        public DimensionCompanionsFunctionLibrary(nint addr) : base(addr) { }
        public DimensionCompanionsFunctionLibrary() : base(0) { }
        public UEObject IsVestalFlameUnlocked(UEObject PlayerCharacter) { return InvokeUEObject("IsVestalFlameUnlocked", PlayerCharacter); }
        public void _DimensionCompanionsFunctionLibrary() { Invoke("DimensionCompanionsFunctionLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCompanionsConfig : DataAsset
    {
        public DimensionCompanionsConfig(nint addr) : base(addr) { }
        public DimensionCompanionsConfig() : base(0) { }
        public CurveTable CompanionsUnlockCosts { get { return this[nameof(CompanionsUnlockCosts)].As<CurveTable>(); } set { this["CompanionsUnlockCosts"] = value; } }
        public DataTable CompanionsConfigs { get { return this[nameof(CompanionsConfigs)].As<DataTable>(); } set { this["CompanionsConfigs"] = value; } }
        public UEObject QuestTypeToNameMap { get { return this["QuestTypeToNameMap"]; } set { this["QuestTypeToNameMap"] = value; } }
        public UEObject ItemTypeToRequirementMap { get { return this["ItemTypeToRequirementMap"]; } set { this["ItemTypeToRequirementMap"] = value; } }
        public bool bMakeCompanionsGreatAgain { get { return this["bMakeCompanionsGreatAgain"].Flag; } set { this["bMakeCompanionsGreatAgain"].Flag = value; } }
        public int ActiveCompanionsLimit { get { return this["ActiveCompanionsLimit"].GetValue<int>(); } set { this["ActiveCompanionsLimit"].SetValue<int>(value); } }
        public int MaxFlameBoons { get { return this["MaxFlameBoons"].GetValue<int>(); } set { this["MaxFlameBoons"].SetValue<int>(value); } }
        public DimensionItemHandleCount SingleBoonCost { get { return this[nameof(SingleBoonCost)].As<DimensionItemHandleCount>(); } set { this["SingleBoonCost"] = value; } }
        public DimensionItemHandleCount EchoesQuestCost { get { return this[nameof(EchoesQuestCost)].As<DimensionItemHandleCount>(); } set { this["EchoesQuestCost"] = value; } }
        public int VestalFlameRequiredGnosis { get { return this["VestalFlameRequiredGnosis"].GetValue<int>(); } set { this["VestalFlameRequiredGnosis"].SetValue<int>(value); } }
        public List<int> VestalFlameBoonsToStages { get { return this["VestalFlameBoonsToStages"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public CurveTableRowHandle BoundPreyersLimitHandle { get { return this[nameof(BoundPreyersLimitHandle)].As<CurveTableRowHandle>(); } set { this["BoundPreyersLimitHandle"] = value; } }
        public CurveTableRowHandle BoonsPerOfferingHandle { get { return this[nameof(BoonsPerOfferingHandle)].As<CurveTableRowHandle>(); } set { this["BoonsPerOfferingHandle"] = value; } }
        public CurveTableRowHandle HPMultiplierHandle { get { return this[nameof(HPMultiplierHandle)].As<CurveTableRowHandle>(); } set { this["HPMultiplierHandle"] = value; } }
        public CurveTableRowHandle DamageMultiplierHandle { get { return this[nameof(DamageMultiplierHandle)].As<CurveTableRowHandle>(); } set { this["DamageMultiplierHandle"] = value; } }
    }
    public class DimensionCompanionAbilityInterface : Interface
    {
        public DimensionCompanionAbilityInterface(nint addr) : base(addr) { }
        public DimensionCompanionAbilityInterface() : base(0) { }
        public UEObject ModifyDescription(UEObject OriginalDescription, UEObject AbilityLevel) { return InvokeUEObject("ModifyDescription", OriginalDescription, AbilityLevel); }
        public void _DimensionCompanionAbilityInterface() { Invoke("DimensionCompanionAbilityInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCombatDesignerActor : Actor
    {
        public DimensionCombatDesignerActor(nint addr) : base(addr) { }
        public DimensionCombatDesignerActor() : base(0) { }
        public UEObject OnActorActivatedWithDelay { get { return this["OnActorActivatedWithDelay"]; } set { this["OnActorActivatedWithDelay"] = value; } }
        public UEObject OnActorActivatedAI { get { return this["OnActorActivatedAI"]; } set { this["OnActorActivatedAI"] = value; } }
        public int AIClassesIterator { get { return this["AIClassesIterator"].GetValue<int>(); } set { this["AIClassesIterator"].SetValue<int>(value); } }
        public int EliteStatusIterator { get { return this["EliteStatusIterator"].GetValue<int>(); } set { this["EliteStatusIterator"].SetValue<int>(value); } }
        public int AscendedStatusIterator { get { return this["AscendedStatusIterator"].GetValue<int>(); } set { this["AscendedStatusIterator"].SetValue<int>(value); } }
        public float ActivationDelay { get { return this["ActivationDelay"].GetValue<float>(); } set { this["ActivationDelay"].SetValue<float>(value); } }
        public float ActivationIncrement { get { return this["ActivationIncrement"].GetValue<float>(); } set { this["ActivationIncrement"].SetValue<float>(value); } }
        public SkeletalMeshComponent SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh"] = value; } }
        public PlayerController MyPlayerController { get { return this[nameof(MyPlayerController)].As<PlayerController>(); } set { this["MyPlayerController"] = value; } }
        public Array<DimensionAICharacter> SpawnedCharactersToInit { get { return new Array<DimensionAICharacter>(this["SpawnedCharactersToInit"]); } set { this["SpawnedCharactersToInit"] = value; } }
        public Array<DimensionCombatDesignerSpawnTemplate> LastActivatedSet { get { return new Array<DimensionCombatDesignerSpawnTemplate>(this["LastActivatedSet"]); } set { this["LastActivatedSet"] = value; } }
        public UEObject ForceMoveToLeashAbilityClass { get { return this["ForceMoveToLeashAbilityClass"]; } set { this["ForceMoveToLeashAbilityClass"] = value; } }
        public EnvQuery ForceMoveToLeashQuery { get { return this[nameof(ForceMoveToLeashQuery)].As<EnvQuery>(); } set { this["ForceMoveToLeashQuery"] = value; } }
        public float ForceMoveToLeashScore { get { return this["ForceMoveToLeashScore"].GetValue<float>(); } set { this["ForceMoveToLeashScore"].SetValue<float>(value); } }
        public void ToggleCombatDesigner() { Invoke("ToggleCombatDesigner"); }
        public void _DimensionCombatDesignerActor(UEObject OnActorActivatedWithDelay, UEObject OnActorActivatedAI, UEObject AIClassesIterator, UEObject EliteStatusIterator, UEObject AscendedStatusIterator, UEObject ActivationDelay, UEObject ActivationIncrement, UEObject SkeletalMesh, UEObject MyPlayerController, UEObject SpawnedCharactersToInit, UEObject LastActivatedSet, UEObject ForceMoveToLeashAbilityClass, UEObject ForceMoveToLeashQuery, UEObject ForceMoveToLeashScore) { Invoke("DimensionCombatDesignerActor", OnActorActivatedWithDelay, OnActorActivatedAI, AIClassesIterator, EliteStatusIterator, AscendedStatusIterator, ActivationDelay, ActivationIncrement, SkeletalMesh, MyPlayerController, SpawnedCharactersToInit, LastActivatedSet, ForceMoveToLeashAbilityClass, ForceMoveToLeashQuery, ForceMoveToLeashScore); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionClassConfig : DataAsset
    {
        public DimensionClassConfig(nint addr) : base(addr) { }
        public DimensionClassConfig() : base(0) { }
        public Array<DimensionPlayerClassDefinition> ClassDefinitions { get { return new Array<DimensionPlayerClassDefinition>(this["ClassDefinitions"]); } set { this["ClassDefinitions"] = value; } }
        public int MinStartingAttributesSum { get { return this["MinStartingAttributesSum"].GetValue<int>(); } set { this["MinStartingAttributesSum"].SetValue<int>(value); } }
        public Array<PlayerAttributeData> PlayerAttributeData { get { return new Array<PlayerAttributeData>(this["PlayerAttributeData"]); } set { this["PlayerAttributeData"] = value; } }
        public UEObject GetStartingLevelForClass(UEObject ClassTag, UEObject OutStartingLevel) { return InvokeUEObject("GetStartingLevelForClass", ClassTag, OutStartingLevel); }
        public void _DimensionClassConfig(UEObject ClassDefinitions, UEObject MinStartingAttributesSum, UEObject PlayerAttributeData) { Invoke("DimensionClassConfig", ClassDefinitions, MinStartingAttributesSum, PlayerAttributeData); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCinematicsSubsystem : WorldSubsystem
    {
        public DimensionCinematicsSubsystem(nint addr) : base(addr) { }
        public DimensionCinematicsSubsystem() : base(0) { }
        public UEObject OnCinematicEndedDelegate { get { return this["OnCinematicEndedDelegate"]; } set { this["OnCinematicEndedDelegate"] = value; } }
        public UEObject OnCinematicStartedDelegate { get { return this["OnCinematicStartedDelegate"]; } set { this["OnCinematicStartedDelegate"] = value; } }
        public LevelSequenceActor SequencePlayer { get { return this[nameof(SequencePlayer)].As<LevelSequenceActor>(); } set { this["SequencePlayer"] = value; } }
        public UEObject CurrentCinematic { get { return this[nameof(CurrentCinematic)]; } set { this["CurrentCinematic"] = value; } }
        public UEObject StartCinematic(UEObject LevelSequence) { return InvokeUEObject("StartCinematic", LevelSequence); }
        public void _DimensionCinematicsSubsystem(UEObject OnCinematicEndedDelegate, UEObject OnCinematicStartedDelegate, UEObject SequencePlayer, UEObject CurrentCinematic) { Invoke("DimensionCinematicsSubsystem", OnCinematicEndedDelegate, OnCinematicStartedDelegate, SequencePlayer, CurrentCinematic); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBossHealthBarWidget : DimensionHealthBarWidgetBase
    {
        public DimensionBossHealthBarWidget(nint addr) : base(addr) { }
        public DimensionBossHealthBarWidget() : base(0) { }
        public Image CachedHealthBarImage { get { return this[nameof(CachedHealthBarImage)].As<Image>(); } set { this["CachedHealthBarImage"] = value; } }
        public UEObject GetStunBar() { return InvokeUEObject("GetStunBar"); }
        public void _DimensionBossHealthBarWidget(UEObject CachedHealthBarImage) { Invoke("DimensionBossHealthBarWidget", CachedHealthBarImage); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBossHealthBarStackWidget : DimensionUserWidget
    {
        public DimensionBossHealthBarStackWidget(nint addr) : base(addr) { }
        public DimensionBossHealthBarStackWidget() : base(0) { }
        public Array<Actor> BossActors { get { return new Array<Actor>(this["BossActors"]); } set { this["BossActors"] = value; } }
        public Array<UEObject> HealthBars { get { return new Array<UEObject>(this["HealthBars"]); } set { this["HealthBars"] = value; } }
        public UEObject OnNumberOfVisibleHealthBarsChanged { get { return this["OnNumberOfVisibleHealthBarsChanged"]; } set { this["OnNumberOfVisibleHealthBarsChanged"] = value; } }
        public int CurrentNumberOfVisibleHealthBars { get { return this["CurrentNumberOfVisibleHealthBars"].GetValue<int>(); } set { this["CurrentNumberOfVisibleHealthBars"].SetValue<int>(value); } }
        public VerticalBox CachedHealthBarsCanvasPanel { get { return this[nameof(CachedHealthBarsCanvasPanel)].As<VerticalBox>(); } set { this["CachedHealthBarsCanvasPanel"] = value; } }
        public UEObject GetNumberOfVisibleHealthBars() { return InvokeUEObject("GetNumberOfVisibleHealthBars"); }
        public void _DimensionBossHealthBarStackWidget(UEObject BossActors, UEObject HealthBars, UEObject OnNumberOfVisibleHealthBarsChanged, UEObject CurrentNumberOfVisibleHealthBars, UEObject CachedHealthBarsCanvasPanel) { Invoke("DimensionBossHealthBarStackWidget", BossActors, HealthBars, OnNumberOfVisibleHealthBarsChanged, CurrentNumberOfVisibleHealthBars, CachedHealthBarsCanvasPanel); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBoosterProphecyItem : DimensionItem
    {
        public DimensionBoosterProphecyItem(nint addr) : base(addr) { }
        public DimensionBoosterProphecyItem() : base(0) { }
        public DimensionBoosterProphecyDataDetails BoosterProphecyDataDetails { get { return this[nameof(BoosterProphecyDataDetails)].As<DimensionBoosterProphecyDataDetails>(); } set { this["BoosterProphecyDataDetails"] = value; } }
        public string PowerName { get { return this["PowerName"].ToString(); } set { /* String properties are read-only */ } }
        public string PowerDescription { get { return this["PowerDescription"].ToString(); } set { /* String properties are read-only */ } }
        public int EquippedRowIndex { get { return this["EquippedRowIndex"].GetValue<int>(); } set { this["EquippedRowIndex"].SetValue<int>(value); } }
        public void OnBoosterTokenAddedOrRemoved(UEObject CurrentStacks, UEObject StacksDelta) { Invoke("OnBoosterTokenAddedOrRemoved", CurrentStacks, StacksDelta); }
        public void _DimensionBoosterProphecyItem(UEObject BoosterProphecyDataDetails, UEObject PowerName, UEObject PowerDescription, UEObject EquippedRowIndex) { Invoke("DimensionBoosterProphecyItem", BoosterProphecyDataDetails, PowerName, PowerDescription, EquippedRowIndex); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBoosterManager : DimensionObject
    {
        public DimensionBoosterManager(nint addr) : base(addr) { }
        public DimensionBoosterManager() : base(0) { }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public Actor CachedPlayer { get { return this[nameof(CachedPlayer)].As<Actor>(); } set { this["CachedPlayer"] = value; } }
        public DataTableRowHandle MainBoosterCollection { get { return this[nameof(MainBoosterCollection)].As<DataTableRowHandle>(); } set { this["MainBoosterCollection"] = value; } }
        public Array<DataTableRowHandle> AllBoosters { get { return new Array<DataTableRowHandle>(this["AllBoosters"]); } set { this["AllBoosters"] = value; } }
        public Array<DataTableRowHandle> PersistentBoosters { get { return new Array<DataTableRowHandle>(this["PersistentBoosters"]); } set { this["PersistentBoosters"] = value; } }
        public Array<DataTableRowHandle> TransientBoosters { get { return new Array<DataTableRowHandle>(this["TransientBoosters"]); } set { this["TransientBoosters"] = value; } }
        public UEObject BoosterSetsMap { get { return this["BoosterSetsMap"]; } set { this["BoosterSetsMap"] = value; } }
        public UEObject AddedTransientBoosters { get { return this["AddedTransientBoosters"]; } set { this["AddedTransientBoosters"] = value; } }
        public Array<DataTableRowHandle> LockedBoosters { get { return new Array<DataTableRowHandle>(this["LockedBoosters"]); } set { this["LockedBoosters"] = value; } }
        public Array<DataTableRowHandle> CurrentLockedBoostersPool { get { return new Array<DataTableRowHandle>(this["CurrentLockedBoostersPool"]); } set { this["CurrentLockedBoostersPool"] = value; } }
        public Array<DimensionBoosterPickerSet> BoosterPickerSets { get { return new Array<DimensionBoosterPickerSet>(this["BoosterPickerSets"]); } set { this["BoosterPickerSets"] = value; } }
        public int BoosterPickerSetsLimit { get { return this["BoosterPickerSetsLimit"].GetValue<int>(); } set { this["BoosterPickerSetsLimit"].SetValue<int>(value); } }
        public int RevealCountPerBoosterPickerSet { get { return this["RevealCountPerBoosterPickerSet"].GetValue<int>(); } set { this["RevealCountPerBoosterPickerSet"].SetValue<int>(value); } }
        public int ActivationLimitPerBoosterPickerSet { get { return this["ActivationLimitPerBoosterPickerSet"].GetValue<int>(); } set { this["ActivationLimitPerBoosterPickerSet"].SetValue<int>(value); } }
        public int MinBoosterLevel { get { return this["MinBoosterLevel"].GetValue<int>(); } set { this["MinBoosterLevel"].SetValue<int>(value); } }
        public int BoosterRerollLimit { get { return this["BoosterRerollLimit"].GetValue<int>(); } set { this["BoosterRerollLimit"].SetValue<int>(value); } }
        public DataTableRowHandle AddRowItemDataHandle { get { return this[nameof(AddRowItemDataHandle)].As<DataTableRowHandle>(); } set { this["AddRowItemDataHandle"] = value; } }
        public DataTableRowHandle MainBoosterCurrencyItemDataHandle { get { return this[nameof(MainBoosterCurrencyItemDataHandle)].As<DataTableRowHandle>(); } set { this["MainBoosterCurrencyItemDataHandle"] = value; } }
        public Array<DimensionBoosterSelectQuery> BoosterPickerSelectQueries { get { return new Array<DimensionBoosterSelectQuery>(this["BoosterPickerSelectQueries"]); } set { this["BoosterPickerSelectQueries"] = value; } }
        public bool bBoosterUpgradeEnabled { get { return this["bBoosterUpgradeEnabled"].Flag; } set { this["bBoosterUpgradeEnabled"].Flag = value; } }
        public UEObject OnBoosterPickerSetAddedDelegate { get { return this["OnBoosterPickerSetAddedDelegate"]; } set { this["OnBoosterPickerSetAddedDelegate"] = value; } }
        public UEObject OnBoosterPickerSetUpdateDelegate { get { return this["OnBoosterPickerSetUpdateDelegate"]; } set { this["OnBoosterPickerSetUpdateDelegate"] = value; } }
        public Array<DimensionBoosterActionDefinition> ActionDefinitions { get { return new Array<DimensionBoosterActionDefinition>(this["ActionDefinitions"]); } set { this["ActionDefinitions"] = value; } }
        public DataTable BoosterCategoriesDataTable { get { return this[nameof(BoosterCategoriesDataTable)].As<DataTable>(); } set { this["BoosterCategoriesDataTable"] = value; } }
        public Array<DimensionBoosterCategory> CategoryDefinitions { get { return new Array<DimensionBoosterCategory>(this["CategoryDefinitions"]); } set { this["CategoryDefinitions"] = value; } }
        public Array<GameplayTag> ChosenCategoryTagsForSelection { get { return new Array<GameplayTag>(this["ChosenCategoryTagsForSelection"]); } set { this["ChosenCategoryTagsForSelection"] = value; } }
        public int GeneratedCategoriesCount { get { return this["GeneratedCategoriesCount"].GetValue<int>(); } set { this["GeneratedCategoriesCount"].SetValue<int>(value); } }
        public int MinSelectableBoostersPerCategory { get { return this["MinSelectableBoostersPerCategory"].GetValue<int>(); } set { this["MinSelectableBoostersPerCategory"].SetValue<int>(value); } }
        public DataTable BoosterCategoriesDataTable_Alternative { get { return this[nameof(BoosterCategoriesDataTable_Alternative)].As<DataTable>(); } set { this["BoosterCategoriesDataTable_Alternative"] = value; } }
        public DataTable CorruptedBoosterCategoriesDataTable { get { return this[nameof(CorruptedBoosterCategoriesDataTable)].As<DataTable>(); } set { this["CorruptedBoosterCategoriesDataTable"] = value; } }
        public DataTableRowHandle CorruptedBoosterCollection { get { return this[nameof(CorruptedBoosterCollection)].As<DataTableRowHandle>(); } set { this["CorruptedBoosterCollection"] = value; } }
        public DataTableRowHandle CorruptedAddRowItemDataHandle { get { return this[nameof(CorruptedAddRowItemDataHandle)].As<DataTableRowHandle>(); } set { this["CorruptedAddRowItemDataHandle"] = value; } }
        public int CorruptedRevealCountPerBoosterPickerSet { get { return this["CorruptedRevealCountPerBoosterPickerSet"].GetValue<int>(); } set { this["CorruptedRevealCountPerBoosterPickerSet"].SetValue<int>(value); } }
        public int CorruptedActivationLimitPerBoosterPickerSet { get { return this["CorruptedActivationLimitPerBoosterPickerSet"].GetValue<int>(); } set { this["CorruptedActivationLimitPerBoosterPickerSet"].SetValue<int>(value); } }
        public Array<DimensionBoosterActionDefinition> CorruptedActionDefinitions { get { return new Array<DimensionBoosterActionDefinition>(this["CorruptedActionDefinitions"]); } set { this["CorruptedActionDefinitions"] = value; } }
        public Array<DataTableRowHandle> CorruptedBoosters { get { return new Array<DataTableRowHandle>(this["CorruptedBoosters"]); } set { this["CorruptedBoosters"] = value; } }
        public DataTableRowHandle FailedSelectionBoosterHandle { get { return this[nameof(FailedSelectionBoosterHandle)].As<DataTableRowHandle>(); } set { this["FailedSelectionBoosterHandle"] = value; } }
        public int ProphecyItemLevelBase { get { return this["ProphecyItemLevelBase"].GetValue<int>(); } set { this["ProphecyItemLevelBase"].SetValue<int>(value); } }
        public UEObject OnBoosterProphecyUpdateDelegate { get { return this["OnBoosterProphecyUpdateDelegate"]; } set { this["OnBoosterProphecyUpdateDelegate"] = value; } }
        public UEObject OnBoosterActiveEffectUpdateDelegate { get { return this["OnBoosterActiveEffectUpdateDelegate"]; } set { this["OnBoosterActiveEffectUpdateDelegate"] = value; } }
        public bool bShowNamesOnBoosterBarWidget { get { return this["bShowNamesOnBoosterBarWidget"].Flag; } set { this["bShowNamesOnBoosterBarWidget"].Flag = value; } }
        public bool bShowNamesOnActiveEffectsWidget { get { return this["bShowNamesOnActiveEffectsWidget"].Flag; } set { this["bShowNamesOnActiveEffectsWidget"].Flag = value; } }
        public void UpgradeBooster(UEObject BoosterSetID, UEObject BoosterIndex, UEObject bPayCost) { Invoke("UpgradeBooster", BoosterSetID, BoosterIndex, bPayCost); }
        public void _DimensionBoosterManager(UEObject PlayerController, UEObject CachedPlayer, UEObject MainBoosterCollection, UEObject AllBoosters, UEObject PersistentBoosters, UEObject TransientBoosters, UEObject BoosterSetsMap, UEObject AddedTransientBoosters, UEObject LockedBoosters, UEObject CurrentLockedBoostersPool, UEObject BoosterPickerSets, UEObject BoosterPickerSetsLimit, UEObject RevealCountPerBoosterPickerSet, UEObject ActivationLimitPerBoosterPickerSet, UEObject MinBoosterLevel, UEObject BoosterRerollLimit, UEObject AddRowItemDataHandle, UEObject MainBoosterCurrencyItemDataHandle, UEObject BoosterPickerSelectQueries, UEObject bBoosterUpgradeEnabled, UEObject OnBoosterPickerSetAddedDelegate, UEObject OnBoosterPickerSetUpdateDelegate, UEObject ActionDefinitions, UEObject BoosterCategoriesDataTable, UEObject CategoryDefinitions, UEObject ChosenCategoryTagsForSelection, UEObject GeneratedCategoriesCount, UEObject MinSelectableBoostersPerCategory, UEObject BoosterCategoriesDataTable_Alternative, UEObject CorruptedBoosterCategoriesDataTable, UEObject CorruptedBoosterCollection, UEObject CorruptedAddRowItemDataHandle, UEObject CorruptedRevealCountPerBoosterPickerSet, UEObject CorruptedActivationLimitPerBoosterPickerSet, UEObject CorruptedActionDefinitions, UEObject CorruptedBoosters, UEObject FailedSelectionBoosterHandle, UEObject ProphecyItemLevelBase, UEObject OnBoosterProphecyUpdateDelegate, UEObject OnBoosterActiveEffectUpdateDelegate, UEObject bShowNamesOnBoosterBarWidget, UEObject bShowNamesOnActiveEffectsWidget) { Invoke("DimensionBoosterManager", PlayerController, CachedPlayer, MainBoosterCollection, AllBoosters, PersistentBoosters, TransientBoosters, BoosterSetsMap, AddedTransientBoosters, LockedBoosters, CurrentLockedBoostersPool, BoosterPickerSets, BoosterPickerSetsLimit, RevealCountPerBoosterPickerSet, ActivationLimitPerBoosterPickerSet, MinBoosterLevel, BoosterRerollLimit, AddRowItemDataHandle, MainBoosterCurrencyItemDataHandle, BoosterPickerSelectQueries, bBoosterUpgradeEnabled, OnBoosterPickerSetAddedDelegate, OnBoosterPickerSetUpdateDelegate, ActionDefinitions, BoosterCategoriesDataTable, CategoryDefinitions, ChosenCategoryTagsForSelection, GeneratedCategoriesCount, MinSelectableBoostersPerCategory, BoosterCategoriesDataTable_Alternative, CorruptedBoosterCategoriesDataTable, CorruptedBoosterCollection, CorruptedAddRowItemDataHandle, CorruptedRevealCountPerBoosterPickerSet, CorruptedActivationLimitPerBoosterPickerSet, CorruptedActionDefinitions, CorruptedBoosters, FailedSelectionBoosterHandle, ProphecyItemLevelBase, OnBoosterProphecyUpdateDelegate, OnBoosterActiveEffectUpdateDelegate, bShowNamesOnBoosterBarWidget, bShowNamesOnActiveEffectsWidget); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBooster : DimensionItem
    {
        public DimensionBooster(nint addr) : base(addr) { }
        public DimensionBooster() : base(0) { }
        public DimensionBoosterDataDetails BoosterDataDetails { get { return this[nameof(BoosterDataDetails)].As<DimensionBoosterDataDetails>(); } set { this["BoosterDataDetails"] = value; } }
        public GameplayTagContainer EligibleEventTags { get { return this[nameof(EligibleEventTags)].As<GameplayTagContainer>(); } set { this["EligibleEventTags"] = value; } }
        public int Level { get { return this["Level"].GetValue<int>(); } set { this["Level"].SetValue<int>(value); } }
        public int MaxLevel { get { return this["MaxLevel"].GetValue<int>(); } set { this["MaxLevel"].SetValue<int>(value); } }
        public UEObject ShouldBindToGameplayEvents() { return InvokeUEObject("ShouldBindToGameplayEvents"); }
        public void _DimensionBooster(UEObject BoosterDataDetails, UEObject EligibleEventTags, UEObject Level, UEObject MaxLevel) { Invoke("DimensionBooster", BoosterDataDetails, EligibleEventTags, Level, MaxLevel); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionItem : Actor
    {
        public DimensionItem(nint addr) : base(addr) { }
        public DimensionItem() : base(0) { }
        public bool bIsEquipped { get { return this["bIsEquipped"].Flag; } set { this["bIsEquipped"].Flag = value; } }
        public ItemProperties Properties { get { return this[nameof(Properties)].As<ItemProperties>(); } set { this["Properties"] = value; } }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public int DetailsID { get { return this["DetailsID"].GetValue<int>(); } set { this["DetailsID"].SetValue<int>(value); } }
        public UEObject Use(UEObject ItemOwner) { return InvokeUEObject("Use", ItemOwner); }
        public void _DimensionItem(UEObject bIsEquipped, UEObject Properties, UEObject SlotID, UEObject DetailsID) { Invoke("DimensionItem", bIsEquipped, Properties, SlotID, DetailsID); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBoneModifierComponent : DimensionActorComponent
    {
        public DimensionBoneModifierComponent(nint addr) : base(addr) { }
        public DimensionBoneModifierComponent() : base(0) { }
        public Array<BoneModifierSectionData> Sections { get { return new Array<BoneModifierSectionData>(this["Sections"]); } set { this["Sections"] = value; } }
        public float DefaultDamageMultiplier { get { return this["DefaultDamageMultiplier"].GetValue<float>(); } set { this["DefaultDamageMultiplier"].SetValue<float>(value); } }
        public List<string> PenetrationIgnoredBones { get { return this["PenetrationIgnoredBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> PenetrationBlockingBones { get { return this["PenetrationBlockingBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject OnCriticalSectionDamaged { get { return this["OnCriticalSectionDamaged"]; } set { this["OnCriticalSectionDamaged"] = value; } }
        public UEObject UpdateSectionHasCriticalInfo(UEObject SectionName, UEObject bNewHasCriticalSectionInfo) { return InvokeUEObject("UpdateSectionHasCriticalInfo", SectionName, bNewHasCriticalSectionInfo); }
        public void _DimensionBoneModifierComponent(UEObject Sections, UEObject DefaultDamageMultiplier, UEObject PenetrationIgnoredBones, UEObject PenetrationBlockingBones, UEObject OnCriticalSectionDamaged) { Invoke("DimensionBoneModifierComponent", Sections, DefaultDamageMultiplier, PenetrationIgnoredBones, PenetrationBlockingBones, OnCriticalSectionDamaged); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBoltActionRifleMediumInterface : Interface
    {
        public DimensionBoltActionRifleMediumInterface(nint addr) : base(addr) { }
        public DimensionBoltActionRifleMediumInterface() : base(0) { }
        public void OnFreezingBulletUpdated(UEObject bFreezingBulletReady) { Invoke("OnFreezingBulletUpdated", bFreezingBulletReady); }
        public void _DimensionBoltActionRifleMediumInterface() { Invoke("DimensionBoltActionRifleMediumInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBlueprintLogLibrary : UEObject
    {
        public DimensionBlueprintLogLibrary(nint addr) : base(addr) { }
        public DimensionBlueprintLogLibrary() : base(0) { }
        public void TestLog(UEObject WorldContextObject) { Invoke("TestLog", WorldContextObject); }
        public void _DimensionBlueprintLogLibrary() { Invoke("DimensionBlueprintLogLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBipedLocomotion : AnimInstance
    {
        public DimensionBipedLocomotion(nint addr) : base(addr) { }
        public DimensionBipedLocomotion() : base(0) { }
        public DimensionBipedLocomotionConfig Config { get { return this[nameof(Config)].As<DimensionBipedLocomotionConfig>(); } set { this["Config"] = value; } }
        public DimensionAnimInstance AnimInstance { get { return this[nameof(AnimInstance)].As<DimensionAnimInstance>(); } set { this["AnimInstance"] = value; } }
        public DimensionAnimInstanceDataCopy AnimInstanceDataCopy { get { return this[nameof(AnimInstanceDataCopy)].As<DimensionAnimInstanceDataCopy>(); } set { this["AnimInstanceDataCopy"] = value; } }
        public DimensionBipedLocomotionStateMachine StateMachine { get { return this[nameof(StateMachine)].As<DimensionBipedLocomotionStateMachine>(); } set { this["StateMachine"] = value; } }
        public float InputAdditivePoseAlpha { get { return this["InputAdditivePoseAlpha"].GetValue<float>(); } set { this["InputAdditivePoseAlpha"].SetValue<float>(value); } }
        public EDimensionMovementType ImpliedMovementType { get { return (EDimensionMovementType)this["ImpliedMovementType"].GetValue<int>(); } set { this["ImpliedMovementType"].SetValue<int>((int)value); } }
        public EDimensionMovementType UsedMovementType { get { return (EDimensionMovementType)this["UsedMovementType"].GetValue<int>(); } set { this["UsedMovementType"].SetValue<int>((int)value); } }
        public float CycleMinPlayRate { get { return this["CycleMinPlayRate"].GetValue<float>(); } set { this["CycleMinPlayRate"].SetValue<float>(value); } }
        public float CycleMaxPlayRate { get { return this["CycleMaxPlayRate"].GetValue<float>(); } set { this["CycleMaxPlayRate"].SetValue<float>(value); } }
        public float CyclePlayRate { get { return this["CyclePlayRate"].GetValue<float>(); } set { this["CyclePlayRate"].SetValue<float>(value); } }
        public UEObject DirectionsPerMovementType { get { return this["DirectionsPerMovementType"]; } set { this["DirectionsPerMovementType"] = value; } }
        public float RootBoneRotationIdle { get { return this["RootBoneRotationIdle"].GetValue<float>(); } set { this["RootBoneRotationIdle"].SetValue<float>(value); } }
        public UEObject RootBoneRotationDirection { get { return this["RootBoneRotationDirection"]; } set { this["RootBoneRotationDirection"] = value; } }
        public Rotator IdleRotation { get { return this[nameof(IdleRotation)].As<Rotator>(); } set { this["IdleRotation"] = value; } }
        public float HorizontalAimOffsetIdle { get { return this["HorizontalAimOffsetIdle"].GetValue<float>(); } set { this["HorizontalAimOffsetIdle"].SetValue<float>(value); } }
        public UEObject HorizontalAimOffsetDirection { get { return this["HorizontalAimOffsetDirection"]; } set { this["HorizontalAimOffsetDirection"] = value; } }
        public DimensionBipedLocomotion_FPDC LocomotionFPDC { get { return this[nameof(LocomotionFPDC)].As<DimensionBipedLocomotion_FPDC>(); } set { this["LocomotionFPDC"] = value; } }
        public void SetAnimInstanceAndUpdateDataCopy(UEObject InAnimInstance) { Invoke("SetAnimInstanceAndUpdateDataCopy", InAnimInstance); }
        public void _DimensionBipedLocomotion(UEObject Config, UEObject AnimInstance, UEObject AnimInstanceDataCopy, UEObject StateMachine, UEObject InputAdditivePoseAlpha, UEObject ImpliedMovementType, UEObject UsedMovementType, UEObject CycleMinPlayRate, UEObject CycleMaxPlayRate, UEObject CyclePlayRate, UEObject DirectionsPerMovementType, UEObject RootBoneRotationIdle, UEObject RootBoneRotationDirection, UEObject IdleRotation, UEObject HorizontalAimOffsetIdle, UEObject HorizontalAimOffsetDirection, UEObject LocomotionFPDC) { Invoke("DimensionBipedLocomotion", Config, AnimInstance, AnimInstanceDataCopy, StateMachine, InputAdditivePoseAlpha, ImpliedMovementType, UsedMovementType, CycleMinPlayRate, CycleMaxPlayRate, CyclePlayRate, DirectionsPerMovementType, RootBoneRotationIdle, RootBoneRotationDirection, IdleRotation, HorizontalAimOffsetIdle, HorizontalAimOffsetDirection, LocomotionFPDC); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBenchmarkCustomCSVEventJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkCustomCSVEventJob(nint addr) : base(addr) { }
        public DimensionBenchmarkCustomCSVEventJob() : base(0) { }
        public string TextToLog { get { return this["TextToLog"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionBenchmarkDelegateJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkDelegateJob(nint addr) : base(addr) { }
        public DimensionBenchmarkDelegateJob() : base(0) { }
        public UEObject ClassToFind { get { return this["ClassToFind"]; } set { this["ClassToFind"] = value; } }
        public string FunctionName { get { return this["FunctionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionBenchmarkSequenceJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkSequenceJob(nint addr) : base(addr) { }
        public DimensionBenchmarkSequenceJob() : base(0) { }
        public UEObject SequenceToPlay { get { return this[nameof(SequenceToPlay)]; } set { this["SequenceToPlay"] = value; } }
        public LevelSequenceActor SequencePlayer { get { return this[nameof(SequencePlayer)].As<LevelSequenceActor>(); } set { this["SequencePlayer"] = value; } }
        public void OnSequenceFinished() { Invoke("OnSequenceFinished"); }
        public void _DimensionBenchmarkSequenceJob(UEObject SequenceToPlay, UEObject SequencePlayer) { Invoke("DimensionBenchmarkSequenceJob", SequenceToPlay, SequencePlayer); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBenchmarkCinematicJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkCinematicJob(nint addr) : base(addr) { }
        public DimensionBenchmarkCinematicJob() : base(0) { }
        public UEObject CinematicToPlay { get { return this[nameof(CinematicToPlay)]; } set { this["CinematicToPlay"] = value; } }
        public void OnCinematicFinished() { Invoke("OnCinematicFinished"); }
        public void _DimensionBenchmarkCinematicJob(UEObject CinematicToPlay) { Invoke("DimensionBenchmarkCinematicJob", CinematicToPlay); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBenchmarkDelayJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkDelayJob(nint addr) : base(addr) { }
        public DimensionBenchmarkDelayJob() : base(0) { }
        public float DelayTime { get { return this["DelayTime"].GetValue<float>(); } set { this["DelayTime"].SetValue<float>(value); } }
    }
    public class DimensionBenchmarkCommandJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkCommandJob(nint addr) : base(addr) { }
        public DimensionBenchmarkCommandJob() : base(0) { }
        public List<string> CommandsToExecute { get { return this["CommandsToExecute"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class DimensionBenchmarkLightScenarioJob : DimensionBenchmarkJob
    {
        public DimensionBenchmarkLightScenarioJob(nint addr) : base(addr) { }
        public DimensionBenchmarkLightScenarioJob() : base(0) { }
        public int LightingScenarioIDToSet { get { return this["LightingScenarioIDToSet"].GetValue<int>(); } set { this["LightingScenarioIDToSet"].SetValue<int>(value); } }
        public ELightScenarioMood LightingScenarioMoodToSet { get { return (ELightScenarioMood)this["LightingScenarioMoodToSet"].GetValue<int>(); } set { this["LightingScenarioMoodToSet"].SetValue<int>((int)value); } }
    }
    public class DimensionBenchmarkJob : UEObject
    {
        public DimensionBenchmarkJob(nint addr) : base(addr) { }
        public DimensionBenchmarkJob() : base(0) { }
        public UEObject OnBenchmarkJobFinished { get { return this["OnBenchmarkJobFinished"]; } set { this["OnBenchmarkJobFinished"] = value; } }
        public void StartJob() { Invoke("StartJob"); }
        public void _DimensionBenchmarkJob(UEObject OnBenchmarkJobFinished) { Invoke("DimensionBenchmarkJob", OnBenchmarkJobFinished); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBeadAbility : DimensionGameplayAbility
    {
        public DimensionBeadAbility(nint addr) : base(addr) { }
        public DimensionBeadAbility() : base(0) { }
    }
    public class DimensionGameplayAbility : GameplayAbility
    {
        public DimensionGameplayAbility(nint addr) : base(addr) { }
        public DimensionGameplayAbility() : base(0) { }
        public bool bIsTickable { get { return this["bIsTickable"].Flag; } set { this["bIsTickable"].Flag = value; } }
        public UEObject OnDormancyUpdateDelegate { get { return this["OnDormancyUpdateDelegate"]; } set { this["OnDormancyUpdateDelegate"] = value; } }
        public bool bRemoveOnEnd { get { return this["bRemoveOnEnd"].Flag; } set { this["bRemoveOnEnd"].Flag = value; } }
        public float ActivationDelay { get { return this["ActivationDelay"].GetValue<float>(); } set { this["ActivationDelay"].SetValue<float>(value); } }
        public float RemoveDelay { get { return this["RemoveDelay"].GetValue<float>(); } set { this["RemoveDelay"].SetValue<float>(value); } }
        public bool bAllowRemoteGranting { get { return this["bAllowRemoteGranting"].Flag; } set { this["bAllowRemoteGranting"].Flag = value; } }
        public bool bTriggerOnInstigatedDamageIfInactive { get { return this["bTriggerOnInstigatedDamageIfInactive"].Flag; } set { this["bTriggerOnInstigatedDamageIfInactive"].Flag = value; } }
        public bool bTriggerOnNonDamageHitIfInactive { get { return this["bTriggerOnNonDamageHitIfInactive"].Flag; } set { this["bTriggerOnNonDamageHitIfInactive"].Flag = value; } }
        public bool bTriggerOnDamageTakenIfInactive { get { return this["bTriggerOnDamageTakenIfInactive"].Flag; } set { this["bTriggerOnDamageTakenIfInactive"].Flag = value; } }
        public bool bLocked { get { return this["bLocked"].Flag; } set { this["bLocked"].Flag = value; } }
        public bool bDormant { get { return this["bDormant"].Flag; } set { this["bDormant"].Flag = value; } }
        public GameplayAbilityActorInfo ActorInfoOnRemove { get { return this[nameof(ActorInfoOnRemove)].As<GameplayAbilityActorInfo>(); } set { this["ActorInfoOnRemove"] = value; } }
        public GameplayAbilityActorInfo CustomActorInfo { get { return this[nameof(CustomActorInfo)].As<GameplayAbilityActorInfo>(); } set { this["CustomActorInfo"] = value; } }
        public bool bNotifyAbilityKey { get { return this["bNotifyAbilityKey"].Flag; } set { this["bNotifyAbilityKey"].Flag = value; } }
        public bool bOverrideStaminaCost { get { return this["bOverrideStaminaCost"].Flag; } set { this["bOverrideStaminaCost"].Flag = value; } }
        public float StaminaCost { get { return this["StaminaCost"].GetValue<float>(); } set { this["StaminaCost"].SetValue<float>(value); } }
        public EStaminaRequirementPolicy StaminaRequirementPolicy { get { return (EStaminaRequirementPolicy)this["StaminaRequirementPolicy"].GetValue<int>(); } set { this["StaminaRequirementPolicy"].SetValue<int>((int)value); } }
        public EStaminaUsagePolicy StaminaUsagePolicy { get { return (EStaminaUsagePolicy)this["StaminaUsagePolicy"].GetValue<int>(); } set { this["StaminaUsagePolicy"].SetValue<int>((int)value); } }
        public EStaminaEffectivenessScalingPolicy StaminaEffectivenessScalingPolicy { get { return (EStaminaEffectivenessScalingPolicy)this["StaminaEffectivenessScalingPolicy"].GetValue<int>(); } set { this["StaminaEffectivenessScalingPolicy"].SetValue<int>((int)value); } }
        public float StaminaExhaustionModifier { get { return this["StaminaExhaustionModifier"].GetValue<float>(); } set { this["StaminaExhaustionModifier"].SetValue<float>(value); } }
        public float StaminaEffectivenessThreshold { get { return this["StaminaEffectivenessThreshold"].GetValue<float>(); } set { this["StaminaEffectivenessThreshold"].SetValue<float>(value); } }
        public float MinEffectiveness { get { return this["MinEffectiveness"].GetValue<float>(); } set { this["MinEffectiveness"].SetValue<float>(value); } }
        public float EffectivenessCoefficient { get { return this["EffectivenessCoefficient"].GetValue<float>(); } set { this["EffectivenessCoefficient"].SetValue<float>(value); } }
        public bool bAllowEffectivenessInterpolation { get { return this["bAllowEffectivenessInterpolation"].Flag; } set { this["bAllowEffectivenessInterpolation"].Flag = value; } }
        public float EffectivenessLossPerStamina { get { return this["EffectivenessLossPerStamina"].GetValue<float>(); } set { this["EffectivenessLossPerStamina"].SetValue<float>(value); } }
        public bool bAllowEffectivenessOverflow { get { return this["bAllowEffectivenessOverflow"].Flag; } set { this["bAllowEffectivenessOverflow"].Flag = value; } }
        public float MaxEffectiveness { get { return this["MaxEffectiveness"].GetValue<float>(); } set { this["MaxEffectiveness"].SetValue<float>(value); } }
        public float EffectivenessGainPerStamina { get { return this["EffectivenessGainPerStamina"].GetValue<float>(); } set { this["EffectivenessGainPerStamina"].SetValue<float>(value); } }
        public bool bEnableWitcheryRechargeSpeedModifier { get { return this["bEnableWitcheryRechargeSpeedModifier"].Flag; } set { this["bEnableWitcheryRechargeSpeedModifier"].Flag = value; } }
        public GameplayAttribute CooldownAttribute { get { return this[nameof(CooldownAttribute)].As<GameplayAttribute>(); } set { this["CooldownAttribute"] = value; } }
        public bool bEnableActivationOnCooldown { get { return this["bEnableActivationOnCooldown"].Flag; } set { this["bEnableActivationOnCooldown"].Flag = value; } }
        public bool bEnableActivationWithNoCharges { get { return this["bEnableActivationWithNoCharges"].Flag; } set { this["bEnableActivationWithNoCharges"].Flag = value; } }
        public UEObject OnCooldownUpdatedDelegate { get { return this["OnCooldownUpdatedDelegate"]; } set { this["OnCooldownUpdatedDelegate"] = value; } }
        public bool bEnableDamageRestoredCooldown { get { return this["bEnableDamageRestoredCooldown"].Flag; } set { this["bEnableDamageRestoredCooldown"].Flag = value; } }
        public bool bUseCharges { get { return this["bUseCharges"].Flag; } set { this["bUseCharges"].Flag = value; } }
        public int MaxCharges { get { return this["MaxCharges"].GetValue<int>(); } set { this["MaxCharges"].SetValue<int>(value); } }
        public int CurrentCharges { get { return this["CurrentCharges"].GetValue<int>(); } set { this["CurrentCharges"].SetValue<int>(value); } }
        public UEObject OnChargeChangeDelegate { get { return this["OnChargeChangeDelegate"]; } set { this["OnChargeChangeDelegate"] = value; } }
        public GameplayTagContainer ActivationOwnerTags { get { return this[nameof(ActivationOwnerTags)].As<GameplayTagContainer>(); } set { this["ActivationOwnerTags"] = value; } }
        public GameplayTagContainer ActivationInheritedTags { get { return this[nameof(ActivationInheritedTags)].As<GameplayTagContainer>(); } set { this["ActivationInheritedTags"] = value; } }
        public MaterialInterface Icon { get { return this[nameof(Icon)].As<MaterialInterface>(); } set { this["Icon"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public int Stacks { get { return this["Stacks"].GetValue<int>(); } set { this["Stacks"].SetValue<int>(value); } }
        public ActionModifiers Modifiers { get { return this[nameof(Modifiers)].As<ActionModifiers>(); } set { this["Modifiers"] = value; } }
        public List<string> ActivationAnimNotifies { get { return this["ActivationAnimNotifies"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ImplementationAnimNotifies { get { return this["ImplementationAnimNotifies"].GetStringList(); } set { /* Arrays are read-only */ } }
        public GameplayTagContainer EligibleEventTags { get { return this[nameof(EligibleEventTags)].As<GameplayTagContainer>(); } set { this["EligibleEventTags"] = value; } }
        public GameplayTag RarityTag { get { return this[nameof(RarityTag)].As<GameplayTag>(); } set { this["RarityTag"] = value; } }
        public void TryCallMulticastActivate(UEObject bOnlyIfActive) { Invoke("TryCallMulticastActivate", bOnlyIfActive); }
        public void _DimensionGameplayAbility(UEObject bIsTickable, UEObject OnDormancyUpdateDelegate, UEObject bRemoveOnEnd, UEObject ActivationDelay, UEObject RemoveDelay, UEObject bAllowRemoteGranting, UEObject bTriggerOnInstigatedDamageIfInactive, UEObject bTriggerOnNonDamageHitIfInactive, UEObject bTriggerOnDamageTakenIfInactive, UEObject bLocked, UEObject bDormant, UEObject ActorInfoOnRemove, UEObject CustomActorInfo, UEObject bNotifyAbilityKey, UEObject bOverrideStaminaCost, UEObject StaminaCost, UEObject StaminaRequirementPolicy, UEObject StaminaUsagePolicy, UEObject StaminaEffectivenessScalingPolicy, UEObject StaminaExhaustionModifier, UEObject StaminaEffectivenessThreshold, UEObject MinEffectiveness, UEObject EffectivenessCoefficient, UEObject bAllowEffectivenessInterpolation, UEObject EffectivenessLossPerStamina, UEObject bAllowEffectivenessOverflow, UEObject MaxEffectiveness, UEObject EffectivenessGainPerStamina, UEObject bEnableWitcheryRechargeSpeedModifier, UEObject CooldownAttribute, UEObject bEnableActivationOnCooldown, UEObject bEnableActivationWithNoCharges, UEObject OnCooldownUpdatedDelegate, UEObject bEnableDamageRestoredCooldown, UEObject bUseCharges, UEObject MaxCharges, UEObject CurrentCharges, UEObject OnChargeChangeDelegate, UEObject ActivationOwnerTags, UEObject ActivationInheritedTags, UEObject Icon, UEObject DisplayName, UEObject Description, UEObject Stacks, UEObject Modifiers, UEObject ActivationAnimNotifies, UEObject ImplementationAnimNotifies, UEObject EligibleEventTags, UEObject RarityTag) { Invoke("DimensionGameplayAbility", bIsTickable, OnDormancyUpdateDelegate, bRemoveOnEnd, ActivationDelay, RemoveDelay, bAllowRemoteGranting, bTriggerOnInstigatedDamageIfInactive, bTriggerOnNonDamageHitIfInactive, bTriggerOnDamageTakenIfInactive, bLocked, bDormant, ActorInfoOnRemove, CustomActorInfo, bNotifyAbilityKey, bOverrideStaminaCost, StaminaCost, StaminaRequirementPolicy, StaminaUsagePolicy, StaminaEffectivenessScalingPolicy, StaminaExhaustionModifier, StaminaEffectivenessThreshold, MinEffectiveness, EffectivenessCoefficient, bAllowEffectivenessInterpolation, EffectivenessLossPerStamina, bAllowEffectivenessOverflow, MaxEffectiveness, EffectivenessGainPerStamina, bEnableWitcheryRechargeSpeedModifier, CooldownAttribute, bEnableActivationOnCooldown, bEnableActivationWithNoCharges, OnCooldownUpdatedDelegate, bEnableDamageRestoredCooldown, bUseCharges, MaxCharges, CurrentCharges, OnChargeChangeDelegate, ActivationOwnerTags, ActivationInheritedTags, Icon, DisplayName, Description, Stacks, Modifiers, ActivationAnimNotifies, ImplementationAnimNotifies, EligibleEventTags, RarityTag); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionBaseLightingScenariosConfig : DataAsset
    {
        public DimensionBaseLightingScenariosConfig(nint addr) : base(addr) { }
        public DimensionBaseLightingScenariosConfig() : base(0) { }
        public int DefaultScenarioIndex { get { return this["DefaultScenarioIndex"].GetValue<int>(); } set { this["DefaultScenarioIndex"].SetValue<int>(value); } }
        public ELightScenarioMood DefaultMood { get { return (ELightScenarioMood)this["DefaultMood"].GetValue<int>(); } set { this["DefaultMood"].SetValue<int>((int)value); } }
        public Array<LightScenario> Scenarios { get { return new Array<LightScenario>(this["Scenarios"]); } set { this["Scenarios"] = value; } }
        public DimensionRequirementsData LightingScenarioSwitchingRequirements { get { return this[nameof(LightingScenarioSwitchingRequirements)].As<DimensionRequirementsData>(); } set { this["LightingScenarioSwitchingRequirements"] = value; } }
    }
    public class DimensionBarrier : Actor
    {
        public DimensionBarrier(nint addr) : base(addr) { }
        public DimensionBarrier() : base(0) { }
        public UEObject GetSpline() { return InvokeUEObject("GetSpline"); }
        public void _DimensionBarrier() { Invoke("DimensionBarrier"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAutoRifleLightInterface : Interface
    {
        public DimensionAutoRifleLightInterface(nint addr) : base(addr) { }
        public DimensionAutoRifleLightInterface() : base(0) { }
        public UEObject IsOverheatSectionEnabled() { return InvokeUEObject("IsOverheatSectionEnabled"); }
        public void _DimensionAutoRifleLightInterface() { Invoke("DimensionAutoRifleLightInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAutoRifleHeavyInterface : Interface
    {
        public DimensionAutoRifleHeavyInterface(nint addr) : base(addr) { }
        public DimensionAutoRifleHeavyInterface() : base(0) { }
        public void SetFireProfile(UEObject NewFireProfile) { Invoke("SetFireProfile", NewFireProfile); }
        public void _DimensionAutoRifleHeavyInterface() { Invoke("DimensionAutoRifleHeavyInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAutoRifleBoneInterface : Interface
    {
        public DimensionAutoRifleBoneInterface(nint addr) : base(addr) { }
        public DimensionAutoRifleBoneInterface() : base(0) { }
        public void TriggerSwarm() { Invoke("TriggerSwarm"); }
        public void _DimensionAutoRifleBoneInterface() { Invoke("DimensionAutoRifleBoneInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAuraComponent : SphereComponent
    {
        public DimensionAuraComponent(nint addr) : base(addr) { }
        public DimensionAuraComponent() : base(0) { }
        public DataTableRowHandle AttackSetHandle { get { return this[nameof(AttackSetHandle)].As<DataTableRowHandle>(); } set { this["AttackSetHandle"] = value; } }
        public UEObject ParticleToEmitOnAuraActivation { get { return this[nameof(ParticleToEmitOnAuraActivation)]; } set { this["ParticleToEmitOnAuraActivation"] = value; } }
        public bool OverrideAttackSpecRadius { get { return this["OverrideAttackSpecRadius"].Flag; } set { this["OverrideAttackSpecRadius"].Flag = value; } }
        public float TimeBetweenAttacks { get { return this["TimeBetweenAttacks"].GetValue<float>(); } set { this["TimeBetweenAttacks"].SetValue<float>(value); } }
        public bool ActivateOnBeginPlay { get { return this["ActivateOnBeginPlay"].Flag; } set { this["ActivateOnBeginPlay"].Flag = value; } }
        public ParticleSystemComponent ActiveParticleEffect { get { return this[nameof(ActiveParticleEffect)].As<ParticleSystemComponent>(); } set { this["ActiveParticleEffect"] = value; } }
        public void OnTimerEnd() { Invoke("OnTimerEnd"); }
        public void _DimensionAuraComponent(UEObject AttackSetHandle, UEObject ParticleToEmitOnAuraActivation, UEObject OverrideAttackSpecRadius, UEObject TimeBetweenAttacks, UEObject ActivateOnBeginPlay, UEObject ActiveParticleEffect) { Invoke("DimensionAuraComponent", AttackSetHandle, ParticleToEmitOnAuraActivation, OverrideAttackSpecRadius, TimeBetweenAttacks, ActivateOnBeginPlay, ActiveParticleEffect); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAttributeSetAggregator : DimensionObject
    {
        public DimensionAttributeSetAggregator(nint addr) : base(addr) { }
        public DimensionAttributeSetAggregator() : base(0) { }
        public Array<DimensionAttribSet> AttributeSets { get { return new Array<DimensionAttribSet>(this["AttributeSets"]); } set { this["AttributeSets"] = value; } }
        public UEObject GetWeaponBonusAttributes(UEObject WeaponBonusAttributes) { return InvokeUEObject("GetWeaponBonusAttributes", WeaponBonusAttributes); }
        public void _DimensionAttributeSetAggregator(UEObject AttributeSets) { Invoke("DimensionAttributeSetAggregator", AttributeSets); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAttributeBarWidget : DimensionAttributeWidgetBase
    {
        public DimensionAttributeBarWidget(nint addr) : base(addr) { }
        public DimensionAttributeBarWidget() : base(0) { }
        public byte ProgressBarType { get { return this["ProgressBarType"].GetValue<byte>(); } set { this["ProgressBarType"].SetValue<byte>(value); } }
        public Vector2D CustomScale { get { return this[nameof(CustomScale)].As<Vector2D>(); } set { this["CustomScale"] = value; } }
        public bool bShowReserveValue { get { return this["bShowReserveValue"].Flag; } set { this["bShowReserveValue"].Flag = value; } }
        public bool bHideOnMinValue { get { return this["bHideOnMinValue"].Flag; } set { this["bHideOnMinValue"].Flag = value; } }
        public SlateColor ValueTint { get { return this[nameof(ValueTint)].As<SlateColor>(); } set { this["ValueTint"] = value; } }
        public SlateColor ReserveValueTint { get { return this[nameof(ReserveValueTint)].As<SlateColor>(); } set { this["ReserveValueTint"] = value; } }
        public Image CachedBarBorderImage { get { return this[nameof(CachedBarBorderImage)].As<Image>(); } set { this["CachedBarBorderImage"] = value; } }
        public Image CachedVerticalIndicatorImage { get { return this[nameof(CachedVerticalIndicatorImage)].As<Image>(); } set { this["CachedVerticalIndicatorImage"] = value; } }
        public Image CachedBarBackgroundImage { get { return this[nameof(CachedBarBackgroundImage)].As<Image>(); } set { this["CachedBarBackgroundImage"] = value; } }
        public ProgressBar CachedValueProgressBar { get { return this[nameof(CachedValueProgressBar)].As<ProgressBar>(); } set { this["CachedValueProgressBar"] = value; } }
        public ProgressBar CachedReserveValueProgressBar { get { return this[nameof(CachedReserveValueProgressBar)].As<ProgressBar>(); } set { this["CachedReserveValueProgressBar"] = value; } }
        public Border CachedBarBorder { get { return this[nameof(CachedBarBorder)].As<Border>(); } set { this["CachedBarBorder"] = value; } }
        public Border CachedBackgroundBorder { get { return this[nameof(CachedBackgroundBorder)].As<Border>(); } set { this["CachedBackgroundBorder"] = value; } }
        public void ScaleAttributeBar(UEObject InScale) { Invoke("ScaleAttributeBar", InScale); }
        public void _DimensionAttributeBarWidget(UEObject ProgressBarType, UEObject CustomScale, UEObject bShowReserveValue, UEObject bHideOnMinValue, UEObject ValueTint, UEObject ReserveValueTint, UEObject CachedBarBorderImage, UEObject CachedVerticalIndicatorImage, UEObject CachedBarBackgroundImage, UEObject CachedValueProgressBar, UEObject CachedReserveValueProgressBar, UEObject CachedBarBorder, UEObject CachedBackgroundBorder) { Invoke("DimensionAttributeBarWidget", ProgressBarType, CustomScale, bShowReserveValue, bHideOnMinValue, ValueTint, ReserveValueTint, CachedBarBorderImage, CachedVerticalIndicatorImage, CachedBarBackgroundImage, CachedValueProgressBar, CachedReserveValueProgressBar, CachedBarBorder, CachedBackgroundBorder); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAssetLoader : DimensionObject
    {
        public DimensionAssetLoader(nint addr) : base(addr) { }
        public DimensionAssetLoader() : base(0) { }
        public Array<SoftObjectPath> LoadedObjectPaths { get { return new Array<SoftObjectPath>(this["LoadedObjectPaths"]); } set { this["LoadedObjectPaths"] = value; } }
        public World CachedWorld { get { return this[nameof(CachedWorld)].As<World>(); } set { this["CachedWorld"] = value; } }
        public void UnloadAssets(UEObject ObjectsPaths) { Invoke("UnloadAssets", ObjectsPaths); }
        public void _DimensionAssetLoader(UEObject LoadedObjectPaths, UEObject CachedWorld) { Invoke("DimensionAssetLoader", LoadedObjectPaths, CachedWorld); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAssetInterface : Interface
    {
        public DimensionAssetInterface(nint addr) : base(addr) { }
        public DimensionAssetInterface() : base(0) { }
        public void TryLoadingSoftPathsAsync() { Invoke("TryLoadingSoftPathsAsync"); }
        public void _DimensionAssetInterface() { Invoke("DimensionAssetInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionArrayLibrary : UEObject
    {
        public DimensionArrayLibrary(nint addr) : base(addr) { }
        public DimensionArrayLibrary() : base(0) { }
        public UEObject GenerateIndexes(UEObject N) { return InvokeUEObject("GenerateIndexes", N); }
        public void _DimensionArrayLibrary() { Invoke("DimensionArrayLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionArenaVolume : DimensionGameplayAreaVolume
    {
        public DimensionArenaVolume(nint addr) : base(addr) { }
        public DimensionArenaVolume() : base(0) { }
        public EDimensionArenaState AreaState { get { return (EDimensionArenaState)this["AreaState"].GetValue<int>(); } set { this["AreaState"].SetValue<int>((int)value); } }
        public Array<DimensionArenaVolume> NeighborVolumes { get { return new Array<DimensionArenaVolume>(this["NeighborVolumes"]); } set { this["NeighborVolumes"] = value; } }
        public Array<ArenaBarrier> ArenaBarriers { get { return new Array<ArenaBarrier>(this["ArenaBarriers"]); } set { this["ArenaBarriers"] = value; } }
        public UEObject OnArenaStateChanged { get { return this["OnArenaStateChanged"]; } set { this["OnArenaStateChanged"] = value; } }
        public UEObject OnPlayerEnteredDelegate { get { return this["OnPlayerEnteredDelegate"]; } set { this["OnPlayerEnteredDelegate"] = value; } }
        public UEObject OnPlayerLeftDelegate { get { return this["OnPlayerLeftDelegate"]; } set { this["OnPlayerLeftDelegate"] = value; } }
        public void OnVolumeEndOverlap(UEObject OverlappedActor, UEObject OtherActor) { Invoke("OnVolumeEndOverlap", OverlappedActor, OtherActor); }
        public void _DimensionArenaVolume(UEObject AreaState, UEObject NeighborVolumes, UEObject ArenaBarriers, UEObject OnArenaStateChanged, UEObject OnPlayerEnteredDelegate, UEObject OnPlayerLeftDelegate) { Invoke("DimensionArenaVolume", AreaState, NeighborVolumes, ArenaBarriers, OnArenaStateChanged, OnPlayerEnteredDelegate, OnPlayerLeftDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionGameplayAreaVolume : DimensionVolume
    {
        public DimensionGameplayAreaVolume(nint addr) : base(addr) { }
        public DimensionGameplayAreaVolume() : base(0) { }
        public bool bDrawDebugAnchors { get { return this["bDrawDebugAnchors"].Flag; } set { this["bDrawDebugAnchors"].Flag = value; } }
        public DimensionGameplayPropComponent GameplayPropComponent { get { return this[nameof(GameplayPropComponent)].As<DimensionGameplayPropComponent>(); } set { this["GameplayPropComponent"] = value; } }
        public DimensionGameplayAreaDebugDrawComponent GameplayAreaDebugDrawComponent { get { return this[nameof(GameplayAreaDebugDrawComponent)].As<DimensionGameplayAreaDebugDrawComponent>(); } set { this["GameplayAreaDebugDrawComponent"] = value; } }
        public AnchorSpatialCache AnchorSpatialCache { get { return this[nameof(AnchorSpatialCache)].As<AnchorSpatialCache>(); } set { this["AnchorSpatialCache"] = value; } }
        public Array<DimensionAnchorRef> ContainedAnchorRefs { get { return new Array<DimensionAnchorRef>(this["ContainedAnchorRefs"]); } set { this["ContainedAnchorRefs"] = value; } }
        public bool bContainedAnchorsCached { get { return this["bContainedAnchorsCached"].Flag; } set { this["bContainedAnchorsCached"].Flag = value; } }
        public void SetCachedNodesEnabled(UEObject bNewEnabled) { Invoke("SetCachedNodesEnabled", bNewEnabled); }
        public void _DimensionGameplayAreaVolume(UEObject bDrawDebugAnchors, UEObject GameplayPropComponent, UEObject GameplayAreaDebugDrawComponent, UEObject AnchorSpatialCache, UEObject ContainedAnchorRefs, UEObject bContainedAnchorsCached) { Invoke("DimensionGameplayAreaVolume", bDrawDebugAnchors, GameplayPropComponent, GameplayAreaDebugDrawComponent, AnchorSpatialCache, ContainedAnchorRefs, bContainedAnchorsCached); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionArenaCache_DataAsset : DataAsset
    {
        public DimensionArenaCache_DataAsset(nint addr) : base(addr) { }
        public DimensionArenaCache_DataAsset() : base(0) { }
        public UEObject PreviewClass { get { return this["PreviewClass"]; } set { this["PreviewClass"] = value; } }
        public Array<SDK.Script.CoreUObject.Transform> Transforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Transforms"]); } set { this["Transforms"] = value; } }
    }
    public class DimensionArena : Actor
    {
        public DimensionArena(nint addr) : base(addr) { }
        public DimensionArena() : base(0) { }
        public DataTableRowHandle ArenaDataHandle { get { return this[nameof(ArenaDataHandle)].As<DataTableRowHandle>(); } set { this["ArenaDataHandle"] = value; } }
        public DimensionArenaData ArenaData { get { return this[nameof(ArenaData)].As<DimensionArenaData>(); } set { this["ArenaData"] = value; } }
        public Array<Mission> Missions { get { return new Array<Mission>(this["Missions"]); } set { this["Missions"] = value; } }
        public void SetMissionInstances(UEObject MissionInstances) { Invoke("SetMissionInstances", MissionInstances); }
        public void _DimensionArena(UEObject ArenaDataHandle, UEObject ArenaData, UEObject Missions) { Invoke("DimensionArena", ArenaDataHandle, ArenaData, Missions); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionApplyStatusDamageEffect : DimensionGameplayEffect
    {
        public DimensionApplyStatusDamageEffect(nint addr) : base(addr) { }
        public DimensionApplyStatusDamageEffect() : base(0) { }
    }
    public class DimensionApplyDamageEffect : DimensionGameplayEffect
    {
        public DimensionApplyDamageEffect(nint addr) : base(addr) { }
        public DimensionApplyDamageEffect() : base(0) { }
    }
    public class DimensionGameplayEffect : GameplayEffect
    {
        public DimensionGameplayEffect(nint addr) : base(addr) { }
        public DimensionGameplayEffect() : base(0) { }
        public UEObject ToString() { return InvokeUEObject("ToString"); }
        public void _DimensionGameplayEffect() { Invoke("DimensionGameplayEffect"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAnimVisibilityInterface : Interface
    {
        public DimensionAnimVisibilityInterface(nint addr) : base(addr) { }
        public DimensionAnimVisibilityInterface() : base(0) { }
        public void AnimToggleVisibility(UEObject NotifyName) { Invoke("AnimToggleVisibility", NotifyName); }
        public void _DimensionAnimVisibilityInterface() { Invoke("DimensionAnimVisibilityInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAnimNotifyVisibility : DimensionAnimNotify
    {
        public DimensionAnimNotifyVisibility(nint addr) : base(addr) { }
        public DimensionAnimNotifyVisibility() : base(0) { }
        public bool bToggleVisibility { get { return this["bToggleVisibility"].Flag; } set { this["bToggleVisibility"].Flag = value; } }
        public bool bSetVisible { get { return this["bSetVisible"].Flag; } set { this["bSetVisible"].Flag = value; } }
    }
    public class DimensionAnimNotifySFX : DimensionAnimNotify
    {
        public DimensionAnimNotifySFX(nint addr) : base(addr) { }
        public DimensionAnimNotifySFX() : base(0) { }
        public string SoundName { get { return this["SoundName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bStopOnMontageEnd { get { return this["bStopOnMontageEnd"].Flag; } set { this["bStopOnMontageEnd"].Flag = value; } }
    }
    public class DimensionAnimNotifyBoneVisibility : DimensionAnimNotify
    {
        public DimensionAnimNotifyBoneVisibility(nint addr) : base(addr) { }
        public DimensionAnimNotifyBoneVisibility() : base(0) { }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bSetVisible { get { return this["bSetVisible"].Flag; } set { this["bSetVisible"].Flag = value; } }
    }
    public class AnimNotifyAbility : DimensionAnimNotify
    {
        public AnimNotifyAbility(nint addr) : base(addr) { }
        public AnimNotifyAbility() : base(0) { }
        public bool bNotifyPerkComponent { get { return this["bNotifyPerkComponent"].Flag; } set { this["bNotifyPerkComponent"].Flag = value; } }
    }
    public class DimensionAnimNotify : AnimNotify
    {
        public DimensionAnimNotify(nint addr) : base(addr) { }
        public DimensionAnimNotify() : base(0) { }
        public string NotifyName { get { return this["NotifyName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionAnimInstance : AnimInstance
    {
        public DimensionAnimInstance(nint addr) : base(addr) { }
        public DimensionAnimInstance() : base(0) { }
        public DimensionAICharacter DAICharacter { get { return this[nameof(DAICharacter)].As<DimensionAICharacter>(); } set { this["DAICharacter"] = value; } }
        public float UnscaledSpeed2D { get { return this["UnscaledSpeed2D"].GetValue<float>(); } set { this["UnscaledSpeed2D"].SetValue<float>(value); } }
        public float InputVectorSize { get { return this["InputVectorSize"].GetValue<float>(); } set { this["InputVectorSize"].SetValue<float>(value); } }
        public float InputVelocityAngleCosine { get { return this["InputVelocityAngleCosine"].GetValue<float>(); } set { this["InputVelocityAngleCosine"].SetValue<float>(value); } }
        public bool bIsStopping { get { return this["bIsStopping"].Flag; } set { this["bIsStopping"].Flag = value; } }
        public AnimSequence IdleAnimation { get { return this[nameof(IdleAnimation)].As<AnimSequence>(); } set { this["IdleAnimation"] = value; } }
        public float IdleAdditivePlayRateMin { get { return this["IdleAdditivePlayRateMin"].GetValue<float>(); } set { this["IdleAdditivePlayRateMin"].SetValue<float>(value); } }
        public float IdleAdditivePlayRateMax { get { return this["IdleAdditivePlayRateMax"].GetValue<float>(); } set { this["IdleAdditivePlayRateMax"].SetValue<float>(value); } }
        public float IdleAdditiveStartPositionMin { get { return this["IdleAdditiveStartPositionMin"].GetValue<float>(); } set { this["IdleAdditiveStartPositionMin"].SetValue<float>(value); } }
        public float IdleAdditiveStartPositionMax { get { return this["IdleAdditiveStartPositionMax"].GetValue<float>(); } set { this["IdleAdditiveStartPositionMax"].SetValue<float>(value); } }
        public float IdleAdditivePlayRate { get { return this["IdleAdditivePlayRate"].GetValue<float>(); } set { this["IdleAdditivePlayRate"].SetValue<float>(value); } }
        public float IdleAdditiveStartPosition { get { return this["IdleAdditiveStartPosition"].GetValue<float>(); } set { this["IdleAdditiveStartPosition"].SetValue<float>(value); } }
        public float RootBoneRotationMontage { get { return this["RootBoneRotationMontage"].GetValue<float>(); } set { this["RootBoneRotationMontage"].SetValue<float>(value); } }
        public AimOffsetBlendSpace AimOffset { get { return this[nameof(AimOffset)].As<AimOffsetBlendSpace>(); } set { this["AimOffset"] = value; } }
        public float AimOffsetUpdatersLinearSpeedFactor { get { return this["AimOffsetUpdatersLinearSpeedFactor"].GetValue<float>(); } set { this["AimOffsetUpdatersLinearSpeedFactor"].SetValue<float>(value); } }
        public float AimOffsetUpdatersNonLinearSpeedFactor { get { return this["AimOffsetUpdatersNonLinearSpeedFactor"].GetValue<float>(); } set { this["AimOffsetUpdatersNonLinearSpeedFactor"].SetValue<float>(value); } }
        public bool bUseAimOffsetUpdaterForMontage { get { return this["bUseAimOffsetUpdaterForMontage"].Flag; } set { this["bUseAimOffsetUpdaterForMontage"].Flag = value; } }
        public float HorizontalAimOffsetMontage { get { return this["HorizontalAimOffsetMontage"].GetValue<float>(); } set { this["HorizontalAimOffsetMontage"].SetValue<float>(value); } }
        public float VerticalAimOffsetMontage { get { return this["VerticalAimOffsetMontage"].GetValue<float>(); } set { this["VerticalAimOffsetMontage"].SetValue<float>(value); } }
        public AnimMontage BipedRootMotionMontageInstance { get { return this[nameof(BipedRootMotionMontageInstance)].As<AnimMontage>(); } set { this["BipedRootMotionMontageInstance"] = value; } }
        public UEObject OnNotifyTriggeredDelegate { get { return this["OnNotifyTriggeredDelegate"]; } set { this["OnNotifyTriggeredDelegate"] = value; } }
        public DimensionAnimInstance CachedSelf { get { return this[nameof(CachedSelf)].As<DimensionAnimInstance>(); } set { this["CachedSelf"] = value; } }
        public bool bReasonablySignificant { get { return this["bReasonablySignificant"].Flag; } set { this["bReasonablySignificant"].Flag = value; } }
        public bool bEnableIK { get { return this["bEnableIK"].Flag; } set { this["bEnableIK"].Flag = value; } }
        public bool bIsDeadAndStill { get { return this["bIsDeadAndStill"].Flag; } set { this["bIsDeadAndStill"].Flag = value; } }
        public void OnBipedMontageStarted(UEObject Montage) { Invoke("OnBipedMontageStarted", Montage); }
        public void _DimensionAnimInstance(UEObject DAICharacter, UEObject UnscaledSpeed2D, UEObject InputVectorSize, UEObject InputVelocityAngleCosine, UEObject bIsStopping, UEObject IdleAnimation, UEObject IdleAdditivePlayRateMin, UEObject IdleAdditivePlayRateMax, UEObject IdleAdditiveStartPositionMin, UEObject IdleAdditiveStartPositionMax, UEObject IdleAdditivePlayRate, UEObject IdleAdditiveStartPosition, UEObject RootBoneRotationMontage, UEObject AimOffset, UEObject AimOffsetUpdatersLinearSpeedFactor, UEObject AimOffsetUpdatersNonLinearSpeedFactor, UEObject bUseAimOffsetUpdaterForMontage, UEObject HorizontalAimOffsetMontage, UEObject VerticalAimOffsetMontage, UEObject BipedRootMotionMontageInstance, UEObject OnNotifyTriggeredDelegate, UEObject CachedSelf, UEObject bReasonablySignificant, UEObject bEnableIK, UEObject bIsDeadAndStill) { Invoke("DimensionAnimInstance", DAICharacter, UnscaledSpeed2D, InputVectorSize, InputVelocityAngleCosine, bIsStopping, IdleAnimation, IdleAdditivePlayRateMin, IdleAdditivePlayRateMax, IdleAdditiveStartPositionMin, IdleAdditiveStartPositionMax, IdleAdditivePlayRate, IdleAdditiveStartPosition, RootBoneRotationMontage, AimOffset, AimOffsetUpdatersLinearSpeedFactor, AimOffsetUpdatersNonLinearSpeedFactor, bUseAimOffsetUpdaterForMontage, HorizontalAimOffsetMontage, VerticalAimOffsetMontage, BipedRootMotionMontageInstance, OnNotifyTriggeredDelegate, CachedSelf, bReasonablySignificant, bEnableIK, bIsDeadAndStill); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAnimationLibrary : UEObject
    {
        public DimensionAnimationLibrary(nint addr) : base(addr) { }
        public DimensionAnimationLibrary() : base(0) { }
        public UEObject GetPlayRateForMontage(UEObject AnimMontage, UEObject PlayTime) { return InvokeUEObject("GetPlayRateForMontage", AnimMontage, PlayTime); }
        public void _DimensionAnimationLibrary() { Invoke("DimensionAnimationLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAnalytics : DimensionObject
    {
        public DimensionAnalytics(nint addr) : base(addr) { }
        public DimensionAnalytics() : base(0) { }
    }
    public class DimensionAmmoAttribSet : DimensionAttribSet
    {
        public DimensionAmmoAttribSet(nint addr) : base(addr) { }
        public DimensionAmmoAttribSet() : base(0) { }
        public float ClipSize { get { return this["ClipSize"].GetValue<float>(); } set { this["ClipSize"].SetValue<float>(value); } }
        public float MaxAmmo { get { return this["MaxAmmo"].GetValue<float>(); } set { this["MaxAmmo"].SetValue<float>(value); } }
        public float AmmoConversionRate { get { return this["AmmoConversionRate"].GetValue<float>(); } set { this["AmmoConversionRate"].SetValue<float>(value); } }
        public float CurrentAmmoInClip { get { return this["CurrentAmmoInClip"].GetValue<float>(); } set { this["CurrentAmmoInClip"].SetValue<float>(value); } }
        public float CurrentAmmo { get { return this["CurrentAmmo"].GetValue<float>(); } set { this["CurrentAmmo"].SetValue<float>(value); } }
        public float PendingAmmoPercentage { get { return this["PendingAmmoPercentage"].GetValue<float>(); } set { this["PendingAmmoPercentage"].SetValue<float>(value); } }
        public float PendingAmmoToAdd { get { return this["PendingAmmoToAdd"].GetValue<float>(); } set { this["PendingAmmoToAdd"].SetValue<float>(value); } }
        public float PendingClipRefill { get { return this["PendingClipRefill"].GetValue<float>(); } set { this["PendingClipRefill"].SetValue<float>(value); } }
        public float PendingAmmoToUse { get { return this["PendingAmmoToUse"].GetValue<float>(); } set { this["PendingAmmoToUse"].SetValue<float>(value); } }
        public float ChargedBullets { get { return this["ChargedBullets"].GetValue<float>(); } set { this["ChargedBullets"].SetValue<float>(value); } }
        public float ChargedBulletDamageMultiplier { get { return this["ChargedBulletDamageMultiplier"].GetValue<float>(); } set { this["ChargedBulletDamageMultiplier"].SetValue<float>(value); } }
        public void OnRep_CurrentAmmoInClip(UEObject OldValue) { Invoke("OnRep_CurrentAmmoInClip", OldValue); }
        public void _DimensionAmmoAttribSet(UEObject ClipSize, UEObject MaxAmmo, UEObject AmmoConversionRate, UEObject CurrentAmmoInClip, UEObject CurrentAmmo, UEObject PendingAmmoPercentage, UEObject PendingAmmoToAdd, UEObject PendingClipRefill, UEObject PendingAmmoToUse, UEObject ChargedBullets, UEObject ChargedBulletDamageMultiplier) { Invoke("DimensionAmmoAttribSet", ClipSize, MaxAmmo, AmmoConversionRate, CurrentAmmoInClip, CurrentAmmo, PendingAmmoPercentage, PendingAmmoToAdd, PendingClipRefill, PendingAmmoToUse, ChargedBullets, ChargedBulletDamageMultiplier); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAllocator : DimensionObject
    {
        public DimensionAllocator(nint addr) : base(addr) { }
        public DimensionAllocator() : base(0) { }
        public float ScheduledAllocationDelay { get { return this["ScheduledAllocationDelay"].GetValue<float>(); } set { this["ScheduledAllocationDelay"].SetValue<float>(value); } }
        public bool bAdaptiveSpawnDelay { get { return this["bAdaptiveSpawnDelay"].Flag; } set { this["bAdaptiveSpawnDelay"].Flag = value; } }
        public UEObject OnCreateObjectDelegate { get { return this["OnCreateObjectDelegate"]; } set { this["OnCreateObjectDelegate"] = value; } }
        public UEObject OnSpawnActorDelegate { get { return this["OnSpawnActorDelegate"]; } set { this["OnSpawnActorDelegate"] = value; } }
        public void SetAllocatorName(UEObject Name) { Invoke("SetAllocatorName", Name); }
        public void _DimensionAllocator(UEObject ScheduledAllocationDelay, UEObject bAdaptiveSpawnDelay, UEObject OnCreateObjectDelegate, UEObject OnSpawnActorDelegate) { Invoke("DimensionAllocator", ScheduledAllocationDelay, bAdaptiveSpawnDelay, OnCreateObjectDelegate, OnSpawnActorDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionObject : UEObject
    {
        public DimensionObject(nint addr) : base(addr) { }
        public DimensionObject() : base(0) { }
        public bool bEnableTick { get { return this["bEnableTick"].Flag; } set { this["bEnableTick"].Flag = value; } }
        public bool bScaleTickByTimeDilation { get { return this["bScaleTickByTimeDilation"].Flag; } set { this["bScaleTickByTimeDilation"].Flag = value; } }
        public UEObject GetGameMode(UEObject WorldContextObject) { return InvokeUEObject("GetGameMode", WorldContextObject); }
        public void _DimensionObject(UEObject bEnableTick, UEObject bScaleTickByTimeDilation) { Invoke("DimensionObject", bEnableTick, bScaleTickByTimeDilation); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAlchemyAbilityInterface : Interface
    {
        public DimensionAlchemyAbilityInterface(nint addr) : base(addr) { }
        public DimensionAlchemyAbilityInterface() : base(0) { }
        public UEObject ModifyDescription(UEObject OriginalDescription) { return InvokeUEObject("ModifyDescription", OriginalDescription); }
        public void _DimensionAlchemyAbilityInterface() { Invoke("DimensionAlchemyAbilityInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAITask_MoveTo : AITask
    {
        public DimensionAITask_MoveTo(nint addr) : base(addr) { }
        public DimensionAITask_MoveTo() : base(0) { }
        public DimensionAIControllerBase OwnerDimensionAIController { get { return this[nameof(OwnerDimensionAIController)].As<DimensionAIControllerBase>(); } set { this["OwnerDimensionAIController"] = value; } }
        public UEObject OnRequestFailed { get { return this["OnRequestFailed"]; } set { this["OnRequestFailed"] = value; } }
        public UEObject OnMoveFinished { get { return this["OnMoveFinished"]; } set { this["OnMoveFinished"] = value; } }
        public AIMoveRequest MoveRequest { get { return this[nameof(MoveRequest)].As<AIMoveRequest>(); } set { this["MoveRequest"] = value; } }
        public UEObject AIMoveTo(UEObject DimensionAIController, UEObject PathFilterClass, UEObject GoalLocation, UEObject GoalActor, UEObject AcceptanceRadius, UEObject StopOnOverlap, UEObject AcceptPartialPath, UEObject bUsePathfinding, UEObject bLockAILogic, UEObject bUseContinuosGoalTracking, UEObject ProjectGoalOnNavigation, UEObject bCanStrafe, UEObject bUseGraph) { return InvokeUEObject("AIMoveTo", DimensionAIController, PathFilterClass, GoalLocation, GoalActor, AcceptanceRadius, StopOnOverlap, AcceptPartialPath, bUsePathfinding, bLockAILogic, bUseContinuosGoalTracking, ProjectGoalOnNavigation, bCanStrafe, bUseGraph); }
        public void _DimensionAITask_MoveTo(UEObject OwnerDimensionAIController, UEObject OnRequestFailed, UEObject OnMoveFinished, UEObject MoveRequest) { Invoke("DimensionAITask_MoveTo", OwnerDimensionAIController, OnRequestFailed, OnMoveFinished, MoveRequest); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAISystem : AISystem
    {
        public DimensionAISystem(nint addr) : base(addr) { }
        public DimensionAISystem() : base(0) { }
        public DimensionInfluenceMap InfluenceMap { get { return this[nameof(InfluenceMap)].As<DimensionInfluenceMap>(); } set { this["InfluenceMap"] = value; } }
        public DimensionAIManager AIManager { get { return this[nameof(AIManager)].As<DimensionAIManager>(); } set { this["AIManager"] = value; } }
        public DimensionAnchorCachingSystemBase AnchorCachingSystem { get { return this[nameof(AnchorCachingSystem)].As<DimensionAnchorCachingSystemBase>(); } set { this["AnchorCachingSystem"] = value; } }
        public UEObject TokenSystem { get { return this[nameof(TokenSystem)]; } set { this["TokenSystem"] = value; } }
        public DimensionLeashManager LeashManager { get { return this[nameof(LeashManager)].As<DimensionLeashManager>(); } set { this["LeashManager"] = value; } }
    }
    public class DimensionAIMovementComponent : CharacterMovementComponent
    {
        public DimensionAIMovementComponent(nint addr) : base(addr) { }
        public DimensionAIMovementComponent() : base(0) { }
        public float SpeedMultiplier { get { return this["SpeedMultiplier"].GetValue<float>(); } set { this["SpeedMultiplier"].SetValue<float>(value); } }
        public float AccelerationMultiplier { get { return this["AccelerationMultiplier"].GetValue<float>(); } set { this["AccelerationMultiplier"].SetValue<float>(value); } }
        public float BrakingDecelerationMultiplier { get { return this["BrakingDecelerationMultiplier"].GetValue<float>(); } set { this["BrakingDecelerationMultiplier"].SetValue<float>(value); } }
        public float SlopeSpeedMultiplier { get { return this["SlopeSpeedMultiplier"].GetValue<float>(); } set { this["SlopeSpeedMultiplier"].SetValue<float>(value); } }
        public float SlopeSpeedMultiplierScale { get { return this["SlopeSpeedMultiplierScale"].GetValue<float>(); } set { this["SlopeSpeedMultiplierScale"].SetValue<float>(value); } }
        public float SpeedBoostWhenForward { get { return this["SpeedBoostWhenForward"].GetValue<float>(); } set { this["SpeedBoostWhenForward"].SetValue<float>(value); } }
        public bool bLimitTurnRate { get { return this["bLimitTurnRate"].Flag; } set { this["bLimitTurnRate"].Flag = value; } }
        public float DefaultNavFlyingTargetHeight { get { return this["DefaultNavFlyingTargetHeight"].GetValue<float>(); } set { this["DefaultNavFlyingTargetHeight"].SetValue<float>(value); } }
    }
    public class DimensionAimAssistComponent : ActorComponent
    {
        public DimensionAimAssistComponent(nint addr) : base(addr) { }
        public DimensionAimAssistComponent() : base(0) { }
    }
    public class DimensionAIManager : UEObject
    {
        public DimensionAIManager(nint addr) : base(addr) { }
        public DimensionAIManager() : base(0) { }
        public int ActiveCinematicCount { get { return this["ActiveCinematicCount"].GetValue<int>(); } set { this["ActiveCinematicCount"].SetValue<int>(value); } }
        public UEObject RefreshTimePerLOD { get { return this["RefreshTimePerLOD"]; } set { this["RefreshTimePerLOD"] = value; } }
        public int MaxUnitUpdateCount { get { return this["MaxUnitUpdateCount"].GetValue<int>(); } set { this["MaxUnitUpdateCount"].SetValue<int>(value); } }
        public bool bUseLegacyPropertySystem { get { return this["bUseLegacyPropertySystem"].Flag; } set { this["bUseLegacyPropertySystem"].Flag = value; } }
        public int AIInfoUpdatedThisFrame { get { return this["AIInfoUpdatedThisFrame"].GetValue<int>(); } set { this["AIInfoUpdatedThisFrame"].SetValue<int>(value); } }
        public Array<DimensionAIControllerBase> AIControllers { get { return new Array<DimensionAIControllerBase>(this["AIControllers"]); } set { this["AIControllers"] = value; } }
        public UEObject StaggeredUpdateAIControllers { get { return this["StaggeredUpdateAIControllers"]; } set { this["StaggeredUpdateAIControllers"] = value; } }
        public UEObject UnitsPriority { get { return this["UnitsPriority"]; } set { this["UnitsPriority"] = value; } }
        public Array<DimensionSquad> Squads { get { return new Array<DimensionSquad>(this["Squads"]); } set { this["Squads"] = value; } }
        public void UnregisterAIController(UEObject ControllerToUnRegister) { Invoke("UnregisterAIController", ControllerToUnRegister); }
        public void _DimensionAIManager(UEObject ActiveCinematicCount, UEObject RefreshTimePerLOD, UEObject MaxUnitUpdateCount, UEObject bUseLegacyPropertySystem, UEObject AIInfoUpdatedThisFrame, UEObject AIControllers, UEObject StaggeredUpdateAIControllers, UEObject UnitsPriority, UEObject Squads) { Invoke("DimensionAIManager", ActiveCinematicCount, RefreshTimePerLOD, MaxUnitUpdateCount, bUseLegacyPropertySystem, AIInfoUpdatedThisFrame, AIControllers, StaggeredUpdateAIControllers, UnitsPriority, Squads); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAIManagementComponent : ActorComponent
    {
        public DimensionAIManagementComponent(nint addr) : base(addr) { }
        public DimensionAIManagementComponent() : base(0) { }
        public UEObject StreamingLevelMaps { get { return this["StreamingLevelMaps"]; } set { this["StreamingLevelMaps"] = value; } }
        public Array<LevelStreaming> LevelStreamingMakingInvisible { get { return new Array<LevelStreaming>(this["LevelStreamingMakingInvisible"]); } set { this["LevelStreamingMakingInvisible"] = value; } }
        public void OnAnyLevelHidden() { Invoke("OnAnyLevelHidden"); }
        public void _DimensionAIManagementComponent(UEObject StreamingLevelMaps, UEObject LevelStreamingMakingInvisible) { Invoke("DimensionAIManagementComponent", StreamingLevelMaps, LevelStreamingMakingInvisible); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAIControllerBase : AIController
    {
        public DimensionAIControllerBase(nint addr) : base(addr) { }
        public DimensionAIControllerBase() : base(0) { }
        public BehaviorTreeComponent BehaviorComp { get { return this[nameof(BehaviorComp)].As<BehaviorTreeComponent>(); } set { this["BehaviorComp"] = value; } }
        public Array<AbilityCachedData> AbilitiesCachedData { get { return new Array<AbilityCachedData>(this["AbilitiesCachedData"]); } set { this["AbilitiesCachedData"] = value; } }
        public Rotator OverridePawnRotation { get { return this[nameof(OverridePawnRotation)].As<Rotator>(); } set { this["OverridePawnRotation"] = value; } }
        public Texture2D AbilityDebugIcon { get { return this[nameof(AbilityDebugIcon)].As<Texture2D>(); } set { this["AbilityDebugIcon"] = value; } }
        public Texture2D AbilityInUseDebugIcon { get { return this[nameof(AbilityInUseDebugIcon)].As<Texture2D>(); } set { this["AbilityInUseDebugIcon"] = value; } }
        public float AbilityCacheRefreshTimestamp { get { return this["AbilityCacheRefreshTimestamp"].GetValue<float>(); } set { this["AbilityCacheRefreshTimestamp"].SetValue<float>(value); } }
        public float EnemySetTimestamp { get { return this["EnemySetTimestamp"].GetValue<float>(); } set { this["EnemySetTimestamp"].SetValue<float>(value); } }
        public float EnemyChangeDelay { get { return this["EnemyChangeDelay"].GetValue<float>(); } set { this["EnemyChangeDelay"].SetValue<float>(value); } }
        public bool bControlRotationLocked { get { return this["bControlRotationLocked"].Flag; } set { this["bControlRotationLocked"].Flag = value; } }
        public bool bResetPerceptionOnSetEnemy { get { return this["bResetPerceptionOnSetEnemy"].Flag; } set { this["bResetPerceptionOnSetEnemy"].Flag = value; } }
        public DimensionRelevantAnchors AnchorsCache { get { return this[nameof(AnchorsCache)].As<DimensionRelevantAnchors>(); } set { this["AnchorsCache"] = value; } }
        public float AbilityCacheValidityTimespan { get { return this["AbilityCacheValidityTimespan"].GetValue<float>(); } set { this["AbilityCacheValidityTimespan"].SetValue<float>(value); } }
        public DimensionGameplayAreaVolume RestrictedAreaVolume { get { return this[nameof(RestrictedAreaVolume)].As<DimensionGameplayAreaVolume>(); } set { this["RestrictedAreaVolume"] = value; } }
        public DimensionGameModeBase DimensionGameModeBase { get { return this[nameof(DimensionGameModeBase)].As<DimensionGameModeBase>(); } set { this["DimensionGameModeBase"] = value; } }
        public DimensionAICharacter DimensionAICharacter { get { return this[nameof(DimensionAICharacter)].As<DimensionAICharacter>(); } set { this["DimensionAICharacter"] = value; } }
        public string LeashName { get { return this["LeashName"].ToString(); } set { /* String properties are read-only */ } }
        public Actor CachedGoalActor { get { return this[nameof(CachedGoalActor)].As<Actor>(); } set { this["CachedGoalActor"] = value; } }
        public UEObject AggroMultipliersPerStimulusClass { get { return this["AggroMultipliersPerStimulusClass"]; } set { this["AggroMultipliersPerStimulusClass"] = value; } }
        public UEObject AggroMultipliersPerActorClass { get { return this["AggroMultipliersPerActorClass"]; } set { this["AggroMultipliersPerActorClass"] = value; } }
        public Array<DimensionEnemyInfo> EnemiesInfo { get { return new Array<DimensionEnemyInfo>(this["EnemiesInfo"]); } set { this["EnemiesInfo"] = value; } }
        public Vector SquadMemberLocation { get { return this[nameof(SquadMemberLocation)].As<Vector>(); } set { this["SquadMemberLocation"] = value; } }
        public DimensionSquad Squad { get { return this[nameof(Squad)].As<DimensionSquad>(); } set { this["Squad"] = value; } }
        public Vector TargetMovementLocation { get { return this[nameof(TargetMovementLocation)].As<Vector>(); } set { this["TargetMovementLocation"] = value; } }
        public bool bRequiresTokens { get { return this["bRequiresTokens"].Flag; } set { this["bRequiresTokens"].Flag = value; } }
        public void UpdateGameplayTagMemory(UEObject AbilitySystem, UEObject Tag, UEObject bAdded) { Invoke("UpdateGameplayTagMemory", AbilitySystem, Tag, bAdded); }
        public void _DimensionAIControllerBase(UEObject BehaviorComp, UEObject AbilitiesCachedData, UEObject OverridePawnRotation, UEObject AbilityDebugIcon, UEObject AbilityInUseDebugIcon, UEObject AbilityCacheRefreshTimestamp, UEObject EnemySetTimestamp, UEObject EnemyChangeDelay, UEObject bControlRotationLocked, UEObject bResetPerceptionOnSetEnemy, UEObject AnchorsCache, UEObject AbilityCacheValidityTimespan, UEObject RestrictedAreaVolume, UEObject DimensionGameModeBase, UEObject DimensionAICharacter, UEObject LeashName, UEObject CachedGoalActor, UEObject AggroMultipliersPerStimulusClass, UEObject AggroMultipliersPerActorClass, UEObject EnemiesInfo, UEObject SquadMemberLocation, UEObject Squad, UEObject TargetMovementLocation, UEObject bRequiresTokens) { Invoke("DimensionAIControllerBase", BehaviorComp, AbilitiesCachedData, OverridePawnRotation, AbilityDebugIcon, AbilityInUseDebugIcon, AbilityCacheRefreshTimestamp, EnemySetTimestamp, EnemyChangeDelay, bControlRotationLocked, bResetPerceptionOnSetEnemy, AnchorsCache, AbilityCacheValidityTimespan, RestrictedAreaVolume, DimensionGameModeBase, DimensionAICharacter, LeashName, CachedGoalActor, AggroMultipliersPerStimulusClass, AggroMultipliersPerActorClass, EnemiesInfo, SquadMemberLocation, Squad, TargetMovementLocation, bRequiresTokens); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLeashVolume : DimensionVolume
    {
        public DimensionLeashVolume(nint addr) : base(addr) { }
        public DimensionLeashVolume() : base(0) { }
        public DimensionGameplayPropComponent GameplayPropComponent { get { return this[nameof(GameplayPropComponent)].As<DimensionGameplayPropComponent>(); } set { this["GameplayPropComponent"] = value; } }
    }
    public class DimensionVolume : Volume
    {
        public DimensionVolume(nint addr) : base(addr) { }
        public DimensionVolume() : base(0) { }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public UEObject GetBoxSphereBounds() { return InvokeUEObject("GetBoxSphereBounds"); }
        public void _DimensionVolume(UEObject Color) { Invoke("DimensionVolume", Color); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAICharacter : DimensionCharacter
    {
        public DimensionAICharacter(nint addr) : base(addr) { }
        public DimensionAICharacter() : base(0) { }
        public string TargetBoneName { get { return this["TargetBoneName"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionAIBehaviourSet DefaultBehaviourSet { get { return this[nameof(DefaultBehaviourSet)].As<DimensionAIBehaviourSet>(); } set { this["DefaultBehaviourSet"] = value; } }
        public UEObject DebugAbilities { get { return this["DebugAbilities"]; } set { this["DebugAbilities"] = value; } }
        public DataTableRowHandle DropItemBatchHandle { get { return this[nameof(DropItemBatchHandle)].As<DataTableRowHandle>(); } set { this["DropItemBatchHandle"] = value; } }
        public DimensionItemBatch CustomDropItemBatch { get { return this[nameof(CustomDropItemBatch)].As<DimensionItemBatch>(); } set { this["CustomDropItemBatch"] = value; } }
        public AggregatedDamageData LastHitData { get { return this[nameof(LastHitData)].As<AggregatedDamageData>(); } set { this["LastHitData"] = value; } }
        public DimensionBoneModifierComponent BoneModifierComponent { get { return this[nameof(BoneModifierComponent)].As<DimensionBoneModifierComponent>(); } set { this["BoneModifierComponent"] = value; } }
        public DimensionMeleeComponent MeleeComponent { get { return this[nameof(MeleeComponent)].As<DimensionMeleeComponent>(); } set { this["MeleeComponent"] = value; } }
        public Rotator RotationVelocity { get { return this[nameof(RotationVelocity)].As<Rotator>(); } set { this["RotationVelocity"] = value; } }
        public BehaviorTree Behavior { get { return this[nameof(Behavior)].As<BehaviorTree>(); } set { this["Behavior"] = value; } }
        public float AnchorRange { get { return this["AnchorRange"].GetValue<float>(); } set { this["AnchorRange"].SetValue<float>(value); } }
        public float ReactionTime { get { return this["ReactionTime"].GetValue<float>(); } set { this["ReactionTime"].SetValue<float>(value); } }
        public float MinReactionTime { get { return this["MinReactionTime"].GetValue<float>(); } set { this["MinReactionTime"].SetValue<float>(value); } }
        public float MaxReactionTime { get { return this["MaxReactionTime"].GetValue<float>(); } set { this["MaxReactionTime"].SetValue<float>(value); } }
        public string WeaponMuzzleFlashSocketName { get { return this["WeaponMuzzleFlashSocketName"].ToString(); } set { /* String properties are read-only */ } }
        public float RotationRateMultiplier { get { return this["RotationRateMultiplier"].GetValue<float>(); } set { this["RotationRateMultiplier"].SetValue<float>(value); } }
        public Rotator MaxAimRotationRate { get { return this[nameof(MaxAimRotationRate)].As<Rotator>(); } set { this["MaxAimRotationRate"] = value; } }
        public float AimingModifier { get { return this["AimingModifier"].GetValue<float>(); } set { this["AimingModifier"].SetValue<float>(value); } }
        public string EyesSocket { get { return this["EyesSocket"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionSpawner OwningSpawner { get { return this[nameof(OwningSpawner)].As<DimensionSpawner>(); } set { this["OwningSpawner"] = value; } }
        public UEObject OnActivationDelegate { get { return this["OnActivationDelegate"]; } set { this["OnActivationDelegate"] = value; } }
        public float TimeAfterDeath { get { return this["TimeAfterDeath"].GetValue<float>(); } set { this["TimeAfterDeath"].SetValue<float>(value); } }
        public bool bIsDeadAndStill { get { return this["bIsDeadAndStill"].Flag; } set { this["bIsDeadAndStill"].Flag = value; } }
        public StaticMeshComponent CustomDepthMeshComponent { get { return this[nameof(CustomDepthMeshComponent)].As<StaticMeshComponent>(); } set { this["CustomDepthMeshComponent"] = value; } }
        public float CustomDepthMeshRadius { get { return this["CustomDepthMeshRadius"].GetValue<float>(); } set { this["CustomDepthMeshRadius"].SetValue<float>(value); } }
        public float CustomDepthRenderTolerance { get { return this["CustomDepthRenderTolerance"].GetValue<float>(); } set { this["CustomDepthRenderTolerance"].SetValue<float>(value); } }
        public UEObject CustomDepthRenderRequests { get { return this["CustomDepthRenderRequests"]; } set { this["CustomDepthRenderRequests"] = value; } }
        public DimensionEnemySignificanceComponent SignificanceComponent { get { return this[nameof(SignificanceComponent)].As<DimensionEnemySignificanceComponent>(); } set { this["SignificanceComponent"] = value; } }
        public Array<AnimMontage> TauntAnimations { get { return new Array<AnimMontage>(this["TauntAnimations"]); } set { this["TauntAnimations"] = value; } }
        public float SquadCenterWeight { get { return this["SquadCenterWeight"].GetValue<float>(); } set { this["SquadCenterWeight"].SetValue<float>(value); } }
        public float SquadInfluenceRange { get { return this["SquadInfluenceRange"].GetValue<float>(); } set { this["SquadInfluenceRange"].SetValue<float>(value); } }
        public UEObject OnEnemySet { get { return this["OnEnemySet"]; } set { this["OnEnemySet"] = value; } }
        public int MaxLOD { get { return this["MaxLOD"].GetValue<int>(); } set { this["MaxLOD"].SetValue<int>(value); } }
        public int LOD { get { return this["LOD"].GetValue<int>(); } set { this["LOD"].SetValue<int>(value); } }
        public AudioComponent VOAudioComponent { get { return this[nameof(VOAudioComponent)].As<AudioComponent>(); } set { this["VOAudioComponent"] = value; } }
        public float BreathingDefaultCooldown { get { return this["BreathingDefaultCooldown"].GetValue<float>(); } set { this["BreathingDefaultCooldown"].SetValue<float>(value); } }
        public float BreathingDelay { get { return this["BreathingDelay"].GetValue<float>(); } set { this["BreathingDelay"].SetValue<float>(value); } }
        public void UpdateTimeAfterDeath(UEObject DeltaSeconds) { Invoke("UpdateTimeAfterDeath", DeltaSeconds); }
        public void _DimensionAICharacter(UEObject TargetBoneName, UEObject DefaultBehaviourSet, UEObject DebugAbilities, UEObject DropItemBatchHandle, UEObject CustomDropItemBatch, UEObject LastHitData, UEObject BoneModifierComponent, UEObject MeleeComponent, UEObject RotationVelocity, UEObject Behavior, UEObject AnchorRange, UEObject ReactionTime, UEObject MinReactionTime, UEObject MaxReactionTime, UEObject WeaponMuzzleFlashSocketName, UEObject RotationRateMultiplier, UEObject MaxAimRotationRate, UEObject AimingModifier, UEObject EyesSocket, UEObject OwningSpawner, UEObject OnActivationDelegate, UEObject TimeAfterDeath, UEObject bIsDeadAndStill, UEObject CustomDepthMeshComponent, UEObject CustomDepthMeshRadius, UEObject CustomDepthRenderTolerance, UEObject CustomDepthRenderRequests, UEObject SignificanceComponent, UEObject TauntAnimations, UEObject SquadCenterWeight, UEObject SquadInfluenceRange, UEObject OnEnemySet, UEObject MaxLOD, UEObject LOD, UEObject VOAudioComponent, UEObject BreathingDefaultCooldown, UEObject BreathingDelay) { Invoke("DimensionAICharacter", TargetBoneName, DefaultBehaviourSet, DebugAbilities, DropItemBatchHandle, CustomDropItemBatch, LastHitData, BoneModifierComponent, MeleeComponent, RotationVelocity, Behavior, AnchorRange, ReactionTime, MinReactionTime, MaxReactionTime, WeaponMuzzleFlashSocketName, RotationRateMultiplier, MaxAimRotationRate, AimingModifier, EyesSocket, OwningSpawner, OnActivationDelegate, TimeAfterDeath, bIsDeadAndStill, CustomDepthMeshComponent, CustomDepthMeshRadius, CustomDepthRenderTolerance, CustomDepthRenderRequests, SignificanceComponent, TauntAnimations, SquadCenterWeight, SquadInfluenceRange, OnEnemySet, MaxLOD, LOD, VOAudioComponent, BreathingDefaultCooldown, BreathingDelay); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionCharacter : Character
    {
        public DimensionCharacter(nint addr) : base(addr) { }
        public DimensionCharacter() : base(0) { }
        public DimensionAbilitySystemComponent AbilitySystem { get { return this[nameof(AbilitySystem)].As<DimensionAbilitySystemComponent>(); } set { this["AbilitySystem"] = value; } }
        public UEObject OnHealthUpdatedDelegate { get { return this["OnHealthUpdatedDelegate"]; } set { this["OnHealthUpdatedDelegate"] = value; } }
        public DataTableRowHandle DataHandle { get { return this[nameof(DataHandle)].As<DataTableRowHandle>(); } set { this["DataHandle"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string EnemyTypeName { get { return this["EnemyTypeName"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionDamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DimensionDamageComponent>(); } set { this["DamageComponent"] = value; } }
        public UEObject OnDamageTakenDelagate { get { return this["OnDamageTakenDelagate"]; } set { this["OnDamageTakenDelagate"] = value; } }
        public UEObject OnPreReviveDelegate { get { return this["OnPreReviveDelegate"]; } set { this["OnPreReviveDelegate"] = value; } }
        public UEObject OnReviveDelegate { get { return this["OnReviveDelegate"]; } set { this["OnReviveDelegate"] = value; } }
        public UEObject OnKilledDelegate { get { return this["OnKilledDelegate"]; } set { this["OnKilledDelegate"] = value; } }
        public UEObject OnKilledOrDestroyedDelegate { get { return this["OnKilledOrDestroyedDelegate"]; } set { this["OnKilledOrDestroyedDelegate"] = value; } }
        public GenericTeamId TeamID { get { return this[nameof(TeamID)].As<GenericTeamId>(); } set { this["TeamID"] = value; } }
        public DataTableRowHandle CharacterSoundDataHandle { get { return this[nameof(CharacterSoundDataHandle)].As<DataTableRowHandle>(); } set { this["CharacterSoundDataHandle"] = value; } }
        public DimensionCharacterSoundData CharacterSoundData { get { return this[nameof(CharacterSoundData)].As<DimensionCharacterSoundData>(); } set { this["CharacterSoundData"] = value; } }
        public DimensionDefenseComponent DefenseComponent { get { return this[nameof(DefenseComponent)].As<DimensionDefenseComponent>(); } set { this["DefenseComponent"] = value; } }
        public DimensionRandomComponent RandomComponent { get { return this[nameof(RandomComponent)].As<DimensionRandomComponent>(); } set { this["RandomComponent"] = value; } }
        public DamageReplicatedData LastDamageInfo { get { return this[nameof(LastDamageInfo)].As<DamageReplicatedData>(); } set { this["LastDamageInfo"] = value; } }
        public UEObject RespawnFX { get { return this[nameof(RespawnFX)]; } set { this["RespawnFX"] = value; } }
        public bool bIsDying { get { return this["bIsDying"].Flag; } set { this["bIsDying"].Flag = value; } }
        public PhysicsAsset DeadPhysicsAsset { get { return this[nameof(DeadPhysicsAsset)].As<PhysicsAsset>(); } set { this["DeadPhysicsAsset"] = value; } }
        public string WeaponAttachPoint { get { return this["WeaponAttachPoint"].ToString(); } set { /* String properties are read-only */ } }
        public void UpdateGroundedTag() { Invoke("UpdateGroundedTag"); }
        public void _DimensionCharacter(UEObject AbilitySystem, UEObject OnHealthUpdatedDelegate, UEObject DataHandle, UEObject DisplayName, UEObject EnemyTypeName, UEObject DamageComponent, UEObject OnDamageTakenDelagate, UEObject OnPreReviveDelegate, UEObject OnReviveDelegate, UEObject OnKilledDelegate, UEObject OnKilledOrDestroyedDelegate, UEObject TeamID, UEObject CharacterSoundDataHandle, UEObject CharacterSoundData, UEObject DefenseComponent, UEObject RandomComponent, UEObject LastDamageInfo, UEObject RespawnFX, UEObject bIsDying, UEObject DeadPhysicsAsset, UEObject WeaponAttachPoint) { Invoke("DimensionCharacter", AbilitySystem, OnHealthUpdatedDelegate, DataHandle, DisplayName, EnemyTypeName, DamageComponent, OnDamageTakenDelagate, OnPreReviveDelegate, OnReviveDelegate, OnKilledDelegate, OnKilledOrDestroyedDelegate, TeamID, CharacterSoundDataHandle, CharacterSoundData, DefenseComponent, RandomComponent, LastDamageInfo, RespawnFX, bIsDying, DeadPhysicsAsset, WeaponAttachPoint); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAIBehaviourSet : DataAsset
    {
        public DimensionAIBehaviourSet(nint addr) : base(addr) { }
        public DimensionAIBehaviourSet() : base(0) { }
        public Array<DimensionAIAbilityDefinition> AbilitiesDefinitions { get { return new Array<DimensionAIAbilityDefinition>(this["AbilitiesDefinitions"]); } set { this["AbilitiesDefinitions"] = value; } }
        public Array<AISenseConfig> OverrideSensesConfig { get { return new Array<AISenseConfig>(this["OverrideSensesConfig"]); } set { this["OverrideSensesConfig"] = value; } }
        public bool bResetPerceptionOnSetEnemy { get { return this["bResetPerceptionOnSetEnemy"].Flag; } set { this["bResetPerceptionOnSetEnemy"].Flag = value; } }
    }
    public class DimensionActorLeash : DimensionDistanceLeash
    {
        public DimensionActorLeash(nint addr) : base(addr) { }
        public DimensionActorLeash() : base(0) { }
        public Actor LeashActor { get { return this[nameof(LeashActor)].As<Actor>(); } set { this["LeashActor"] = value; } }
    }
    public class DimensionDistanceLeash : DimensionLeash
    {
        public DimensionDistanceLeash(nint addr) : base(addr) { }
        public DimensionDistanceLeash() : base(0) { }
        public float InnerRadius { get { return this["InnerRadius"].GetValue<float>(); } set { this["InnerRadius"].SetValue<float>(value); } }
        public float OuterRadius { get { return this["OuterRadius"].GetValue<float>(); } set { this["OuterRadius"].SetValue<float>(value); } }
        public DimensionAnchorRef ClosestAnchor { get { return this[nameof(ClosestAnchor)].As<DimensionAnchorRef>(); } set { this["ClosestAnchor"] = value; } }
        public Array<DimensionAnchorRef> LeashAnchors { get { return new Array<DimensionAnchorRef>(this["LeashAnchors"]); } set { this["LeashAnchors"] = value; } }
        public UEObject GetOuterRadius() { return InvokeUEObject("GetOuterRadius"); }
        public void _DimensionDistanceLeash(UEObject InnerRadius, UEObject OuterRadius, UEObject ClosestAnchor, UEObject LeashAnchors) { Invoke("DimensionDistanceLeash", InnerRadius, OuterRadius, ClosestAnchor, LeashAnchors); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionLeash : UEObject
    {
        public DimensionLeash(nint addr) : base(addr) { }
        public DimensionLeash() : base(0) { }
        public UEObject GetLeashLocation() { return InvokeUEObject("GetLeashLocation"); }
        public void _DimensionLeash() { Invoke("DimensionLeash"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionActorHealthBarWidget : DimensionHealthBarWidgetBase
    {
        public DimensionActorHealthBarWidget(nint addr) : base(addr) { }
        public DimensionActorHealthBarWidget() : base(0) { }
        public float RangeMultiplier { get { return this["RangeMultiplier"].GetValue<float>(); } set { this["RangeMultiplier"].SetValue<float>(value); } }
        public Image CachedHealthBarImage { get { return this[nameof(CachedHealthBarImage)].As<Image>(); } set { this["CachedHealthBarImage"] = value; } }
        public Image CachedVerticalIndicatorImage { get { return this[nameof(CachedVerticalIndicatorImage)].As<Image>(); } set { this["CachedVerticalIndicatorImage"] = value; } }
        public Image CachedStunBarImage { get { return this[nameof(CachedStunBarImage)].As<Image>(); } set { this["CachedStunBarImage"] = value; } }
        public WidgetAnimation CachedShowStunBarAnimation { get { return this[nameof(CachedShowStunBarAnimation)].As<WidgetAnimation>(); } set { this["CachedShowStunBarAnimation"] = value; } }
        public CanvasPanel CachedBarCanvasPanel { get { return this[nameof(CachedBarCanvasPanel)].As<CanvasPanel>(); } set { this["CachedBarCanvasPanel"] = value; } }
        public void UpdateVisualsBasedOnHealthBarType(UEObject HealthBarType) { Invoke("UpdateVisualsBasedOnHealthBarType", HealthBarType); }
        public void _DimensionActorHealthBarWidget(UEObject RangeMultiplier, UEObject CachedHealthBarImage, UEObject CachedVerticalIndicatorImage, UEObject CachedStunBarImage, UEObject CachedShowStunBarAnimation, UEObject CachedBarCanvasPanel) { Invoke("DimensionActorHealthBarWidget", RangeMultiplier, CachedHealthBarImage, CachedVerticalIndicatorImage, CachedStunBarImage, CachedShowStunBarAnimation, CachedBarCanvasPanel); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionHealthBarWidgetBase : DimensionAttributeWidgetBase
    {
        public DimensionHealthBarWidgetBase(nint addr) : base(addr) { }
        public DimensionHealthBarWidgetBase() : base(0) { }
        public bool bScaleWithDistance { get { return this["bScaleWithDistance"].Flag; } set { this["bScaleWithDistance"].Flag = value; } }
        public float AccumulatedDamageDuration { get { return this["AccumulatedDamageDuration"].GetValue<float>(); } set { this["AccumulatedDamageDuration"].SetValue<float>(value); } }
        public DimensionValueToTextFormattingData DamageFormattingData { get { return this[nameof(DamageFormattingData)].As<DimensionValueToTextFormattingData>(); } set { this["DamageFormattingData"] = value; } }
        public TextBlock CachedActorNameText { get { return this[nameof(CachedActorNameText)].As<TextBlock>(); } set { this["CachedActorNameText"] = value; } }
        public TextBlock CachedDamageText { get { return this[nameof(CachedDamageText)].As<TextBlock>(); } set { this["CachedDamageText"] = value; } }
        public void UpdateHealthBarVisibility() { Invoke("UpdateHealthBarVisibility"); }
        public void _DimensionHealthBarWidgetBase(UEObject bScaleWithDistance, UEObject AccumulatedDamageDuration, UEObject DamageFormattingData, UEObject CachedActorNameText, UEObject CachedDamageText) { Invoke("DimensionHealthBarWidgetBase", bScaleWithDistance, AccumulatedDamageDuration, DamageFormattingData, CachedActorNameText, CachedDamageText); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAttributeWidgetBase : DimensionUserWidget
    {
        public DimensionAttributeWidgetBase(nint addr) : base(addr) { }
        public DimensionAttributeWidgetBase() : base(0) { }
        public GameplayAttribute ValueAttribute { get { return this[nameof(ValueAttribute)].As<GameplayAttribute>(); } set { this["ValueAttribute"] = value; } }
        public GameplayAttribute MaxValueAttribute { get { return this[nameof(MaxValueAttribute)].As<GameplayAttribute>(); } set { this["MaxValueAttribute"] = value; } }
        public GameplayAttribute ReserveValueAttribute { get { return this[nameof(ReserveValueAttribute)].As<GameplayAttribute>(); } set { this["ReserveValueAttribute"] = value; } }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValueConst { get { return this["MaxValueConst"].GetValue<float>(); } set { this["MaxValueConst"].SetValue<float>(value); } }
        public float ValueLerpSpeed { get { return this["ValueLerpSpeed"].GetValue<float>(); } set { this["ValueLerpSpeed"].SetValue<float>(value); } }
        public float ReserveValueLerpSpeed { get { return this["ReserveValueLerpSpeed"].GetValue<float>(); } set { this["ReserveValueLerpSpeed"].SetValue<float>(value); } }
        public float LowValueWarningThreshold { get { return this["LowValueWarningThreshold"].GetValue<float>(); } set { this["LowValueWarningThreshold"].SetValue<float>(value); } }
        public bool bClampValueToMax { get { return this["bClampValueToMax"].Flag; } set { this["bClampValueToMax"].Flag = value; } }
        public bool bWarnOnLowValue { get { return this["bWarnOnLowValue"].Flag; } set { this["bWarnOnLowValue"].Flag = value; } }
        public bool bSetToMinValueWhenInvalidActor { get { return this["bSetToMinValueWhenInvalidActor"].Flag; } set { this["bSetToMinValueWhenInvalidActor"].Flag = value; } }
        public Actor AttributeActor { get { return this[nameof(AttributeActor)].As<Actor>(); } set { this["AttributeActor"] = value; } }
        public DimensionAbilitySystemComponent CachedAbilitySystemComponent { get { return this[nameof(CachedAbilitySystemComponent)].As<DimensionAbilitySystemComponent>(); } set { this["CachedAbilitySystemComponent"] = value; } }
        public void InitializeWidgetWithAttributes(UEObject InAttributeActor, UEObject InValueAttribute, UEObject InMaxValueAttribute, UEObject InReserveValueAttribute) { Invoke("InitializeWidgetWithAttributes", InAttributeActor, InValueAttribute, InMaxValueAttribute, InReserveValueAttribute); }
        public void _DimensionAttributeWidgetBase(UEObject ValueAttribute, UEObject MaxValueAttribute, UEObject ReserveValueAttribute, UEObject MinValue, UEObject MaxValueConst, UEObject ValueLerpSpeed, UEObject ReserveValueLerpSpeed, UEObject LowValueWarningThreshold, UEObject bClampValueToMax, UEObject bWarnOnLowValue, UEObject bSetToMinValueWhenInvalidActor, UEObject AttributeActor, UEObject CachedAbilitySystemComponent) { Invoke("DimensionAttributeWidgetBase", ValueAttribute, MaxValueAttribute, ReserveValueAttribute, MinValue, MaxValueConst, ValueLerpSpeed, ReserveValueLerpSpeed, LowValueWarningThreshold, bClampValueToMax, bWarnOnLowValue, bSetToMinValueWhenInvalidActor, AttributeActor, CachedAbilitySystemComponent); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionUserWidget : UserWidget
    {
        public DimensionUserWidget(nint addr) : base(addr) { }
        public DimensionUserWidget() : base(0) { }
        public UEObject OnVisibilityChangeDelegate { get { return this["OnVisibilityChangeDelegate"]; } set { this["OnVisibilityChangeDelegate"] = value; } }
        public float FadeInOutTime { get { return this["FadeInOutTime"].GetValue<float>(); } set { this["FadeInOutTime"].SetValue<float>(value); } }
        public bool bOverrideFadeOutTime { get { return this["bOverrideFadeOutTime"].Flag; } set { this["bOverrideFadeOutTime"].Flag = value; } }
        public float FadeOutTime { get { return this["FadeOutTime"].GetValue<float>(); } set { this["FadeOutTime"].SetValue<float>(value); } }
        public bool bScaleFadingByTimeDilation { get { return this["bScaleFadingByTimeDilation"].Flag; } set { this["bScaleFadingByTimeDilation"].Flag = value; } }
        public bool bScaleTickByTimeDilation { get { return this["bScaleTickByTimeDilation"].Flag; } set { this["bScaleTickByTimeDilation"].Flag = value; } }
        public bool bEnableScheduledTick { get { return this["bEnableScheduledTick"].Flag; } set { this["bEnableScheduledTick"].Flag = value; } }
        public float TickInterval { get { return this["TickInterval"].GetValue<float>(); } set { this["TickInterval"].SetValue<float>(value); } }
        public DimensionWidgetController WidgetController { get { return this[nameof(WidgetController)].As<DimensionWidgetController>(); } set { this["WidgetController"] = value; } }
        public UEObject OnLockChangeDelegate { get { return this["OnLockChangeDelegate"]; } set { this["OnLockChangeDelegate"] = value; } }
        public void UpdateFadeInOutOpacity() { Invoke("UpdateFadeInOutOpacity"); }
        public void _DimensionUserWidget(UEObject OnVisibilityChangeDelegate, UEObject FadeInOutTime, UEObject bOverrideFadeOutTime, UEObject FadeOutTime, UEObject bScaleFadingByTimeDilation, UEObject bScaleTickByTimeDilation, UEObject bEnableScheduledTick, UEObject TickInterval, UEObject WidgetController, UEObject OnLockChangeDelegate) { Invoke("DimensionUserWidget", OnVisibilityChangeDelegate, FadeInOutTime, bOverrideFadeOutTime, FadeOutTime, bScaleFadingByTimeDilation, bScaleTickByTimeDilation, bEnableScheduledTick, TickInterval, WidgetController, OnLockChangeDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionActorComponent : ActorComponent
    {
        public DimensionActorComponent(nint addr) : base(addr) { }
        public DimensionActorComponent() : base(0) { }
        public UEObject OnComponentInitialized { get { return this["OnComponentInitialized"]; } set { this["OnComponentInitialized"] = value; } }
        public void SetTickEnabled(UEObject bTickEnabled) { Invoke("SetTickEnabled", bTickEnabled); }
        public void _DimensionActorComponent(UEObject OnComponentInitialized) { Invoke("DimensionActorComponent", OnComponentInitialized); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionActorCacheSubsystem : GameInstanceSubsystem
    {
        public DimensionActorCacheSubsystem(nint addr) : base(addr) { }
        public DimensionActorCacheSubsystem() : base(0) { }
        public UEObject OnEnemiesUpdatedDelegate { get { return this["OnEnemiesUpdatedDelegate"]; } set { this["OnEnemiesUpdatedDelegate"] = value; } }
        public UEObject OnEnemyRefreshedDelegate { get { return this["OnEnemyRefreshedDelegate"]; } set { this["OnEnemyRefreshedDelegate"] = value; } }
        public Array<DimensionAICharacter> Enemies { get { return new Array<DimensionAICharacter>(this["Enemies"]); } set { this["Enemies"] = value; } }
        public UEObject OnGameplayActorsUpdatedDelegate { get { return this["OnGameplayActorsUpdatedDelegate"]; } set { this["OnGameplayActorsUpdatedDelegate"] = value; } }
        public UEObject OnGameplayActorRefreshedDelegate { get { return this["OnGameplayActorRefreshedDelegate"]; } set { this["OnGameplayActorRefreshedDelegate"] = value; } }
        public Array<Actor> GameplayActors { get { return new Array<Actor>(this["GameplayActors"]); } set { this["GameplayActors"] = value; } }
        public UEObject OnHealthBarActorsUpdatedDelegate { get { return this["OnHealthBarActorsUpdatedDelegate"]; } set { this["OnHealthBarActorsUpdatedDelegate"] = value; } }
        public UEObject OnHealthBarActorRefreshedDelegate { get { return this["OnHealthBarActorRefreshedDelegate"]; } set { this["OnHealthBarActorRefreshedDelegate"] = value; } }
        public Array<Actor> HealthBarActors { get { return new Array<Actor>(this["HealthBarActors"]); } set { this["HealthBarActors"] = value; } }
        public UEObject OnRadarActorsUpdatedDelegate { get { return this["OnRadarActorsUpdatedDelegate"]; } set { this["OnRadarActorsUpdatedDelegate"] = value; } }
        public UEObject OnRadarActorRefreshedDelegate { get { return this["OnRadarActorRefreshedDelegate"]; } set { this["OnRadarActorRefreshedDelegate"] = value; } }
        public Array<Actor> RadarActors { get { return new Array<Actor>(this["RadarActors"]); } set { this["RadarActors"] = value; } }
        public UEObject OnMapActorsUpdatedDelegate { get { return this["OnMapActorsUpdatedDelegate"]; } set { this["OnMapActorsUpdatedDelegate"] = value; } }
        public UEObject OnMapActorRefreshedDelegate { get { return this["OnMapActorRefreshedDelegate"]; } set { this["OnMapActorRefreshedDelegate"] = value; } }
        public Array<Actor> MapActors { get { return new Array<Actor>(this["MapActors"]); } set { this["MapActors"] = value; } }
        public UEObject OnAimAssistActorsUpdatedDelegate { get { return this["OnAimAssistActorsUpdatedDelegate"]; } set { this["OnAimAssistActorsUpdatedDelegate"] = value; } }
        public UEObject OnAimAssistActorRefreshedDelegate { get { return this["OnAimAssistActorRefreshedDelegate"]; } set { this["OnAimAssistActorRefreshedDelegate"] = value; } }
        public Array<Actor> AimAssistActors { get { return new Array<Actor>(this["AimAssistActors"]); } set { this["AimAssistActors"] = value; } }
        public Array<Actor> ProjectileActors { get { return new Array<Actor>(this["ProjectileActors"]); } set { this["ProjectileActors"] = value; } }
        public Array<Actor> SpikeActors { get { return new Array<Actor>(this["SpikeActors"]); } set { this["SpikeActors"] = value; } }
        public UEObject OnTrapActorsUpdatedDelegate { get { return this["OnTrapActorsUpdatedDelegate"]; } set { this["OnTrapActorsUpdatedDelegate"] = value; } }
        public UEObject OnTrapActorRefreshedDelegate { get { return this["OnTrapActorRefreshedDelegate"]; } set { this["OnTrapActorRefreshedDelegate"] = value; } }
        public Array<Actor> TrapActors { get { return new Array<Actor>(this["TrapActors"]); } set { this["TrapActors"] = value; } }
        public void RemoveTrapActor(UEObject TrapActor) { Invoke("RemoveTrapActor", TrapActor); }
        public void _DimensionActorCacheSubsystem(UEObject OnEnemiesUpdatedDelegate, UEObject OnEnemyRefreshedDelegate, UEObject Enemies, UEObject OnGameplayActorsUpdatedDelegate, UEObject OnGameplayActorRefreshedDelegate, UEObject GameplayActors, UEObject OnHealthBarActorsUpdatedDelegate, UEObject OnHealthBarActorRefreshedDelegate, UEObject HealthBarActors, UEObject OnRadarActorsUpdatedDelegate, UEObject OnRadarActorRefreshedDelegate, UEObject RadarActors, UEObject OnMapActorsUpdatedDelegate, UEObject OnMapActorRefreshedDelegate, UEObject MapActors, UEObject OnAimAssistActorsUpdatedDelegate, UEObject OnAimAssistActorRefreshedDelegate, UEObject AimAssistActors, UEObject ProjectileActors, UEObject SpikeActors, UEObject OnTrapActorsUpdatedDelegate, UEObject OnTrapActorRefreshedDelegate, UEObject TrapActors) { Invoke("DimensionActorCacheSubsystem", OnEnemiesUpdatedDelegate, OnEnemyRefreshedDelegate, Enemies, OnGameplayActorsUpdatedDelegate, OnGameplayActorRefreshedDelegate, GameplayActors, OnHealthBarActorsUpdatedDelegate, OnHealthBarActorRefreshedDelegate, HealthBarActors, OnRadarActorsUpdatedDelegate, OnRadarActorRefreshedDelegate, RadarActors, OnMapActorsUpdatedDelegate, OnMapActorRefreshedDelegate, MapActors, OnAimAssistActorsUpdatedDelegate, OnAimAssistActorRefreshedDelegate, AimAssistActors, ProjectileActors, SpikeActors, OnTrapActorsUpdatedDelegate, OnTrapActorRefreshedDelegate, TrapActors); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAchievementSubsystem : GameInstanceSubsystem
    {
        public DimensionAchievementSubsystem(nint addr) : base(addr) { }
        public DimensionAchievementSubsystem() : base(0) { }
        public UEObject CustomAchievementRequiredProgress { get { return this["CustomAchievementRequiredProgress"]; } set { this["CustomAchievementRequiredProgress"] = value; } }
        public int UniqueMushroomsCount { get { return this["UniqueMushroomsCount"].GetValue<int>(); } set { this["UniqueMushroomsCount"].SetValue<int>(value); } }
        public Character CachedPlayer { get { return this[nameof(CachedPlayer)].As<Character>(); } set { this["CachedPlayer"] = value; } }
        public PlayerController CachedPlayerController { get { return this[nameof(CachedPlayerController)].As<PlayerController>(); } set { this["CachedPlayerController"] = value; } }
        public UEObject OnAchievementProgressUpdatedDelegate { get { return this["OnAchievementProgressUpdatedDelegate"]; } set { this["OnAchievementProgressUpdatedDelegate"] = value; } }
        public UEObject OnAchievementPendingCompleteDelegate { get { return this["OnAchievementPendingCompleteDelegate"]; } set { this["OnAchievementPendingCompleteDelegate"] = value; } }
        public UEObject OnAchievementCompletedDelegate { get { return this["OnAchievementCompletedDelegate"]; } set { this["OnAchievementCompletedDelegate"] = value; } }
        public UEObject OnDebugCompletedAchievementAddedDelegate { get { return this["OnDebugCompletedAchievementAddedDelegate"]; } set { this["OnDebugCompletedAchievementAddedDelegate"] = value; } }
        public void SetAchievementProgress(UEObject AchievementID, UEObject NewProgress) { Invoke("SetAchievementProgress", AchievementID, NewProgress); }
        public void _DimensionAchievementSubsystem(UEObject CustomAchievementRequiredProgress, UEObject UniqueMushroomsCount, UEObject CachedPlayer, UEObject CachedPlayerController, UEObject OnAchievementProgressUpdatedDelegate, UEObject OnAchievementPendingCompleteDelegate, UEObject OnAchievementCompletedDelegate, UEObject OnDebugCompletedAchievementAddedDelegate) { Invoke("DimensionAchievementSubsystem", CustomAchievementRequiredProgress, UniqueMushroomsCount, CachedPlayer, CachedPlayerController, OnAchievementProgressUpdatedDelegate, OnAchievementPendingCompleteDelegate, OnAchievementCompletedDelegate, OnDebugCompletedAchievementAddedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAccuracyConeAttribSet : DimensionAttribSet
    {
        public DimensionAccuracyConeAttribSet(nint addr) : base(addr) { }
        public DimensionAccuracyConeAttribSet() : base(0) { }
        public float Accuracy { get { return this["Accuracy"].GetValue<float>(); } set { this["Accuracy"].SetValue<float>(value); } }
        public float AccuracyConeBase { get { return this["AccuracyConeBase"].GetValue<float>(); } set { this["AccuracyConeBase"].SetValue<float>(value); } }
        public float AccuracyConeMaxSize { get { return this["AccuracyConeMaxSize"].GetValue<float>(); } set { this["AccuracyConeMaxSize"].SetValue<float>(value); } }
        public float AccuracyConeIncreaseSpeed { get { return this["AccuracyConeIncreaseSpeed"].GetValue<float>(); } set { this["AccuracyConeIncreaseSpeed"].SetValue<float>(value); } }
        public float AccuracyConeDecreaseSpeed { get { return this["AccuracyConeDecreaseSpeed"].GetValue<float>(); } set { this["AccuracyConeDecreaseSpeed"].SetValue<float>(value); } }
        public float AccuracyConeTargetingModifier { get { return this["AccuracyConeTargetingModifier"].GetValue<float>(); } set { this["AccuracyConeTargetingModifier"].SetValue<float>(value); } }
        public float AccuracyConeCrouchingModifier { get { return this["AccuracyConeCrouchingModifier"].GetValue<float>(); } set { this["AccuracyConeCrouchingModifier"].SetValue<float>(value); } }
        public float AccuracyConeAerialModifier { get { return this["AccuracyConeAerialModifier"].GetValue<float>(); } set { this["AccuracyConeAerialModifier"].SetValue<float>(value); } }
        public float CurrentFiringSpread { get { return this["CurrentFiringSpread"].GetValue<float>(); } set { this["CurrentFiringSpread"].SetValue<float>(value); } }
        public float ActualFiringSpread { get { return this["ActualFiringSpread"].GetValue<float>(); } set { this["ActualFiringSpread"].SetValue<float>(value); } }
        public float AccuracyConeIncreaseValue { get { return this["AccuracyConeIncreaseValue"].GetValue<float>(); } set { this["AccuracyConeIncreaseValue"].SetValue<float>(value); } }
        public float AccuracyConeDecreaseValue { get { return this["AccuracyConeDecreaseValue"].GetValue<float>(); } set { this["AccuracyConeDecreaseValue"].SetValue<float>(value); } }
    }
    public class DimensionAttribSet : AttributeSet
    {
        public DimensionAttribSet(nint addr) : base(addr) { }
        public DimensionAttribSet() : base(0) { }
    }
    public class DimensionAbilityTask_RunScheduler : AbilityTask
    {
        public DimensionAbilityTask_RunScheduler(nint addr) : base(addr) { }
        public DimensionAbilityTask_RunScheduler() : base(0) { }
        public UEObject OnScheduled { get { return this["OnScheduled"]; } set { this["OnScheduled"] = value; } }
        public UEObject OnFinished { get { return this["OnFinished"]; } set { this["OnFinished"] = value; } }
        public UEObject RunScheduler(UEObject OwningAbility, UEObject Time, UEObject Count, UEObject WaitForFirstExecute) { return InvokeUEObject("RunScheduler", OwningAbility, Time, Count, WaitForFirstExecute); }
        public void _DimensionAbilityTask_RunScheduler(UEObject OnScheduled, UEObject OnFinished) { Invoke("DimensionAbilityTask_RunScheduler", OnScheduled, OnFinished); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAbilitySystemComponent : AbilitySystemComponent
    {
        public DimensionAbilitySystemComponent(nint addr) : base(addr) { }
        public DimensionAbilitySystemComponent() : base(0) { }
        public GameplayTag SaveLoadCategoryTag { get { return this[nameof(SaveLoadCategoryTag)].As<GameplayTag>(); } set { this["SaveLoadCategoryTag"] = value; } }
        public UEObject SaveLoadPropertyValues { get { return this["SaveLoadPropertyValues"]; } set { this["SaveLoadPropertyValues"] = value; } }
        public DimensionAbilitySystemComponentSaveData SaveData { get { return this[nameof(SaveData)].As<DimensionAbilitySystemComponentSaveData>(); } set { this["SaveData"] = value; } }
        public DataTable InitialAttributeDataTable { get { return this[nameof(InitialAttributeDataTable)].As<DataTable>(); } set { this["InitialAttributeDataTable"] = value; } }
        public Array<DimensionAbilitySystemData> InitialAttributeDataEntries { get { return new Array<DimensionAbilitySystemData>(this["InitialAttributeDataEntries"]); } set { this["InitialAttributeDataEntries"] = value; } }
        public Array<UEObject> AttributeSetClasses { get { return new Array<UEObject>(this["AttributeSetClasses"]); } set { this["AttributeSetClasses"] = value; } }
        public Array<DimensionGameplayAttributeCallbackData> SingleAttributeUpdateCallbackData { get { return new Array<DimensionGameplayAttributeCallbackData>(this["SingleAttributeUpdateCallbackData"]); } set { this["SingleAttributeUpdateCallbackData"] = value; } }
        public Array<DimensionGameplayGroupedAttributeCallbackData> GroupedAttributeUpdateCallbackData { get { return new Array<DimensionGameplayGroupedAttributeCallbackData>(this["GroupedAttributeUpdateCallbackData"]); } set { this["GroupedAttributeUpdateCallbackData"] = value; } }
        public UEObject AttributeCurves { get { return this["AttributeCurves"]; } set { this["AttributeCurves"] = value; } }
        public UEObject OnAbilityUpdateDelegate { get { return this["OnAbilityUpdateDelegate"]; } set { this["OnAbilityUpdateDelegate"] = value; } }
        public UEObject OnAbilityActivateDelegate { get { return this["OnAbilityActivateDelegate"]; } set { this["OnAbilityActivateDelegate"] = value; } }
        public UEObject OnAbilityPostActivateDelegate { get { return this["OnAbilityPostActivateDelegate"]; } set { this["OnAbilityPostActivateDelegate"] = value; } }
        public UEObject AbilityRemoveTimers { get { return this["AbilityRemoveTimers"]; } set { this["AbilityRemoveTimers"] = value; } }
        public UEObject OnTagUpdatedDelegate { get { return this["OnTagUpdatedDelegate"]; } set { this["OnTagUpdatedDelegate"] = value; } }
        public GameplayTagContainer AnyTagCountUpdatesToCapture { get { return this[nameof(AnyTagCountUpdatesToCapture)].As<GameplayTagContainer>(); } set { this["AnyTagCountUpdatesToCapture"] = value; } }
        public UEObject OnAnyTagCountUpdatedDelegate { get { return this["OnAnyTagCountUpdatedDelegate"]; } set { this["OnAnyTagCountUpdatedDelegate"] = value; } }
        public Array<DimensionAbilitySystemComponent> ChildAbilitySystemComponents { get { return new Array<DimensionAbilitySystemComponent>(this["ChildAbilitySystemComponents"]); } set { this["ChildAbilitySystemComponents"] = value; } }
        public UEObject OnGameplayEffectUpdateDelegate { get { return this["OnGameplayEffectUpdateDelegate"]; } set { this["OnGameplayEffectUpdateDelegate"] = value; } }
        public UEObject OnGameplayEffectAddedDelegate { get { return this["OnGameplayEffectAddedDelegate"]; } set { this["OnGameplayEffectAddedDelegate"] = value; } }
        public UEObject OnGameplayEffectPreRemovedDelegate { get { return this["OnGameplayEffectPreRemovedDelegate"]; } set { this["OnGameplayEffectPreRemovedDelegate"] = value; } }
        public void UnbindFromAttributeUpdateEvents(UEObject Object, UEObject Attribute, UEObject bUnbindSingleEvents, UEObject bUnbindGroupedEvents, UEObject bRemoveMatchingGroupedEvents) { Invoke("UnbindFromAttributeUpdateEvents", Object, Attribute, bUnbindSingleEvents, bUnbindGroupedEvents, bRemoveMatchingGroupedEvents); }
        public void _DimensionAbilitySystemComponent(UEObject SaveLoadCategoryTag, UEObject SaveLoadPropertyValues, UEObject SaveData, UEObject InitialAttributeDataTable, UEObject InitialAttributeDataEntries, UEObject AttributeSetClasses, UEObject SingleAttributeUpdateCallbackData, UEObject GroupedAttributeUpdateCallbackData, UEObject AttributeCurves, UEObject OnAbilityUpdateDelegate, UEObject OnAbilityActivateDelegate, UEObject OnAbilityPostActivateDelegate, UEObject AbilityRemoveTimers, UEObject OnTagUpdatedDelegate, UEObject AnyTagCountUpdatesToCapture, UEObject OnAnyTagCountUpdatedDelegate, UEObject ChildAbilitySystemComponents, UEObject OnGameplayEffectUpdateDelegate, UEObject OnGameplayEffectAddedDelegate, UEObject OnGameplayEffectPreRemovedDelegate) { Invoke("DimensionAbilitySystemComponent", SaveLoadCategoryTag, SaveLoadPropertyValues, SaveData, InitialAttributeDataTable, InitialAttributeDataEntries, AttributeSetClasses, SingleAttributeUpdateCallbackData, GroupedAttributeUpdateCallbackData, AttributeCurves, OnAbilityUpdateDelegate, OnAbilityActivateDelegate, OnAbilityPostActivateDelegate, AbilityRemoveTimers, OnTagUpdatedDelegate, AnyTagCountUpdatesToCapture, OnAnyTagCountUpdatedDelegate, ChildAbilitySystemComponents, OnGameplayEffectUpdateDelegate, OnGameplayEffectAddedDelegate, OnGameplayEffectPreRemovedDelegate); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAbilityLibrary : UEObject
    {
        public DimensionAbilityLibrary(nint addr) : base(addr) { }
        public DimensionAbilityLibrary() : base(0) { }
        public void TestIsTickableAbilities(UEObject Actor) { Invoke("TestIsTickableAbilities", Actor); }
        public void _DimensionAbilityLibrary() { Invoke("DimensionAbilityLibrary"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DimensionAtrributeDataProvider : AIDataProvider
    {
        public DimensionAtrributeDataProvider(nint addr) : base(addr) { }
        public DimensionAtrributeDataProvider() : base(0) { }
        public UEObject Context { get { return this["Context"]; } set { this["Context"] = value; } }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public float Multiplier { get { return this["Multiplier"].GetValue<float>(); } set { this["Multiplier"].SetValue<float>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public bool BoolValue { get { return this["BoolValue"].Flag; } set { this["BoolValue"].Flag = value; } }
    }
    public class DimensionAbilityAIDataProvider : AIDataProvider
    {
        public DimensionAbilityAIDataProvider(nint addr) : base(addr) { }
        public DimensionAbilityAIDataProvider() : base(0) { }
        public EAbilityParam AbilityParam { get { return (EAbilityParam)this["AbilityParam"].GetValue<int>(); } set { this["AbilityParam"].SetValue<int>((int)value); } }
        public float Multiplier { get { return this["Multiplier"].GetValue<float>(); } set { this["Multiplier"].SetValue<float>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public bool BoolValue { get { return this["BoolValue"].Flag; } set { this["BoolValue"].Flag = value; } }
    }
    public class DimensionAATargetInterface : Interface
    {
        public DimensionAATargetInterface(nint addr) : base(addr) { }
        public DimensionAATargetInterface() : base(0) { }
        public UEObject IsRelevantForMelee() { return InvokeUEObject("IsRelevantForMelee"); }
        public void _DimensionAATargetInterface() { Invoke("DimensionAATargetInterface"); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class DamageComponentModifier : UEObject
    {
        public DamageComponentModifier(nint addr) : base(addr) { }
        public DamageComponentModifier() : base(0) { }
        public Actor ManagingActor { get { return this[nameof(ManagingActor)].As<Actor>(); } set { this["ManagingActor"] = value; } }
        public EDamageModifierType ModifierType { get { return (EDamageModifierType)this["ModifierType"].GetValue<int>(); } set { this["ModifierType"].SetValue<int>((int)value); } }
        public float AdditiveModifier { get { return this["AdditiveModifier"].GetValue<float>(); } set { this["AdditiveModifier"].SetValue<float>(value); } }
        public float MultiplicationModifier { get { return this["MultiplicationModifier"].GetValue<float>(); } set { this["MultiplicationModifier"].SetValue<float>(value); } }
        public CurveTableRowHandle AdditiveModifierHandle { get { return this[nameof(AdditiveModifierHandle)].As<CurveTableRowHandle>(); } set { this["AdditiveModifierHandle"] = value; } }
        public CurveTableRowHandle MultiplicationModifierHandle { get { return this[nameof(MultiplicationModifierHandle)].As<CurveTableRowHandle>(); } set { this["MultiplicationModifierHandle"] = value; } }
        public EDamageCalculationOrder CalculationOrder { get { return (EDamageCalculationOrder)this["CalculationOrder"].GetValue<int>(); } set { this["CalculationOrder"].SetValue<int>((int)value); } }
        public ActionModifiers DamageRequirements { get { return this[nameof(DamageRequirements)].As<ActionModifiers>(); } set { this["DamageRequirements"] = value; } }
        public ActionModifiers SuppliedActorRequirements { get { return this[nameof(SuppliedActorRequirements)].As<ActionModifiers>(); } set { this["SuppliedActorRequirements"] = value; } }
        public int Uses { get { return this["Uses"].GetValue<int>(); } set { this["Uses"].SetValue<int>(value); } }
        public int ApplyLimit { get { return this["ApplyLimit"].GetValue<int>(); } set { this["ApplyLimit"].SetValue<int>(value); } }
        public int MaxStacks { get { return this["MaxStacks"].GetValue<int>(); } set { this["MaxStacks"].SetValue<int>(value); } }
        public EDamageModifierStackApplyPolicy StackApplyPolicy { get { return (EDamageModifierStackApplyPolicy)this["StackApplyPolicy"].GetValue<int>(); } set { this["StackApplyPolicy"].SetValue<int>((int)value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public CurveTableRowHandle DurationHandle { get { return this[nameof(DurationHandle)].As<CurveTableRowHandle>(); } set { this["DurationHandle"] = value; } }
        public bool bRemoveAllStacksWhenExpired { get { return this["bRemoveAllStacksWhenExpired"].Flag; } set { this["bRemoveAllStacksWhenExpired"].Flag = value; } }
        public bool bDeferredSafe { get { return this["bDeferredSafe"].Flag; } set { this["bDeferredSafe"].Flag = value; } }
        public int CurrentUses { get { return this["CurrentUses"].GetValue<int>(); } set { this["CurrentUses"].SetValue<int>(value); } }
        public int Stacks { get { return this["Stacks"].GetValue<int>(); } set { this["Stacks"].SetValue<int>(value); } }
        public TimerHandle DurationTimerHandle { get { return this[nameof(DurationTimerHandle)].As<TimerHandle>(); } set { this["DurationTimerHandle"] = value; } }
        public void SetMultiplicationModifier(UEObject NewMultiplicationModifier) { Invoke("SetMultiplicationModifier", NewMultiplicationModifier); }
        public void _DamageComponentModifier(UEObject ManagingActor, UEObject ModifierType, UEObject AdditiveModifier, UEObject MultiplicationModifier, UEObject AdditiveModifierHandle, UEObject MultiplicationModifierHandle, UEObject CalculationOrder, UEObject DamageRequirements, UEObject SuppliedActorRequirements, UEObject Uses, UEObject ApplyLimit, UEObject MaxStacks, UEObject StackApplyPolicy, UEObject Duration, UEObject DurationHandle, UEObject bRemoveAllStacksWhenExpired, UEObject bDeferredSafe, UEObject CurrentUses, UEObject Stacks, UEObject DurationTimerHandle) { Invoke("DamageComponentModifier", ManagingActor, ModifierType, AdditiveModifier, MultiplicationModifier, AdditiveModifierHandle, MultiplicationModifierHandle, CalculationOrder, DamageRequirements, SuppliedActorRequirements, Uses, ApplyLimit, MaxStacks, StackApplyPolicy, Duration, DurationHandle, bRemoveAllStacksWhenExpired, bDeferredSafe, CurrentUses, Stacks, DurationTimerHandle); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class BTTask_ActivateGameplayAbility : BTTaskNode
    {
        public BTTask_ActivateGameplayAbility(nint addr) : base(addr) { }
        public BTTask_ActivateGameplayAbility() : base(0) { }
        public UEObject AbilityClassSofPtr { get { return this["AbilityClassSofPtr"]; } set { this["AbilityClassSofPtr"] = value; } }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
    }
    public class BTService_TryActivateGameplayAbility : BTService
    {
        public BTService_TryActivateGameplayAbility(nint addr) : base(addr) { }
        public BTService_TryActivateGameplayAbility() : base(0) { }
        public BlackboardKeySelector AbilityKey { get { return this[nameof(AbilityKey)].As<BlackboardKeySelector>(); } set { this["AbilityKey"] = value; } }
    }
    public class BTService_ShootIfEnemyInRange : BTService
    {
        public BTService_ShootIfEnemyInRange(nint addr) : base(addr) { }
        public BTService_ShootIfEnemyInRange() : base(0) { }
    }
    public class BTService_AbilityPicker : BTService
    {
        public BTService_AbilityPicker(nint addr) : base(addr) { }
        public BTService_AbilityPicker() : base(0) { }
    }
    public class BTService_TokenLock : BTService
    {
        public BTService_TokenLock(nint addr) : base(addr) { }
        public BTService_TokenLock() : base(0) { }
        public BlackboardKeySelector AbilityKey { get { return this[nameof(AbilityKey)].As<BlackboardKeySelector>(); } set { this["AbilityKey"] = value; } }
    }
    public class BTDecorator_IsTokenAvailable : BTDecorator_BlackboardBase
    {
        public BTDecorator_IsTokenAvailable(nint addr) : base(addr) { }
        public BTDecorator_IsTokenAvailable() : base(0) { }
    }
    public class BTDecorator_IsPointInsideVolume : BTDecorator
    {
        public BTDecorator_IsPointInsideVolume(nint addr) : base(addr) { }
        public BTDecorator_IsPointInsideVolume() : base(0) { }
    }
    public class BTDecorator_EQSCheck : BTDecorator_BlackboardBase
    {
        public BTDecorator_EQSCheck(nint addr) : base(addr) { }
        public BTDecorator_EQSCheck() : base(0) { }
    }
    public class BTDecorator_AbilityLocksMovement : BTDecorator_BlackboardBase
    {
        public BTDecorator_AbilityLocksMovement(nint addr) : base(addr) { }
        public BTDecorator_AbilityLocksMovement() : base(0) { }
    }
    public class BTTask_PickAbility : BTTaskNode
    {
        public BTTask_PickAbility(nint addr) : base(addr) { }
        public BTTask_PickAbility() : base(0) { }
        public BlackboardKeySelector AbilityKey { get { return this[nameof(AbilityKey)].As<BlackboardKeySelector>(); } set { this["AbilityKey"] = value; } }
        public BlackboardKeySelector AbilityEQSMoveToKey { get { return this[nameof(AbilityEQSMoveToKey)].As<BlackboardKeySelector>(); } set { this["AbilityEQSMoveToKey"] = value; } }
        public BlackboardKeySelector MoveToLocationKey { get { return this[nameof(MoveToLocationKey)].As<BlackboardKeySelector>(); } set { this["MoveToLocationKey"] = value; } }
        public float MaxUpdateDelay { get { return this["MaxUpdateDelay"].GetValue<float>(); } set { this["MaxUpdateDelay"].SetValue<float>(value); } }
    }
    public class BloodDecalSubsystem : GameInstanceSubsystem
    {
        public BloodDecalSubsystem(nint addr) : base(addr) { }
        public BloodDecalSubsystem() : base(0) { }
        public UEObject BloodDecalsGrid { get { return this["BloodDecalsGrid"]; } set { this["BloodDecalsGrid"] = value; } }
        public Array<DecalComponent> AllBloodDecals { get { return new Array<DecalComponent>(this["AllBloodDecals"]); } set { this["AllBloodDecals"] = value; } }
        public float GridCellSize { get { return this["GridCellSize"].GetValue<float>(); } set { this["GridCellSize"].SetValue<float>(value); } }
        public void AddBloodDecal(UEObject Material, UEObject Transform, UEObject Size) { Invoke("AddBloodDecal", Material, Transform, Size); }
        public void _BloodDecalSubsystem(UEObject BloodDecalsGrid, UEObject AllBloodDecals, UEObject GridCellSize) { Invoke("BloodDecalSubsystem", BloodDecalsGrid, AllBloodDecals, GridCellSize); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class AlchemyStationComponent : ActorComponent
    {
        public AlchemyStationComponent(nint addr) : base(addr) { }
        public AlchemyStationComponent() : base(0) { }
        public DataTable AllRecipesData { get { return this[nameof(AllRecipesData)].As<DataTable>(); } set { this["AllRecipesData"] = value; } }
        public Array<DataTableRowHandle> CachedRecipes { get { return new Array<DataTableRowHandle>(this["CachedRecipes"]); } set { this["CachedRecipes"] = value; } }
        public UEObject IsRecipeUnlocked(UEObject RecipeHandle, UEObject PlayerOrController) { return InvokeUEObject("IsRecipeUnlocked", RecipeHandle, PlayerOrController); }
        public void _AlchemyStationComponent(UEObject AllRecipesData, UEObject CachedRecipes) { Invoke("AlchemyStationComponent", AllRecipesData, CachedRecipes); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class AbilityTask_WaitVelocityBelow : AbilityTask
    {
        public AbilityTask_WaitVelocityBelow(nint addr) : base(addr) { }
        public AbilityTask_WaitVelocityBelow() : base(0) { }
        public UEObject OnVelocityBelow { get { return this["OnVelocityBelow"]; } set { this["OnVelocityBelow"] = value; } }
        public MovementComponent CachedMovementComponent { get { return this[nameof(CachedMovementComponent)].As<MovementComponent>(); } set { this["CachedMovementComponent"] = value; } }
        public UEObject CreateWaitVelocityBelow(UEObject OwningAbility, UEObject ThresholdVelocity) { return InvokeUEObject("CreateWaitVelocityBelow", OwningAbility, ThresholdVelocity); }
        public void _AbilityTask_WaitVelocityBelow(UEObject OnVelocityBelow, UEObject CachedMovementComponent) { Invoke("AbilityTask_WaitVelocityBelow", OnVelocityBelow, CachedMovementComponent); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class AbilityTask_ApplyRootMotionJumpToTargetForce : AbilityTask_ApplyRootMotion_Base
    {
        public AbilityTask_ApplyRootMotionJumpToTargetForce(nint addr) : base(addr) { }
        public AbilityTask_ApplyRootMotionJumpToTargetForce() : base(0) { }
        public UEObject OnFinish { get { return this["OnFinish"]; } set { this["OnFinish"] = value; } }
        public UEObject OnLanded { get { return this["OnLanded"]; } set { this["OnLanded"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public float TrackingSpeed { get { return this["TrackingSpeed"].GetValue<float>(); } set { this["TrackingSpeed"].SetValue<float>(value); } }
        public Vector StartingLocation { get { return this[nameof(StartingLocation)].As<Vector>(); } set { this["StartingLocation"] = value; } }
        public EJumpToTargetForceHeightType HeightType { get { return (EJumpToTargetForceHeightType)this["HeightType"].GetValue<int>(); } set { this["HeightType"].SetValue<int>((int)value); } }
        public float Height { get { return this["Height"].GetValue<float>(); } set { this["Height"].SetValue<float>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public float MinimumLandedTriggerTime { get { return this["MinimumLandedTriggerTime"].GetValue<float>(); } set { this["MinimumLandedTriggerTime"].SetValue<float>(value); } }
        public bool bFinishOnLanded { get { return this["bFinishOnLanded"].Flag; } set { this["bFinishOnLanded"].Flag = value; } }
        public bool bConstrainToNavigationOld { get { return this["bConstrainToNavigationOld"].Flag; } set { this["bConstrainToNavigationOld"].Flag = value; } }
        public void OnLandedCallback(UEObject Hit) { Invoke("OnLandedCallback", Hit); }
        public void _AbilityTask_ApplyRootMotionJumpToTargetForce(UEObject OnFinish, UEObject OnLanded, UEObject TargetLocation, UEObject TargetActor, UEObject TrackingSpeed, UEObject StartingLocation, UEObject HeightType, UEObject Height, UEObject Duration, UEObject MinimumLandedTriggerTime, UEObject bFinishOnLanded, UEObject bConstrainToNavigationOld) { Invoke("AbilityTask_ApplyRootMotionJumpToTargetForce", OnFinish, OnLanded, TargetLocation, TargetActor, TrackingSpeed, StartingLocation, HeightType, Height, Duration, MinimumLandedTriggerTime, bFinishOnLanded, bConstrainToNavigationOld); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class AbilityActor : Actor
    {
        public AbilityActor(nint addr) : base(addr) { }
        public AbilityActor() : base(0) { }
        public DimensionAbilitySystemComponent AbilitySystem { get { return this[nameof(AbilitySystem)].As<DimensionAbilitySystemComponent>(); } set { this["AbilitySystem"] = value; } }
        public UEObject OnHealthUpdatedDelegate { get { return this["OnHealthUpdatedDelegate"]; } set { this["OnHealthUpdatedDelegate"] = value; } }
        public UEObject OnKilledDelegate { get { return this["OnKilledDelegate"]; } set { this["OnKilledDelegate"] = value; } }
        public UEObject OnKilledOrDestroyedDelegate { get { return this["OnKilledOrDestroyedDelegate"]; } set { this["OnKilledOrDestroyedDelegate"] = value; } }
        public GameplayTag TeamGameplayTag { get { return this[nameof(TeamGameplayTag)].As<GameplayTag>(); } set { this["TeamGameplayTag"] = value; } }
        public UEObject ShouldTriggerOnHitOnDeath() { return InvokeUEObject("ShouldTriggerOnHitOnDeath"); }
        public void _AbilityActor(UEObject AbilitySystem, UEObject OnHealthUpdatedDelegate, UEObject OnKilledDelegate, UEObject OnKilledOrDestroyedDelegate, UEObject TeamGameplayTag) { Invoke("AbilityActor", AbilitySystem, OnHealthUpdatedDelegate, OnKilledDelegate, OnKilledOrDestroyedDelegate, TeamGameplayTag); }
        public void Script_Astro2(UEObject None) { Invoke("/Script/Astro2", None); }
    }
    public class TeamsAffiliation : UEObject
    {
        public TeamsAffiliation(nint addr) : base(addr) { }
        public TeamsAffiliation() : base(0) { }
        public GenericTeamId FirstTeamID { get { return this[nameof(FirstTeamID)].As<GenericTeamId>(); } set { this["FirstTeamID"] = value; } }
        public GenericTeamId SecondTeamID { get { return this[nameof(SecondTeamID)].As<GenericTeamId>(); } set { this["SecondTeamID"] = value; } }
        public byte Affiliation { get { return this["Affiliation"].GetValue<byte>(); } set { this["Affiliation"].SetValue<byte>(value); } }
    }
    public class DimensionWidgetAppearance : UEObject
    {
        public DimensionWidgetAppearance(nint addr) : base(addr) { }
        public DimensionWidgetAppearance() : base(0) { }
        public Vector2D Translation { get { return this[nameof(Translation)].As<Vector2D>(); } set { this["Translation"] = value; } }
        public float Rotation { get { return this["Rotation"].GetValue<float>(); } set { this["Rotation"].SetValue<float>(value); } }
        public Vector2D Scale { get { return this[nameof(Scale)].As<Vector2D>(); } set { this["Scale"] = value; } }
        public float Opacity { get { return this["Opacity"].GetValue<float>(); } set { this["Opacity"].SetValue<float>(value); } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
    }
    public class DimensionStunGunAttribData : DimensionWeaponAttribData
    {
        public DimensionStunGunAttribData(nint addr) : base(addr) { }
        public DimensionStunGunAttribData() : base(0) { }
    }
    public class DimensionStakeGunAttribData : DimensionWeaponProjectileAttribData
    {
        public DimensionStakeGunAttribData(nint addr) : base(addr) { }
        public DimensionStakeGunAttribData() : base(0) { }
    }
    public class DimensionSniperRifleAttribData : DimensionWeaponAttribData
    {
        public DimensionSniperRifleAttribData(nint addr) : base(addr) { }
        public DimensionSniperRifleAttribData() : base(0) { }
    }
    public class DimensionShotgunAttribData : DimensionWeaponAttribData
    {
        public DimensionShotgunAttribData(nint addr) : base(addr) { }
        public DimensionShotgunAttribData() : base(0) { }
        public float NumberOfPellets { get { return this["NumberOfPellets"].GetValue<float>(); } set { this["NumberOfPellets"].SetValue<float>(value); } }
    }
    public class DimensionRayGunAttribData : DimensionWeaponAttribData
    {
        public DimensionRayGunAttribData(nint addr) : base(addr) { }
        public DimensionRayGunAttribData() : base(0) { }
    }
    public class DimensionMachinePistolAttribData : DimensionWeaponAttribData
    {
        public DimensionMachinePistolAttribData(nint addr) : base(addr) { }
        public DimensionMachinePistolAttribData() : base(0) { }
    }
    public class DimensionMachineGunAttribData : DimensionWeaponAttribData
    {
        public DimensionMachineGunAttribData(nint addr) : base(addr) { }
        public DimensionMachineGunAttribData() : base(0) { }
    }
    public class DimensionLeverActionRifleAttribData : DimensionWeaponAttribData
    {
        public DimensionLeverActionRifleAttribData(nint addr) : base(addr) { }
        public DimensionLeverActionRifleAttribData() : base(0) { }
    }
    public class DimensionInstantHitInfo : UEObject
    {
        public DimensionInstantHitInfo(nint addr) : base(addr) { }
        public DimensionInstantHitInfo() : base(0) { }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public int RandomSeed { get { return this["RandomSeed"].GetValue<int>(); } set { this["RandomSeed"].SetValue<int>(value); } }
        public float ReticleSpread { get { return this["ReticleSpread"].GetValue<float>(); } set { this["ReticleSpread"].SetValue<float>(value); } }
    }
    public class DimensionInstantHitNetworkData : UEObject
    {
        public DimensionInstantHitNetworkData(nint addr) : base(addr) { }
        public DimensionInstantHitNetworkData() : base(0) { }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
        public Vector_NetQuantizeNormal ShootDir { get { return this[nameof(ShootDir)].As<Vector_NetQuantizeNormal>(); } set { this["ShootDir"] = value; } }
        public int RandomSeed { get { return this["RandomSeed"].GetValue<int>(); } set { this["RandomSeed"].SetValue<int>(value); } }
        public float ReticleSpread { get { return this["ReticleSpread"].GetValue<float>(); } set { this["ReticleSpread"].SetValue<float>(value); } }
    }
    public class DimensionInstantHitBufferInfo : UEObject
    {
        public DimensionInstantHitBufferInfo(nint addr) : base(addr) { }
        public DimensionInstantHitBufferInfo() : base(0) { }
        public DamageValueData DamageValueData { get { return this[nameof(DamageValueData)].As<DamageValueData>(); } set { this["DamageValueData"] = value; } }
        public DamageHitData HitData { get { return this[nameof(HitData)].As<DamageHitData>(); } set { this["HitData"] = value; } }
    }
    public class DimesnionDecalData : UEObject
    {
        public DimesnionDecalData(nint addr) : base(addr) { }
        public DimesnionDecalData() : base(0) { }
        public MaterialInstance DecalMaterialInstance { get { return this[nameof(DecalMaterialInstance)].As<MaterialInstance>(); } set { this["DecalMaterialInstance"] = value; } }
        public float DecalSize { get { return this["DecalSize"].GetValue<float>(); } set { this["DecalSize"].SetValue<float>(value); } }
        public float LifeSpan { get { return this["LifeSpan"].GetValue<float>(); } set { this["LifeSpan"].SetValue<float>(value); } }
    }
    public class DimensionPhysicalMaterial : UEObject
    {
        public DimensionPhysicalMaterial(nint addr) : base(addr) { }
        public DimensionPhysicalMaterial() : base(0) { }
        public byte SurfaceType { get { return this["SurfaceType"].GetValue<byte>(); } set { this["SurfaceType"].SetValue<byte>(value); } }
        public UEObject ImpactFX { get { return this[nameof(ImpactFX)]; } set { this["ImpactFX"] = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
    }
    public class DimensionHandCannonAttribData : DimensionWeaponAttribData
    {
        public DimensionHandCannonAttribData(nint addr) : base(addr) { }
        public DimensionHandCannonAttribData() : base(0) { }
    }
    public class DimensionGrenadeLauncherAttribData : DimensionWeaponProjectileAttribData
    {
        public DimensionGrenadeLauncherAttribData(nint addr) : base(addr) { }
        public DimensionGrenadeLauncherAttribData() : base(0) { }
    }
    public class DimensionCrossbowAttribData : DimensionWeaponProjectileAttribData
    {
        public DimensionCrossbowAttribData(nint addr) : base(addr) { }
        public DimensionCrossbowAttribData() : base(0) { }
    }
    public class DimensionBoltActionRifleAttribData : DimensionWeaponAttribData
    {
        public DimensionBoltActionRifleAttribData(nint addr) : base(addr) { }
        public DimensionBoltActionRifleAttribData() : base(0) { }
    }
    public class DimensionAutoRifleAttribData : DimensionWeaponAttribData
    {
        public DimensionAutoRifleAttribData(nint addr) : base(addr) { }
        public DimensionAutoRifleAttribData() : base(0) { }
    }
    public class DimensionWeaponProjectileAttribData : DimensionWeaponAttribData
    {
        public DimensionWeaponProjectileAttribData(nint addr) : base(addr) { }
        public DimensionWeaponProjectileAttribData() : base(0) { }
        public UEObject DefaultProjectileClass { get { return this["DefaultProjectileClass"]; } set { this["DefaultProjectileClass"] = value; } }
    }
    public class DimensionWeaponAttribData : DimensionAttribData
    {
        public DimensionWeaponAttribData(nint addr) : base(addr) { }
        public DimensionWeaponAttribData() : base(0) { }
        public GameplayTag WeaponTypeTag { get { return this[nameof(WeaponTypeTag)].As<GameplayTag>(); } set { this["WeaponTypeTag"] = value; } }
        public EDamageType DefaultPureDamageType { get { return (EDamageType)this["DefaultPureDamageType"].GetValue<int>(); } set { this["DefaultPureDamageType"].SetValue<int>((int)value); } }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public float Reload { get { return this["Reload"].GetValue<float>(); } set { this["Reload"].SetValue<float>(value); } }
        public float Range { get { return this["Range"].GetValue<float>(); } set { this["Range"].SetValue<float>(value); } }
        public float Handling { get { return this["Handling"].GetValue<float>(); } set { this["Handling"].SetValue<float>(value); } }
        public float Mobility { get { return this["Mobility"].GetValue<float>(); } set { this["Mobility"].SetValue<float>(value); } }
        public float RateOfFire { get { return this["RateOfFire"].GetValue<float>(); } set { this["RateOfFire"].SetValue<float>(value); } }
        public float Accuracy { get { return this["Accuracy"].GetValue<float>(); } set { this["Accuracy"].SetValue<float>(value); } }
        public float Stability { get { return this["Stability"].GetValue<float>(); } set { this["Stability"].SetValue<float>(value); } }
        public float Impact { get { return this["Impact"].GetValue<float>(); } set { this["Impact"].SetValue<float>(value); } }
        public float StaminaFireCost { get { return this["StaminaFireCost"].GetValue<float>(); } set { this["StaminaFireCost"].SetValue<float>(value); } }
        public float ClipSize { get { return this["ClipSize"].GetValue<float>(); } set { this["ClipSize"].SetValue<float>(value); } }
        public float PhysicalProficiency { get { return this["PhysicalProficiency"].GetValue<float>(); } set { this["PhysicalProficiency"].SetValue<float>(value); } }
        public float FireProficiency { get { return this["FireProficiency"].GetValue<float>(); } set { this["FireProficiency"].SetValue<float>(value); } }
        public float EarthProficiency { get { return this["EarthProficiency"].GetValue<float>(); } set { this["EarthProficiency"].SetValue<float>(value); } }
        public float WaterProficiency { get { return this["WaterProficiency"].GetValue<float>(); } set { this["WaterProficiency"].SetValue<float>(value); } }
        public float AirProficiency { get { return this["AirProficiency"].GetValue<float>(); } set { this["AirProficiency"].SetValue<float>(value); } }
        public float PhysicalProficiencyPower { get { return this["PhysicalProficiencyPower"].GetValue<float>(); } set { this["PhysicalProficiencyPower"].SetValue<float>(value); } }
        public float FireProficiencyPower { get { return this["FireProficiencyPower"].GetValue<float>(); } set { this["FireProficiencyPower"].SetValue<float>(value); } }
        public float EarthProficiencyPower { get { return this["EarthProficiencyPower"].GetValue<float>(); } set { this["EarthProficiencyPower"].SetValue<float>(value); } }
        public float WaterProficiencyPower { get { return this["WaterProficiencyPower"].GetValue<float>(); } set { this["WaterProficiencyPower"].SetValue<float>(value); } }
        public float AirProficiencyPower { get { return this["AirProficiencyPower"].GetValue<float>(); } set { this["AirProficiencyPower"].SetValue<float>(value); } }
        public RecoilCurveVector RecoilCurves { get { return this[nameof(RecoilCurves)].As<RecoilCurveVector>(); } set { this["RecoilCurves"] = value; } }
        public float AimAssistStrength { get { return this["AimAssistStrength"].GetValue<float>(); } set { this["AimAssistStrength"].SetValue<float>(value); } }
        public UEObject Material { get { return this["Material"]; } set { this["Material"] = value; } }
    }
    public class DimensionArchetypeMinMaxReverse : DimensionArchetypeMinMax
    {
        public DimensionArchetypeMinMaxReverse(nint addr) : base(addr) { }
        public DimensionArchetypeMinMaxReverse() : base(0) { }
    }
    public class DimensionArchetypeMinMax : UEObject
    {
        public DimensionArchetypeMinMax(nint addr) : base(addr) { }
        public DimensionArchetypeMinMax() : base(0) { }
        public float Min { get { return this["Min"].GetValue<float>(); } set { this["Min"].SetValue<float>(value); } }
        public float Max { get { return this["Max"].GetValue<float>(); } set { this["Max"].SetValue<float>(value); } }
    }
    public class DimensionWeaponArchetype : DimensionAttribData
    {
        public DimensionWeaponArchetype(nint addr) : base(addr) { }
        public DimensionWeaponArchetype() : base(0) { }
        public EFiringMode FiringMode { get { return (EFiringMode)this["FiringMode"].GetValue<int>(); } set { this["FiringMode"].SetValue<int>((int)value); } }
        public DimensionArchetypeMinMax BaseDamage { get { return this[nameof(BaseDamage)].As<DimensionArchetypeMinMax>(); } set { this["BaseDamage"] = value; } }
        public DimensionArchetypeMinMax BaseDamageClamp { get { return this[nameof(BaseDamageClamp)].As<DimensionArchetypeMinMax>(); } set { this["BaseDamageClamp"] = value; } }
        public DimensionArchetypeMinMaxReverse ReloadTime { get { return this[nameof(ReloadTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["ReloadTime"] = value; } }
        public DimensionArchetypeMinMax ReloadTimeClamp { get { return this[nameof(ReloadTimeClamp)].As<DimensionArchetypeMinMax>(); } set { this["ReloadTimeClamp"] = value; } }
        public DimensionArchetypeMinMax BaseRange { get { return this[nameof(BaseRange)].As<DimensionArchetypeMinMax>(); } set { this["BaseRange"] = value; } }
        public DimensionArchetypeMinMax FalloffRange { get { return this[nameof(FalloffRange)].As<DimensionArchetypeMinMax>(); } set { this["FalloffRange"] = value; } }
        public DimensionArchetypeMinMax CutoffRange { get { return this[nameof(CutoffRange)].As<DimensionArchetypeMinMax>(); } set { this["CutoffRange"] = value; } }
        public DimensionArchetypeMinMax BaseRangeClamp { get { return this[nameof(BaseRangeClamp)].As<DimensionArchetypeMinMax>(); } set { this["BaseRangeClamp"] = value; } }
        public DimensionArchetypeMinMaxReverse EquipTime { get { return this[nameof(EquipTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["EquipTime"] = value; } }
        public DimensionArchetypeMinMaxReverse UnequipTime { get { return this[nameof(UnequipTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["UnequipTime"] = value; } }
        public DimensionArchetypeMinMaxReverse ADSTime { get { return this[nameof(ADSTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["ADSTime"] = value; } }
        public DimensionArchetypeMinMaxReverse DeADSTime { get { return this[nameof(DeADSTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["DeADSTime"] = value; } }
        public DimensionArchetypeMinMaxReverse PostSprintRecoveryTime { get { return this[nameof(PostSprintRecoveryTime)].As<DimensionArchetypeMinMaxReverse>(); } set { this["PostSprintRecoveryTime"] = value; } }
        public DimensionArchetypeMinMaxReverse StaminaDrainOnTargeting { get { return this[nameof(StaminaDrainOnTargeting)].As<DimensionArchetypeMinMaxReverse>(); } set { this["StaminaDrainOnTargeting"] = value; } }
        public DimensionArchetypeMinMax EquipTimeClamp { get { return this[nameof(EquipTimeClamp)].As<DimensionArchetypeMinMax>(); } set { this["EquipTimeClamp"] = value; } }
        public DimensionArchetypeMinMax ADSTimeClamp { get { return this[nameof(ADSTimeClamp)].As<DimensionArchetypeMinMax>(); } set { this["ADSTimeClamp"] = value; } }
        public DimensionArchetypeMinMax PostSprintRecoveryTimeClamp { get { return this[nameof(PostSprintRecoveryTimeClamp)].As<DimensionArchetypeMinMax>(); } set { this["PostSprintRecoveryTimeClamp"] = value; } }
        public DimensionArchetypeMinMax SpeedMultiplier { get { return this[nameof(SpeedMultiplier)].As<DimensionArchetypeMinMax>(); } set { this["SpeedMultiplier"] = value; } }
        public DimensionArchetypeMinMax SpeedMultiplierOnTargeting { get { return this[nameof(SpeedMultiplierOnTargeting)].As<DimensionArchetypeMinMax>(); } set { this["SpeedMultiplierOnTargeting"] = value; } }
        public DimensionArchetypeMinMax SpeedMultiplierClamp { get { return this[nameof(SpeedMultiplierClamp)].As<DimensionArchetypeMinMax>(); } set { this["SpeedMultiplierClamp"] = value; } }
        public DimensionArchetypeMinMaxReverse TimeBetweenShots { get { return this[nameof(TimeBetweenShots)].As<DimensionArchetypeMinMaxReverse>(); } set { this["TimeBetweenShots"] = value; } }
        public DimensionArchetypeMinMax TimeBetweenShotsClamp { get { return this[nameof(TimeBetweenShotsClamp)].As<DimensionArchetypeMinMax>(); } set { this["TimeBetweenShotsClamp"] = value; } }
        public DimensionArchetypeMinMaxReverse AccuracyConeMaxSize { get { return this[nameof(AccuracyConeMaxSize)].As<DimensionArchetypeMinMaxReverse>(); } set { this["AccuracyConeMaxSize"] = value; } }
        public DimensionArchetypeMinMax AccuracyConeIncreaseSpeed { get { return this[nameof(AccuracyConeIncreaseSpeed)].As<DimensionArchetypeMinMax>(); } set { this["AccuracyConeIncreaseSpeed"] = value; } }
        public DimensionArchetypeMinMax AccuracyConeDecreaseSpeed { get { return this[nameof(AccuracyConeDecreaseSpeed)].As<DimensionArchetypeMinMax>(); } set { this["AccuracyConeDecreaseSpeed"] = value; } }
        public DimensionArchetypeMinMax AccuracyConeMaxSizeClamp { get { return this[nameof(AccuracyConeMaxSizeClamp)].As<DimensionArchetypeMinMax>(); } set { this["AccuracyConeMaxSizeClamp"] = value; } }
        public DimensionArchetypeMinMax AccuracyConeIncreaseSpeedClamp { get { return this[nameof(AccuracyConeIncreaseSpeedClamp)].As<DimensionArchetypeMinMax>(); } set { this["AccuracyConeIncreaseSpeedClamp"] = value; } }
        public DimensionArchetypeMinMax RecoilReductionRange { get { return this[nameof(RecoilReductionRange)].As<DimensionArchetypeMinMax>(); } set { this["RecoilReductionRange"] = value; } }
        public DimensionArchetypeMinMaxReverse RecoilStabilityScale { get { return this[nameof(RecoilStabilityScale)].As<DimensionArchetypeMinMaxReverse>(); } set { this["RecoilStabilityScale"] = value; } }
        public DimensionArchetypeMinMax RecoilRateOfFireScale { get { return this[nameof(RecoilRateOfFireScale)].As<DimensionArchetypeMinMax>(); } set { this["RecoilRateOfFireScale"] = value; } }
        public float AccuracyConeBase { get { return this["AccuracyConeBase"].GetValue<float>(); } set { this["AccuracyConeBase"].SetValue<float>(value); } }
        public float AccuracyConeTargetingModifier { get { return this["AccuracyConeTargetingModifier"].GetValue<float>(); } set { this["AccuracyConeTargetingModifier"].SetValue<float>(value); } }
        public float AccuracyConeCrouchingModifier { get { return this["AccuracyConeCrouchingModifier"].GetValue<float>(); } set { this["AccuracyConeCrouchingModifier"].SetValue<float>(value); } }
        public float AccuracyConeAerialModifier { get { return this["AccuracyConeAerialModifier"].GetValue<float>(); } set { this["AccuracyConeAerialModifier"].SetValue<float>(value); } }
        public float RecoilTimeMarginBeforeNextShot { get { return this["RecoilTimeMarginBeforeNextShot"].GetValue<float>(); } set { this["RecoilTimeMarginBeforeNextShot"].SetValue<float>(value); } }
        public float RecoilCrouchingModifier { get { return this["RecoilCrouchingModifier"].GetValue<float>(); } set { this["RecoilCrouchingModifier"].SetValue<float>(value); } }
        public float RecoilTargetingModifier { get { return this["RecoilTargetingModifier"].GetValue<float>(); } set { this["RecoilTargetingModifier"].SetValue<float>(value); } }
        public float RecoilStrengthStaminaModifier { get { return this["RecoilStrengthStaminaModifier"].GetValue<float>(); } set { this["RecoilStrengthStaminaModifier"].SetValue<float>(value); } }
        public float FalloffValue { get { return this["FalloffValue"].GetValue<float>(); } set { this["FalloffValue"].SetValue<float>(value); } }
        public float OpticsMultiplier { get { return this["OpticsMultiplier"].GetValue<float>(); } set { this["OpticsMultiplier"].SetValue<float>(value); } }
        public float OpticsInterpolationSpeed { get { return this["OpticsInterpolationSpeed"].GetValue<float>(); } set { this["OpticsInterpolationSpeed"].SetValue<float>(value); } }
        public float MaxAmmo { get { return this["MaxAmmo"].GetValue<float>(); } set { this["MaxAmmo"].SetValue<float>(value); } }
        public float AmmoConversionRate { get { return this["AmmoConversionRate"].GetValue<float>(); } set { this["AmmoConversionRate"].SetValue<float>(value); } }
        public float BurstSize { get { return this["BurstSize"].GetValue<float>(); } set { this["BurstSize"].SetValue<float>(value); } }
        public float BurstDelay { get { return this["BurstDelay"].GetValue<float>(); } set { this["BurstDelay"].SetValue<float>(value); } }
        public float AutoReloadDelay { get { return this["AutoReloadDelay"].GetValue<float>(); } set { this["AutoReloadDelay"].SetValue<float>(value); } }
        public float EyeToScopeDistance { get { return this["EyeToScopeDistance"].GetValue<float>(); } set { this["EyeToScopeDistance"].SetValue<float>(value); } }
        public float CriticalSectionMultiplier { get { return this["CriticalSectionMultiplier"].GetValue<float>(); } set { this["CriticalSectionMultiplier"].SetValue<float>(value); } }
        public float CriticalDamageMultiplier { get { return this["CriticalDamageMultiplier"].GetValue<float>(); } set { this["CriticalDamageMultiplier"].SetValue<float>(value); } }
        public float WeaponHandlingStat_ReloadTimeModifier { get { return this["WeaponHandlingStat_ReloadTimeModifier"].GetValue<float>(); } set { this["WeaponHandlingStat_ReloadTimeModifier"].SetValue<float>(value); } }
        public float WeaponHandlingStat_EquipTimeModifier { get { return this["WeaponHandlingStat_EquipTimeModifier"].GetValue<float>(); } set { this["WeaponHandlingStat_EquipTimeModifier"].SetValue<float>(value); } }
        public float WeaponHandlingStat_ADSTimeModifier { get { return this["WeaponHandlingStat_ADSTimeModifier"].GetValue<float>(); } set { this["WeaponHandlingStat_ADSTimeModifier"].SetValue<float>(value); } }
        public float WeaponMaxAmmoStat_MaxAmmoModifier { get { return this["WeaponMaxAmmoStat_MaxAmmoModifier"].GetValue<float>(); } set { this["WeaponMaxAmmoStat_MaxAmmoModifier"].SetValue<float>(value); } }
        public float WeaponRangeStat_RangeModifier { get { return this["WeaponRangeStat_RangeModifier"].GetValue<float>(); } set { this["WeaponRangeStat_RangeModifier"].SetValue<float>(value); } }
    }
    public class DimensionVendorData : DimensionAssetLoadingData
    {
        public DimensionVendorData(nint addr) : base(addr) { }
        public DimensionVendorData() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag VendorTag { get { return this[nameof(VendorTag)].As<GameplayTag>(); } set { this["VendorTag"] = value; } }
        public Array<DataTableRowHandle> VendorItemHandles { get { return new Array<DataTableRowHandle>(this["VendorItemHandles"]); } set { this["VendorItemHandles"] = value; } }
        public Array<DimensionVendorItemEntry> ItemEntries { get { return new Array<DimensionVendorItemEntry>(this["ItemEntries"]); } set { this["ItemEntries"] = value; } }
    }
    public class SaveLoadVendorItemData : UEObject
    {
        public SaveLoadVendorItemData(nint addr) : base(addr) { }
        public SaveLoadVendorItemData() : base(0) { }
        public int StacksPurchased { get { return this["StacksPurchased"].GetValue<int>(); } set { this["StacksPurchased"].SetValue<int>(value); } }
        public int StockLimit { get { return this["StockLimit"].GetValue<int>(); } set { this["StockLimit"].SetValue<int>(value); } }
        public float StockRefreshTimeRemaining { get { return this["StockRefreshTimeRemaining"].GetValue<float>(); } set { this["StockRefreshTimeRemaining"].SetValue<float>(value); } }
        public string SourceHandle { get { return this["SourceHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxySourceHandle { get { return this[nameof(ProxySourceHandle)].As<DataTableRowHandle>(); } set { this["ProxySourceHandle"] = value; } }
    }
    public class AggregatedBool : UEObject
    {
        public AggregatedBool(nint addr) : base(addr) { }
        public AggregatedBool() : base(0) { }
        public UEObject Entries { get { return this["Entries"]; } set { this["Entries"] = value; } }
    }
    public class InterfaceDamageNumberData : UEObject
    {
        public InterfaceDamageNumberData(nint addr) : base(addr) { }
        public InterfaceDamageNumberData() : base(0) { }
        public GameplayTag HitType { get { return this[nameof(HitType)].As<GameplayTag>(); } set { this["HitType"] = value; } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public EDamageType DamageType { get { return (EDamageType)this["DamageType"].GetValue<int>(); } set { this["DamageType"].SetValue<int>((int)value); } }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
        public GameplayTagContainer ActionModifiers { get { return this[nameof(ActionModifiers)].As<GameplayTagContainer>(); } set { this["ActionModifiers"] = value; } }
    }
    public class InterfaceItemNotificationData : UEObject
    {
        public InterfaceItemNotificationData(nint addr) : base(addr) { }
        public InterfaceItemNotificationData() : base(0) { }
        public DimensionItemHandleCount ItemHandleCount { get { return this[nameof(ItemHandleCount)].As<DimensionItemHandleCount>(); } set { this["ItemHandleCount"] = value; } }
        public DimensionItemNotificationOptions Options { get { return this[nameof(Options)].As<DimensionItemNotificationOptions>(); } set { this["Options"] = value; } }
    }
    public class DimensionInterfaceEquippedSlotData : DimensionInterfaceSlotData
    {
        public DimensionInterfaceEquippedSlotData(nint addr) : base(addr) { }
        public DimensionInterfaceEquippedSlotData() : base(0) { }
        public GameplayTag EquipTypeTag { get { return this[nameof(EquipTypeTag)].As<GameplayTag>(); } set { this["EquipTypeTag"] = value; } }
        public int EquipSlotIndex { get { return this["EquipSlotIndex"].GetValue<int>(); } set { this["EquipSlotIndex"].SetValue<int>(value); } }
    }
    public class DimensionInterfaceSlotData : UEObject
    {
        public DimensionInterfaceSlotData(nint addr) : base(addr) { }
        public DimensionInterfaceSlotData() : base(0) { }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public GameplayTag ItemTypeTag { get { return this[nameof(ItemTypeTag)].As<GameplayTag>(); } set { this["ItemTypeTag"] = value; } }
        public DimensionItemDataWrapper ItemDataWrapper { get { return this[nameof(ItemDataWrapper)].As<DimensionItemDataWrapper>(); } set { this["ItemDataWrapper"] = value; } }
        public bool bPendingUpdate { get { return this["bPendingUpdate"].Flag; } set { this["bPendingUpdate"].Flag = value; } }
    }
    public class ItemSortingRule : UEObject
    {
        public ItemSortingRule(nint addr) : base(addr) { }
        public ItemSortingRule() : base(0) { }
        public EItemSortingType SortingType { get { return (EItemSortingType)this["SortingType"].GetValue<int>(); } set { this["SortingType"].SetValue<int>((int)value); } }
        public ESortingOrder Order { get { return (ESortingOrder)this["Order"].GetValue<int>(); } set { this["Order"].SetValue<int>((int)value); } }
    }
    public class ItemSortingDefinition : UEObject
    {
        public ItemSortingDefinition(nint addr) : base(addr) { }
        public ItemSortingDefinition() : base(0) { }
        public Array<ItemSortingRule> SortingRules { get { return new Array<ItemSortingRule>(this["SortingRules"]); } set { this["SortingRules"] = value; } }
        public Array<GameplayTag> ItemSubcategories { get { return new Array<GameplayTag>(this["ItemSubcategories"]); } set { this["ItemSubcategories"] = value; } }
        public bool bLimitToSubcategoriesOnly { get { return this["bLimitToSubcategoriesOnly"].Flag; } set { this["bLimitToSubcategoriesOnly"].Flag = value; } }
    }
    public class InventorySectionDefinition : UEObject
    {
        public InventorySectionDefinition(nint addr) : base(addr) { }
        public InventorySectionDefinition() : base(0) { }
        public string SectionName { get { return this["SectionName"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTagContainer AllowedTypeTags { get { return this[nameof(AllowedTypeTags)].As<GameplayTagContainer>(); } set { this["AllowedTypeTags"] = value; } }
        public GameplayTagContainer BlockedTypeTags { get { return this[nameof(BlockedTypeTags)].As<GameplayTagContainer>(); } set { this["BlockedTypeTags"] = value; } }
        public bool bItemsUsingSlotsOnly { get { return this["bItemsUsingSlotsOnly"].Flag; } set { this["bItemsUsingSlotsOnly"].Flag = value; } }
        public ItemSortingDefinition DefaultSorting { get { return this[nameof(DefaultSorting)].As<ItemSortingDefinition>(); } set { this["DefaultSorting"] = value; } }
    }
    public class AdventureEventLogData : UEObject
    {
        public AdventureEventLogData(nint addr) : base(addr) { }
        public AdventureEventLogData() : base(0) { }
        public EAdventureEventLogType Type { get { return (EAdventureEventLogType)this["Type"].GetValue<int>(); } set { this["Type"].SetValue<int>((int)value); } }
        public string Message { get { return this["Message"].ToString(); } set { /* String properties are read-only */ } }
        public bool bPlaySound { get { return this["bPlaySound"].Flag; } set { this["bPlaySound"].Flag = value; } }
        public bool bDisplayMessage { get { return this["bDisplayMessage"].Flag; } set { this["bDisplayMessage"].Flag = value; } }
    }
    public class ItemTypeDisplayData : UEObject
    {
        public ItemTypeDisplayData(nint addr) : base(addr) { }
        public ItemTypeDisplayData() : base(0) { }
        public string DefaultTypeName { get { return this["DefaultTypeName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUseDefaultForAllRarities { get { return this["bUseDefaultForAllRarities"].Flag; } set { this["bUseDefaultForAllRarities"].Flag = value; } }
        public UEObject RarityTypeNames { get { return this["RarityTypeNames"]; } set { this["RarityTypeNames"] = value; } }
    }
    public class AttributeDisplayData : UEObject
    {
        public AttributeDisplayData(nint addr) : base(addr) { }
        public AttributeDisplayData() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public bool bHasDescriptions { get { return this["bHasDescriptions"].Flag; } set { this["bHasDescriptions"].Flag = value; } }
        public string ShortDescription { get { return this["ShortDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string LongDescription { get { return this["LongDescription"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDisplayValueUsingRomanNumerals { get { return this["bDisplayValueUsingRomanNumerals"].Flag; } set { this["bDisplayValueUsingRomanNumerals"].Flag = value; } }
    }
    public class ActiveAbilities : UEObject
    {
        public ActiveAbilities(nint addr) : base(addr) { }
        public ActiveAbilities() : base(0) { }
        public Array<DimensionGameplayAIAbility> Abilities { get { return new Array<DimensionGameplayAIAbility>(this["Abilities"]); } set { this["Abilities"] = value; } }
    }
    public class TokenCooldown : UEObject
    {
        public TokenCooldown(nint addr) : base(addr) { }
        public TokenCooldown() : base(0) { }
        public float RemainingTime { get { return this["RemainingTime"].GetValue<float>(); } set { this["RemainingTime"].SetValue<float>(value); } }
        public GameplayTag AbilityTag { get { return this[nameof(AbilityTag)].As<GameplayTag>(); } set { this["AbilityTag"] = value; } }
    }
    public class TokenSettings : TableRowBase
    {
        public TokenSettings(nint addr) : base(addr) { }
        public TokenSettings() : base(0) { }
        public GameplayTag GameplayTag { get { return this[nameof(GameplayTag)].As<GameplayTag>(); } set { this["GameplayTag"] = value; } }
        public int Limit { get { return this["Limit"].GetValue<int>(); } set { this["Limit"].SetValue<int>(value); } }
        public float CoolDown { get { return this["CoolDown"].GetValue<float>(); } set { this["CoolDown"].SetValue<float>(value); } }
        public float CanceledCooldown { get { return this["CanceledCooldown"].GetValue<float>(); } set { this["CanceledCooldown"].SetValue<float>(value); } }
    }
    public class DimensionTimeUnitsDelegateData : UEObject
    {
        public DimensionTimeUnitsDelegateData(nint addr) : base(addr) { }
        public DimensionTimeUnitsDelegateData() : base(0) { }
        public GameplayTagContainer EligibleTimeTags { get { return this[nameof(EligibleTimeTags)].As<GameplayTagContainer>(); } set { this["EligibleTimeTags"] = value; } }
        public UEObject Delegate { get { return this["Delegate"]; } set { this["Delegate"] = value; } }
    }
    public class TeamRelation : TableRowBase
    {
        public TeamRelation(nint addr) : base(addr) { }
        public TeamRelation() : base(0) { }
        public GameplayTag FirstTeamTag { get { return this[nameof(FirstTeamTag)].As<GameplayTag>(); } set { this["FirstTeamTag"] = value; } }
        public GameplayTag SecondTeamTag { get { return this[nameof(SecondTeamTag)].As<GameplayTag>(); } set { this["SecondTeamTag"] = value; } }
        public byte Attitude { get { return this["Attitude"].GetValue<byte>(); } set { this["Attitude"].SetValue<byte>(value); } }
    }
    public class TeamAttitudeSolver : UEObject
    {
        public TeamAttitudeSolver(nint addr) : base(addr) { }
        public TeamAttitudeSolver() : base(0) { }
    }
    public class DimensionStateEntry : UEObject
    {
        public DimensionStateEntry(nint addr) : base(addr) { }
        public DimensionStateEntry() : base(0) { }
        public GameplayTag StateTag { get { return this[nameof(StateTag)].As<GameplayTag>(); } set { this["StateTag"] = value; } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public Array<DimensionStateTransition> AvailableTransitionsFrom { get { return new Array<DimensionStateTransition>(this["AvailableTransitionsFrom"]); } set { this["AvailableTransitionsFrom"] = value; } }
        public Array<DimensionStateTransition> AvailableTransitionsTo { get { return new Array<DimensionStateTransition>(this["AvailableTransitionsTo"]); } set { this["AvailableTransitionsTo"] = value; } }
    }
    public class DimensionIntStat : UEObject
    {
        public DimensionIntStat(nint addr) : base(addr) { }
        public DimensionIntStat() : base(0) { }
    }
    public class DimensionFloatStat : UEObject
    {
        public DimensionFloatStat(nint addr) : base(addr) { }
        public DimensionFloatStat() : base(0) { }
    }
    public class DimensionStatCollection : UEObject
    {
        public DimensionStatCollection(nint addr) : base(addr) { }
        public DimensionStatCollection() : base(0) { }
    }
    public class DimensionStatsQueryResult : UEObject
    {
        public DimensionStatsQueryResult(nint addr) : base(addr) { }
        public DimensionStatsQueryResult() : base(0) { }
        public GameplayTag StatTag { get { return this[nameof(StatTag)].As<GameplayTag>(); } set { this["StatTag"] = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class DimensionTagStat : UEObject
    {
        public DimensionTagStat(nint addr) : base(addr) { }
        public DimensionTagStat() : base(0) { }
        public GameplayTag StatTag { get { return this[nameof(StatTag)].As<GameplayTag>(); } set { this["StatTag"] = value; } }
        public GameplayTag StatCollection { get { return this[nameof(StatCollection)].As<GameplayTag>(); } set { this["StatCollection"] = value; } }
    }
    public class DimensionItemStat : UEObject
    {
        public DimensionItemStat(nint addr) : base(addr) { }
        public DimensionItemStat() : base(0) { }
        public DataTableRowHandle ItemHandle { get { return this[nameof(ItemHandle)].As<DataTableRowHandle>(); } set { this["ItemHandle"] = value; } }
        public EDimensionStatType StatType { get { return (EDimensionStatType)this["StatType"].GetValue<int>(); } set { this["StatType"].SetValue<int>((int)value); } }
        public GameplayTag StatCollection { get { return this[nameof(StatCollection)].As<GameplayTag>(); } set { this["StatCollection"] = value; } }
    }
    public class DimensionItemStatsQueryResult : UEObject
    {
        public DimensionItemStatsQueryResult(nint addr) : base(addr) { }
        public DimensionItemStatsQueryResult() : base(0) { }
        public DimensionItemStat Stat { get { return this[nameof(Stat)].As<DimensionItemStat>(); } set { this["Stat"] = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class SpawnManagerScheduleResponse : UEObject
    {
        public SpawnManagerScheduleResponse(nint addr) : base(addr) { }
        public SpawnManagerScheduleResponse() : base(0) { }
        public int SpawnCount { get { return this["SpawnCount"].GetValue<int>(); } set { this["SpawnCount"].SetValue<int>(value); } }
        public List<int> AllocationIDs { get { return this["AllocationIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public int EntryID { get { return this["EntryID"].GetValue<int>(); } set { this["EntryID"].SetValue<int>(value); } }
    }
    public class SpawnManagerEntryDebugData : UEObject
    {
        public SpawnManagerEntryDebugData(nint addr) : base(addr) { }
        public SpawnManagerEntryDebugData() : base(0) { }
    }
    public class SquadSpawnerInfo : UEObject
    {
        public SquadSpawnerInfo(nint addr) : base(addr) { }
        public SquadSpawnerInfo() : base(0) { }
        public UEObject CharacterClass { get { return this["CharacterClass"]; } set { this["CharacterClass"] = value; } }
        public int Quantity { get { return this["Quantity"].GetValue<int>(); } set { this["Quantity"].SetValue<int>(value); } }
        public Array<SDK.Script.CoreUObject.Transform> Transforms { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Transforms"]); } set { this["Transforms"] = value; } }
        public BehaviorTree BehaviorTree { get { return this[nameof(BehaviorTree)].As<BehaviorTree>(); } set { this["BehaviorTree"] = value; } }
    }
    public class DimensionWeaponSoundData : DimensionSoundData
    {
        public DimensionWeaponSoundData(nint addr) : base(addr) { }
        public DimensionWeaponSoundData() : base(0) { }
    }
    public class DimensionCharacterSoundData : DimensionSoundData
    {
        public DimensionCharacterSoundData(nint addr) : base(addr) { }
        public DimensionCharacterSoundData() : base(0) { }
    }
    public class DimensionProjectileSoundData : DimensionSoundData
    {
        public DimensionProjectileSoundData(nint addr) : base(addr) { }
        public DimensionProjectileSoundData() : base(0) { }
    }
    public class DimensionThrowableItemSoundData : DimensionSoundData
    {
        public DimensionThrowableItemSoundData(nint addr) : base(addr) { }
        public DimensionThrowableItemSoundData() : base(0) { }
    }
    public class DimensionSoundPlaybackSettings : UEObject
    {
        public DimensionSoundPlaybackSettings(nint addr) : base(addr) { }
        public DimensionSoundPlaybackSettings() : base(0) { }
        public float VolumeMultiplier { get { return this["VolumeMultiplier"].GetValue<float>(); } set { this["VolumeMultiplier"].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this["PitchMultiplier"].GetValue<float>(); } set { this["PitchMultiplier"].SetValue<float>(value); } }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
        public bool bAutoDestroy { get { return this["bAutoDestroy"].Flag; } set { this["bAutoDestroy"].Flag = value; } }
        public bool bSpawnSound2D { get { return this["bSpawnSound2D"].Flag; } set { this["bSpawnSound2D"].Flag = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundConcurrency ConcurrencySettings { get { return this[nameof(ConcurrencySettings)].As<SoundConcurrency>(); } set { this["ConcurrencySettings"] = value; } }
        public bool bSpawnAttached { get { return this["bSpawnAttached"].Flag; } set { this["bSpawnAttached"].Flag = value; } }
        public SceneComponent AttachComponent { get { return this[nameof(AttachComponent)].As<SceneComponent>(); } set { this["AttachComponent"] = value; } }
        public string AttachPointName { get { return this["AttachPointName"].ToString(); } set { /* String properties are read-only */ } }
        public byte LocationType { get { return this["LocationType"].GetValue<byte>(); } set { this["LocationType"].SetValue<byte>(value); } }
        public bool bStopWhenOwnerDestroyed { get { return this["bStopWhenOwnerDestroyed"].Flag; } set { this["bStopWhenOwnerDestroyed"].Flag = value; } }
    }
    public class DimensionSoundEntry : UEObject
    {
        public DimensionSoundEntry(nint addr) : base(addr) { }
        public DimensionSoundEntry() : base(0) { }
        public string SoundName { get { return this["SoundName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject SoundCue { get { return this["SoundCue"]; } set { this["SoundCue"] = value; } }
        public SoundControlBusMix ControlBusMix { get { return this[nameof(ControlBusMix)].As<SoundControlBusMix>(); } set { this["ControlBusMix"] = value; } }
        public float ControlBusMixDuration { get { return this["ControlBusMixDuration"].GetValue<float>(); } set { this["ControlBusMixDuration"].SetValue<float>(value); } }
        public DimensionSoundPlaybackSettings PlaybackSettings { get { return this[nameof(PlaybackSettings)].As<DimensionSoundPlaybackSettings>(); } set { this["PlaybackSettings"] = value; } }
        public string Category { get { return this["Category"].ToString(); } set { /* String properties are read-only */ } }
        public bool bAlwaysPlay { get { return this["bAlwaysPlay"].Flag; } set { this["bAlwaysPlay"].Flag = value; } }
        public bool bStopOnDeath { get { return this["bStopOnDeath"].Flag; } set { this["bStopOnDeath"].Flag = value; } }
        public float CoolDown { get { return this["CoolDown"].GetValue<float>(); } set { this["CoolDown"].SetValue<float>(value); } }
        public bool bLooped { get { return this["bLooped"].Flag; } set { this["bLooped"].Flag = value; } }
        public float MinPlaybackDuration { get { return this["MinPlaybackDuration"].GetValue<float>(); } set { this["MinPlaybackDuration"].SetValue<float>(value); } }
        public float FadeInDuration { get { return this["FadeInDuration"].GetValue<float>(); } set { this["FadeInDuration"].SetValue<float>(value); } }
        public float FadeOutDuration { get { return this["FadeOutDuration"].GetValue<float>(); } set { this["FadeOutDuration"].SetValue<float>(value); } }
        public string TailSoundEntry { get { return this["TailSoundEntry"].ToString(); } set { /* String properties are read-only */ } }
        public Array<AudioComponent> AudioComponents { get { return new Array<AudioComponent>(this["AudioComponents"]); } set { this["AudioComponents"] = value; } }
        public SoundCue SoundCueInstance { get { return this[nameof(SoundCueInstance)].As<SoundCue>(); } set { this["SoundCueInstance"] = value; } }
        public bool bSoundEventLocked { get { return this["bSoundEventLocked"].Flag; } set { this["bSoundEventLocked"].Flag = value; } }
        public string InterruptingMontageName { get { return this["InterruptingMontageName"].ToString(); } set { /* String properties are read-only */ } }
        public TimerHandle ControlBusMixTimerHandle { get { return this[nameof(ControlBusMixTimerHandle)].As<TimerHandle>(); } set { this["ControlBusMixTimerHandle"] = value; } }
        public float CooldownTimestamp { get { return this["CooldownTimestamp"].GetValue<float>(); } set { this["CooldownTimestamp"].SetValue<float>(value); } }
        public float LoopStartTimestamp { get { return this["LoopStartTimestamp"].GetValue<float>(); } set { this["LoopStartTimestamp"].SetValue<float>(value); } }
        public bool bPendingLoopStop { get { return this["bPendingLoopStop"].Flag; } set { this["bPendingLoopStop"].Flag = value; } }
        public float FadeOutTimestamp { get { return this["FadeOutTimestamp"].GetValue<float>(); } set { this["FadeOutTimestamp"].SetValue<float>(value); } }
    }
    public class DimensionSoundData : DimensionAssetLoadingData
    {
        public DimensionSoundData(nint addr) : base(addr) { }
        public DimensionSoundData() : base(0) { }
        public Array<DimensionSoundEntry> SoundData { get { return new Array<DimensionSoundEntry>(this["SoundData"]); } set { this["SoundData"] = value; } }
        public Array<DimensionSoundEntry> Sounds { get { return new Array<DimensionSoundEntry>(this["Sounds"]); } set { this["Sounds"] = value; } }
        public UEObject MuteMap { get { return this["MuteMap"]; } set { this["MuteMap"] = value; } }
        public UEObject CategoryMuteMap { get { return this["CategoryMuteMap"]; } set { this["CategoryMuteMap"] = value; } }
    }
    public class DimensionSettingDefinition : TableRowBase
    {
        public DimensionSettingDefinition(nint addr) : base(addr) { }
        public DimensionSettingDefinition() : base(0) { }
        public GameplayTag SettingTag { get { return this[nameof(SettingTag)].As<GameplayTag>(); } set { this["SettingTag"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public EDimensionSettingType SettingType { get { return (EDimensionSettingType)this["SettingType"].GetValue<int>(); } set { this["SettingType"].SetValue<int>((int)value); } }
        public EDimensionSettingDataType DataType { get { return (EDimensionSettingDataType)this["DataType"].GetValue<int>(); } set { this["DataType"].SetValue<int>((int)value); } }
        public string EnumTypeError { get { return this["EnumTypeError"].ToString(); } set { /* String properties are read-only */ } }
        public string NumberTypeError { get { return this["NumberTypeError"].ToString(); } set { /* String properties are read-only */ } }
        public float NumericDefaultValue { get { return this["NumericDefaultValue"].GetValue<float>(); } set { this["NumericDefaultValue"].SetValue<float>(value); } }
        public string StringDefaultValue { get { return this["StringDefaultValue"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> EnumNumberDisplayOptions { get { return this["EnumNumberDisplayOptions"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject EnumStringDisplayOptions { get { return this["EnumStringDisplayOptions"]; } set { this["EnumStringDisplayOptions"] = value; } }
        public bool bEnableEnumConversion { get { return this["bEnableEnumConversion"].Flag; } set { this["bEnableEnumConversion"].Flag = value; } }
        public List<float> EnumNumberConversions { get { return this["EnumNumberConversions"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public UEObject EnumStringConversions { get { return this["EnumStringConversions"]; } set { this["EnumStringConversions"] = value; } }
        public DimensionValueToTextFormattingData EnumConversionFormatting { get { return this[nameof(EnumConversionFormatting)].As<DimensionValueToTextFormattingData>(); } set { this["EnumConversionFormatting"] = value; } }
        public float NumberMinValue { get { return this["NumberMinValue"].GetValue<float>(); } set { this["NumberMinValue"].SetValue<float>(value); } }
        public float NumberMaxValue { get { return this["NumberMaxValue"].GetValue<float>(); } set { this["NumberMaxValue"].SetValue<float>(value); } }
        public float NumberSmallStep { get { return this["NumberSmallStep"].GetValue<float>(); } set { this["NumberSmallStep"].SetValue<float>(value); } }
        public float NumberBigStep { get { return this["NumberBigStep"].GetValue<float>(); } set { this["NumberBigStep"].SetValue<float>(value); } }
        public DimensionValueToTextFormattingData NumberDisplayFormatting { get { return this[nameof(NumberDisplayFormatting)].As<DimensionValueToTextFormattingData>(); } set { this["NumberDisplayFormatting"] = value; } }
        public float NumberDisplayConversion { get { return this["NumberDisplayConversion"].GetValue<float>(); } set { this["NumberDisplayConversion"].SetValue<float>(value); } }
    }
    public class DimensionSettingsPreset : UEObject
    {
        public DimensionSettingsPreset(nint addr) : base(addr) { }
        public DimensionSettingsPreset() : base(0) { }
        public UEObject Settings { get { return this["Settings"]; } set { this["Settings"] = value; } }
    }
    public class FileLoadStrategy : UEObject
    {
        public FileLoadStrategy(nint addr) : base(addr) { }
        public FileLoadStrategy() : base(0) { }
        public ESaveLoadFileType FileType { get { return (ESaveLoadFileType)this["FileType"].GetValue<int>(); } set { this["FileType"].SetValue<int>((int)value); } }
        public bool bBackupOrSecondaryStrategy { get { return this["bBackupOrSecondaryStrategy"].Flag; } set { this["bBackupOrSecondaryStrategy"].Flag = value; } }
        public ELoadedFileStatus PrimaryFileStatus { get { return (ELoadedFileStatus)this["PrimaryFileStatus"].GetValue<int>(); } set { this["PrimaryFileStatus"].SetValue<int>((int)value); } }
        public EFileLoadPolicy PrimaryFileLoadPolicy { get { return (EFileLoadPolicy)this["PrimaryFileLoadPolicy"].GetValue<int>(); } set { this["PrimaryFileLoadPolicy"].SetValue<int>((int)value); } }
        public bool bPrimaryFileRequiresConfirmation { get { return this["bPrimaryFileRequiresConfirmation"].Flag; } set { this["bPrimaryFileRequiresConfirmation"].Flag = value; } }
        public ELoadedFileStatus SecondaryFileStatus { get { return (ELoadedFileStatus)this["SecondaryFileStatus"].GetValue<int>(); } set { this["SecondaryFileStatus"].SetValue<int>((int)value); } }
        public EFileLoadPolicy SecondaryFileLoadPolicy { get { return (EFileLoadPolicy)this["SecondaryFileLoadPolicy"].GetValue<int>(); } set { this["SecondaryFileLoadPolicy"].SetValue<int>((int)value); } }
        public bool bSecondaryFileRequiresConfirmation { get { return this["bSecondaryFileRequiresConfirmation"].Flag; } set { this["bSecondaryFileRequiresConfirmation"].Flag = value; } }
    }
    public class FileLoadResult : UEObject
    {
        public FileLoadResult(nint addr) : base(addr) { }
        public FileLoadResult() : base(0) { }
        public int SlotNumber { get { return this["SlotNumber"].GetValue<int>(); } set { this["SlotNumber"].SetValue<int>(value); } }
        public ESaveLoadFileType FileType { get { return (ESaveLoadFileType)this["FileType"].GetValue<int>(); } set { this["FileType"].SetValue<int>((int)value); } }
        public int FileTypeIndex { get { return this["FileTypeIndex"].GetValue<int>(); } set { this["FileTypeIndex"].SetValue<int>(value); } }
        public ELoadedFileStatus LoadStatus { get { return (ELoadedFileStatus)this["LoadStatus"].GetValue<int>(); } set { this["LoadStatus"].SetValue<int>((int)value); } }
        public ELoadedFileStatus CheckStatus { get { return (ELoadedFileStatus)this["CheckStatus"].GetValue<int>(); } set { this["CheckStatus"].SetValue<int>((int)value); } }
        public EFileLoadPolicy PrimaryPolicy { get { return (EFileLoadPolicy)this["PrimaryPolicy"].GetValue<int>(); } set { this["PrimaryPolicy"].SetValue<int>((int)value); } }
        public EFileLoadPolicy SecondaryPolicy { get { return (EFileLoadPolicy)this["SecondaryPolicy"].GetValue<int>(); } set { this["SecondaryPolicy"].SetValue<int>((int)value); } }
        public string Filename { get { return this["Filename"].ToString(); } set { /* String properties are read-only */ } }
        public DateTime DateTime { get { return this[nameof(DateTime)].As<DateTime>(); } set { this["DateTime"] = value; } }
        public float GameTimeInSeconds { get { return this["GameTimeInSeconds"].GetValue<float>(); } set { this["GameTimeInSeconds"].SetValue<float>(value); } }
        public int PlayerLevel { get { return this["PlayerLevel"].GetValue<int>(); } set { this["PlayerLevel"].SetValue<int>(value); } }
        public GameplayTag PlayerClass { get { return this[nameof(PlayerClass)].As<GameplayTag>(); } set { this["PlayerClass"] = value; } }
    }
    public class DimensionSaveGameData : UEObject
    {
        public DimensionSaveGameData(nint addr) : base(addr) { }
        public DimensionSaveGameData() : base(0) { }
        public int SlotNumber { get { return this["SlotNumber"].GetValue<int>(); } set { this["SlotNumber"].SetValue<int>(value); } }
        public List<byte> ItemStorageData { get { return this["ItemStorageData"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> InventoryData { get { return this["InventoryData"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> PlayerData { get { return this["PlayerData"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public List<byte> UserInterfaceData { get { return this["UserInterfaceData"].GetList<byte>(); } set { /* Arrays are read-only */ } }
        public string JsonString { get { return this["JsonString"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionRichWidgetRow : TableRowBase
    {
        public DimensionRichWidgetRow(nint addr) : base(addr) { }
        public DimensionRichWidgetRow() : base(0) { }
        public UEObject WidgetToDisplay { get { return this["WidgetToDisplay"]; } set { this["WidgetToDisplay"] = value; } }
    }
    public class DimensionResearchProjectRequirements : UEObject
    {
        public DimensionResearchProjectRequirements(nint addr) : base(addr) { }
        public DimensionResearchProjectRequirements() : base(0) { }
        public int Level { get { return this["Level"].GetValue<int>(); } set { this["Level"].SetValue<int>(value); } }
        public DimensionRequirementsData Requirements { get { return this[nameof(Requirements)].As<DimensionRequirementsData>(); } set { this["Requirements"] = value; } }
    }
    public class DimensionResearchProjectRewards : UEObject
    {
        public DimensionResearchProjectRewards(nint addr) : base(addr) { }
        public DimensionResearchProjectRewards() : base(0) { }
        public Array<DimensionItemHandleCount> RewardsItems { get { return new Array<DimensionItemHandleCount>(this["RewardsItems"]); } set { this["RewardsItems"] = value; } }
        public DataTableRowHandle RewardItemBatchHandle { get { return this[nameof(RewardItemBatchHandle)].As<DataTableRowHandle>(); } set { this["RewardItemBatchHandle"] = value; } }
        public Array<ProgressManagerRequest> ProgressManagerRequests { get { return new Array<ProgressManagerRequest>(this["ProgressManagerRequests"]); } set { this["ProgressManagerRequests"] = value; } }
    }
    public class DimensionResearchProjectData : DimensionAssetLoadingData
    {
        public DimensionResearchProjectData(nint addr) : base(addr) { }
        public DimensionResearchProjectData() : base(0) { }
        public GameplayTag Category { get { return this[nameof(Category)].As<GameplayTag>(); } set { this["Category"] = value; } }
        public EDimensionResearchProjectType ProjectType { get { return (EDimensionResearchProjectType)this["ProjectType"].GetValue<int>(); } set { this["ProjectType"].SetValue<int>((int)value); } }
        public Array<DataTableRowHandle> ResearchedItemHandles { get { return new Array<DataTableRowHandle>(this["ResearchedItemHandles"]); } set { this["ResearchedItemHandles"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public float TimeUnitsToComplete { get { return this["TimeUnitsToComplete"].GetValue<float>(); } set { this["TimeUnitsToComplete"].SetValue<float>(value); } }
        public int MaxResearchCount { get { return this["MaxResearchCount"].GetValue<int>(); } set { this["MaxResearchCount"].SetValue<int>(value); } }
        public DimensionResearchProjectRequirements StartRequirements { get { return this[nameof(StartRequirements)].As<DimensionResearchProjectRequirements>(); } set { this["StartRequirements"] = value; } }
        public DimensionRequirementsData VisibilityRequirements { get { return this[nameof(VisibilityRequirements)].As<DimensionRequirementsData>(); } set { this["VisibilityRequirements"] = value; } }
        public DimensionResearchProjectRewards Rewards { get { return this[nameof(Rewards)].As<DimensionResearchProjectRewards>(); } set { this["Rewards"] = value; } }
    }
    public class DimensionResearchCategoryData : DimensionAssetLoadingData
    {
        public DimensionResearchCategoryData(nint addr) : base(addr) { }
        public DimensionResearchCategoryData() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public float DefaultTimeUnitsToComplete { get { return this["DefaultTimeUnitsToComplete"].GetValue<float>(); } set { this["DefaultTimeUnitsToComplete"].SetValue<float>(value); } }
        public List<string> ProjectsOrder { get { return this["ProjectsOrder"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class ResearchProjectInstance : UEObject
    {
        public ResearchProjectInstance(nint addr) : base(addr) { }
        public ResearchProjectInstance() : base(0) { }
        public DataTableRowHandle ProjectHandle { get { return this[nameof(ProjectHandle)].As<DataTableRowHandle>(); } set { this["ProjectHandle"] = value; } }
        public float TimeUnits { get { return this["TimeUnits"].GetValue<float>(); } set { this["TimeUnits"].SetValue<float>(value); } }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
    }
    public class ResearchSortingRule : UEObject
    {
        public ResearchSortingRule(nint addr) : base(addr) { }
        public ResearchSortingRule() : base(0) { }
        public EResearchSortingType SortingType { get { return (EResearchSortingType)this["SortingType"].GetValue<int>(); } set { this["SortingType"].SetValue<int>((int)value); } }
        public ESortingOrder Order { get { return (ESortingOrder)this["Order"].GetValue<int>(); } set { this["Order"].SetValue<int>((int)value); } }
    }
    public class ResearchSortingDefinition : UEObject
    {
        public ResearchSortingDefinition(nint addr) : base(addr) { }
        public ResearchSortingDefinition() : base(0) { }
        public Array<ResearchSortingRule> SortingRules { get { return new Array<ResearchSortingRule>(this["SortingRules"]); } set { this["SortingRules"] = value; } }
        public EnumArray<EDimensionResearchProjectStatus> StatusGroups { get { return new EnumArray<EDimensionResearchProjectStatus>(this["StatusGroups"]); } set { this["StatusGroups"] = value; } }
        public bool bLimitToStatusGroupsOnly { get { return this["bLimitToStatusGroupsOnly"].Flag; } set { this["bLimitToStatusGroupsOnly"].Flag = value; } }
    }
    public class SaveLoadResearchProjectInstance : UEObject
    {
        public SaveLoadResearchProjectInstance(nint addr) : base(addr) { }
        public SaveLoadResearchProjectInstance() : base(0) { }
        public float TimeUnits { get { return this["TimeUnits"].GetValue<float>(); } set { this["TimeUnits"].SetValue<float>(value); } }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public string ProjectHandle { get { return this["ProjectHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyProjectHandle { get { return this[nameof(ProxyProjectHandle)].As<DataTableRowHandle>(); } set { this["ProxyProjectHandle"] = value; } }
    }
    public class RecoilDebugEntry : UEObject
    {
        public RecoilDebugEntry(nint addr) : base(addr) { }
        public RecoilDebugEntry() : base(0) { }
        public int Stage { get { return this["Stage"].GetValue<int>(); } set { this["Stage"].SetValue<int>(value); } }
        public float DeltaTime { get { return this["DeltaTime"].GetValue<float>(); } set { this["DeltaTime"].SetValue<float>(value); } }
        public float CameraValue { get { return this["CameraValue"].GetValue<float>(); } set { this["CameraValue"].SetValue<float>(value); } }
        public float ControllerValue { get { return this["ControllerValue"].GetValue<float>(); } set { this["ControllerValue"].SetValue<float>(value); } }
    }
    public class RecoilDebugPoints : UEObject
    {
        public RecoilDebugPoints(nint addr) : base(addr) { }
        public RecoilDebugPoints() : base(0) { }
        public Array<Vector2D> Points { get { return new Array<Vector2D>(this["Points"]); } set { this["Points"] = value; } }
        public Array<Vector2D> RecoilPoints { get { return new Array<Vector2D>(this["RecoilPoints"]); } set { this["RecoilPoints"] = value; } }
        public Array<Vector2D> SettlingPoints { get { return new Array<Vector2D>(this["SettlingPoints"]); } set { this["SettlingPoints"] = value; } }
    }
    public class RecoilDebugAggregator : UEObject
    {
        public RecoilDebugAggregator(nint addr) : base(addr) { }
        public RecoilDebugAggregator() : base(0) { }
        public Array<RecoilDebugEntry> DebugEntries { get { return new Array<RecoilDebugEntry>(this["DebugEntries"]); } set { this["DebugEntries"] = value; } }
        public UEObject RecoilPointsMap { get { return this["RecoilPointsMap"]; } set { this["RecoilPointsMap"] = value; } }
    }
    public class RecoilData : UEObject
    {
        public RecoilData(nint addr) : base(addr) { }
        public RecoilData() : base(0) { }
        public Vector InitialValue { get { return this[nameof(InitialValue)].As<Vector>(); } set { this["InitialValue"] = value; } }
        public Vector CurrentValue { get { return this[nameof(CurrentValue)].As<Vector>(); } set { this["CurrentValue"] = value; } }
        public Vector PreviousCurrentValue { get { return this[nameof(PreviousCurrentValue)].As<Vector>(); } set { this["PreviousCurrentValue"] = value; } }
        public float EaseTimestamp { get { return this["EaseTimestamp"].GetValue<float>(); } set { this["EaseTimestamp"].SetValue<float>(value); } }
        public float EaseValue { get { return this["EaseValue"].GetValue<float>(); } set { this["EaseValue"].SetValue<float>(value); } }
    }
    public class RecoilProfile : TableRowBase
    {
        public RecoilProfile(nint addr) : base(addr) { }
        public RecoilProfile() : base(0) { }
        public float HorizontalRecoilReturnScale { get { return this["HorizontalRecoilReturnScale"].GetValue<float>(); } set { this["HorizontalRecoilReturnScale"].SetValue<float>(value); } }
        public float RecoilReturnEaseScale { get { return this["RecoilReturnEaseScale"].GetValue<float>(); } set { this["RecoilReturnEaseScale"].SetValue<float>(value); } }
        public float SettlingMargin { get { return this["SettlingMargin"].GetValue<float>(); } set { this["SettlingMargin"].SetValue<float>(value); } }
        public float GamepadRecoilScale { get { return this["GamepadRecoilScale"].GetValue<float>(); } set { this["GamepadRecoilScale"].SetValue<float>(value); } }
        public float MinimumSettlingSpeed { get { return this["MinimumSettlingSpeed"].GetValue<float>(); } set { this["MinimumSettlingSpeed"].SetValue<float>(value); } }
        public float SettlingEaseTime { get { return this["SettlingEaseTime"].GetValue<float>(); } set { this["SettlingEaseTime"].SetValue<float>(value); } }
        public float RecoilSettlingScale { get { return this["RecoilSettlingScale"].GetValue<float>(); } set { this["RecoilSettlingScale"].SetValue<float>(value); } }
        public bool bAddRecoilWithEase { get { return this["bAddRecoilWithEase"].Flag; } set { this["bAddRecoilWithEase"].Flag = value; } }
        public bool bUseInputScaleWithRecoil { get { return this["bUseInputScaleWithRecoil"].Flag; } set { this["bUseInputScaleWithRecoil"].Flag = value; } }
        public CurveFloat RecoilReturnCurve { get { return this[nameof(RecoilReturnCurve)].As<CurveFloat>(); } set { this["RecoilReturnCurve"] = value; } }
        public CurveFloat RecoilSettlingCurve { get { return this[nameof(RecoilSettlingCurve)].As<CurveFloat>(); } set { this["RecoilSettlingCurve"] = value; } }
        public bool bOverrideRecoilPattern { get { return this["bOverrideRecoilPattern"].Flag; } set { this["bOverrideRecoilPattern"].Flag = value; } }
        public RecoilCurveVector DebugRecoilPattern { get { return this[nameof(DebugRecoilPattern)].As<RecoilCurveVector>(); } set { this["DebugRecoilPattern"] = value; } }
        public float RecoilReturnEaseThreshold { get { return this["RecoilReturnEaseThreshold"].GetValue<float>(); } set { this["RecoilReturnEaseThreshold"].SetValue<float>(value); } }
    }
    public class DimensionRandomStream : RandomStream
    {
        public DimensionRandomStream(nint addr) : base(addr) { }
        public DimensionRandomStream() : base(0) { }
    }
    public class ValueCalculation : UEObject
    {
        public ValueCalculation(nint addr) : base(addr) { }
        public ValueCalculation() : base(0) { }
    }
    public class DimensionRandomCategory : UEObject
    {
        public DimensionRandomCategory(nint addr) : base(addr) { }
        public DimensionRandomCategory() : base(0) { }
        public ActionModifiers TypeAndCategoryTags { get { return this[nameof(TypeAndCategoryTags)].As<ActionModifiers>(); } set { this["TypeAndCategoryTags"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public float BaseThresholdModifier { get { return this["BaseThresholdModifier"].GetValue<float>(); } set { this["BaseThresholdModifier"].SetValue<float>(value); } }
        public float MaxThresholdModifier { get { return this["MaxThresholdModifier"].GetValue<float>(); } set { this["MaxThresholdModifier"].SetValue<float>(value); } }
        public float ThresholdIncrement { get { return this["ThresholdIncrement"].GetValue<float>(); } set { this["ThresholdIncrement"].SetValue<float>(value); } }
        public bool bResetThresholdBonus { get { return this["bResetThresholdBonus"].Flag; } set { this["bResetThresholdBonus"].Flag = value; } }
        public ValueCalculation ThresholdCalculation { get { return this[nameof(ThresholdCalculation)].As<ValueCalculation>(); } set { this["ThresholdCalculation"] = value; } }
        public float BaseRollModifier { get { return this["BaseRollModifier"].GetValue<float>(); } set { this["BaseRollModifier"].SetValue<float>(value); } }
        public float MaxRollModifier { get { return this["MaxRollModifier"].GetValue<float>(); } set { this["MaxRollModifier"].SetValue<float>(value); } }
        public float RollIncrement { get { return this["RollIncrement"].GetValue<float>(); } set { this["RollIncrement"].SetValue<float>(value); } }
        public bool bResetRollBonus { get { return this["bResetRollBonus"].Flag; } set { this["bResetRollBonus"].Flag = value; } }
        public ValueCalculation RollCalculation { get { return this[nameof(RollCalculation)].As<ValueCalculation>(); } set { this["RollCalculation"] = value; } }
        public float BaseQuantityModifier { get { return this["BaseQuantityModifier"].GetValue<float>(); } set { this["BaseQuantityModifier"].SetValue<float>(value); } }
        public ValueCalculation QuantityCalculation { get { return this[nameof(QuantityCalculation)].As<ValueCalculation>(); } set { this["QuantityCalculation"] = value; } }
        public float BaseChanceModifier { get { return this["BaseChanceModifier"].GetValue<float>(); } set { this["BaseChanceModifier"].SetValue<float>(value); } }
        public ValueCalculation ChanceCalculation { get { return this[nameof(ChanceCalculation)].As<ValueCalculation>(); } set { this["ChanceCalculation"] = value; } }
        public int SuccessCounter { get { return this["SuccessCounter"].GetValue<int>(); } set { this["SuccessCounter"].SetValue<int>(value); } }
        public int FailCounter { get { return this["FailCounter"].GetValue<int>(); } set { this["FailCounter"].SetValue<int>(value); } }
    }
    public class DimensionQuestConditionQuery : UEObject
    {
        public DimensionQuestConditionQuery(nint addr) : base(addr) { }
        public DimensionQuestConditionQuery() : base(0) { }
        public GameplayTagContainer DamageTagModifiers { get { return this[nameof(DamageTagModifiers)].As<GameplayTagContainer>(); } set { this["DamageTagModifiers"] = value; } }
        public GameplayTagContainer EnemyTagModifiers { get { return this[nameof(EnemyTagModifiers)].As<GameplayTagContainer>(); } set { this["EnemyTagModifiers"] = value; } }
        public GameplayTagContainer LocationTagModifiers { get { return this[nameof(LocationTagModifiers)].As<GameplayTagContainer>(); } set { this["LocationTagModifiers"] = value; } }
        public GameplayTagContainer PlayerTagModifiers { get { return this[nameof(PlayerTagModifiers)].As<GameplayTagContainer>(); } set { this["PlayerTagModifiers"] = value; } }
        public GameplayTagContainer PreRunEquippedTagModifiers { get { return this[nameof(PreRunEquippedTagModifiers)].As<GameplayTagContainer>(); } set { this["PreRunEquippedTagModifiers"] = value; } }
        public GameplayTagContainer EquippedTagModifiers { get { return this[nameof(EquippedTagModifiers)].As<GameplayTagContainer>(); } set { this["EquippedTagModifiers"] = value; } }
        public GameplayTagContainer PreRunInventoryTagModifiers { get { return this[nameof(PreRunInventoryTagModifiers)].As<GameplayTagContainer>(); } set { this["PreRunInventoryTagModifiers"] = value; } }
        public GameplayTagContainer InventoryTagModifiers { get { return this[nameof(InventoryTagModifiers)].As<GameplayTagContainer>(); } set { this["InventoryTagModifiers"] = value; } }
        public bool bIsCurrentlyInRun { get { return this["bIsCurrentlyInRun"].Flag; } set { this["bIsCurrentlyInRun"].Flag = value; } }
    }
    public class DimensionQuestConditionTemplate : TableRowBase
    {
        public DimensionQuestConditionTemplate(nint addr) : base(addr) { }
        public DimensionQuestConditionTemplate() : base(0) { }
        public DataTableRowHandle ConditionBaseHandle { get { return this[nameof(ConditionBaseHandle)].As<DataTableRowHandle>(); } set { this["ConditionBaseHandle"] = value; } }
    }
    public class DimensionQuestModifierTemplate : TableRowBase
    {
        public DimensionQuestModifierTemplate(nint addr) : base(addr) { }
        public DimensionQuestModifierTemplate() : base(0) { }
        public DataTableRowHandle ModifierBaseHandle { get { return this[nameof(ModifierBaseHandle)].As<DataTableRowHandle>(); } set { this["ModifierBaseHandle"] = value; } }
        public EQuestModifierType ModifierType { get { return (EQuestModifierType)this["ModifierType"].GetValue<int>(); } set { this["ModifierType"].SetValue<int>((int)value); } }
        public bool bCustomLevelTag { get { return this["bCustomLevelTag"].Flag; } set { this["bCustomLevelTag"].Flag = value; } }
        public GameplayTagContainer LevelTags { get { return this[nameof(LevelTags)].As<GameplayTagContainer>(); } set { this["LevelTags"] = value; } }
        public bool bUseSpecificArenaTags { get { return this["bUseSpecificArenaTags"].Flag; } set { this["bUseSpecificArenaTags"].Flag = value; } }
        public DimensionIntegerGenerator ArenaTagsCountGenerator { get { return this[nameof(ArenaTagsCountGenerator)].As<DimensionIntegerGenerator>(); } set { this["ArenaTagsCountGenerator"] = value; } }
        public GameplayTagContainer ArenaTags { get { return this[nameof(ArenaTags)].As<GameplayTagContainer>(); } set { this["ArenaTags"] = value; } }
    }
    public class DimensionIntegerGenerator : UEObject
    {
        public DimensionIntegerGenerator(nint addr) : base(addr) { }
        public DimensionIntegerGenerator() : base(0) { }
        public int MinValue { get { return this["MinValue"].GetValue<int>(); } set { this["MinValue"].SetValue<int>(value); } }
        public int MaxValue { get { return this["MaxValue"].GetValue<int>(); } set { this["MaxValue"].SetValue<int>(value); } }
        public int Increment { get { return this["Increment"].GetValue<int>(); } set { this["Increment"].SetValue<int>(value); } }
    }
    public class DimensionQuestObjectiveTemplate : TableRowBase
    {
        public DimensionQuestObjectiveTemplate(nint addr) : base(addr) { }
        public DimensionQuestObjectiveTemplate() : base(0) { }
        public DataTableRowHandle QuestObjectiveBaseHandle { get { return this[nameof(QuestObjectiveBaseHandle)].As<DataTableRowHandle>(); } set { this["QuestObjectiveBaseHandle"] = value; } }
        public bool bCustomizeObjective { get { return this["bCustomizeObjective"].Flag; } set { this["bCustomizeObjective"].Flag = value; } }
        public EQuestObjectiveType ObjectiveType { get { return (EQuestObjectiveType)this["ObjectiveType"].GetValue<int>(); } set { this["ObjectiveType"].SetValue<int>((int)value); } }
        public Array<ActionModifiers> EnemyTypeTags { get { return new Array<ActionModifiers>(this["EnemyTypeTags"]); } set { this["EnemyTypeTags"] = value; } }
        public bool bUseItemTags { get { return this["bUseItemTags"].Flag; } set { this["bUseItemTags"].Flag = value; } }
        public Array<DataTableRowHandle> ItemDataHandles { get { return new Array<DataTableRowHandle>(this["ItemDataHandles"]); } set { this["ItemDataHandles"] = value; } }
        public Array<ActionModifiers> ItemTypeOrCategoryTags { get { return new Array<ActionModifiers>(this["ItemTypeOrCategoryTags"]); } set { this["ItemTypeOrCategoryTags"] = value; } }
        public EnumArray<EItemAddReason> EligibleItemSources { get { return new EnumArray<EItemAddReason>(this["EligibleItemSources"]); } set { this["EligibleItemSources"] = value; } }
        public Array<DimensionAttributeRequirement> AttributeRequirements { get { return new Array<DimensionAttributeRequirement>(this["AttributeRequirements"]); } set { this["AttributeRequirements"] = value; } }
        public Array<ProgressManagerQuery> ProgressManagerQueries { get { return new Array<ProgressManagerQuery>(this["ProgressManagerQueries"]); } set { this["ProgressManagerQueries"] = value; } }
        public Array<ActionModifiers> CustomObjectiveTags { get { return new Array<ActionModifiers>(this["CustomObjectiveTags"]); } set { this["CustomObjectiveTags"] = value; } }
        public bool bCustomProgression { get { return this["bCustomProgression"].Flag; } set { this["bCustomProgression"].Flag = value; } }
        public bool bDeferredCount { get { return this["bDeferredCount"].Flag; } set { this["bDeferredCount"].Flag = value; } }
        public DimensionIntegerGenerator CountGenerator { get { return this[nameof(CountGenerator)].As<DimensionIntegerGenerator>(); } set { this["CountGenerator"] = value; } }
        public DimensionFloatGenerator PercentRequirementGenerator { get { return this[nameof(PercentRequirementGenerator)].As<DimensionFloatGenerator>(); } set { this["PercentRequirementGenerator"] = value; } }
        public bool bDisplayProgressOnlyAsCompleted { get { return this["bDisplayProgressOnlyAsCompleted"].Flag; } set { this["bDisplayProgressOnlyAsCompleted"].Flag = value; } }
        public bool bDisplayProgressAsPercent { get { return this["bDisplayProgressAsPercent"].Flag; } set { this["bDisplayProgressAsPercent"].Flag = value; } }
        public bool bDisplayPercentProgressNormalized { get { return this["bDisplayPercentProgressNormalized"].Flag; } set { this["bDisplayPercentProgressNormalized"].Flag = value; } }
        public bool bInstantComplete { get { return this["bInstantComplete"].Flag; } set { this["bInstantComplete"].Flag = value; } }
        public bool bRemoveAfterComplete { get { return this["bRemoveAfterComplete"].Flag; } set { this["bRemoveAfterComplete"].Flag = value; } }
        public bool bCustomConditions { get { return this["bCustomConditions"].Flag; } set { this["bCustomConditions"].Flag = value; } }
        public bool bAppendConditions { get { return this["bAppendConditions"].Flag; } set { this["bAppendConditions"].Flag = value; } }
        public int NumberOfConditions { get { return this["NumberOfConditions"].GetValue<int>(); } set { this["NumberOfConditions"].SetValue<int>(value); } }
        public bool bEnsureAtLeastOneRandomCondition { get { return this["bEnsureAtLeastOneRandomCondition"].Flag; } set { this["bEnsureAtLeastOneRandomCondition"].Flag = value; } }
        public Array<DataTableRowHandle> ConditionHandles { get { return new Array<DataTableRowHandle>(this["ConditionHandles"]); } set { this["ConditionHandles"] = value; } }
        public bool bCustomModifiers { get { return this["bCustomModifiers"].Flag; } set { this["bCustomModifiers"].Flag = value; } }
        public bool bAppendModifiers { get { return this["bAppendModifiers"].Flag; } set { this["bAppendModifiers"].Flag = value; } }
        public int NumberOfModifiers { get { return this["NumberOfModifiers"].GetValue<int>(); } set { this["NumberOfModifiers"].SetValue<int>(value); } }
        public bool bEnsureAtLeastOneRandomModifier { get { return this["bEnsureAtLeastOneRandomModifier"].Flag; } set { this["bEnsureAtLeastOneRandomModifier"].Flag = value; } }
        public Array<DataTableRowHandle> ModifiersHandles { get { return new Array<DataTableRowHandle>(this["ModifiersHandles"]); } set { this["ModifiersHandles"] = value; } }
    }
    public class DimensionQuestTemplate : TableRowBase
    {
        public DimensionQuestTemplate(nint addr) : base(addr) { }
        public DimensionQuestTemplate() : base(0) { }
        public DataTableRowHandle QuestBaseHandle { get { return this[nameof(QuestBaseHandle)].As<DataTableRowHandle>(); } set { this["QuestBaseHandle"] = value; } }
        public int NumberOfObjectives { get { return this["NumberOfObjectives"].GetValue<int>(); } set { this["NumberOfObjectives"].SetValue<int>(value); } }
        public bool bAllowDuplicates { get { return this["bAllowDuplicates"].Flag; } set { this["bAllowDuplicates"].Flag = value; } }
        public bool bTryEvenDistribution { get { return this["bTryEvenDistribution"].Flag; } set { this["bTryEvenDistribution"].Flag = value; } }
        public Array<DataTableRowHandle> ObjectiveHandles { get { return new Array<DataTableRowHandle>(this["ObjectiveHandles"]); } set { this["ObjectiveHandles"] = value; } }
        public Array<DataTableRowHandle> RewardHandles { get { return new Array<DataTableRowHandle>(this["RewardHandles"]); } set { this["RewardHandles"] = value; } }
    }
    public class DimensionQuestObjectiveProgressUpdate : UEObject
    {
        public DimensionQuestObjectiveProgressUpdate(nint addr) : base(addr) { }
        public DimensionQuestObjectiveProgressUpdate() : base(0) { }
        public bool bUseFlatValue { get { return this["bUseFlatValue"].Flag; } set { this["bUseFlatValue"].Flag = value; } }
        public float ProgressPercent { get { return this["ProgressPercent"].GetValue<float>(); } set { this["ProgressPercent"].SetValue<float>(value); } }
        public int ProgressAdded { get { return this["ProgressAdded"].GetValue<int>(); } set { this["ProgressAdded"].SetValue<int>(value); } }
        public float ActualProgressPercent { get { return this["ActualProgressPercent"].GetValue<float>(); } set { this["ActualProgressPercent"].SetValue<float>(value); } }
        public int ActualProgressAdded { get { return this["ActualProgressAdded"].GetValue<int>(); } set { this["ActualProgressAdded"].SetValue<int>(value); } }
    }
    public class DimensionQuestBoostDefinition : UEObject
    {
        public DimensionQuestBoostDefinition(nint addr) : base(addr) { }
        public DimensionQuestBoostDefinition() : base(0) { }
        public DataTableRowHandle BoostItemDataHandle { get { return this[nameof(BoostItemDataHandle)].As<DataTableRowHandle>(); } set { this["BoostItemDataHandle"] = value; } }
        public EQuestObjectiveType ObjectiveType { get { return (EQuestObjectiveType)this["ObjectiveType"].GetValue<int>(); } set { this["ObjectiveType"].SetValue<int>((int)value); } }
        public Array<DimensionQuestObjectiveProgressUpdate> ProgressBoosts { get { return new Array<DimensionQuestObjectiveProgressUpdate>(this["ProgressBoosts"]); } set { this["ProgressBoosts"] = value; } }
    }
    public class DimensionQuestBoostData : UEObject
    {
        public DimensionQuestBoostData(nint addr) : base(addr) { }
        public DimensionQuestBoostData() : base(0) { }
        public Array<DimensionQuestBoostDefinition> BoostDefinitions { get { return new Array<DimensionQuestBoostDefinition>(this["BoostDefinitions"]); } set { this["BoostDefinitions"] = value; } }
    }
    public class SaveLoadQuestObjective : UEObject
    {
        public SaveLoadQuestObjective(nint addr) : base(addr) { }
        public SaveLoadQuestObjective() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public int ObjectiveIndex { get { return this["ObjectiveIndex"].GetValue<int>(); } set { this["ObjectiveIndex"].SetValue<int>(value); } }
        public bool bCompleted { get { return this["bCompleted"].Flag; } set { this["bCompleted"].Flag = value; } }
        public int ActiveCount { get { return this["ActiveCount"].GetValue<int>(); } set { this["ActiveCount"].SetValue<int>(value); } }
        public int Progress { get { return this["Progress"].GetValue<int>(); } set { this["Progress"].SetValue<int>(value); } }
        public int PendingProgress { get { return this["PendingProgress"].GetValue<int>(); } set { this["PendingProgress"].SetValue<int>(value); } }
        public bool bCustomActiveCount { get { return this["bCustomActiveCount"].Flag; } set { this["bCustomActiveCount"].Flag = value; } }
    }
    public class SaveLoadQuestReward : UEObject
    {
        public SaveLoadQuestReward(nint addr) : base(addr) { }
        public SaveLoadQuestReward() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public string RewardHandle { get { return this["RewardHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyRewardHandle { get { return this[nameof(ProxyRewardHandle)].As<DataTableRowHandle>(); } set { this["ProxyRewardHandle"] = value; } }
    }
    public class SaveLoadQuestCondition : UEObject
    {
        public SaveLoadQuestCondition(nint addr) : base(addr) { }
        public SaveLoadQuestCondition() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public int ObjectiveIndex { get { return this["ObjectiveIndex"].GetValue<int>(); } set { this["ObjectiveIndex"].SetValue<int>(value); } }
        public string ConditionHandle { get { return this["ConditionHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyConditionHandle { get { return this[nameof(ProxyConditionHandle)].As<DataTableRowHandle>(); } set { this["ProxyConditionHandle"] = value; } }
    }
    public class SaveLoadQuestModifier : UEObject
    {
        public SaveLoadQuestModifier(nint addr) : base(addr) { }
        public SaveLoadQuestModifier() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public int ObjectiveIndex { get { return this["ObjectiveIndex"].GetValue<int>(); } set { this["ObjectiveIndex"].SetValue<int>(value); } }
        public string ModifierHandle { get { return this["ModifierHandle"].ToString(); } set { /* String properties are read-only */ } }
        public int ModifierTypeAsInt { get { return this["ModifierTypeAsInt"].GetValue<int>(); } set { this["ModifierTypeAsInt"].SetValue<int>(value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDisplayInGame { get { return this["bDisplayInGame"].Flag; } set { this["bDisplayInGame"].Flag = value; } }
        public List<string> CustomTagsStrings { get { return this["CustomTagsStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bCustomData { get { return this["bCustomData"].Flag; } set { this["bCustomData"].Flag = value; } }
        public string LevelTagString { get { return this["LevelTagString"].ToString(); } set { /* String properties are read-only */ } }
        public bool bSpecificArenasOnly { get { return this["bSpecificArenasOnly"].Flag; } set { this["bSpecificArenasOnly"].Flag = value; } }
        public List<string> ArenaTagsStrings { get { return this["ArenaTagsStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public DataTableRowHandle ProxyModifierHandle { get { return this[nameof(ProxyModifierHandle)].As<DataTableRowHandle>(); } set { this["ProxyModifierHandle"] = value; } }
    }
    public class SaveLoadAttributeRequirement : UEObject
    {
        public SaveLoadAttributeRequirement(nint addr) : base(addr) { }
        public SaveLoadAttributeRequirement() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public bool bIsLevelAttribute { get { return this["bIsLevelAttribute"].Flag; } set { this["bIsLevelAttribute"].Flag = value; } }
        public int RelationAsInt { get { return this["RelationAsInt"].GetValue<int>(); } set { this["RelationAsInt"].SetValue<int>(value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public float Precision { get { return this["Precision"].GetValue<float>(); } set { this["Precision"].SetValue<float>(value); } }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class SaveLoadCustomQuestObjective : UEObject
    {
        public SaveLoadCustomQuestObjective(nint addr) : base(addr) { }
        public SaveLoadCustomQuestObjective() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public int ObjectiveIndex { get { return this["ObjectiveIndex"].GetValue<int>(); } set { this["ObjectiveIndex"].SetValue<int>(value); } }
        public string ObjectiveHandle { get { return this["ObjectiveHandle"].ToString(); } set { /* String properties are read-only */ } }
        public int ObjectiveTypeAsInt { get { return this["ObjectiveTypeAsInt"].GetValue<int>(); } set { this["ObjectiveTypeAsInt"].SetValue<int>(value); } }
        public bool bCustomProgression { get { return this["bCustomProgression"].Flag; } set { this["bCustomProgression"].Flag = value; } }
        public bool bInfiniteCount { get { return this["bInfiniteCount"].Flag; } set { this["bInfiniteCount"].Flag = value; } }
        public bool bDeferredCount { get { return this["bDeferredCount"].Flag; } set { this["bDeferredCount"].Flag = value; } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public float PercentRequirement { get { return this["PercentRequirement"].GetValue<float>(); } set { this["PercentRequirement"].SetValue<float>(value); } }
        public bool bDisplayProgressAsPercent { get { return this["bDisplayProgressAsPercent"].Flag; } set { this["bDisplayProgressAsPercent"].Flag = value; } }
        public bool bDisplayPercentProgressNormalized { get { return this["bDisplayPercentProgressNormalized"].Flag; } set { this["bDisplayPercentProgressNormalized"].Flag = value; } }
        public bool bInstantComplete { get { return this["bInstantComplete"].Flag; } set { this["bInstantComplete"].Flag = value; } }
        public bool bRemoveAfterComplete { get { return this["bRemoveAfterComplete"].Flag; } set { this["bRemoveAfterComplete"].Flag = value; } }
        public bool bCompleted { get { return this["bCompleted"].Flag; } set { this["bCompleted"].Flag = value; } }
        public int ActiveCount { get { return this["ActiveCount"].GetValue<int>(); } set { this["ActiveCount"].SetValue<int>(value); } }
        public int Progress { get { return this["Progress"].GetValue<int>(); } set { this["Progress"].SetValue<int>(value); } }
        public int PendingProgress { get { return this["PendingProgress"].GetValue<int>(); } set { this["PendingProgress"].SetValue<int>(value); } }
        public bool bCustomActiveCount { get { return this["bCustomActiveCount"].Flag; } set { this["bCustomActiveCount"].Flag = value; } }
        public bool bCustomizedObjective { get { return this["bCustomizedObjective"].Flag; } set { this["bCustomizedObjective"].Flag = value; } }
        public List<string> RequiredEnemyStrings { get { return this["RequiredEnemyStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> AllowedEnemyStrings { get { return this["AllowedEnemyStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> BlockedEnemyStrings { get { return this["BlockedEnemyStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bCountUniqueTargetsOnly { get { return this["bCountUniqueTargetsOnly"].Flag; } set { this["bCountUniqueTargetsOnly"].Flag = value; } }
        public bool bUseItemTags { get { return this["bUseItemTags"].Flag; } set { this["bUseItemTags"].Flag = value; } }
        public string ItemDataHandle { get { return this["ItemDataHandle"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> RequiredItemStrings { get { return this["RequiredItemStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> AllowedItemStrings { get { return this["AllowedItemStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> BlockedItemStrings { get { return this["BlockedItemStrings"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<int> EligibleItemSourcesAsInts { get { return this["EligibleItemSourcesAsInts"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public SaveLoadAttributeRequirement AttributeRequirement { get { return this[nameof(AttributeRequirement)].As<SaveLoadAttributeRequirement>(); } set { this["AttributeRequirement"] = value; } }
        public SaveLoadProgressManagerQuery ProgressManagerQuery { get { return this[nameof(ProgressManagerQuery)].As<SaveLoadProgressManagerQuery>(); } set { this["ProgressManagerQuery"] = value; } }
        public DataTableRowHandle ProxyObjectiveHandle { get { return this[nameof(ProxyObjectiveHandle)].As<DataTableRowHandle>(); } set { this["ProxyObjectiveHandle"] = value; } }
        public DataTableRowHandle ProxyItemDataHandle { get { return this[nameof(ProxyItemDataHandle)].As<DataTableRowHandle>(); } set { this["ProxyItemDataHandle"] = value; } }
    }
    public class SaveLoadCustomQuest : SaveLoadQuest
    {
        public SaveLoadCustomQuest(nint addr) : base(addr) { }
        public SaveLoadCustomQuest() : base(0) { }
        public string TemplateHandle { get { return this["TemplateHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyTemplateHandle { get { return this[nameof(ProxyTemplateHandle)].As<DataTableRowHandle>(); } set { this["ProxyTemplateHandle"] = value; } }
    }
    public class SaveLoadQuest : UEObject
    {
        public SaveLoadQuest(nint addr) : base(addr) { }
        public SaveLoadQuest() : base(0) { }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public int TemplateSeed { get { return this["TemplateSeed"].GetValue<int>(); } set { this["TemplateSeed"].SetValue<int>(value); } }
        public bool bCompleted { get { return this["bCompleted"].Flag; } set { this["bCompleted"].Flag = value; } }
        public string SourceHandle { get { return this["SourceHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxySourceHandle { get { return this[nameof(ProxySourceHandle)].As<DataTableRowHandle>(); } set { this["ProxySourceHandle"] = value; } }
    }
    public class SaveLoadProgressManagerQueryEntry : UEObject
    {
        public SaveLoadProgressManagerQueryEntry(nint addr) : base(addr) { }
        public SaveLoadProgressManagerQueryEntry() : base(0) { }
        public int QueryTypeAsInt { get { return this["QueryTypeAsInt"].GetValue<int>(); } set { this["QueryTypeAsInt"].SetValue<int>(value); } }
        public string CategoryTag { get { return this["CategoryTag"].ToString(); } set { /* String properties are read-only */ } }
        public bool bExactCategoryMatch { get { return this["bExactCategoryMatch"].Flag; } set { this["bExactCategoryMatch"].Flag = value; } }
        public string KeyTag { get { return this["KeyTag"].ToString(); } set { /* String properties are read-only */ } }
        public bool bExactKeyMatch { get { return this["bExactKeyMatch"].Flag; } set { this["bExactKeyMatch"].Flag = value; } }
        public int RelationAsInt { get { return this["RelationAsInt"].GetValue<int>(); } set { this["RelationAsInt"].SetValue<int>(value); } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public bool bMatchingDataTypeOnly { get { return this["bMatchingDataTypeOnly"].Flag; } set { this["bMatchingDataTypeOnly"].Flag = value; } }
        public int DataTypeAsInt { get { return this["DataTypeAsInt"].GetValue<int>(); } set { this["DataTypeAsInt"].SetValue<int>(value); } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public string GameplayTagValue { get { return this["GameplayTagValue"].ToString(); } set { /* String properties are read-only */ } }
        public bool bExactValueMatch { get { return this["bExactValueMatch"].Flag; } set { this["bExactValueMatch"].Flag = value; } }
    }
    public class SaveLoadProgressManagerQuery : UEObject
    {
        public SaveLoadProgressManagerQuery(nint addr) : base(addr) { }
        public SaveLoadProgressManagerQuery() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public Array<SaveLoadProgressManagerQueryEntry> RequiredEntries { get { return new Array<SaveLoadProgressManagerQueryEntry>(this["RequiredEntries"]); } set { this["RequiredEntries"] = value; } }
        public Array<SaveLoadProgressManagerQueryEntry> AllowedEntries { get { return new Array<SaveLoadProgressManagerQueryEntry>(this["AllowedEntries"]); } set { this["AllowedEntries"] = value; } }
        public Array<SaveLoadProgressManagerQueryEntry> BlockedEntries { get { return new Array<SaveLoadProgressManagerQueryEntry>(this["BlockedEntries"]); } set { this["BlockedEntries"] = value; } }
    }
    public class DimensionPlayerAttribData : DimensionAttribData
    {
        public DimensionPlayerAttribData(nint addr) : base(addr) { }
        public DimensionPlayerAttribData() : base(0) { }
        public float WalkSpeed { get { return this["WalkSpeed"].GetValue<float>(); } set { this["WalkSpeed"].SetValue<float>(value); } }
        public float NormalSpeed { get { return this["NormalSpeed"].GetValue<float>(); } set { this["NormalSpeed"].SetValue<float>(value); } }
        public float SprintSpeed { get { return this["SprintSpeed"].GetValue<float>(); } set { this["SprintSpeed"].SetValue<float>(value); } }
        public float CrouchSpeed { get { return this["CrouchSpeed"].GetValue<float>(); } set { this["CrouchSpeed"].SetValue<float>(value); } }
        public float SlideSpeed { get { return this["SlideSpeed"].GetValue<float>(); } set { this["SlideSpeed"].SetValue<float>(value); } }
        public float Acceleration { get { return this["Acceleration"].GetValue<float>(); } set { this["Acceleration"].SetValue<float>(value); } }
        public float StrafeModifier { get { return this["StrafeModifier"].GetValue<float>(); } set { this["StrafeModifier"].SetValue<float>(value); } }
        public float MovementModifierOnTargeting { get { return this["MovementModifierOnTargeting"].GetValue<float>(); } set { this["MovementModifierOnTargeting"].SetValue<float>(value); } }
        public float SlowedModifier { get { return this["SlowedModifier"].GetValue<float>(); } set { this["SlowedModifier"].SetValue<float>(value); } }
        public float SnaredModifier { get { return this["SnaredModifier"].GetValue<float>(); } set { this["SnaredModifier"].SetValue<float>(value); } }
        public float OnHitMovementPenalty { get { return this["OnHitMovementPenalty"].GetValue<float>(); } set { this["OnHitMovementPenalty"].SetValue<float>(value); } }
        public float WaterMovementMultiplier { get { return this["WaterMovementMultiplier"].GetValue<float>(); } set { this["WaterMovementMultiplier"].SetValue<float>(value); } }
        public float StaminaRegenSpeed { get { return this["StaminaRegenSpeed"].GetValue<float>(); } set { this["StaminaRegenSpeed"].SetValue<float>(value); } }
        public float StaminaRegenDelay { get { return this["StaminaRegenDelay"].GetValue<float>(); } set { this["StaminaRegenDelay"].SetValue<float>(value); } }
        public float RunningStaminaCost { get { return this["RunningStaminaCost"].GetValue<float>(); } set { this["RunningStaminaCost"].SetValue<float>(value); } }
        public float SlidingStaminaCost { get { return this["SlidingStaminaCost"].GetValue<float>(); } set { this["SlidingStaminaCost"].SetValue<float>(value); } }
        public float StaminaOverdraw { get { return this["StaminaOverdraw"].GetValue<float>(); } set { this["StaminaOverdraw"].SetValue<float>(value); } }
        public float Resistance { get { return this["Resistance"].GetValue<float>(); } set { this["Resistance"].SetValue<float>(value); } }
        public float PhysicalResistance { get { return this["PhysicalResistance"].GetValue<float>(); } set { this["PhysicalResistance"].SetValue<float>(value); } }
        public float FireResistance { get { return this["FireResistance"].GetValue<float>(); } set { this["FireResistance"].SetValue<float>(value); } }
        public float EarthResistance { get { return this["EarthResistance"].GetValue<float>(); } set { this["EarthResistance"].SetValue<float>(value); } }
        public float WaterResistance { get { return this["WaterResistance"].GetValue<float>(); } set { this["WaterResistance"].SetValue<float>(value); } }
        public float AirResistance { get { return this["AirResistance"].GetValue<float>(); } set { this["AirResistance"].SetValue<float>(value); } }
        public float FireStatusMaxValue { get { return this["FireStatusMaxValue"].GetValue<float>(); } set { this["FireStatusMaxValue"].SetValue<float>(value); } }
        public float FireStatusRegenSpeed { get { return this["FireStatusRegenSpeed"].GetValue<float>(); } set { this["FireStatusRegenSpeed"].SetValue<float>(value); } }
        public float FireStatusRegenDelay { get { return this["FireStatusRegenDelay"].GetValue<float>(); } set { this["FireStatusRegenDelay"].SetValue<float>(value); } }
        public float FireStatusIncreaseMultiplier { get { return this["FireStatusIncreaseMultiplier"].GetValue<float>(); } set { this["FireStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float FireStatusImmunityThreshold { get { return this["FireStatusImmunityThreshold"].GetValue<float>(); } set { this["FireStatusImmunityThreshold"].SetValue<float>(value); } }
        public float EarthStatusMaxValue { get { return this["EarthStatusMaxValue"].GetValue<float>(); } set { this["EarthStatusMaxValue"].SetValue<float>(value); } }
        public float EarthStatusRegenSpeed { get { return this["EarthStatusRegenSpeed"].GetValue<float>(); } set { this["EarthStatusRegenSpeed"].SetValue<float>(value); } }
        public float EarthStatusRegenDelay { get { return this["EarthStatusRegenDelay"].GetValue<float>(); } set { this["EarthStatusRegenDelay"].SetValue<float>(value); } }
        public float EarthStatusIncreaseMultiplier { get { return this["EarthStatusIncreaseMultiplier"].GetValue<float>(); } set { this["EarthStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float EarthStatusImmunityThreshold { get { return this["EarthStatusImmunityThreshold"].GetValue<float>(); } set { this["EarthStatusImmunityThreshold"].SetValue<float>(value); } }
        public float WaterStatusMaxValue { get { return this["WaterStatusMaxValue"].GetValue<float>(); } set { this["WaterStatusMaxValue"].SetValue<float>(value); } }
        public float WaterStatusRegenSpeed { get { return this["WaterStatusRegenSpeed"].GetValue<float>(); } set { this["WaterStatusRegenSpeed"].SetValue<float>(value); } }
        public float WaterStatusRegenDelay { get { return this["WaterStatusRegenDelay"].GetValue<float>(); } set { this["WaterStatusRegenDelay"].SetValue<float>(value); } }
        public float WaterStatusIncreaseMultiplier { get { return this["WaterStatusIncreaseMultiplier"].GetValue<float>(); } set { this["WaterStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float WaterStatusImmunityThreshold { get { return this["WaterStatusImmunityThreshold"].GetValue<float>(); } set { this["WaterStatusImmunityThreshold"].SetValue<float>(value); } }
        public float AirStatusMaxValue { get { return this["AirStatusMaxValue"].GetValue<float>(); } set { this["AirStatusMaxValue"].SetValue<float>(value); } }
        public float AirStatusRegenSpeed { get { return this["AirStatusRegenSpeed"].GetValue<float>(); } set { this["AirStatusRegenSpeed"].SetValue<float>(value); } }
        public float AirStatusRegenDelay { get { return this["AirStatusRegenDelay"].GetValue<float>(); } set { this["AirStatusRegenDelay"].SetValue<float>(value); } }
        public float AirStatusIncreaseMultiplier { get { return this["AirStatusIncreaseMultiplier"].GetValue<float>(); } set { this["AirStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float AirStatusImmunityThreshold { get { return this["AirStatusImmunityThreshold"].GetValue<float>(); } set { this["AirStatusImmunityThreshold"].SetValue<float>(value); } }
        public float LightSpellCooldownMultiplier { get { return this["LightSpellCooldownMultiplier"].GetValue<float>(); } set { this["LightSpellCooldownMultiplier"].SetValue<float>(value); } }
        public float HeavySpellCooldownMultiplier { get { return this["HeavySpellCooldownMultiplier"].GetValue<float>(); } set { this["HeavySpellCooldownMultiplier"].SetValue<float>(value); } }
        public float MeleeCooldownMultiplier { get { return this["MeleeCooldownMultiplier"].GetValue<float>(); } set { this["MeleeCooldownMultiplier"].SetValue<float>(value); } }
        public float DashCooldownMultiplier { get { return this["DashCooldownMultiplier"].GetValue<float>(); } set { this["DashCooldownMultiplier"].SetValue<float>(value); } }
        public float DamageCooldownRequiredPerSecond { get { return this["DamageCooldownRequiredPerSecond"].GetValue<float>(); } set { this["DamageCooldownRequiredPerSecond"].SetValue<float>(value); } }
        public float LightSpellCostMultiplier { get { return this["LightSpellCostMultiplier"].GetValue<float>(); } set { this["LightSpellCostMultiplier"].SetValue<float>(value); } }
        public float HeavySpellCostMultiplier { get { return this["HeavySpellCostMultiplier"].GetValue<float>(); } set { this["HeavySpellCostMultiplier"].SetValue<float>(value); } }
        public float MeleeCostMultiplier { get { return this["MeleeCostMultiplier"].GetValue<float>(); } set { this["MeleeCostMultiplier"].SetValue<float>(value); } }
        public float DashCostMultiplier { get { return this["DashCostMultiplier"].GetValue<float>(); } set { this["DashCostMultiplier"].SetValue<float>(value); } }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public float DashLength { get { return this["DashLength"].GetValue<float>(); } set { this["DashLength"].SetValue<float>(value); } }
        public float MaxMadness { get { return this["MaxMadness"].GetValue<float>(); } set { this["MaxMadness"].SetValue<float>(value); } }
        public float MadnessMaxHealthDamage { get { return this["MadnessMaxHealthDamage"].GetValue<float>(); } set { this["MadnessMaxHealthDamage"].SetValue<float>(value); } }
        public float MadnessRegenSpeed { get { return this["MadnessRegenSpeed"].GetValue<float>(); } set { this["MadnessRegenSpeed"].SetValue<float>(value); } }
        public float MadnessRegenDelay { get { return this["MadnessRegenDelay"].GetValue<float>(); } set { this["MadnessRegenDelay"].SetValue<float>(value); } }
        public float MinGnosisLevel { get { return this["MinGnosisLevel"].GetValue<float>(); } set { this["MinGnosisLevel"].SetValue<float>(value); } }
        public float MaxGnosisLevel { get { return this["MaxGnosisLevel"].GetValue<float>(); } set { this["MaxGnosisLevel"].SetValue<float>(value); } }
    }
    public class DimensionPerkInterfaceData : UEObject
    {
        public DimensionPerkInterfaceData(nint addr) : base(addr) { }
        public DimensionPerkInterfaceData() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Info { get { return this["Info"].ToString(); } set { /* String properties are read-only */ } }
        public int Stacks { get { return this["Stacks"].GetValue<int>(); } set { this["Stacks"].SetValue<int>(value); } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public MaterialInterface Icon { get { return this[nameof(Icon)].As<MaterialInterface>(); } set { this["Icon"] = value; } }
        public bool bDisplayBar { get { return this["bDisplayBar"].Flag; } set { this["bDisplayBar"].Flag = value; } }
        public float CurrentBarValue { get { return this["CurrentBarValue"].GetValue<float>(); } set { this["CurrentBarValue"].SetValue<float>(value); } }
        public float PowerBarStartPosition { get { return this["PowerBarStartPosition"].GetValue<float>(); } set { this["PowerBarStartPosition"].SetValue<float>(value); } }
        public float PowerBarLength { get { return this["PowerBarLength"].GetValue<float>(); } set { this["PowerBarLength"].SetValue<float>(value); } }
        public float GodBarStartPosition { get { return this["GodBarStartPosition"].GetValue<float>(); } set { this["GodBarStartPosition"].SetValue<float>(value); } }
        public float GodBarLength { get { return this["GodBarLength"].GetValue<float>(); } set { this["GodBarLength"].SetValue<float>(value); } }
    }
    public class GridStruct : UEObject
    {
        public GridStruct(nint addr) : base(addr) { }
        public GridStruct() : base(0) { }
        public UEObject GridMap { get { return this["GridMap"]; } set { this["GridMap"] = value; } }
    }
    public class SpawnNodeEntry : UEObject
    {
        public SpawnNodeEntry(nint addr) : base(addr) { }
        public SpawnNodeEntry() : base(0) { }
        public DimensionSpawnNode SpawnNode { get { return this[nameof(SpawnNode)].As<DimensionSpawnNode>(); } set { this["SpawnNode"] = value; } }
        public string LeashName { get { return this["LeashName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class MissionSpawnNodeData : UEObject
    {
        public MissionSpawnNodeData(nint addr) : base(addr) { }
        public MissionSpawnNodeData() : base(0) { }
        public Array<SpawnNodeEntry> SpawnNodeEntries { get { return new Array<SpawnNodeEntry>(this["SpawnNodeEntries"]); } set { this["SpawnNodeEntries"] = value; } }
        public bool bActive { get { return this["bActive"].Flag; } set { this["bActive"].Flag = value; } }
    }
    public class MissionSpawnNodeGroup : UEObject
    {
        public MissionSpawnNodeGroup(nint addr) : base(addr) { }
        public MissionSpawnNodeGroup() : base(0) { }
        public Array<DimensionSpawnNode> SpawnNodes { get { return new Array<DimensionSpawnNode>(this["SpawnNodes"]); } set { this["SpawnNodes"] = value; } }
        public bool bActive { get { return this["bActive"].Flag; } set { this["bActive"].Flag = value; } }
    }
    public class DimensionMissionData : DimensionAssetData
    {
        public DimensionMissionData(nint addr) : base(addr) { }
        public DimensionMissionData() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public bool bNoObjectives { get { return this["bNoObjectives"].Flag; } set { this["bNoObjectives"].Flag = value; } }
        public Array<DataTableRowHandle> Objectives { get { return new Array<DataTableRowHandle>(this["Objectives"]); } set { this["Objectives"] = value; } }
        public UEObject RewardClass { get { return this["RewardClass"]; } set { this["RewardClass"] = value; } }
        public DataTableRowHandle SpawnDataHandle { get { return this[nameof(SpawnDataHandle)].As<DataTableRowHandle>(); } set { this["SpawnDataHandle"] = value; } }
        public bool bDespawnEnemiesOnReset { get { return this["bDespawnEnemiesOnReset"].Flag; } set { this["bDespawnEnemiesOnReset"].Flag = value; } }
        public bool bStandalone { get { return this["bStandalone"].Flag; } set { this["bStandalone"].Flag = value; } }
        public bool bPreventDefaultArenaSpawns { get { return this["bPreventDefaultArenaSpawns"].Flag; } set { this["bPreventDefaultArenaSpawns"].Flag = value; } }
        public bool bActivateOnEnterAreaVolume { get { return this["bActivateOnEnterAreaVolume"].Flag; } set { this["bActivateOnEnterAreaVolume"].Flag = value; } }
        public bool bResetWhenOutOfBounds { get { return this["bResetWhenOutOfBounds"].Flag; } set { this["bResetWhenOutOfBounds"].Flag = value; } }
        public bool bAllowReactivation { get { return this["bAllowReactivation"].Flag; } set { this["bAllowReactivation"].Flag = value; } }
        public bool bHidden { get { return this["bHidden"].Flag; } set { this["bHidden"].Flag = value; } }
        public bool bHasLimitedTime { get { return this["bHasLimitedTime"].Flag; } set { this["bHasLimitedTime"].Flag = value; } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public DimensionSpawnData SpawnData { get { return this[nameof(SpawnData)].As<DimensionSpawnData>(); } set { this["SpawnData"] = value; } }
    }
    public class DimensionMetaDataTags : UEObject
    {
        public DimensionMetaDataTags(nint addr) : base(addr) { }
        public DimensionMetaDataTags() : base(0) { }
        public string PropertyName { get { return this["PropertyName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject StringMetaTags { get { return this["StringMetaTags"]; } set { this["StringMetaTags"] = value; } }
        public UEObject FloatMetaTags { get { return this["FloatMetaTags"]; } set { this["FloatMetaTags"] = value; } }
    }
    public class DimensionMetaData : UEObject
    {
        public DimensionMetaData(nint addr) : base(addr) { }
        public DimensionMetaData() : base(0) { }
        public string ClassName { get { return this["ClassName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject MetaDataMap { get { return this["MetaDataMap"]; } set { this["MetaDataMap"] = value; } }
    }
    public class MeleeAttackData : UEObject
    {
        public MeleeAttackData(nint addr) : base(addr) { }
        public MeleeAttackData() : base(0) { }
        public GameplayTag AbilityEventTag { get { return this[nameof(AbilityEventTag)].As<GameplayTag>(); } set { this["AbilityEventTag"] = value; } }
    }
    public class MeleeShape : UEObject
    {
        public MeleeShape(nint addr) : base(addr) { }
        public MeleeShape() : base(0) { }
        public string ParentSocket { get { return this["ParentSocket"].ToString(); } set { /* String properties are read-only */ } }
        public SDK.Script.CoreUObject.Transform AttachTransform { get { return this[nameof(AttachTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["AttachTransform"] = value; } }
        public byte TraceShape { get { return this["TraceShape"].GetValue<byte>(); } set { this["TraceShape"].SetValue<byte>(value); } }
        public float ExtentX { get { return this["ExtentX"].GetValue<float>(); } set { this["ExtentX"].SetValue<float>(value); } }
        public float ExtentY { get { return this["ExtentY"].GetValue<float>(); } set { this["ExtentY"].SetValue<float>(value); } }
        public float ExtentZ { get { return this["ExtentZ"].GetValue<float>(); } set { this["ExtentZ"].SetValue<float>(value); } }
    }
    public class DimensionItemDataContainer : UEObject
    {
        public DimensionItemDataContainer(nint addr) : base(addr) { }
        public DimensionItemDataContainer() : base(0) { }
        public DimensionItemData ItemData { get { return this[nameof(ItemData)].As<DimensionItemData>(); } set { this["ItemData"] = value; } }
        public GameplayTag ItemTypeTag { get { return this[nameof(ItemTypeTag)].As<GameplayTag>(); } set { this["ItemTypeTag"] = value; } }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public bool bIsUsingSlot { get { return this["bIsUsingSlot"].Flag; } set { this["bIsUsingSlot"].Flag = value; } }
        public DateTime DateTimeAdded { get { return this[nameof(DateTimeAdded)].As<DateTime>(); } set { this["DateTimeAdded"] = value; } }
        public DimensionItem ItemInstance { get { return this[nameof(ItemInstance)].As<DimensionItem>(); } set { this["ItemInstance"] = value; } }
        public DimensionItemDataWrapper ItemDataWrapper { get { return this[nameof(ItemDataWrapper)].As<DimensionItemDataWrapper>(); } set { this["ItemDataWrapper"] = value; } }
        public int ItemCount { get { return this["ItemCount"].GetValue<int>(); } set { this["ItemCount"].SetValue<int>(value); } }
        public bool bStashed { get { return this["bStashed"].Flag; } set { this["bStashed"].Flag = value; } }
        public bool bPendingSave { get { return this["bPendingSave"].Flag; } set { this["bPendingSave"].Flag = value; } }
    }
    public class SaveLoadItemDataContainer : UEObject
    {
        public SaveLoadItemDataContainer(nint addr) : base(addr) { }
        public SaveLoadItemDataContainer() : base(0) { }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public int DetailsID { get { return this["DetailsID"].GetValue<int>(); } set { this["DetailsID"].SetValue<int>(value); } }
        public int ItemCount { get { return this["ItemCount"].GetValue<int>(); } set { this["ItemCount"].SetValue<int>(value); } }
        public bool bStashed { get { return this["bStashed"].Flag; } set { this["bStashed"].Flag = value; } }
        public DateTime DateTimeAdded { get { return this[nameof(DateTimeAdded)].As<DateTime>(); } set { this["DateTimeAdded"] = value; } }
        public string SourceHandle { get { return this["SourceHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxySourceHandle { get { return this[nameof(ProxySourceHandle)].As<DataTableRowHandle>(); } set { this["ProxySourceHandle"] = value; } }
    }
    public class DimensionValueToTextFormattingData : UEObject
    {
        public DimensionValueToTextFormattingData(nint addr) : base(addr) { }
        public DimensionValueToTextFormattingData() : base(0) { }
        public EDimensionDisplayParameterType ValueType { get { return (EDimensionDisplayParameterType)this["ValueType"].GetValue<int>(); } set { this["ValueType"].SetValue<int>((int)value); } }
        public byte RoundingMode { get { return this["RoundingMode"].GetValue<byte>(); } set { this["RoundingMode"].SetValue<byte>(value); } }
        public bool bAlwaysSign { get { return this["bAlwaysSign"].Flag; } set { this["bAlwaysSign"].Flag = value; } }
        public bool bUseGrouping { get { return this["bUseGrouping"].Flag; } set { this["bUseGrouping"].Flag = value; } }
        public int MinIntegralDigits { get { return this["MinIntegralDigits"].GetValue<int>(); } set { this["MinIntegralDigits"].SetValue<int>(value); } }
        public int MaxIntegralDigits { get { return this["MaxIntegralDigits"].GetValue<int>(); } set { this["MaxIntegralDigits"].SetValue<int>(value); } }
        public int MinFractionalDigits { get { return this["MinFractionalDigits"].GetValue<int>(); } set { this["MinFractionalDigits"].SetValue<int>(value); } }
        public int MaxFractionalDigits { get { return this["MaxFractionalDigits"].GetValue<int>(); } set { this["MaxFractionalDigits"].SetValue<int>(value); } }
    }
    public class DimensionBoosterEffectData : UEObject
    {
        public DimensionBoosterEffectData(nint addr) : base(addr) { }
        public DimensionBoosterEffectData() : base(0) { }
        public UEObject Effect { get { return this["Effect"]; } set { this["Effect"] = value; } }
        public UEObject Modifier { get { return this["Modifier"]; } set { this["Modifier"] = value; } }
        public UEObject Ability { get { return this["Ability"]; } set { this["Ability"] = value; } }
        public EPerkAbilityActivationType ApplyPolicy { get { return (EPerkAbilityActivationType)this["ApplyPolicy"].GetValue<int>(); } set { this["ApplyPolicy"].SetValue<int>((int)value); } }
        public EWeaponSlotSelectionPolicy WeaponSlotSelectionPolicy { get { return (EWeaponSlotSelectionPolicy)this["WeaponSlotSelectionPolicy"].GetValue<int>(); } set { this["WeaponSlotSelectionPolicy"].SetValue<int>((int)value); } }
    }
    public class DimensionBoosterDataDetails : DimensionItemDataDetails
    {
        public DimensionBoosterDataDetails(nint addr) : base(addr) { }
        public DimensionBoosterDataDetails() : base(0) { }
        public EBoosterType BoosterType { get { return (EBoosterType)this["BoosterType"].GetValue<int>(); } set { this["BoosterType"].SetValue<int>((int)value); } }
        public UEObject InGameMaterial { get { return this["InGameMaterial"]; } set { this["InGameMaterial"] = value; } }
        public bool bCustomTrigger { get { return this["bCustomTrigger"].Flag; } set { this["bCustomTrigger"].Flag = value; } }
        public Array<DimensionBoosterEffectData> BoosterEffects { get { return new Array<DimensionBoosterEffectData>(this["BoosterEffects"]); } set { this["BoosterEffects"] = value; } }
        public Array<DimensionItemPropertyDisplayData> BoosterInterfaceProperties { get { return new Array<DimensionItemPropertyDisplayData>(this["BoosterInterfaceProperties"]); } set { this["BoosterInterfaceProperties"] = value; } }
        public bool bApplyOnEveryWeapon { get { return this["bApplyOnEveryWeapon"].Flag; } set { this["bApplyOnEveryWeapon"].Flag = value; } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public CurveTableRowHandle CoolDown { get { return this[nameof(CoolDown)].As<CurveTableRowHandle>(); } set { this["CoolDown"] = value; } }
        public int Uses { get { return this["Uses"].GetValue<int>(); } set { this["Uses"].SetValue<int>(value); } }
        public int MaxLevel { get { return this["MaxLevel"].GetValue<int>(); } set { this["MaxLevel"].SetValue<int>(value); } }
        public bool bHasCategoryIncludeRequirements { get { return this["bHasCategoryIncludeRequirements"].Flag; } set { this["bHasCategoryIncludeRequirements"].Flag = value; } }
        public DimensionRequirementsData IncludeRequirements { get { return this[nameof(IncludeRequirements)].As<DimensionRequirementsData>(); } set { this["IncludeRequirements"] = value; } }
        public bool bHasCategoryFilterRequirements { get { return this["bHasCategoryFilterRequirements"].Flag; } set { this["bHasCategoryFilterRequirements"].Flag = value; } }
        public DimensionRequirementsData FilterRequirements { get { return this[nameof(FilterRequirements)].As<DimensionRequirementsData>(); } set { this["FilterRequirements"] = value; } }
    }
    public class DimensionBoosterProphecyDataDetails : DimensionItemDataDetails
    {
        public DimensionBoosterProphecyDataDetails(nint addr) : base(addr) { }
        public DimensionBoosterProphecyDataDetails() : base(0) { }
        public DataTableRowHandle ProphecyDataHandle { get { return this[nameof(ProphecyDataHandle)].As<DataTableRowHandle>(); } set { this["ProphecyDataHandle"] = value; } }
        public Array<DataTableRowHandle> UnlockedBoosters { get { return new Array<DataTableRowHandle>(this["UnlockedBoosters"]); } set { this["UnlockedBoosters"] = value; } }
        public DimensionBoosterProphecy BoosterProphecy { get { return this[nameof(BoosterProphecy)].As<DimensionBoosterProphecy>(); } set { this["BoosterProphecy"] = value; } }
    }
    public class SaveLoadBoosterDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadBoosterDataDetails(nint addr) : base(addr) { }
        public SaveLoadBoosterDataDetails() : base(0) { }
    }
    public class SaveLoadBoosterProphecyDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadBoosterProphecyDataDetails(nint addr) : base(addr) { }
        public SaveLoadBoosterProphecyDataDetails() : base(0) { }
        public int ProphecyLevel { get { return this["ProphecyLevel"].GetValue<int>(); } set { this["ProphecyLevel"].SetValue<int>(value); } }
    }
    public class DimensionItemDropRule : UEObject
    {
        public DimensionItemDropRule(nint addr) : base(addr) { }
        public DimensionItemDropRule() : base(0) { }
        public string ID { get { return this["ID"].ToString(); } set { /* String properties are read-only */ } }
        public Array<DataTableRowHandle> AcceptedItemDataHandles { get { return new Array<DataTableRowHandle>(this["AcceptedItemDataHandles"]); } set { this["AcceptedItemDataHandles"] = value; } }
        public GameplayTagContainer AcceptedItemTags { get { return this[nameof(AcceptedItemTags)].As<GameplayTagContainer>(); } set { this["AcceptedItemTags"] = value; } }
        public bool bAcceptAllSources { get { return this["bAcceptAllSources"].Flag; } set { this["bAcceptAllSources"].Flag = value; } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public EItemDropPolicy DropPolicy { get { return (EItemDropPolicy)this["DropPolicy"].GetValue<int>(); } set { this["DropPolicy"].SetValue<int>((int)value); } }
        public float QuantityMultiplier { get { return this["QuantityMultiplier"].GetValue<float>(); } set { this["QuantityMultiplier"].SetValue<float>(value); } }
    }
    public class DimensionItemRollData : UEObject
    {
        public DimensionItemRollData(nint addr) : base(addr) { }
        public DimensionItemRollData() : base(0) { }
        public Actor OwnerActor { get { return this[nameof(OwnerActor)].As<Actor>(); } set { this["OwnerActor"] = value; } }
        public GameplayTag RarityTag { get { return this[nameof(RarityTag)].As<GameplayTag>(); } set { this["RarityTag"] = value; } }
        public bool bForceDefaultResults { get { return this["bForceDefaultResults"].Flag; } set { this["bForceDefaultResults"].Flag = value; } }
        public EItemQuantityScalingType QuantityScalingType { get { return (EItemQuantityScalingType)this["QuantityScalingType"].GetValue<int>(); } set { this["QuantityScalingType"].SetValue<int>((int)value); } }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public bool bEnsureItemsCanBeAdded { get { return this["bEnsureItemsCanBeAdded"].Flag; } set { this["bEnsureItemsCanBeAdded"].Flag = value; } }
        public EItemStashAccessPolicy StashAccessPolicy { get { return (EItemStashAccessPolicy)this["StashAccessPolicy"].GetValue<int>(); } set { this["StashAccessPolicy"].SetValue<int>((int)value); } }
        public int ItemLevel { get { return this["ItemLevel"].GetValue<int>(); } set { this["ItemLevel"].SetValue<int>(value); } }
    }
    public class DimensionGeneratedHandleInfo : UEObject
    {
        public DimensionGeneratedHandleInfo(nint addr) : base(addr) { }
        public DimensionGeneratedHandleInfo() : base(0) { }
        public SerializableDataTableRowHandle Handle { get { return this[nameof(Handle)].As<SerializableDataTableRowHandle>(); } set { this["Handle"] = value; } }
        public DimensionItemRollData ItemRollData { get { return this[nameof(ItemRollData)].As<DimensionItemRollData>(); } set { this["ItemRollData"] = value; } }
        public float RandomValue { get { return this["RandomValue"].GetValue<float>(); } set { this["RandomValue"].SetValue<float>(value); } }
    }
    public class DimensionPerkDataEntry : UEObject
    {
        public DimensionPerkDataEntry(nint addr) : base(addr) { }
        public DimensionPerkDataEntry() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public UEObject PerkClass { get { return this["PerkClass"]; } set { this["PerkClass"] = value; } }
    }
    public class DimensionPerkData : DimensionAssetLoadingData
    {
        public DimensionPerkData(nint addr) : base(addr) { }
        public DimensionPerkData() : base(0) { }
        public DimensionPerkDataEntry InherentPerk { get { return this[nameof(InherentPerk)].As<DimensionPerkDataEntry>(); } set { this["InherentPerk"] = value; } }
        public Array<DimensionPerkDataEntry> Perks { get { return new Array<DimensionPerkDataEntry>(this["Perks"]); } set { this["Perks"] = value; } }
    }
    public class DimensionRandomAttributeEntry : UEObject
    {
        public DimensionRandomAttributeEntry(nint addr) : base(addr) { }
        public DimensionRandomAttributeEntry() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public List<float> TierValues { get { return this["TierValues"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float Min { get { return this["Min"].GetValue<float>(); } set { this["Min"].SetValue<float>(value); } }
        public float Max { get { return this["Max"].GetValue<float>(); } set { this["Max"].SetValue<float>(value); } }
        public float Increment { get { return this["Increment"].GetValue<float>(); } set { this["Increment"].SetValue<float>(value); } }
        public bool bLowerIsBetter { get { return this["bLowerIsBetter"].Flag; } set { this["bLowerIsBetter"].Flag = value; } }
        public float GeneratedValue { get { return this["GeneratedValue"].GetValue<float>(); } set { this["GeneratedValue"].SetValue<float>(value); } }
    }
    public class DimensionWeaponAttribute : DimensionAssetLoadingData
    {
        public DimensionWeaponAttribute(nint addr) : base(addr) { }
        public DimensionWeaponAttribute() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayAttribute CategoryAttribute { get { return this[nameof(CategoryAttribute)].As<GameplayAttribute>(); } set { this["CategoryAttribute"] = value; } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public Array<DimensionRandomAttributeEntry> ModifiedAttributes { get { return new Array<DimensionRandomAttributeEntry>(this["ModifiedAttributes"]); } set { this["ModifiedAttributes"] = value; } }
        public UEObject GeneratedAttributeMap { get { return this["GeneratedAttributeMap"]; } set { this["GeneratedAttributeMap"] = value; } }
        public Array<GameplayAttribute> GeneratedAttributes { get { return new Array<GameplayAttribute>(this["GeneratedAttributes"]); } set { this["GeneratedAttributes"] = value; } }
    }
    public class DimensionWeaponDataDetails : DimensionItemDataDetails
    {
        public DimensionWeaponDataDetails(nint addr) : base(addr) { }
        public DimensionWeaponDataDetails() : base(0) { }
        public DataTableRowHandle WeaponDataHandle { get { return this[nameof(WeaponDataHandle)].As<DataTableRowHandle>(); } set { this["WeaponDataHandle"] = value; } }
        public DataTableRowHandle CustomRecoilProfileHandle { get { return this[nameof(CustomRecoilProfileHandle)].As<DataTableRowHandle>(); } set { this["CustomRecoilProfileHandle"] = value; } }
        public DataTableRowHandle SoundDataHandle { get { return this[nameof(SoundDataHandle)].As<DataTableRowHandle>(); } set { this["SoundDataHandle"] = value; } }
        public DataTableRowHandle PerkDataHandle { get { return this[nameof(PerkDataHandle)].As<DataTableRowHandle>(); } set { this["PerkDataHandle"] = value; } }
        public DataTableRowHandle BonusAttributeHandle { get { return this[nameof(BonusAttributeHandle)].As<DataTableRowHandle>(); } set { this["BonusAttributeHandle"] = value; } }
        public GameplayTag AmmoTypeTag { get { return this[nameof(AmmoTypeTag)].As<GameplayTag>(); } set { this["AmmoTypeTag"] = value; } }
        public Array<DimensionWeaponAttribute> GeneratedBonusAttributes { get { return new Array<DimensionWeaponAttribute>(this["GeneratedBonusAttributes"]); } set { this["GeneratedBonusAttributes"] = value; } }
        public UEObject GeneratedBonusAttributeMap { get { return this["GeneratedBonusAttributeMap"]; } set { this["GeneratedBonusAttributeMap"] = value; } }
    }
    public class DimensionRingDataDetails : DimensionAbilityItemDataDetails
    {
        public DimensionRingDataDetails(nint addr) : base(addr) { }
        public DimensionRingDataDetails() : base(0) { }
    }
    public class DimensionRelicDataDetails : DimensionAbilityItemDataDetails
    {
        public DimensionRelicDataDetails(nint addr) : base(addr) { }
        public DimensionRelicDataDetails() : base(0) { }
    }
    public class DimensionFetishDataDetails : DimensionAbilityItemDataDetails
    {
        public DimensionFetishDataDetails(nint addr) : base(addr) { }
        public DimensionFetishDataDetails() : base(0) { }
    }
    public class DimensionAbilityItemDataDetails : DimensionItemDataDetails
    {
        public DimensionAbilityItemDataDetails(nint addr) : base(addr) { }
        public DimensionAbilityItemDataDetails() : base(0) { }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
        public UEObject HUDIcon { get { return this["HUDIcon"]; } set { this["HUDIcon"] = value; } }
        public Array<DataTableRowHandle> AbilityInterfacePropertiesHandles { get { return new Array<DataTableRowHandle>(this["AbilityInterfacePropertiesHandles"]); } set { this["AbilityInterfacePropertiesHandles"] = value; } }
        public GameplayAbilitySpecHandle AbilitySpecHandle { get { return this[nameof(AbilitySpecHandle)].As<GameplayAbilitySpecHandle>(); } set { this["AbilitySpecHandle"] = value; } }
        public Array<DimensionItemPropertyDisplayData> GeneratedAbilityInterfaceProperties { get { return new Array<DimensionItemPropertyDisplayData>(this["GeneratedAbilityInterfaceProperties"]); } set { this["GeneratedAbilityInterfaceProperties"] = value; } }
    }
    public class DimensionQuestItemDataDetails : DimensionItemDataDetails
    {
        public DimensionQuestItemDataDetails(nint addr) : base(addr) { }
        public DimensionQuestItemDataDetails() : base(0) { }
        public bool bHasQuests { get { return this["bHasQuests"].Flag; } set { this["bHasQuests"].Flag = value; } }
        public bool bManualStart { get { return this["bManualStart"].Flag; } set { this["bManualStart"].Flag = value; } }
        public int QuestCount { get { return this["QuestCount"].GetValue<int>(); } set { this["QuestCount"].SetValue<int>(value); } }
        public Array<DataTableRowHandle> QuestHandles { get { return new Array<DataTableRowHandle>(this["QuestHandles"]); } set { this["QuestHandles"] = value; } }
        public Array<SerializableDataTableRowHandle> GeneratedQuestHandles { get { return new Array<SerializableDataTableRowHandle>(this["GeneratedQuestHandles"]); } set { this["GeneratedQuestHandles"] = value; } }
        public List<int> QuestIDs { get { return this["QuestIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bClaimedQuests { get { return this["bClaimedQuests"].Flag; } set { this["bClaimedQuests"].Flag = value; } }
    }
    public class DimensionItemMeshData : UEObject
    {
        public DimensionItemMeshData(nint addr) : base(addr) { }
        public DimensionItemMeshData() : base(0) { }
        public bool bUseCustomMesh { get { return this["bUseCustomMesh"].Flag; } set { this["bUseCustomMesh"].Flag = value; } }
        public UEObject ItemMeshPtr { get { return this["ItemMeshPtr"]; } set { this["ItemMeshPtr"] = value; } }
        public bool bUseCustomTransform { get { return this["bUseCustomTransform"].Flag; } set { this["bUseCustomTransform"].Flag = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public Array<UEObject> CustomMaterials { get { return new Array<UEObject>(this["CustomMaterials"]); } set { this["CustomMaterials"] = value; } }
    }
    public class DimensionItemDataDetails : DimensionAssetLoadingData
    {
        public DimensionItemDataDetails(nint addr) : base(addr) { }
        public DimensionItemDataDetails() : base(0) { }
        public bool bSkipValidation { get { return this["bSkipValidation"].Flag; } set { this["bSkipValidation"].Flag = value; } }
        public DataTableRowHandle ExtraDataHandle { get { return this[nameof(ExtraDataHandle)].As<DataTableRowHandle>(); } set { this["ExtraDataHandle"] = value; } }
        public bool bHasMesh { get { return this["bHasMesh"].Flag; } set { this["bHasMesh"].Flag = value; } }
        public UEObject ItemMeshPtr { get { return this["ItemMeshPtr"]; } set { this["ItemMeshPtr"] = value; } }
        public SDK.Script.CoreUObject.Transform DefaultInspectScreenTransform { get { return this[nameof(DefaultInspectScreenTransform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["DefaultInspectScreenTransform"] = value; } }
        public UEObject AlternativeMeshes { get { return this["AlternativeMeshes"]; } set { this["AlternativeMeshes"] = value; } }
        public bool bHasTierQuest { get { return this["bHasTierQuest"].Flag; } set { this["bHasTierQuest"].Flag = value; } }
        public DataTableRowHandle TierQuestHandle { get { return this[nameof(TierQuestHandle)].As<DataTableRowHandle>(); } set { this["TierQuestHandle"] = value; } }
        public UEObject AlternativeIcons { get { return this["AlternativeIcons"]; } set { this["AlternativeIcons"] = value; } }
        public UEObject ExtraTexts { get { return this["ExtraTexts"]; } set { this["ExtraTexts"] = value; } }
        public int TierQuestID { get { return this["TierQuestID"].GetValue<int>(); } set { this["TierQuestID"].SetValue<int>(value); } }
        public bool bPendingSave { get { return this["bPendingSave"].Flag; } set { this["bPendingSave"].Flag = value; } }
    }
    public class ItemProperties : DimensionAssetLoadingData
    {
        public ItemProperties(nint addr) : base(addr) { }
        public ItemProperties() : base(0) { }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public string Lore { get { return this["Lore"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag ItemCategoryTag { get { return this[nameof(ItemCategoryTag)].As<GameplayTag>(); } set { this["ItemCategoryTag"] = value; } }
        public GameplayTag RarityTag { get { return this[nameof(RarityTag)].As<GameplayTag>(); } set { this["RarityTag"] = value; } }
        public GameplayTagContainer CategoryTags { get { return this[nameof(CategoryTags)].As<GameplayTagContainer>(); } set { this["CategoryTags"] = value; } }
        public int MaxStacks { get { return this["MaxStacks"].GetValue<int>(); } set { this["MaxStacks"].SetValue<int>(value); } }
        public int MaxStacksPerSlot { get { return this["MaxStacksPerSlot"].GetValue<int>(); } set { this["MaxStacksPerSlot"].SetValue<int>(value); } }
        public EItemStacksPolicy StacksPolicy { get { return (EItemStacksPolicy)this["StacksPolicy"].GetValue<int>(); } set { this["StacksPolicy"].SetValue<int>((int)value); } }
        public int PerishableStacks { get { return this["PerishableStacks"].GetValue<int>(); } set { this["PerishableStacks"].SetValue<int>(value); } }
        public EItemStashPolicy StashPolicy { get { return (EItemStashPolicy)this["StashPolicy"].GetValue<int>(); } set { this["StashPolicy"].SetValue<int>((int)value); } }
        public int StacksAvailableInRun { get { return this["StacksAvailableInRun"].GetValue<int>(); } set { this["StacksAvailableInRun"].SetValue<int>(value); } }
        public int MaxStacksStashed { get { return this["MaxStacksStashed"].GetValue<int>(); } set { this["MaxStacksStashed"].SetValue<int>(value); } }
        public bool bTreatStacksAvailableInRunAsMaxStacks { get { return this["bTreatStacksAvailableInRunAsMaxStacks"].Flag; } set { this["bTreatStacksAvailableInRunAsMaxStacks"].Flag = value; } }
        public bool bOverrideNonSlot { get { return this["bOverrideNonSlot"].Flag; } set { this["bOverrideNonSlot"].Flag = value; } }
        public bool bShouldBeInstanced { get { return this["bShouldBeInstanced"].Flag; } set { this["bShouldBeInstanced"].Flag = value; } }
        public bool bAutoCreateInstance { get { return this["bAutoCreateInstance"].Flag; } set { this["bAutoCreateInstance"].Flag = value; } }
        public bool bClampDropStacks { get { return this["bClampDropStacks"].Flag; } set { this["bClampDropStacks"].Flag = value; } }
        public bool bShowPickupNotification { get { return this["bShowPickupNotification"].Flag; } set { this["bShowPickupNotification"].Flag = value; } }
        public bool bGrantWithDrop { get { return this["bGrantWithDrop"].Flag; } set { this["bGrantWithDrop"].Flag = value; } }
        public bool bGrantOnlyWithDrop { get { return this["bGrantOnlyWithDrop"].Flag; } set { this["bGrantOnlyWithDrop"].Flag = value; } }
        public bool bDropOnlyIfCanAddToInventory { get { return this["bDropOnlyIfCanAddToInventory"].Flag; } set { this["bDropOnlyIfCanAddToInventory"].Flag = value; } }
        public UEObject ItemDropClass { get { return this["ItemDropClass"]; } set { this["ItemDropClass"] = value; } }
        public int MaxStacksPerDrop { get { return this["MaxStacksPerDrop"].GetValue<int>(); } set { this["MaxStacksPerDrop"].SetValue<int>(value); } }
        public bool bForceSeparateDrop { get { return this["bForceSeparateDrop"].Flag; } set { this["bForceSeparateDrop"].Flag = value; } }
        public bool bDiscardExtraStacks { get { return this["bDiscardExtraStacks"].Flag; } set { this["bDiscardExtraStacks"].Flag = value; } }
        public float ProvidenceChanceMultiplier { get { return this["ProvidenceChanceMultiplier"].GetValue<float>(); } set { this["ProvidenceChanceMultiplier"].SetValue<float>(value); } }
        public ESaveLoadPriority SaveLoadPriority { get { return (ESaveLoadPriority)this["SaveLoadPriority"].GetValue<int>(); } set { this["SaveLoadPriority"].SetValue<int>((int)value); } }
    }
    public class DimensionItemData : DimensionAssetLoadingData
    {
        public DimensionItemData(nint addr) : base(addr) { }
        public DimensionItemData() : base(0) { }
        public UEObject ItemClass { get { return this["ItemClass"]; } set { this["ItemClass"] = value; } }
        public DataTableRowHandle ItemDetailsHandle { get { return this[nameof(ItemDetailsHandle)].As<DataTableRowHandle>(); } set { this["ItemDetailsHandle"] = value; } }
        public ItemProperties CustomItemProperties { get { return this[nameof(CustomItemProperties)].As<ItemProperties>(); } set { this["CustomItemProperties"] = value; } }
        public int DetailsID { get { return this["DetailsID"].GetValue<int>(); } set { this["DetailsID"].SetValue<int>(value); } }
    }
    public class EquippedSlotData : UEObject
    {
        public EquippedSlotData(nint addr) : base(addr) { }
        public EquippedSlotData() : base(0) { }
        public List<int> EquippedSlotIDs { get { return this["EquippedSlotIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public int MaxItemCount { get { return this["MaxItemCount"].GetValue<int>(); } set { this["MaxItemCount"].SetValue<int>(value); } }
        public bool bPendingSave { get { return this["bPendingSave"].Flag; } set { this["bPendingSave"].Flag = value; } }
    }
    public class InventoryEquipSlotDefinition : UEObject
    {
        public InventoryEquipSlotDefinition(nint addr) : base(addr) { }
        public InventoryEquipSlotDefinition() : base(0) { }
        public GameplayTag EquipTypeTag { get { return this[nameof(EquipTypeTag)].As<GameplayTag>(); } set { this["EquipTypeTag"] = value; } }
        public int EquipSlotIndex { get { return this["EquipSlotIndex"].GetValue<int>(); } set { this["EquipSlotIndex"].SetValue<int>(value); } }
        public bool bEnabledFromTheStart { get { return this["bEnabledFromTheStart"].Flag; } set { this["bEnabledFromTheStart"].Flag = value; } }
        public bool bPreventUnequip { get { return this["bPreventUnequip"].Flag; } set { this["bPreventUnequip"].Flag = value; } }
        public GameplayTagContainer AllowedTypeTags { get { return this[nameof(AllowedTypeTags)].As<GameplayTagContainer>(); } set { this["AllowedTypeTags"] = value; } }
        public GameplayTagContainer BlockedTypeTags { get { return this[nameof(BlockedTypeTags)].As<GameplayTagContainer>(); } set { this["BlockedTypeTags"] = value; } }
    }
    public class ItemWhitelistEntry : UEObject
    {
        public ItemWhitelistEntry(nint addr) : base(addr) { }
        public ItemWhitelistEntry() : base(0) { }
        public GameplayTag ItemTypeTag { get { return this[nameof(ItemTypeTag)].As<GameplayTag>(); } set { this["ItemTypeTag"] = value; } }
        public bool bWhitelistBySubtype { get { return this["bWhitelistBySubtype"].Flag; } set { this["bWhitelistBySubtype"].Flag = value; } }
        public GameplayTagContainer WhitelistedSubtypes { get { return this[nameof(WhitelistedSubtypes)].As<GameplayTagContainer>(); } set { this["WhitelistedSubtypes"] = value; } }
        public bool bWhitelistByRarity { get { return this["bWhitelistByRarity"].Flag; } set { this["bWhitelistByRarity"].Flag = value; } }
        public GameplayTag MinRarityTag { get { return this[nameof(MinRarityTag)].As<GameplayTag>(); } set { this["MinRarityTag"] = value; } }
        public GameplayTag MaxRarityTag { get { return this[nameof(MaxRarityTag)].As<GameplayTag>(); } set { this["MaxRarityTag"] = value; } }
    }
    public class SaveLoadItemHandleCount : UEObject
    {
        public SaveLoadItemHandleCount(nint addr) : base(addr) { }
        public SaveLoadItemHandleCount() : base(0) { }
        public int ItemCount { get { return this["ItemCount"].GetValue<int>(); } set { this["ItemCount"].SetValue<int>(value); } }
        public string ItemDataHandle { get { return this["ItemDataHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyItemDataHandle { get { return this[nameof(ProxyItemDataHandle)].As<DataTableRowHandle>(); } set { this["ProxyItemDataHandle"] = value; } }
    }
    public class SaveLoadItemDataPackage : UEObject
    {
        public SaveLoadItemDataPackage(nint addr) : base(addr) { }
        public SaveLoadItemDataPackage() : base(0) { }
        public int ItemCount { get { return this["ItemCount"].GetValue<int>(); } set { this["ItemCount"].SetValue<int>(value); } }
        public bool bShowNotification { get { return this["bShowNotification"].Flag; } set { this["bShowNotification"].Flag = value; } }
        public bool bScaledByRandomComponent { get { return this["bScaledByRandomComponent"].Flag; } set { this["bScaledByRandomComponent"].Flag = value; } }
        public string ItemDataHandle { get { return this["ItemDataHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxyItemDataHandle { get { return this[nameof(ProxyItemDataHandle)].As<DataTableRowHandle>(); } set { this["ProxyItemDataHandle"] = value; } }
    }
    public class SaveLoadItemDropAggregator : UEObject
    {
        public SaveLoadItemDropAggregator(nint addr) : base(addr) { }
        public SaveLoadItemDropAggregator() : base(0) { }
        public Vector SpawnLocation { get { return this[nameof(SpawnLocation)].As<Vector>(); } set { this["SpawnLocation"] = value; } }
        public string LevelTag { get { return this["LevelTag"].ToString(); } set { /* String properties are read-only */ } }
        public int AddReason { get { return this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>(value); } }
        public Array<SaveLoadItemDataPackage> ItemPackages { get { return new Array<SaveLoadItemDataPackage>(this["ItemPackages"]); } set { this["ItemPackages"] = value; } }
    }
    public class SaveLoadWeaponDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadWeaponDataDetails(nint addr) : base(addr) { }
        public SaveLoadWeaponDataDetails() : base(0) { }
    }
    public class SaveLoadRingDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadRingDataDetails(nint addr) : base(addr) { }
        public SaveLoadRingDataDetails() : base(0) { }
    }
    public class SaveLoadRelicDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadRelicDataDetails(nint addr) : base(addr) { }
        public SaveLoadRelicDataDetails() : base(0) { }
    }
    public class SaveLoadFetishDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadFetishDataDetails(nint addr) : base(addr) { }
        public SaveLoadFetishDataDetails() : base(0) { }
    }
    public class SaveLoadAbilityItemDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadAbilityItemDataDetails(nint addr) : base(addr) { }
        public SaveLoadAbilityItemDataDetails() : base(0) { }
    }
    public class SaveLoadQuestItemDataDetails : SaveLoadItemDataDetails
    {
        public SaveLoadQuestItemDataDetails(nint addr) : base(addr) { }
        public SaveLoadQuestItemDataDetails() : base(0) { }
        public List<int> QuestIDs { get { return this["QuestIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public bool bClaimedQuests { get { return this["bClaimedQuests"].Flag; } set { this["bClaimedQuests"].Flag = value; } }
        public List<string> GeneratedQuestHandles { get { return this["GeneratedQuestHandles"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<SerializableDataTableRowHandle> ProxyGeneratedQuestHandles { get { return new Array<SerializableDataTableRowHandle>(this["ProxyGeneratedQuestHandles"]); } set { this["ProxyGeneratedQuestHandles"] = value; } }
    }
    public class SaveLoadItemDataDetails : UEObject
    {
        public SaveLoadItemDataDetails(nint addr) : base(addr) { }
        public SaveLoadItemDataDetails() : base(0) { }
        public int DetailsID { get { return this["DetailsID"].GetValue<int>(); } set { this["DetailsID"].SetValue<int>(value); } }
        public int TierQuestID { get { return this["TierQuestID"].GetValue<int>(); } set { this["TierQuestID"].SetValue<int>(value); } }
        public string SourceHandle { get { return this["SourceHandle"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle ProxySourceHandle { get { return this[nameof(ProxySourceHandle)].As<DataTableRowHandle>(); } set { this["ProxySourceHandle"] = value; } }
    }
    public class SaveLoadEquippedSlotData : UEObject
    {
        public SaveLoadEquippedSlotData(nint addr) : base(addr) { }
        public SaveLoadEquippedSlotData() : base(0) { }
        public string EquipSlotTag { get { return this["EquipSlotTag"].ToString(); } set { /* String properties are read-only */ } }
        public List<int> EquippedSlotIDs { get { return this["EquippedSlotIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class DConditionalDrop : UEObject
    {
        public DConditionalDrop(nint addr) : base(addr) { }
        public DConditionalDrop() : base(0) { }
        public ActionModifiers PlayerModifiers { get { return this[nameof(PlayerModifiers)].As<ActionModifiers>(); } set { this["PlayerModifiers"] = value; } }
        public ActionModifiers InstigatorModifiers { get { return this[nameof(InstigatorModifiers)].As<ActionModifiers>(); } set { this["InstigatorModifiers"] = value; } }
        public ActionModifiers LastHitModifiers { get { return this[nameof(LastHitModifiers)].As<ActionModifiers>(); } set { this["LastHitModifiers"] = value; } }
        public DimensionItemBatch GlobalConditionalDrops { get { return this[nameof(GlobalConditionalDrops)].As<DimensionItemBatch>(); } set { this["GlobalConditionalDrops"] = value; } }
    }
    public class InteractionRequirements : TableRowBase
    {
        public InteractionRequirements(nint addr) : base(addr) { }
        public InteractionRequirements() : base(0) { }
        public DimensionItemRequirementSet ItemRequirementSet { get { return this[nameof(ItemRequirementSet)].As<DimensionItemRequirementSet>(); } set { this["ItemRequirementSet"] = value; } }
    }
    public class InteractionCachedData : UEObject
    {
        public InteractionCachedData(nint addr) : base(addr) { }
        public InteractionCachedData() : base(0) { }
    }
    public class DimensionKey : UEObject
    {
        public DimensionKey(nint addr) : base(addr) { }
        public DimensionKey() : base(0) { }
        public string KeyName { get { return this["KeyName"].ToString(); } set { /* String properties are read-only */ } }
        public string DisplayKeyName { get { return this["DisplayKeyName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsGamepadKey { get { return this["bIsGamepadKey"].Flag; } set { this["bIsGamepadKey"].Flag = value; } }
        public bool bIsMouseButton { get { return this["bIsMouseButton"].Flag; } set { this["bIsMouseButton"].Flag = value; } }
        public bool bIsTouch { get { return this["bIsTouch"].Flag; } set { this["bIsTouch"].Flag = value; } }
        public int AxisDimensions { get { return this["AxisDimensions"].GetValue<int>(); } set { this["AxisDimensions"].SetValue<int>(value); } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
        public string PlatformCategory { get { return this["PlatformCategory"].ToString(); } set { /* String properties are read-only */ } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class InputPlatformIconPair : UEObject
    {
        public InputPlatformIconPair(nint addr) : base(addr) { }
        public InputPlatformIconPair() : base(0) { }
        public EPlatformType Platform { get { return (EPlatformType)this["Platform"].GetValue<int>(); } set { this["Platform"].SetValue<int>((int)value); } }
        public UEObject Texture { get { return this["Texture"]; } set { this["Texture"] = value; } }
    }
    public class InputPlatformIconPairArray : UEObject
    {
        public InputPlatformIconPairArray(nint addr) : base(addr) { }
        public InputPlatformIconPairArray() : base(0) { }
        public Array<InputPlatformIconPair> PlatformIconsPairs { get { return new Array<InputPlatformIconPair>(this["PlatformIconsPairs"]); } set { this["PlatformIconsPairs"] = value; } }
    }
    public class InputKeyToPlatformIconsMap : UEObject
    {
        public InputKeyToPlatformIconsMap(nint addr) : base(addr) { }
        public InputKeyToPlatformIconsMap() : base(0) { }
        public UEObject KeyToPlatformIconMap { get { return this["KeyToPlatformIconMap"]; } set { this["KeyToPlatformIconMap"] = value; } }
    }
    public class PlatformInputTypeActionPair : UEObject
    {
        public PlatformInputTypeActionPair(nint addr) : base(addr) { }
        public PlatformInputTypeActionPair() : base(0) { }
        public EPlatformInputType PlatformInputType { get { return (EPlatformInputType)this["PlatformInputType"].GetValue<int>(); } set { this["PlatformInputType"].SetValue<int>((int)value); } }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class InputActionBuffer : UEObject
    {
        public InputActionBuffer(nint addr) : base(addr) { }
        public InputActionBuffer() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public float LastTimestamp { get { return this["LastTimestamp"].GetValue<float>(); } set { this["LastTimestamp"].SetValue<float>(value); } }
    }
    public class CustomInputActionInvalidationRule : UEObject
    {
        public CustomInputActionInvalidationRule(nint addr) : base(addr) { }
        public CustomInputActionInvalidationRule() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public byte InputEvent { get { return this["InputEvent"].GetValue<byte>(); } set { this["InputEvent"].SetValue<byte>(value); } }
    }
    public class InputActionBufferDefinition : UEObject
    {
        public InputActionBufferDefinition(nint addr) : base(addr) { }
        public InputActionBufferDefinition() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public bool bRemoveOnRelease { get { return this["bRemoveOnRelease"].Flag; } set { this["bRemoveOnRelease"].Flag = value; } }
    }
    public class CachedInputActionBuffer : UEObject
    {
        public CachedInputActionBuffer(nint addr) : base(addr) { }
        public CachedInputActionBuffer() : base(0) { }
    }
    public class InputActionCache : UEObject
    {
        public InputActionCache(nint addr) : base(addr) { }
        public InputActionCache() : base(0) { }
        public Array<InputActionDefinition> InputDefinitionsToCache { get { return new Array<InputActionDefinition>(this["InputDefinitionsToCache"]); } set { this["InputDefinitionsToCache"] = value; } }
        public Array<InputActionStateDefinition> InputStates { get { return new Array<InputActionStateDefinition>(this["InputStates"]); } set { this["InputStates"] = value; } }
        public UEObject PressTimestamps { get { return this["PressTimestamps"]; } set { this["PressTimestamps"] = value; } }
        public UEObject ReleaseTimestamps { get { return this["ReleaseTimestamps"]; } set { this["ReleaseTimestamps"] = value; } }
        public Array<InputActionStateDefinition> PendingSingleInputStates { get { return new Array<InputActionStateDefinition>(this["PendingSingleInputStates"]); } set { this["PendingSingleInputStates"] = value; } }
    }
    public class DimensionGamepadThumbstickProfile : UEObject
    {
        public DimensionGamepadThumbstickProfile(nint addr) : base(addr) { }
        public DimensionGamepadThumbstickProfile() : base(0) { }
        public bool bUseRadialDeadzone { get { return this["bUseRadialDeadzone"].Flag; } set { this["bUseRadialDeadzone"].Flag = value; } }
        public bool bNormalizeMinDeadzoneValues { get { return this["bNormalizeMinDeadzoneValues"].Flag; } set { this["bNormalizeMinDeadzoneValues"].Flag = value; } }
        public float EdgeDeadzone { get { return this["EdgeDeadzone"].GetValue<float>(); } set { this["EdgeDeadzone"].SetValue<float>(value); } }
        public bool bUseExponentCurve { get { return this["bUseExponentCurve"].Flag; } set { this["bUseExponentCurve"].Flag = value; } }
        public CurveFloat ExponentCurve { get { return this[nameof(ExponentCurve)].As<CurveFloat>(); } set { this["ExponentCurve"] = value; } }
        public float InputExponent { get { return this["InputExponent"].GetValue<float>(); } set { this["InputExponent"].SetValue<float>(value); } }
        public float InputMinValue { get { return this["InputMinValue"].GetValue<float>(); } set { this["InputMinValue"].SetValue<float>(value); } }
        public float FinalInputScale { get { return this["FinalInputScale"].GetValue<float>(); } set { this["FinalInputScale"].SetValue<float>(value); } }
        public float XToYSensitivityRatio { get { return this["XToYSensitivityRatio"].GetValue<float>(); } set { this["XToYSensitivityRatio"].SetValue<float>(value); } }
        public bool bApplyOuterDeadzoneInputBoosts { get { return this["bApplyOuterDeadzoneInputBoosts"].Flag; } set { this["bApplyOuterDeadzoneInputBoosts"].Flag = value; } }
        public Vector2D OuterDeadzoneInputBoostMax { get { return this[nameof(OuterDeadzoneInputBoostMax)].As<Vector2D>(); } set { this["OuterDeadzoneInputBoostMax"] = value; } }
        public Vector2D OuterDeadzoneInputBoostAcceleration { get { return this[nameof(OuterDeadzoneInputBoostAcceleration)].As<Vector2D>(); } set { this["OuterDeadzoneInputBoostAcceleration"] = value; } }
        public Vector2D OuterDeadzoneInputBoostAngle { get { return this[nameof(OuterDeadzoneInputBoostAngle)].As<Vector2D>(); } set { this["OuterDeadzoneInputBoostAngle"] = value; } }
        public Vector2D CurrentOuterDeadzoneInputBoost { get { return this[nameof(CurrentOuterDeadzoneInputBoost)].As<Vector2D>(); } set { this["CurrentOuterDeadzoneInputBoost"] = value; } }
        public float CenterDeadzone { get { return this["CenterDeadzone"].GetValue<float>(); } set { this["CenterDeadzone"].SetValue<float>(value); } }
        public float AxialDeadzone { get { return this["AxialDeadzone"].GetValue<float>(); } set { this["AxialDeadzone"].SetValue<float>(value); } }
        public Vector2D RawInput { get { return this[nameof(RawInput)].As<Vector2D>(); } set { this["RawInput"] = value; } }
        public Vector2D ScaledInput { get { return this[nameof(ScaledInput)].As<Vector2D>(); } set { this["ScaledInput"] = value; } }
        public Vector2D BoostedInput { get { return this[nameof(BoostedInput)].As<Vector2D>(); } set { this["BoostedInput"] = value; } }
        public bool bIsSnapped { get { return this["bIsSnapped"].Flag; } set { this["bIsSnapped"].Flag = value; } }
        public bool bIsInOuterDeadzoneBoostAngle { get { return this["bIsInOuterDeadzoneBoostAngle"].Flag; } set { this["bIsInOuterDeadzoneBoostAngle"].Flag = value; } }
        public Vector2D AverageInput { get { return this[nameof(AverageInput)].As<Vector2D>(); } set { this["AverageInput"] = value; } }
    }
    public class ActionCollection : UEObject
    {
        public ActionCollection(nint addr) : base(addr) { }
        public ActionCollection() : base(0) { }
        public List<string> Actions { get { return this["Actions"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class ConflictMapping : UEObject
    {
        public ConflictMapping(nint addr) : base(addr) { }
        public ConflictMapping() : base(0) { }
        public string Action { get { return this["Action"].ToString(); } set { /* String properties are read-only */ } }
        public bool bIsAxis { get { return this["bIsAxis"].Flag; } set { this["bIsAxis"].Flag = value; } }
        public float Scale { get { return this["Scale"].GetValue<float>(); } set { this["Scale"].SetValue<float>(value); } }
    }
    public class DimensionInitManagerData : UEObject
    {
        public DimensionInitManagerData(nint addr) : base(addr) { }
        public DimensionInitManagerData() : base(0) { }
        public GameplayTagContainer RequestedInitTags { get { return this[nameof(RequestedInitTags)].As<GameplayTagContainer>(); } set { this["RequestedInitTags"] = value; } }
        public UEObject DynamicDelegate { get { return this["DynamicDelegate"]; } set { this["DynamicDelegate"] = value; } }
    }
    public class InfluenceCone : InfluencePoint
    {
        public InfluenceCone(nint addr) : base(addr) { }
        public InfluenceCone() : base(0) { }
        public Rotator Direction { get { return this[nameof(Direction)].As<Rotator>(); } set { this["Direction"] = value; } }
        public float HalfInAngle { get { return this["HalfInAngle"].GetValue<float>(); } set { this["HalfInAngle"].SetValue<float>(value); } }
        public float HalfOutAngle { get { return this["HalfOutAngle"].GetValue<float>(); } set { this["HalfOutAngle"].SetValue<float>(value); } }
        public float AngularFalloffExponent { get { return this["AngularFalloffExponent"].GetValue<float>(); } set { this["AngularFalloffExponent"].SetValue<float>(value); } }
    }
    public class InfluenceSegment : InfluencePoint
    {
        public InfluenceSegment(nint addr) : base(addr) { }
        public InfluenceSegment() : base(0) { }
        public Vector SecondPoint { get { return this[nameof(SecondPoint)].As<Vector>(); } set { this["SecondPoint"] = value; } }
    }
    public class InfluencePoint : UEObject
    {
        public InfluencePoint(nint addr) : base(addr) { }
        public InfluencePoint() : base(0) { }
        public Vector Point { get { return this[nameof(Point)].As<Vector>(); } set { this["Point"] = value; } }
        public Actor SourceActor { get { return this[nameof(SourceActor)].As<Actor>(); } set { this["SourceActor"] = value; } }
        public GenericTeamId SourceTeamId { get { return this[nameof(SourceTeamId)].As<GenericTeamId>(); } set { this["SourceTeamId"] = value; } }
        public float InRange { get { return this["InRange"].GetValue<float>(); } set { this["InRange"].SetValue<float>(value); } }
        public float OutRange { get { return this["OutRange"].GetValue<float>(); } set { this["OutRange"].SetValue<float>(value); } }
        public float Score { get { return this["Score"].GetValue<float>(); } set { this["Score"].SetValue<float>(value); } }
        public float FalloffExponent { get { return this["FalloffExponent"].GetValue<float>(); } set { this["FalloffExponent"].SetValue<float>(value); } }
        public float MinAge { get { return this["MinAge"].GetValue<float>(); } set { this["MinAge"].SetValue<float>(value); } }
        public float MaxAge { get { return this["MaxAge"].GetValue<float>(); } set { this["MaxAge"].SetValue<float>(value); } }
        public float TimeDegradationExponent { get { return this["TimeDegradationExponent"].GetValue<float>(); } set { this["TimeDegradationExponent"].SetValue<float>(value); } }
        public float CreationTimestamp { get { return this["CreationTimestamp"].GetValue<float>(); } set { this["CreationTimestamp"].SetValue<float>(value); } }
    }
    public class DimensionHelpGuidePageData : TableRowBase
    {
        public DimensionHelpGuidePageData(nint addr) : base(addr) { }
        public DimensionHelpGuidePageData() : base(0) { }
        public string Title { get { return this["Title"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Thumbnail { get { return this["Thumbnail"]; } set { this["Thumbnail"] = value; } }
        public UEObject PageWidgetClass { get { return this["PageWidgetClass"]; } set { this["PageWidgetClass"] = value; } }
        public DimensionRequirementsData DisplayRequirements { get { return this[nameof(DisplayRequirements)].As<DimensionRequirementsData>(); } set { this["DisplayRequirements"] = value; } }
    }
    public class DimensionHelpGuideHotspotData : TableRowBase
    {
        public DimensionHelpGuideHotspotData(nint addr) : base(addr) { }
        public DimensionHelpGuideHotspotData() : base(0) { }
        public string Title { get { return this["Title"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public DataTableRowHandle PageHandle { get { return this[nameof(PageHandle)].As<DataTableRowHandle>(); } set { this["PageHandle"] = value; } }
        public DimensionRequirementsData DisplayRequirements { get { return this[nameof(DisplayRequirements)].As<DimensionRequirementsData>(); } set { this["DisplayRequirements"] = value; } }
    }
    public class DimensionHealthBarSharedData : UEObject
    {
        public DimensionHealthBarSharedData(nint addr) : base(addr) { }
        public DimensionHealthBarSharedData() : base(0) { }
        public Actor LastActor { get { return this[nameof(LastActor)].As<Actor>(); } set { this["LastActor"] = value; } }
        public float AccumulatedDamage { get { return this["AccumulatedDamage"].GetValue<float>(); } set { this["AccumulatedDamage"].SetValue<float>(value); } }
        public float LastDamageTimestamp { get { return this["LastDamageTimestamp"].GetValue<float>(); } set { this["LastDamageTimestamp"].SetValue<float>(value); } }
    }
    public class DimensionGameplaySpawnInfo : UEObject
    {
        public DimensionGameplaySpawnInfo(nint addr) : base(addr) { }
        public DimensionGameplaySpawnInfo() : base(0) { }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public EDimensionGameplayEnemyType Enemy { get { return (EDimensionGameplayEnemyType)this["Enemy"].GetValue<int>(); } set { this["Enemy"].SetValue<int>((int)value); } }
        public string Spawn { get { return this["Spawn"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject SpawnQuery { get { return this["SpawnQuery"]; } set { this["SpawnQuery"] = value; } }
        public string Leash { get { return this["Leash"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionGameplaySpawnedEnemyInfo : UEObject
    {
        public DimensionGameplaySpawnedEnemyInfo(nint addr) : base(addr) { }
        public DimensionGameplaySpawnedEnemyInfo() : base(0) { }
        public SDK.Script.CoreUObject.Guid ScenarioID { get { return this[nameof(ScenarioID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["ScenarioID"] = value; } }
        public SDK.Script.CoreUObject.Guid SpawnGroupID { get { return this[nameof(SpawnGroupID)].As<SDK.Script.CoreUObject.Guid>(); } set { this["SpawnGroupID"] = value; } }
        public List<string> EnemyTags { get { return this["EnemyTags"].GetStringList(); } set { /* Arrays are read-only */ } }
        public EEnemySpawnBehaviour SpawnBehaviour { get { return (EEnemySpawnBehaviour)this["SpawnBehaviour"].GetValue<int>(); } set { this["SpawnBehaviour"].SetValue<int>((int)value); } }
        public bool bDormant { get { return this["bDormant"].Flag; } set { this["bDormant"].Flag = value; } }
    }
    public class DimensionGameplayLevelData : TableRowBase
    {
        public DimensionGameplayLevelData(nint addr) : base(addr) { }
        public DimensionGameplayLevelData() : base(0) { }
        public int DifficultyPool { get { return this["DifficultyPool"].GetValue<int>(); } set { this["DifficultyPool"].SetValue<int>(value); } }
        public int MaxArenaDifficultyLevel { get { return this["MaxArenaDifficultyLevel"].GetValue<int>(); } set { this["MaxArenaDifficultyLevel"].SetValue<int>(value); } }
        public Array<DataTableRowHandle> Arenas { get { return new Array<DataTableRowHandle>(this["Arenas"]); } set { this["Arenas"] = value; } }
    }
    public class GameplayArenaData : DimensionAssetLoadingData
    {
        public GameplayArenaData(nint addr) : base(addr) { }
        public GameplayArenaData() : base(0) { }
        public GameplayTag ArenaTag { get { return this[nameof(ArenaTag)].As<GameplayTag>(); } set { this["ArenaTag"] = value; } }
        public string ArenaName { get { return this["ArenaName"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> ArenaDescriptions { get { return this["ArenaDescriptions"].GetStringList(); } set { /* Arrays are read-only */ } }
        public UEObject AmbientSoundPtr { get { return this["AmbientSoundPtr"]; } set { this["AmbientSoundPtr"] = value; } }
        public float AmbientSoundFadeInDuration { get { return this["AmbientSoundFadeInDuration"].GetValue<float>(); } set { this["AmbientSoundFadeInDuration"].SetValue<float>(value); } }
        public float AmbientSoundFadeOutDuration { get { return this["AmbientSoundFadeOutDuration"].GetValue<float>(); } set { this["AmbientSoundFadeOutDuration"].SetValue<float>(value); } }
    }
    public class DimensionGameplayAbilityTargetData : GameplayAbilityTargetData
    {
        public DimensionGameplayAbilityTargetData(nint addr) : base(addr) { }
        public DimensionGameplayAbilityTargetData() : base(0) { }
        public int Key { get { return this["Key"].GetValue<int>(); } set { this["Key"].SetValue<int>(value); } }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
    }
    public class DimensionGameplayEventCallbackData : UEObject
    {
        public DimensionGameplayEventCallbackData(nint addr) : base(addr) { }
        public DimensionGameplayEventCallbackData() : base(0) { }
    }
    public class DimensionPlayerStartOverrides : UEObject
    {
        public DimensionPlayerStartOverrides(nint addr) : base(addr) { }
        public DimensionPlayerStartOverrides() : base(0) { }
        public PlayerStart PlayerStartOverride { get { return this[nameof(PlayerStartOverride)].As<PlayerStart>(); } set { this["PlayerStartOverride"] = value; } }
        public bool bForceDisableGameplay { get { return this["bForceDisableGameplay"].Flag; } set { this["bForceDisableGameplay"].Flag = value; } }
    }
    public class DimensionEnemyTagConfig : UEObject
    {
        public DimensionEnemyTagConfig(nint addr) : base(addr) { }
        public DimensionEnemyTagConfig() : base(0) { }
        public UEObject ParticleEmitter { get { return this["ParticleEmitter"]; } set { this["ParticleEmitter"] = value; } }
        public Vector NextTagOffset { get { return this[nameof(NextTagOffset)].As<Vector>(); } set { this["NextTagOffset"] = value; } }
        public bool bDisappearInstantly { get { return this["bDisappearInstantly"].Flag; } set { this["bDisappearInstantly"].Flag = value; } }
    }
    public class DimensionEnemyAttribData : DimensionAttribData
    {
        public DimensionEnemyAttribData(nint addr) : base(addr) { }
        public DimensionEnemyAttribData() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public float MaxHealth { get { return this["MaxHealth"].GetValue<float>(); } set { this["MaxHealth"].SetValue<float>(value); } }
        public GameplayTagContainer AddedTags { get { return this[nameof(AddedTags)].As<GameplayTagContainer>(); } set { this["AddedTags"] = value; } }
        public float Resistance { get { return this["Resistance"].GetValue<float>(); } set { this["Resistance"].SetValue<float>(value); } }
        public float Vulnerability { get { return this["Vulnerability"].GetValue<float>(); } set { this["Vulnerability"].SetValue<float>(value); } }
        public float StatusResistance { get { return this["StatusResistance"].GetValue<float>(); } set { this["StatusResistance"].SetValue<float>(value); } }
        public float StatusVulnerability { get { return this["StatusVulnerability"].GetValue<float>(); } set { this["StatusVulnerability"].SetValue<float>(value); } }
        public float PhysicalResistance { get { return this["PhysicalResistance"].GetValue<float>(); } set { this["PhysicalResistance"].SetValue<float>(value); } }
        public float PhysicalVulnerability { get { return this["PhysicalVulnerability"].GetValue<float>(); } set { this["PhysicalVulnerability"].SetValue<float>(value); } }
        public float PhysicalStatusResistance { get { return this["PhysicalStatusResistance"].GetValue<float>(); } set { this["PhysicalStatusResistance"].SetValue<float>(value); } }
        public float PhysicalStatusVulnerability { get { return this["PhysicalStatusVulnerability"].GetValue<float>(); } set { this["PhysicalStatusVulnerability"].SetValue<float>(value); } }
        public float PhysicalStatusMaxValue { get { return this["PhysicalStatusMaxValue"].GetValue<float>(); } set { this["PhysicalStatusMaxValue"].SetValue<float>(value); } }
        public float PhysicalStatusRegenSpeed { get { return this["PhysicalStatusRegenSpeed"].GetValue<float>(); } set { this["PhysicalStatusRegenSpeed"].SetValue<float>(value); } }
        public float PhysicalStatusRegenDelay { get { return this["PhysicalStatusRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunSoftRegenDelay { get { return this["PhysicalStatusStunSoftRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusStunSoftRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunHardRegenDelay { get { return this["PhysicalStatusStunHardRegenDelay"].GetValue<float>(); } set { this["PhysicalStatusStunHardRegenDelay"].SetValue<float>(value); } }
        public float PhysicalStatusStunSoftReset { get { return this["PhysicalStatusStunSoftReset"].GetValue<float>(); } set { this["PhysicalStatusStunSoftReset"].SetValue<float>(value); } }
        public float PhysicalStatusStunHardReset { get { return this["PhysicalStatusStunHardReset"].GetValue<float>(); } set { this["PhysicalStatusStunHardReset"].SetValue<float>(value); } }
        public List<float> PhysicalStatusSoftThresholds { get { return this["PhysicalStatusSoftThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public List<float> PhysicalStatusHardThresholds { get { return this["PhysicalStatusHardThresholds"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public float PhysicalMinResistanceModifier { get { return this["PhysicalMinResistanceModifier"].GetValue<float>(); } set { this["PhysicalMinResistanceModifier"].SetValue<float>(value); } }
        public float PhysicalMinStatusResistanceModifier { get { return this["PhysicalMinStatusResistanceModifier"].GetValue<float>(); } set { this["PhysicalMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float FireResistance { get { return this["FireResistance"].GetValue<float>(); } set { this["FireResistance"].SetValue<float>(value); } }
        public float FireVulnerability { get { return this["FireVulnerability"].GetValue<float>(); } set { this["FireVulnerability"].SetValue<float>(value); } }
        public float FireStatusResistance { get { return this["FireStatusResistance"].GetValue<float>(); } set { this["FireStatusResistance"].SetValue<float>(value); } }
        public float FireStatusVulnerability { get { return this["FireStatusVulnerability"].GetValue<float>(); } set { this["FireStatusVulnerability"].SetValue<float>(value); } }
        public float FireStatusMaxValue { get { return this["FireStatusMaxValue"].GetValue<float>(); } set { this["FireStatusMaxValue"].SetValue<float>(value); } }
        public float FireStatusRegenSpeed { get { return this["FireStatusRegenSpeed"].GetValue<float>(); } set { this["FireStatusRegenSpeed"].SetValue<float>(value); } }
        public float FireStatusRegenDelay { get { return this["FireStatusRegenDelay"].GetValue<float>(); } set { this["FireStatusRegenDelay"].SetValue<float>(value); } }
        public float FireMinResistanceModifier { get { return this["FireMinResistanceModifier"].GetValue<float>(); } set { this["FireMinResistanceModifier"].SetValue<float>(value); } }
        public float FireMinStatusResistanceModifier { get { return this["FireMinStatusResistanceModifier"].GetValue<float>(); } set { this["FireMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float FireStatusIncreaseMultiplier { get { return this["FireStatusIncreaseMultiplier"].GetValue<float>(); } set { this["FireStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float FireStatusImmunityThreshold { get { return this["FireStatusImmunityThreshold"].GetValue<float>(); } set { this["FireStatusImmunityThreshold"].SetValue<float>(value); } }
        public float FireStatusPowerMultiplier { get { return this["FireStatusPowerMultiplier"].GetValue<float>(); } set { this["FireStatusPowerMultiplier"].SetValue<float>(value); } }
        public float EarthResistance { get { return this["EarthResistance"].GetValue<float>(); } set { this["EarthResistance"].SetValue<float>(value); } }
        public float EarthVulnerability { get { return this["EarthVulnerability"].GetValue<float>(); } set { this["EarthVulnerability"].SetValue<float>(value); } }
        public float EarthStatusResistance { get { return this["EarthStatusResistance"].GetValue<float>(); } set { this["EarthStatusResistance"].SetValue<float>(value); } }
        public float EarthStatusVulnerability { get { return this["EarthStatusVulnerability"].GetValue<float>(); } set { this["EarthStatusVulnerability"].SetValue<float>(value); } }
        public float EarthStatusMaxValue { get { return this["EarthStatusMaxValue"].GetValue<float>(); } set { this["EarthStatusMaxValue"].SetValue<float>(value); } }
        public float EarthStatusRegenSpeed { get { return this["EarthStatusRegenSpeed"].GetValue<float>(); } set { this["EarthStatusRegenSpeed"].SetValue<float>(value); } }
        public float EarthStatusRegenDelay { get { return this["EarthStatusRegenDelay"].GetValue<float>(); } set { this["EarthStatusRegenDelay"].SetValue<float>(value); } }
        public float EarthMinResistanceModifier { get { return this["EarthMinResistanceModifier"].GetValue<float>(); } set { this["EarthMinResistanceModifier"].SetValue<float>(value); } }
        public float EarthMinStatusResistanceModifier { get { return this["EarthMinStatusResistanceModifier"].GetValue<float>(); } set { this["EarthMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float EarthStatusIncreaseMultiplier { get { return this["EarthStatusIncreaseMultiplier"].GetValue<float>(); } set { this["EarthStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float EarthStatusImmunityThreshold { get { return this["EarthStatusImmunityThreshold"].GetValue<float>(); } set { this["EarthStatusImmunityThreshold"].SetValue<float>(value); } }
        public float EarthStatusPowerMultiplier { get { return this["EarthStatusPowerMultiplier"].GetValue<float>(); } set { this["EarthStatusPowerMultiplier"].SetValue<float>(value); } }
        public float WaterResistance { get { return this["WaterResistance"].GetValue<float>(); } set { this["WaterResistance"].SetValue<float>(value); } }
        public float WaterVulnerability { get { return this["WaterVulnerability"].GetValue<float>(); } set { this["WaterVulnerability"].SetValue<float>(value); } }
        public float WaterStatusResistance { get { return this["WaterStatusResistance"].GetValue<float>(); } set { this["WaterStatusResistance"].SetValue<float>(value); } }
        public float WaterStatusVulnerability { get { return this["WaterStatusVulnerability"].GetValue<float>(); } set { this["WaterStatusVulnerability"].SetValue<float>(value); } }
        public float WaterStatusMaxValue { get { return this["WaterStatusMaxValue"].GetValue<float>(); } set { this["WaterStatusMaxValue"].SetValue<float>(value); } }
        public float WaterStatusRegenSpeed { get { return this["WaterStatusRegenSpeed"].GetValue<float>(); } set { this["WaterStatusRegenSpeed"].SetValue<float>(value); } }
        public float WaterStatusRegenDelay { get { return this["WaterStatusRegenDelay"].GetValue<float>(); } set { this["WaterStatusRegenDelay"].SetValue<float>(value); } }
        public float WaterMinResistanceModifier { get { return this["WaterMinResistanceModifier"].GetValue<float>(); } set { this["WaterMinResistanceModifier"].SetValue<float>(value); } }
        public float WaterMinStatusResistanceModifier { get { return this["WaterMinStatusResistanceModifier"].GetValue<float>(); } set { this["WaterMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float WaterStatusIncreaseMultiplier { get { return this["WaterStatusIncreaseMultiplier"].GetValue<float>(); } set { this["WaterStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float WaterStatusImmunityThreshold { get { return this["WaterStatusImmunityThreshold"].GetValue<float>(); } set { this["WaterStatusImmunityThreshold"].SetValue<float>(value); } }
        public float WaterStatusPowerMultiplier { get { return this["WaterStatusPowerMultiplier"].GetValue<float>(); } set { this["WaterStatusPowerMultiplier"].SetValue<float>(value); } }
        public float AirResistance { get { return this["AirResistance"].GetValue<float>(); } set { this["AirResistance"].SetValue<float>(value); } }
        public float AirVulnerability { get { return this["AirVulnerability"].GetValue<float>(); } set { this["AirVulnerability"].SetValue<float>(value); } }
        public float AirStatusResistance { get { return this["AirStatusResistance"].GetValue<float>(); } set { this["AirStatusResistance"].SetValue<float>(value); } }
        public float AirStatusVulnerability { get { return this["AirStatusVulnerability"].GetValue<float>(); } set { this["AirStatusVulnerability"].SetValue<float>(value); } }
        public float AirStatusMaxValue { get { return this["AirStatusMaxValue"].GetValue<float>(); } set { this["AirStatusMaxValue"].SetValue<float>(value); } }
        public float AirStatusRegenSpeed { get { return this["AirStatusRegenSpeed"].GetValue<float>(); } set { this["AirStatusRegenSpeed"].SetValue<float>(value); } }
        public float AirStatusRegenDelay { get { return this["AirStatusRegenDelay"].GetValue<float>(); } set { this["AirStatusRegenDelay"].SetValue<float>(value); } }
        public float AirMinResistanceModifier { get { return this["AirMinResistanceModifier"].GetValue<float>(); } set { this["AirMinResistanceModifier"].SetValue<float>(value); } }
        public float AirMinStatusResistanceModifier { get { return this["AirMinStatusResistanceModifier"].GetValue<float>(); } set { this["AirMinStatusResistanceModifier"].SetValue<float>(value); } }
        public float AirStatusIncreaseMultiplier { get { return this["AirStatusIncreaseMultiplier"].GetValue<float>(); } set { this["AirStatusIncreaseMultiplier"].SetValue<float>(value); } }
        public float AirStatusImmunityThreshold { get { return this["AirStatusImmunityThreshold"].GetValue<float>(); } set { this["AirStatusImmunityThreshold"].SetValue<float>(value); } }
        public float AirStatusPowerMultiplier { get { return this["AirStatusPowerMultiplier"].GetValue<float>(); } set { this["AirStatusPowerMultiplier"].SetValue<float>(value); } }
        public float MovementSpeedModifier { get { return this["MovementSpeedModifier"].GetValue<float>(); } set { this["MovementSpeedModifier"].SetValue<float>(value); } }
        public float WaterMovementMultiplier { get { return this["WaterMovementMultiplier"].GetValue<float>(); } set { this["WaterMovementMultiplier"].SetValue<float>(value); } }
    }
    public class ElementalStatusData : UEObject
    {
        public ElementalStatusData(nint addr) : base(addr) { }
        public ElementalStatusData() : base(0) { }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
    }
    public class ElementalStatusInstanceAggregator : UEObject
    {
        public ElementalStatusInstanceAggregator(nint addr) : base(addr) { }
        public ElementalStatusInstanceAggregator() : base(0) { }
        public Array<ElementalStatusData> AppliedInstances { get { return new Array<ElementalStatusData>(this["AppliedInstances"]); } set { this["AppliedInstances"] = value; } }
        public string SelectedInstanceID { get { return this["SelectedInstanceID"].ToString(); } set { /* String properties are read-only */ } }
        public float ApplyTimestamp { get { return this["ApplyTimestamp"].GetValue<float>(); } set { this["ApplyTimestamp"].SetValue<float>(value); } }
        public float LastUseTimestamp { get { return this["LastUseTimestamp"].GetValue<float>(); } set { this["LastUseTimestamp"].SetValue<float>(value); } }
        public float PreExpireMargin { get { return this["PreExpireMargin"].GetValue<float>(); } set { this["PreExpireMargin"].SetValue<float>(value); } }
        public float IntervalTime { get { return this["IntervalTime"].GetValue<float>(); } set { this["IntervalTime"].SetValue<float>(value); } }
        public bool bInfiniteDuration { get { return this["bInfiniteDuration"].Flag; } set { this["bInfiniteDuration"].Flag = value; } }
        public bool bPreExpiredTriggered { get { return this["bPreExpiredTriggered"].Flag; } set { this["bPreExpiredTriggered"].Flag = value; } }
    }
    public class ElementalStatusInstanceDebugData : UEObject
    {
        public ElementalStatusInstanceDebugData(nint addr) : base(addr) { }
        public ElementalStatusInstanceDebugData() : base(0) { }
    }
    public class ElementalStatusInstanceAggregatorDebugData : UEObject
    {
        public ElementalStatusInstanceAggregatorDebugData(nint addr) : base(addr) { }
        public ElementalStatusInstanceAggregatorDebugData() : base(0) { }
    }
    public class ElementalComponentDebugData : UEObject
    {
        public ElementalComponentDebugData(nint addr) : base(addr) { }
        public ElementalComponentDebugData() : base(0) { }
    }
    public class DimensionDefenseComponentData : UEObject
    {
        public DimensionDefenseComponentData(nint addr) : base(addr) { }
        public DimensionDefenseComponentData() : base(0) { }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public EModifierType ValueType { get { return (EModifierType)this["ValueType"].GetValue<int>(); } set { this["ValueType"].SetValue<int>((int)value); } }
        public int Charges { get { return this["Charges"].GetValue<int>(); } set { this["Charges"].SetValue<int>(value); } }
        public float Duration { get { return this["Duration"].GetValue<float>(); } set { this["Duration"].SetValue<float>(value); } }
        public GameplayTagContainer DamageTypeTags { get { return this[nameof(DamageTypeTags)].As<GameplayTagContainer>(); } set { this["DamageTypeTags"] = value; } }
        public bool bConsumeChargeForEachDamageType { get { return this["bConsumeChargeForEachDamageType"].Flag; } set { this["bConsumeChargeForEachDamageType"].Flag = value; } }
        public ActionModifiers Modifiers { get { return this[nameof(Modifiers)].As<ActionModifiers>(); } set { this["Modifiers"] = value; } }
        public float CoolDown { get { return this["CoolDown"].GetValue<float>(); } set { this["CoolDown"].SetValue<float>(value); } }
        public float RegenSpeed { get { return this["RegenSpeed"].GetValue<float>(); } set { this["RegenSpeed"].SetValue<float>(value); } }
        public float Delay { get { return this["Delay"].GetValue<float>(); } set { this["Delay"].SetValue<float>(value); } }
        public float DirectionHalfAngle { get { return this["DirectionHalfAngle"].GetValue<float>(); } set { this["DirectionHalfAngle"].SetValue<float>(value); } }
        public float DirectionAngleOffset { get { return this["DirectionAngleOffset"].GetValue<float>(); } set { this["DirectionAngleOffset"].SetValue<float>(value); } }
        public float WithstandChance { get { return this["WithstandChance"].GetValue<float>(); } set { this["WithstandChance"].SetValue<float>(value); } }
        public EThresholdPolicy ThresholdPolicy { get { return (EThresholdPolicy)this["ThresholdPolicy"].GetValue<int>(); } set { this["ThresholdPolicy"].SetValue<int>((int)value); } }
        public EDefenseComponentDamageTypePolicy DamageTypePolicy { get { return (EDefenseComponentDamageTypePolicy)this["DamageTypePolicy"].GetValue<int>(); } set { this["DamageTypePolicy"].SetValue<int>((int)value); } }
        public int Priority { get { return this["Priority"].GetValue<int>(); } set { this["Priority"].SetValue<int>(value); } }
        public EDefenseComponentType ComponentType { get { return (EDefenseComponentType)this["ComponentType"].GetValue<int>(); } set { this["ComponentType"].SetValue<int>((int)value); } }
        public string ComponentID { get { return this["ComponentID"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DamageTypeStackEntry : UEObject
    {
        public DamageTypeStackEntry(nint addr) : base(addr) { }
        public DamageTypeStackEntry() : base(0) { }
        public EDamageType DamageType { get { return (EDamageType)this["DamageType"].GetValue<int>(); } set { this["DamageType"].SetValue<int>((int)value); } }
        public int Priority { get { return this["Priority"].GetValue<int>(); } set { this["Priority"].SetValue<int>(value); } }
        public string ID { get { return this["ID"].ToString(); } set { /* String properties are read-only */ } }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
    }
    public class ActiveElementalStatusesData : UEObject
    {
        public ActiveElementalStatusesData(nint addr) : base(addr) { }
        public ActiveElementalStatusesData() : base(0) { }
        public EnumArray<EDamageType> ActiveElementalStatuses { get { return new EnumArray<EDamageType>(this["ActiveElementalStatuses"]); } set { this["ActiveElementalStatuses"] = value; } }
        public GameplayTagContainer ActiveStatusTags { get { return this[nameof(ActiveStatusTags)].As<GameplayTagContainer>(); } set { this["ActiveStatusTags"] = value; } }
        public GameplayTagContainer ActiveStunTags { get { return this[nameof(ActiveStunTags)].As<GameplayTagContainer>(); } set { this["ActiveStunTags"] = value; } }
    }
    public class DamageHitData : UEObject
    {
        public DamageHitData(nint addr) : base(addr) { }
        public DamageHitData() : base(0) { }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
        public float ForceScale { get { return this["ForceScale"].GetValue<float>(); } set { this["ForceScale"].SetValue<float>(value); } }
    }
    public class DamageRadialParameters : UEObject
    {
        public DamageRadialParameters(nint addr) : base(addr) { }
        public DamageRadialParameters() : base(0) { }
    }
    public class DamageReplicatedData : UEObject
    {
        public DamageReplicatedData(nint addr) : base(addr) { }
        public DamageReplicatedData() : base(0) { }
        public UEObject Instigator { get { return this["Instigator"]; } set { this["Instigator"] = value; } }
        public UEObject DamageCauser { get { return this["DamageCauser"]; } set { this["DamageCauser"] = value; } }
        public UEObject DamageObject { get { return this["DamageObject"]; } set { this["DamageObject"] = value; } }
        public DamageValueData DamageValueData { get { return this[nameof(DamageValueData)].As<DamageValueData>(); } set { this["DamageValueData"] = value; } }
        public float Force { get { return this["Force"].GetValue<float>(); } set { this["Force"].SetValue<float>(value); } }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
        public bool bFatalDamage { get { return this["bFatalDamage"].Flag; } set { this["bFatalDamage"].Flag = value; } }
        public byte EnsureReplicationByte { get { return this["EnsureReplicationByte"].GetValue<byte>(); } set { this["EnsureReplicationByte"].SetValue<byte>(value); } }
    }
    public class DamagePowerAggregator : UEObject
    {
        public DamagePowerAggregator(nint addr) : base(addr) { }
        public DamagePowerAggregator() : base(0) { }
        public DamageActorsData DamageActorsData { get { return this[nameof(DamageActorsData)].As<DamageActorsData>(); } set { this["DamageActorsData"] = value; } }
        public EDamageType DamageType { get { return (EDamageType)this["DamageType"].GetValue<int>(); } set { this["DamageType"].SetValue<int>((int)value); } }
        public bool bIsStatusDamage { get { return this["bIsStatusDamage"].Flag; } set { this["bIsStatusDamage"].Flag = value; } }
        public ActionModifiers ActionModifiers { get { return this[nameof(ActionModifiers)].As<ActionModifiers>(); } set { this["ActionModifiers"] = value; } }
    }
    public class DamageRadialData : UEObject
    {
        public DamageRadialData(nint addr) : base(addr) { }
        public DamageRadialData() : base(0) { }
        public float ForceScale { get { return this["ForceScale"].GetValue<float>(); } set { this["ForceScale"].SetValue<float>(value); } }
        public float InnerRadius { get { return this["InnerRadius"].GetValue<float>(); } set { this["InnerRadius"].SetValue<float>(value); } }
        public float OuterRadius { get { return this["OuterRadius"].GetValue<float>(); } set { this["OuterRadius"].SetValue<float>(value); } }
        public float DamageFalloffMultiplier { get { return this["DamageFalloffMultiplier"].GetValue<float>(); } set { this["DamageFalloffMultiplier"].SetValue<float>(value); } }
        public float DamageFalloffPower { get { return this["DamageFalloffPower"].GetValue<float>(); } set { this["DamageFalloffPower"].SetValue<float>(value); } }
        public float ConeHalfAngle { get { return this["ConeHalfAngle"].GetValue<float>(); } set { this["ConeHalfAngle"].SetValue<float>(value); } }
        public float Velocity { get { return this["Velocity"].GetValue<float>(); } set { this["Velocity"].SetValue<float>(value); } }
        public ERadialTracePolicy VisibilityTracesPolicy { get { return (ERadialTracePolicy)this["VisibilityTracesPolicy"].GetValue<int>(); } set { this["VisibilityTracesPolicy"].SetValue<int>((int)value); } }
        public byte DamagePreventionChannel { get { return this["DamagePreventionChannel"].GetValue<byte>(); } set { this["DamagePreventionChannel"].SetValue<byte>(value); } }
        public bool bIgnoreChannelResponse { get { return this["bIgnoreChannelResponse"].Flag; } set { this["bIgnoreChannelResponse"].Flag = value; } }
        public bool bScaleForceWithDistance { get { return this["bScaleForceWithDistance"].Flag; } set { this["bScaleForceWithDistance"].Flag = value; } }
        public bool bDebugDraw { get { return this["bDebugDraw"].Flag; } set { this["bDebugDraw"].Flag = value; } }
        public Array<Actor> IgnoredActors { get { return new Array<Actor>(this["IgnoredActors"]); } set { this["IgnoredActors"] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
    }
    public class DamageTypeSpec : UEObject
    {
        public DamageTypeSpec(nint addr) : base(addr) { }
        public DamageTypeSpec() : base(0) { }
        public DamageValueData DamageValueData { get { return this[nameof(DamageValueData)].As<DamageValueData>(); } set { this["DamageValueData"] = value; } }
        public float LevelRequirement { get { return this["LevelRequirement"].GetValue<float>(); } set { this["LevelRequirement"].SetValue<float>(value); } }
        public bool bScaleMultiplierWithLevel { get { return this["bScaleMultiplierWithLevel"].Flag; } set { this["bScaleMultiplierWithLevel"].Flag = value; } }
        public CurveTableRowHandle DamageMultiplierHandle { get { return this[nameof(DamageMultiplierHandle)].As<CurveTableRowHandle>(); } set { this["DamageMultiplierHandle"] = value; } }
    }
    public class AttackSpec : UEObject
    {
        public AttackSpec(nint addr) : base(addr) { }
        public AttackSpec() : base(0) { }
        public DamageRadialData DamageParameters { get { return this[nameof(DamageParameters)].As<DamageRadialData>(); } set { this["DamageParameters"] = value; } }
        public Array<DamageTypeSpec> DamageTypeSpecs { get { return new Array<DamageTypeSpec>(this["DamageTypeSpecs"]); } set { this["DamageTypeSpecs"] = value; } }
    }
    public class AttackSet : TableRowBase
    {
        public AttackSet(nint addr) : base(addr) { }
        public AttackSet() : base(0) { }
        public Array<AttackSpec> AttackSpecs { get { return new Array<AttackSpec>(this["AttackSpecs"]); } set { this["AttackSpecs"] = value; } }
        public EValueCombineMode ForceCombineMethod { get { return (EValueCombineMode)this["ForceCombineMethod"].GetValue<int>(); } set { this["ForceCombineMethod"].SetValue<int>((int)value); } }
    }
    public class DamageRadialVelocityData : UEObject
    {
        public DamageRadialVelocityData(nint addr) : base(addr) { }
        public DamageRadialVelocityData() : base(0) { }
    }
    public class DelayedDamageData : UEObject
    {
        public DelayedDamageData(nint addr) : base(addr) { }
        public DelayedDamageData() : base(0) { }
    }
    public class DimensionCurseData : TableRowBase
    {
        public DimensionCurseData(nint addr) : base(addr) { }
        public DimensionCurseData() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject CurseEffect { get { return this["CurseEffect"]; } set { this["CurseEffect"] = value; } }
        public EPerkAbilityActivationType ApplyPolicy { get { return (EPerkAbilityActivationType)this["ApplyPolicy"].GetValue<int>(); } set { this["ApplyPolicy"].SetValue<int>((int)value); } }
    }
    public class DimensionCurseTemplate : TableRowBase
    {
        public DimensionCurseTemplate(nint addr) : base(addr) { }
        public DimensionCurseTemplate() : base(0) { }
        public Array<DataTableRowHandle> EligibleCurses { get { return new Array<DataTableRowHandle>(this["EligibleCurses"]); } set { this["EligibleCurses"] = value; } }
        public Array<DataTableRowHandle> EligibleQuests { get { return new Array<DataTableRowHandle>(this["EligibleQuests"]); } set { this["EligibleQuests"] = value; } }
    }
    public class DimensionFloatGenerator : UEObject
    {
        public DimensionFloatGenerator(nint addr) : base(addr) { }
        public DimensionFloatGenerator() : base(0) { }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public float Increment { get { return this["Increment"].GetValue<float>(); } set { this["Increment"].SetValue<float>(value); } }
    }
    public class DimensionCursedItemData : UEObject
    {
        public DimensionCursedItemData(nint addr) : base(addr) { }
        public DimensionCursedItemData() : base(0) { }
        public DataTableRowHandle ItemDataHandle { get { return this[nameof(ItemDataHandle)].As<DataTableRowHandle>(); } set { this["ItemDataHandle"] = value; } }
        public DimensionFloatGenerator CurseChanceGenerator { get { return this[nameof(CurseChanceGenerator)].As<DimensionFloatGenerator>(); } set { this["CurseChanceGenerator"] = value; } }
        public DimensionItemHandleCount BaseItemCleanseCost { get { return this[nameof(BaseItemCleanseCost)].As<DimensionItemHandleCount>(); } set { this["BaseItemCleanseCost"] = value; } }
    }
    public class ConsumableItemUsageAttributeConstraint : UEObject
    {
        public ConsumableItemUsageAttributeConstraint(nint addr) : base(addr) { }
        public ConsumableItemUsageAttributeConstraint() : base(0) { }
        public bool Necessary { get { return this["Necessary"].Flag; } set { this["Necessary"].Flag = value; } }
        public GameplayAttribute AttributeA { get { return this[nameof(AttributeA)].As<GameplayAttribute>(); } set { this["AttributeA"] = value; } }
        public EConsumableItemUsageAttributeRelation Relation { get { return (EConsumableItemUsageAttributeRelation)this["Relation"].GetValue<int>(); } set { this["Relation"].SetValue<int>((int)value); } }
        public GameplayAttribute AttributeB { get { return this[nameof(AttributeB)].As<GameplayAttribute>(); } set { this["AttributeB"] = value; } }
    }
    public class ConsumableItemUsageValueConstraint : UEObject
    {
        public ConsumableItemUsageValueConstraint(nint addr) : base(addr) { }
        public ConsumableItemUsageValueConstraint() : base(0) { }
        public bool Necessary { get { return this["Necessary"].Flag; } set { this["Necessary"].Flag = value; } }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public EConsumableItemUsageAttributeRelation Relation { get { return (EConsumableItemUsageAttributeRelation)this["Relation"].GetValue<int>(); } set { this["Relation"].SetValue<int>((int)value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class ConsumableItemUsageConstraint : UEObject
    {
        public ConsumableItemUsageConstraint(nint addr) : base(addr) { }
        public ConsumableItemUsageConstraint() : base(0) { }
        public bool Necessary { get { return this["Necessary"].Flag; } set { this["Necessary"].Flag = value; } }
        public GameplayTagRequirements TagRequirements { get { return this[nameof(TagRequirements)].As<GameplayTagRequirements>(); } set { this["TagRequirements"] = value; } }
        public Array<ConsumableItemUsageAttributeConstraint> AttributeConditions { get { return new Array<ConsumableItemUsageAttributeConstraint>(this["AttributeConditions"]); } set { this["AttributeConditions"] = value; } }
        public Array<ConsumableItemUsageValueConstraint> ValueConditions { get { return new Array<ConsumableItemUsageValueConstraint>(this["ValueConditions"]); } set { this["ValueConditions"] = value; } }
    }
    public class ConsumableItemUseInfo : UEObject
    {
        public ConsumableItemUseInfo(nint addr) : base(addr) { }
        public ConsumableItemUseInfo() : base(0) { }
        public EConsumableItemApplyType ApplyPolicy { get { return (EConsumableItemApplyType)this["ApplyPolicy"].GetValue<int>(); } set { this["ApplyPolicy"].SetValue<int>((int)value); } }
        public UEObject Effect { get { return this["Effect"]; } set { this["Effect"] = value; } }
        public Array<ConsumableItemUsageConstraint> ApplyConditions { get { return new Array<ConsumableItemUsageConstraint>(this["ApplyConditions"]); } set { this["ApplyConditions"] = value; } }
    }
    public class DimensionAbilityCost : UEObject
    {
        public DimensionAbilityCost(nint addr) : base(addr) { }
        public DimensionAbilityCost() : base(0) { }
        public bool bPercentValues { get { return this["bPercentValues"].Flag; } set { this["bPercentValues"].Flag = value; } }
        public CurveTableRowHandle LowerValue { get { return this[nameof(LowerValue)].As<CurveTableRowHandle>(); } set { this["LowerValue"] = value; } }
        public CurveTableRowHandle UpperValue { get { return this[nameof(UpperValue)].As<CurveTableRowHandle>(); } set { this["UpperValue"] = value; } }
    }
    public class DimensionCompanionConfig : TableRowBase
    {
        public DimensionCompanionConfig(nint addr) : base(addr) { }
        public DimensionCompanionConfig() : base(0) { }
        public GameplayTag CompanionTag { get { return this[nameof(CompanionTag)].As<GameplayTag>(); } set { this["CompanionTag"] = value; } }
        public UEObject PassiveAbility { get { return this["PassiveAbility"]; } set { this["PassiveAbility"] = value; } }
        public UEObject ActiveAbility { get { return this["ActiveAbility"]; } set { this["ActiveAbility"] = value; } }
        public string PreyerName { get { return this["PreyerName"].ToString(); } set { /* String properties are read-only */ } }
        public string PreyerDescription { get { return this["PreyerDescription"].ToString(); } set { /* String properties are read-only */ } }
        public string FirstUnlockInteractionText { get { return this["FirstUnlockInteractionText"].ToString(); } set { /* String properties are read-only */ } }
        public string SecondUnlockInteractionText { get { return this["SecondUnlockInteractionText"].ToString(); } set { /* String properties are read-only */ } }
        public string PopupTitle { get { return this["PopupTitle"].ToString(); } set { /* String properties are read-only */ } }
        public string RemoveFromSquadPrompt { get { return this["RemoveFromSquadPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public string AddToSquadPrompt { get { return this["AddToSquadPrompt"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject BackgroundMaterial { get { return this["BackgroundMaterial"]; } set { this["BackgroundMaterial"] = value; } }
        public UEObject CharacterMaterial { get { return this["CharacterMaterial"]; } set { this["CharacterMaterial"] = value; } }
        public UEObject GhostMesh { get { return this["GhostMesh"]; } set { this["GhostMesh"] = value; } }
        public UEObject BodyMesh { get { return this["BodyMesh"]; } set { this["BodyMesh"] = value; } }
        public UEObject IdleAnimation { get { return this["IdleAnimation"]; } set { this["IdleAnimation"] = value; } }
        public DataTableRowHandle CompanionActivationCurrency { get { return this[nameof(CompanionActivationCurrency)].As<DataTableRowHandle>(); } set { this["CompanionActivationCurrency"] = value; } }
        public DimensionAbilityCost ActiveAbilityCost { get { return this[nameof(ActiveAbilityCost)].As<DimensionAbilityCost>(); } set { this["ActiveAbilityCost"] = value; } }
        public UEObject ApparitionAbility { get { return this["ApparitionAbility"]; } set { this["ApparitionAbility"] = value; } }
        public string CompanionDescription { get { return this["CompanionDescription"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionCombatDesignerSpawnTemplate : UEObject
    {
        public DimensionCombatDesignerSpawnTemplate(nint addr) : base(addr) { }
        public DimensionCombatDesignerSpawnTemplate() : base(0) { }
    }
    public class DimensionPlayerStartingAttributesData : UEObject
    {
        public DimensionPlayerStartingAttributesData(nint addr) : base(addr) { }
        public DimensionPlayerStartingAttributesData() : base(0) { }
        public int Flesh { get { return this["Flesh"].GetValue<int>(); } set { this["Flesh"].SetValue<int>(value); } }
        public int Mind { get { return this["Mind"].GetValue<int>(); } set { this["Mind"].SetValue<int>(value); } }
        public int blood { get { return this["blood"].GetValue<int>(); } set { this["blood"].SetValue<int>(value); } }
        public int Witchery { get { return this["Witchery"].GetValue<int>(); } set { this["Witchery"].SetValue<int>(value); } }
        public int Arsenal { get { return this["Arsenal"].GetValue<int>(); } set { this["Arsenal"].SetValue<int>(value); } }
        public int Faith { get { return this["Faith"].GetValue<int>(); } set { this["Faith"].SetValue<int>(value); } }
        public int SumOfAttributes { get { return this["SumOfAttributes"].GetValue<int>(); } set { this["SumOfAttributes"].SetValue<int>(value); } }
    }
    public class DimensionPlayerClassDefinition : TableRowBase
    {
        public DimensionPlayerClassDefinition(nint addr) : base(addr) { }
        public DimensionPlayerClassDefinition() : base(0) { }
        public GameplayTag ClassTag { get { return this[nameof(ClassTag)].As<GameplayTag>(); } set { this["ClassTag"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject BackgroundMaterial { get { return this["BackgroundMaterial"]; } set { this["BackgroundMaterial"] = value; } }
        public UEObject CharacterMaterial { get { return this["CharacterMaterial"]; } set { this["CharacterMaterial"] = value; } }
        public DimensionPlayerStartingAttributesData StartingAttributes { get { return this[nameof(StartingAttributes)].As<DimensionPlayerStartingAttributesData>(); } set { this["StartingAttributes"] = value; } }
        public GameplayTagContainer StartingItemTypeTags { get { return this[nameof(StartingItemTypeTags)].As<GameplayTagContainer>(); } set { this["StartingItemTypeTags"] = value; } }
    }
    public class PlayerAttributeThresholdEntry : UEObject
    {
        public PlayerAttributeThresholdEntry(nint addr) : base(addr) { }
        public PlayerAttributeThresholdEntry() : base(0) { }
        public int ThresholdValue { get { return this["ThresholdValue"].GetValue<int>(); } set { this["ThresholdValue"].SetValue<int>(value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTagContainer AppliedTags { get { return this[nameof(AppliedTags)].As<GameplayTagContainer>(); } set { this["AppliedTags"] = value; } }
    }
    public class PlayerAttributeData : UEObject
    {
        public PlayerAttributeData(nint addr) : base(addr) { }
        public PlayerAttributeData() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public GameplayTag AttributeTag { get { return this[nameof(AttributeTag)].As<GameplayTag>(); } set { this["AttributeTag"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public Array<PlayerAttributeThresholdEntry> Thresholds { get { return new Array<PlayerAttributeThresholdEntry>(this["Thresholds"]); } set { this["Thresholds"] = value; } }
    }
    public class DimensionPlayerStatData : DimensionAssetData
    {
        public DimensionPlayerStatData(nint addr) : base(addr) { }
        public DimensionPlayerStatData() : base(0) { }
        public bool bIsMainStat { get { return this["bIsMainStat"].Flag; } set { this["bIsMainStat"].Flag = value; } }
        public float FleshWeight { get { return this["FleshWeight"].GetValue<float>(); } set { this["FleshWeight"].SetValue<float>(value); } }
        public float MindWeight { get { return this["MindWeight"].GetValue<float>(); } set { this["MindWeight"].SetValue<float>(value); } }
        public float BloodWeight { get { return this["BloodWeight"].GetValue<float>(); } set { this["BloodWeight"].SetValue<float>(value); } }
        public float WitcheryWeight { get { return this["WitcheryWeight"].GetValue<float>(); } set { this["WitcheryWeight"].SetValue<float>(value); } }
        public float ArsenalWeight { get { return this["ArsenalWeight"].GetValue<float>(); } set { this["ArsenalWeight"].SetValue<float>(value); } }
        public float FaithWeight { get { return this["FaithWeight"].GetValue<float>(); } set { this["FaithWeight"].SetValue<float>(value); } }
        public float PreviewWeightDistribution { get { return this["PreviewWeightDistribution"].GetValue<float>(); } set { this["PreviewWeightDistribution"].SetValue<float>(value); } }
        public DataTableRowHandle MainStatHandle { get { return this[nameof(MainStatHandle)].As<DataTableRowHandle>(); } set { this["MainStatHandle"] = value; } }
        public GameplayAttribute PrimaryAttribute { get { return this[nameof(PrimaryAttribute)].As<GameplayAttribute>(); } set { this["PrimaryAttribute"] = value; } }
        public GameplayAttribute AffectedAttribute { get { return this[nameof(AffectedAttribute)].As<GameplayAttribute>(); } set { this["AffectedAttribute"] = value; } }
        public bool bUseNormalizedCurve { get { return this["bUseNormalizedCurve"].Flag; } set { this["bUseNormalizedCurve"].Flag = value; } }
        public CurveFloat StatCurve { get { return this[nameof(StatCurve)].As<CurveFloat>(); } set { this["StatCurve"] = value; } }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUseCustomStatName { get { return this["bUseCustomStatName"].Flag; } set { this["bUseCustomStatName"].Flag = value; } }
        public string CustomStatName { get { return this["CustomStatName"].ToString(); } set { /* String properties are read-only */ } }
        public EDimensionDisplayParameterType DisplayType { get { return (EDimensionDisplayParameterType)this["DisplayType"].GetValue<int>(); } set { this["DisplayType"].SetValue<int>((int)value); } }
        public bool bNormalizeActualValueForDisplay { get { return this["bNormalizeActualValueForDisplay"].Flag; } set { this["bNormalizeActualValueForDisplay"].Flag = value; } }
        public int Precision { get { return this["Precision"].GetValue<int>(); } set { this["Precision"].SetValue<int>(value); } }
        public float Increment { get { return this["Increment"].GetValue<float>(); } set { this["Increment"].SetValue<float>(value); } }
        public Vector2D CustomRatingRange { get { return this[nameof(CustomRatingRange)].As<Vector2D>(); } set { this["CustomRatingRange"] = value; } }
        public float CustomRatingMidPoint { get { return this["CustomRatingMidPoint"].GetValue<float>(); } set { this["CustomRatingMidPoint"].SetValue<float>(value); } }
        public float CustomRatingActualValueMidPoint { get { return this["CustomRatingActualValueMidPoint"].GetValue<float>(); } set { this["CustomRatingActualValueMidPoint"].SetValue<float>(value); } }
        public bool bCustomRatingUseScoreForActualValueMidPoint { get { return this["bCustomRatingUseScoreForActualValueMidPoint"].Flag; } set { this["bCustomRatingUseScoreForActualValueMidPoint"].Flag = value; } }
        public int PreviewScore { get { return this["PreviewScore"].GetValue<int>(); } set { this["PreviewScore"].SetValue<int>(value); } }
        public float PreviewCurveValue { get { return this["PreviewCurveValue"].GetValue<float>(); } set { this["PreviewCurveValue"].SetValue<float>(value); } }
        public float PreviewActualValue { get { return this["PreviewActualValue"].GetValue<float>(); } set { this["PreviewActualValue"].SetValue<float>(value); } }
        public float PreviewNormalizedValue { get { return this["PreviewNormalizedValue"].GetValue<float>(); } set { this["PreviewNormalizedValue"].SetValue<float>(value); } }
        public string PreviewDisplayValue { get { return this["PreviewDisplayValue"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionBoosterCategory : DimensionAssetLoadingData
    {
        public DimensionBoosterCategory(nint addr) : base(addr) { }
        public DimensionBoosterCategory() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public bool bDisplayDescription { get { return this["bDisplayDescription"].Flag; } set { this["bDisplayDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public EBoosterCategoryType CategoryType { get { return (EBoosterCategoryType)this["CategoryType"].GetValue<int>(); } set { this["CategoryType"].SetValue<int>((int)value); } }
        public EBoosterType BoosterType { get { return (EBoosterType)this["BoosterType"].GetValue<int>(); } set { this["BoosterType"].SetValue<int>((int)value); } }
        public bool bUniqueCategory { get { return this["bUniqueCategory"].Flag; } set { this["bUniqueCategory"].Flag = value; } }
        public bool bAllowFailedBoosters { get { return this["bAllowFailedBoosters"].Flag; } set { this["bAllowFailedBoosters"].Flag = value; } }
        public bool bFilterEligibleBoosters { get { return this["bFilterEligibleBoosters"].Flag; } set { this["bFilterEligibleBoosters"].Flag = value; } }
        public bool bIncludeBoostersByTags { get { return this["bIncludeBoostersByTags"].Flag; } set { this["bIncludeBoostersByTags"].Flag = value; } }
        public ActionModifiers BoosterTagRequirements { get { return this[nameof(BoosterTagRequirements)].As<ActionModifiers>(); } set { this["BoosterTagRequirements"] = value; } }
        public bool bIncludeBoosterList { get { return this["bIncludeBoosterList"].Flag; } set { this["bIncludeBoosterList"].Flag = value; } }
        public List<string> BoosterList { get { return this["BoosterList"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<DataTableRowHandle> IncludedBoosters { get { return new Array<DataTableRowHandle>(this["IncludedBoosters"]); } set { this["IncludedBoosters"] = value; } }
        public Array<DataTableRowHandle> FilteredBoosters { get { return new Array<DataTableRowHandle>(this["FilteredBoosters"]); } set { this["FilteredBoosters"] = value; } }
    }
    public class DimensionBoosterSelectQuery : UEObject
    {
        public DimensionBoosterSelectQuery(nint addr) : base(addr) { }
        public DimensionBoosterSelectQuery() : base(0) { }
        public GameplayTagContainer AnyMatchingTypeTags { get { return this[nameof(AnyMatchingTypeTags)].As<GameplayTagContainer>(); } set { this["AnyMatchingTypeTags"] = value; } }
        public GameplayTag MinRarityTag { get { return this[nameof(MinRarityTag)].As<GameplayTag>(); } set { this["MinRarityTag"] = value; } }
        public GameplayTag MaxRarityTag { get { return this[nameof(MaxRarityTag)].As<GameplayTag>(); } set { this["MaxRarityTag"] = value; } }
        public bool bChooseFromPersistentBoosters { get { return this["bChooseFromPersistentBoosters"].Flag; } set { this["bChooseFromPersistentBoosters"].Flag = value; } }
        public bool bChooseFromTransientBoosters { get { return this["bChooseFromTransientBoosters"].Flag; } set { this["bChooseFromTransientBoosters"].Flag = value; } }
    }
    public class DimensionBoosterSet : UEObject
    {
        public DimensionBoosterSet(nint addr) : base(addr) { }
        public DimensionBoosterSet() : base(0) { }
        public int LoadingID { get { return this["LoadingID"].GetValue<int>(); } set { this["LoadingID"].SetValue<int>(value); } }
        public Array<DataTableRowHandle> Boosters { get { return new Array<DataTableRowHandle>(this["Boosters"]); } set { this["Boosters"] = value; } }
        public List<int> Stacks { get { return this["Stacks"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<int> Levels { get { return this["Levels"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public UEObject DynamicDelegate { get { return this["DynamicDelegate"]; } set { this["DynamicDelegate"] = value; } }
        public bool bInitializedWithCategory { get { return this["bInitializedWithCategory"].Flag; } set { this["bInitializedWithCategory"].Flag = value; } }
        public Array<DimensionBoosterSelectQuery> SelectQueries { get { return new Array<DimensionBoosterSelectQuery>(this["SelectQueries"]); } set { this["SelectQueries"] = value; } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public bool bBoosterPickerSet { get { return this["bBoosterPickerSet"].Flag; } set { this["bBoosterPickerSet"].Flag = value; } }
        public bool bPendingLoad { get { return this["bPendingLoad"].Flag; } set { this["bPendingLoad"].Flag = value; } }
        public bool bFilteredBoosterOnly { get { return this["bFilteredBoosterOnly"].Flag; } set { this["bFilteredBoosterOnly"].Flag = value; } }
    }
    public class DimensionBoosterPickerSet : UEObject
    {
        public DimensionBoosterPickerSet(nint addr) : base(addr) { }
        public DimensionBoosterPickerSet() : base(0) { }
        public int BoosterSetID { get { return this["BoosterSetID"].GetValue<int>(); } set { this["BoosterSetID"].SetValue<int>(value); } }
        public int ActiveBoostersLimit { get { return this["ActiveBoostersLimit"].GetValue<int>(); } set { this["ActiveBoostersLimit"].SetValue<int>(value); } }
        public int RerollLimit { get { return this["RerollLimit"].GetValue<int>(); } set { this["RerollLimit"].SetValue<int>(value); } }
        public List<bool> RevealedBoosters { get { return this["RevealedBoosters"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public List<bool> ActivatedBoosters { get { return this["ActivatedBoosters"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public List<int> RerollCounters { get { return this["RerollCounters"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public List<bool> BoosterLocks { get { return this["BoosterLocks"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public List<bool> EnabledBoosters { get { return this["EnabledBoosters"].GetList<bool>(); } set { /* Arrays are read-only */ } }
        public int PendingActivateIndex { get { return this["PendingActivateIndex"].GetValue<int>(); } set { this["PendingActivateIndex"].SetValue<int>(value); } }
        public int PendingInitialUpgradeIndex { get { return this["PendingInitialUpgradeIndex"].GetValue<int>(); } set { this["PendingInitialUpgradeIndex"].SetValue<int>(value); } }
    }
    public class DimensionBoosterActionRequirements : UEObject
    {
        public DimensionBoosterActionRequirements(nint addr) : base(addr) { }
        public DimensionBoosterActionRequirements() : base(0) { }
        public DimensionItemRequirementSet ItemRequirements { get { return this[nameof(ItemRequirements)].As<DimensionItemRequirementSet>(); } set { this["ItemRequirements"] = value; } }
    }
    public class DimensionBoosterActionDefinition : UEObject
    {
        public DimensionBoosterActionDefinition(nint addr) : base(addr) { }
        public DimensionBoosterActionDefinition() : base(0) { }
        public GameplayTag ActionTypeTag { get { return this[nameof(ActionTypeTag)].As<GameplayTag>(); } set { this["ActionTypeTag"] = value; } }
        public int MaxStageIndex { get { return this["MaxStageIndex"].GetValue<int>(); } set { this["MaxStageIndex"].SetValue<int>(value); } }
        public Array<DimensionBoosterActionRequirements> ActionRequirements { get { return new Array<DimensionBoosterActionRequirements>(this["ActionRequirements"]); } set { this["ActionRequirements"] = value; } }
    }
    public class DimensionBoosterProphecy : DimensionAssetLoadingData
    {
        public DimensionBoosterProphecy(nint addr) : base(addr) { }
        public DimensionBoosterProphecy() : base(0) { }
        public int RowIndex { get { return this["RowIndex"].GetValue<int>(); } set { this["RowIndex"].SetValue<int>(value); } }
        public bool bHasBoosterCategory { get { return this["bHasBoosterCategory"].Flag; } set { this["bHasBoosterCategory"].Flag = value; } }
        public string CategoryName { get { return this["CategoryName"].ToString(); } set { /* String properties are read-only */ } }
        public int Level { get { return this["Level"].GetValue<int>(); } set { this["Level"].SetValue<int>(value); } }
    }
    public class AimAssistSectionInfo : UEObject
    {
        public AimAssistSectionInfo(nint addr) : base(addr) { }
        public AimAssistSectionInfo() : base(0) { }
        public bool bCanEverAffectStickiness { get { return this["bCanEverAffectStickiness"].Flag; } set { this["bCanEverAffectStickiness"].Flag = value; } }
        public bool bCanEverAffectBulletMagnetism { get { return this["bCanEverAffectBulletMagnetism"].Flag; } set { this["bCanEverAffectBulletMagnetism"].Flag = value; } }
        public bool bCanEverAffectMeleeMagnetism { get { return this["bCanEverAffectMeleeMagnetism"].Flag; } set { this["bCanEverAffectMeleeMagnetism"].Flag = value; } }
        public ActionModifiers AimAssistTriggerConditions { get { return this[nameof(AimAssistTriggerConditions)].As<ActionModifiers>(); } set { this["AimAssistTriggerConditions"] = value; } }
    }
    public class CriticalSectionInfo : UEObject
    {
        public CriticalSectionInfo(nint addr) : base(addr) { }
        public CriticalSectionInfo() : base(0) { }
        public float BaseDamageMultiplier { get { return this["BaseDamageMultiplier"].GetValue<float>(); } set { this["BaseDamageMultiplier"].SetValue<float>(value); } }
        public float CriticalDamageMultiplier { get { return this["CriticalDamageMultiplier"].GetValue<float>(); } set { this["CriticalDamageMultiplier"].SetValue<float>(value); } }
        public ActionModifiers CriticalHitConditions { get { return this[nameof(CriticalHitConditions)].As<ActionModifiers>(); } set { this["CriticalHitConditions"] = value; } }
        public bool bDefaultCriticalSection { get { return this["bDefaultCriticalSection"].Flag; } set { this["bDefaultCriticalSection"].Flag = value; } }
        public bool bAlwaysApplyBaseDamageMultiplier { get { return this["bAlwaysApplyBaseDamageMultiplier"].Flag; } set { this["bAlwaysApplyBaseDamageMultiplier"].Flag = value; } }
    }
    public class HitPointsSectionInfo : UEObject
    {
        public HitPointsSectionInfo(nint addr) : base(addr) { }
        public HitPointsSectionInfo() : base(0) { }
        public float HitPoints { get { return this["HitPoints"].GetValue<float>(); } set { this["HitPoints"].SetValue<float>(value); } }
        public float CurrentHitPoints { get { return this["CurrentHitPoints"].GetValue<float>(); } set { this["CurrentHitPoints"].SetValue<float>(value); } }
        public float FullHPDamageMultiplier { get { return this["FullHPDamageMultiplier"].GetValue<float>(); } set { this["FullHPDamageMultiplier"].SetValue<float>(value); } }
        public float NoHPDamageMultiplier { get { return this["NoHPDamageMultiplier"].GetValue<float>(); } set { this["NoHPDamageMultiplier"].SetValue<float>(value); } }
        public bool bInterpolateMultiplier { get { return this["bInterpolateMultiplier"].Flag; } set { this["bInterpolateMultiplier"].Flag = value; } }
        public bool bBlockDamage { get { return this["bBlockDamage"].Flag; } set { this["bBlockDamage"].Flag = value; } }
        public bool bBlockRadialDamage { get { return this["bBlockRadialDamage"].Flag; } set { this["bBlockRadialDamage"].Flag = value; } }
    }
    public class BoneModifierSectionData : UEObject
    {
        public BoneModifierSectionData(nint addr) : base(addr) { }
        public BoneModifierSectionData() : base(0) { }
        public string SectionName { get { return this["SectionName"].ToString(); } set { /* String properties are read-only */ } }
        public List<string> TopBones { get { return this["TopBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> BottomBones { get { return this["BottomBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> ExcludedBones { get { return this["ExcludedBones"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<PrimitiveComponent> Components { get { return new Array<PrimitiveComponent>(this["Components"]); } set { this["Components"] = value; } }
        public List<string> IncludedBoneNames { get { return this["IncludedBoneNames"].GetStringList(); } set { /* Arrays are read-only */ } }
        public bool bStopPenetrationTest { get { return this["bStopPenetrationTest"].Flag; } set { this["bStopPenetrationTest"].Flag = value; } }
        public bool bHasAimAssistInfo { get { return this["bHasAimAssistInfo"].Flag; } set { this["bHasAimAssistInfo"].Flag = value; } }
        public AimAssistSectionInfo AimAssistInfo { get { return this[nameof(AimAssistInfo)].As<AimAssistSectionInfo>(); } set { this["AimAssistInfo"] = value; } }
        public bool bHasCriticalInfo { get { return this["bHasCriticalInfo"].Flag; } set { this["bHasCriticalInfo"].Flag = value; } }
        public CriticalSectionInfo CriticalInfo { get { return this[nameof(CriticalInfo)].As<CriticalSectionInfo>(); } set { this["CriticalInfo"] = value; } }
        public bool bHasHitPointsInfo { get { return this["bHasHitPointsInfo"].Flag; } set { this["bHasHitPointsInfo"].Flag = value; } }
        public HitPointsSectionInfo HitPointsInfo { get { return this[nameof(HitPointsInfo)].As<HitPointsSectionInfo>(); } set { this["HitPointsInfo"] = value; } }
    }
    public class DimensionReloadBarData : UEObject
    {
        public DimensionReloadBarData(nint addr) : base(addr) { }
        public DimensionReloadBarData() : base(0) { }
        public float RegularReloadStart { get { return this["RegularReloadStart"].GetValue<float>(); } set { this["RegularReloadStart"].SetValue<float>(value); } }
        public float RegularReloadEnd { get { return this["RegularReloadEnd"].GetValue<float>(); } set { this["RegularReloadEnd"].SetValue<float>(value); } }
        public float PerfectReloadStart { get { return this["PerfectReloadStart"].GetValue<float>(); } set { this["PerfectReloadStart"].SetValue<float>(value); } }
        public float PerfectReloadEnd { get { return this["PerfectReloadEnd"].GetValue<float>(); } set { this["PerfectReloadEnd"].SetValue<float>(value); } }
    }
    public class DimensionBipedLocomotionStateMachine : UEObject
    {
        public DimensionBipedLocomotionStateMachine(nint addr) : base(addr) { }
        public DimensionBipedLocomotionStateMachine() : base(0) { }
        public DimensionBipedLocomotion Locomotion { get { return this[nameof(Locomotion)].As<DimensionBipedLocomotion>(); } set { this["Locomotion"] = value; } }
        public DimensionBipedLocomotionState_Idle IdleState { get { return this[nameof(IdleState)].As<DimensionBipedLocomotionState_Idle>(); } set { this["IdleState"] = value; } }
        public DimensionBipedLocomotionState_Montage MontageState { get { return this[nameof(MontageState)].As<DimensionBipedLocomotionState_Montage>(); } set { this["MontageState"] = value; } }
        public DimensionBipedLocomotionState_StartMovement StartMovementState { get { return this[nameof(StartMovementState)].As<DimensionBipedLocomotionState_StartMovement>(); } set { this["StartMovementState"] = value; } }
        public DimensionBipedLocomotionState_StopMovement StopMovementState { get { return this[nameof(StopMovementState)].As<DimensionBipedLocomotionState_StopMovement>(); } set { this["StopMovementState"] = value; } }
        public DimensionBipedLocomotionState_Movement MovementState { get { return this[nameof(MovementState)].As<DimensionBipedLocomotionState_Movement>(); } set { this["MovementState"] = value; } }
        public DimensionBipedLocomotionState_InPlaceTurn InPlaceTurnState { get { return this[nameof(InPlaceTurnState)].As<DimensionBipedLocomotionState_InPlaceTurn>(); } set { this["InPlaceTurnState"] = value; } }
        public EDimensionBipedLocomotionStateID CurrentMainState { get { return (EDimensionBipedLocomotionStateID)this["CurrentMainState"].GetValue<int>(); } set { this["CurrentMainState"].SetValue<int>((int)value); } }
        public bool bMainStateIsIdle { get { return this["bMainStateIsIdle"].Flag; } set { this["bMainStateIsIdle"].Flag = value; } }
        public bool bMainStateIsMontage { get { return this["bMainStateIsMontage"].Flag; } set { this["bMainStateIsMontage"].Flag = value; } }
        public bool bMainStateIsStart { get { return this["bMainStateIsStart"].Flag; } set { this["bMainStateIsStart"].Flag = value; } }
        public bool bMainStateIsStop { get { return this["bMainStateIsStop"].Flag; } set { this["bMainStateIsStop"].Flag = value; } }
        public bool bMainStateIsMovement { get { return this["bMainStateIsMovement"].Flag; } set { this["bMainStateIsMovement"].Flag = value; } }
        public bool bMainStateIsTurn { get { return this["bMainStateIsTurn"].Flag; } set { this["bMainStateIsTurn"].Flag = value; } }
    }
    public class DimensionBipedLocomotionState_StopMovement : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_StopMovement(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_StopMovement() : base(0) { }
        public EDimensionMovementType MovementTypeToUse { get { return (EDimensionMovementType)this["MovementTypeToUse"].GetValue<int>(); } set { this["MovementTypeToUse"].SetValue<int>((int)value); } }
        public AnimSequence PrimaryAnimation { get { return this[nameof(PrimaryAnimation)].As<AnimSequence>(); } set { this["PrimaryAnimation"] = value; } }
        public float PrimaryAnimationTime { get { return this["PrimaryAnimationTime"].GetValue<float>(); } set { this["PrimaryAnimationTime"].SetValue<float>(value); } }
        public AnimSequence SecondaryAnimation { get { return this[nameof(SecondaryAnimation)].As<AnimSequence>(); } set { this["SecondaryAnimation"] = value; } }
        public float SecondaryAnimationTime { get { return this["SecondaryAnimationTime"].GetValue<float>(); } set { this["SecondaryAnimationTime"].SetValue<float>(value); } }
        public UEObject AnimationTimeMap { get { return this["AnimationTimeMap"]; } set { this["AnimationTimeMap"] = value; } }
        public float BlendWeight { get { return this["BlendWeight"].GetValue<float>(); } set { this["BlendWeight"].SetValue<float>(value); } }
        public float TimeToAnimationEnd { get { return this["TimeToAnimationEnd"].GetValue<float>(); } set { this["TimeToAnimationEnd"].SetValue<float>(value); } }
    }
    public class DimensionBipedLocomotionState_StartMovement : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_StartMovement(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_StartMovement() : base(0) { }
        public AnimSequence PrimaryAnimation { get { return this[nameof(PrimaryAnimation)].As<AnimSequence>(); } set { this["PrimaryAnimation"] = value; } }
        public float PrimaryAnimationTime { get { return this["PrimaryAnimationTime"].GetValue<float>(); } set { this["PrimaryAnimationTime"].SetValue<float>(value); } }
        public AnimSequence SecondaryAnimation { get { return this[nameof(SecondaryAnimation)].As<AnimSequence>(); } set { this["SecondaryAnimation"] = value; } }
        public float SecondaryAnimationTime { get { return this["SecondaryAnimationTime"].GetValue<float>(); } set { this["SecondaryAnimationTime"].SetValue<float>(value); } }
        public float DirectionsBlendWeight { get { return this["DirectionsBlendWeight"].GetValue<float>(); } set { this["DirectionsBlendWeight"].SetValue<float>(value); } }
    }
    public class DimensionSpeedWarpingParameters : UEObject
    {
        public DimensionSpeedWarpingParameters(nint addr) : base(addr) { }
        public DimensionSpeedWarpingParameters() : base(0) { }
        public float IKScale { get { return this["IKScale"].GetValue<float>(); } set { this["IKScale"].SetValue<float>(value); } }
        public float PlayRate { get { return this["PlayRate"].GetValue<float>(); } set { this["PlayRate"].SetValue<float>(value); } }
    }
    public class DimensionBipedLocomotionState_Movement_FPDC : UEObject
    {
        public DimensionBipedLocomotionState_Movement_FPDC(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_Movement_FPDC() : base(0) { }
        public AnimSequence Run_AnimForward { get { return this[nameof(Run_AnimForward)].As<AnimSequence>(); } set { this["Run_AnimForward"] = value; } }
        public AnimSequence Run_AnimRight { get { return this[nameof(Run_AnimRight)].As<AnimSequence>(); } set { this["Run_AnimRight"] = value; } }
        public AnimSequence Run_AnimLeft { get { return this[nameof(Run_AnimLeft)].As<AnimSequence>(); } set { this["Run_AnimLeft"] = value; } }
        public AnimSequence Run_AnimBack { get { return this[nameof(Run_AnimBack)].As<AnimSequence>(); } set { this["Run_AnimBack"] = value; } }
        public float Run_PlayRate { get { return this["Run_PlayRate"].GetValue<float>(); } set { this["Run_PlayRate"].SetValue<float>(value); } }
        public float Run_IKScale { get { return this["Run_IKScale"].GetValue<float>(); } set { this["Run_IKScale"].SetValue<float>(value); } }
        public bool Run_SpeedWarpingAllowed { get { return this["Run_SpeedWarpingAllowed"].Flag; } set { this["Run_SpeedWarpingAllowed"].Flag = value; } }
        public EDimensionMovementDirection Run_BestLocomotionDirection { get { return (EDimensionMovementDirection)this["Run_BestLocomotionDirection"].GetValue<int>(); } set { this["Run_BestLocomotionDirection"].SetValue<int>((int)value); } }
        public AnimSequence Walk_AnimForward { get { return this[nameof(Walk_AnimForward)].As<AnimSequence>(); } set { this["Walk_AnimForward"] = value; } }
        public AnimSequence Walk_AnimRight { get { return this[nameof(Walk_AnimRight)].As<AnimSequence>(); } set { this["Walk_AnimRight"] = value; } }
        public AnimSequence Walk_AnimLeft { get { return this[nameof(Walk_AnimLeft)].As<AnimSequence>(); } set { this["Walk_AnimLeft"] = value; } }
        public AnimSequence Walk_AnimBack { get { return this[nameof(Walk_AnimBack)].As<AnimSequence>(); } set { this["Walk_AnimBack"] = value; } }
        public float Walk_PlayRate { get { return this["Walk_PlayRate"].GetValue<float>(); } set { this["Walk_PlayRate"].SetValue<float>(value); } }
        public float Walk_IKScale { get { return this["Walk_IKScale"].GetValue<float>(); } set { this["Walk_IKScale"].SetValue<float>(value); } }
        public bool Walk_SpeedWarpingAllowed { get { return this["Walk_SpeedWarpingAllowed"].Flag; } set { this["Walk_SpeedWarpingAllowed"].Flag = value; } }
        public EDimensionMovementDirection Walk_BestLocomotionDirection { get { return (EDimensionMovementDirection)this["Walk_BestLocomotionDirection"].GetValue<int>(); } set { this["Walk_BestLocomotionDirection"].SetValue<int>((int)value); } }
        public AnimSequence Sprint_AnimForward { get { return this[nameof(Sprint_AnimForward)].As<AnimSequence>(); } set { this["Sprint_AnimForward"] = value; } }
        public AnimSequence Sprint_AnimRight { get { return this[nameof(Sprint_AnimRight)].As<AnimSequence>(); } set { this["Sprint_AnimRight"] = value; } }
        public AnimSequence Sprint_AnimLeft { get { return this[nameof(Sprint_AnimLeft)].As<AnimSequence>(); } set { this["Sprint_AnimLeft"] = value; } }
        public AnimSequence Sprint_AnimBack { get { return this[nameof(Sprint_AnimBack)].As<AnimSequence>(); } set { this["Sprint_AnimBack"] = value; } }
        public float Sprint_PlayRate { get { return this["Sprint_PlayRate"].GetValue<float>(); } set { this["Sprint_PlayRate"].SetValue<float>(value); } }
        public float Sprint_IKScale { get { return this["Sprint_IKScale"].GetValue<float>(); } set { this["Sprint_IKScale"].SetValue<float>(value); } }
        public bool Sprint_SpeedWarpingAllowed { get { return this["Sprint_SpeedWarpingAllowed"].Flag; } set { this["Sprint_SpeedWarpingAllowed"].Flag = value; } }
        public EDimensionMovementDirection Sprint_BestLocomotionDirection { get { return (EDimensionMovementDirection)this["Sprint_BestLocomotionDirection"].GetValue<int>(); } set { this["Sprint_BestLocomotionDirection"].SetValue<int>((int)value); } }
    }
    public class DimensionBipedLocomotionState_Movement : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_Movement(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_Movement() : base(0) { }
        public bool bSpeedWarpingAllowed { get { return this["bSpeedWarpingAllowed"].Flag; } set { this["bSpeedWarpingAllowed"].Flag = value; } }
        public UEObject SpeedWarpingParameters { get { return this["SpeedWarpingParameters"]; } set { this["SpeedWarpingParameters"] = value; } }
        public float IdleBlendWeight { get { return this["IdleBlendWeight"].GetValue<float>(); } set { this["IdleBlendWeight"].SetValue<float>(value); } }
        public EDimensionMovementType MovementTypeToUse { get { return (EDimensionMovementType)this["MovementTypeToUse"].GetValue<int>(); } set { this["MovementTypeToUse"].SetValue<int>((int)value); } }
        public DimensionBipedLocomotionState_Movement_FPDC FPDC { get { return this[nameof(FPDC)].As<DimensionBipedLocomotionState_Movement_FPDC>(); } set { this["FPDC"] = value; } }
    }
    public class DimensionBipedLocomotionState_Montage : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_Montage(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_Montage() : base(0) { }
    }
    public class DimensionBipedLocomotionState_InPlaceTurn : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_InPlaceTurn(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_InPlaceTurn() : base(0) { }
        public AnimSequence SelectedAnimation { get { return this[nameof(SelectedAnimation)].As<AnimSequence>(); } set { this["SelectedAnimation"] = value; } }
        public float AnimationTime { get { return this["AnimationTime"].GetValue<float>(); } set { this["AnimationTime"].SetValue<float>(value); } }
        public float HorizontalAimOffset { get { return this["HorizontalAimOffset"].GetValue<float>(); } set { this["HorizontalAimOffset"].SetValue<float>(value); } }
    }
    public class DimensionBipedLocomotionState_Idle : DimensionBipedLocomotionState
    {
        public DimensionBipedLocomotionState_Idle(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState_Idle() : base(0) { }
    }
    public class DimensionBipedLocomotionState : UEObject
    {
        public DimensionBipedLocomotionState(nint addr) : base(addr) { }
        public DimensionBipedLocomotionState() : base(0) { }
        public DimensionBipedLocomotion Locomotion { get { return this[nameof(Locomotion)].As<DimensionBipedLocomotion>(); } set { this["Locomotion"] = value; } }
    }
    public class DimensionBipedLocomotionConfig : UEObject
    {
        public DimensionBipedLocomotionConfig(nint addr) : base(addr) { }
        public DimensionBipedLocomotionConfig() : base(0) { }
        public UEObject MovementAnimSets { get { return this["MovementAnimSets"]; } set { this["MovementAnimSets"] = value; } }
        public float DirectionBlendingTime { get { return this["DirectionBlendingTime"].GetValue<float>(); } set { this["DirectionBlendingTime"].SetValue<float>(value); } }
        public SpeedWarpingBonesConfig SpeedWarpingBonesConfig { get { return this[nameof(SpeedWarpingBonesConfig)].As<SpeedWarpingBonesConfig>(); } set { this["SpeedWarpingBonesConfig"] = value; } }
        public float InPlaceTurnPlayRate { get { return this["InPlaceTurnPlayRate"].GetValue<float>(); } set { this["InPlaceTurnPlayRate"].SetValue<float>(value); } }
        public AnimSequence InPlaceTurnRight90 { get { return this[nameof(InPlaceTurnRight90)].As<AnimSequence>(); } set { this["InPlaceTurnRight90"] = value; } }
        public AnimSequence InPlaceTurnRight180 { get { return this[nameof(InPlaceTurnRight180)].As<AnimSequence>(); } set { this["InPlaceTurnRight180"] = value; } }
        public AnimSequence InPlaceTurnLeft90 { get { return this[nameof(InPlaceTurnLeft90)].As<AnimSequence>(); } set { this["InPlaceTurnLeft90"] = value; } }
        public AnimSequence InPlaceTurnLeft180 { get { return this[nameof(InPlaceTurnLeft180)].As<AnimSequence>(); } set { this["InPlaceTurnLeft180"] = value; } }
    }
    public class DimensionBipedLocomotion_FPDC : UEObject
    {
        public DimensionBipedLocomotion_FPDC(nint addr) : base(addr) { }
        public DimensionBipedLocomotion_FPDC() : base(0) { }
        public float HorizontalAimOffsetDirection_Forward { get { return this["HorizontalAimOffsetDirection_Forward"].GetValue<float>(); } set { this["HorizontalAimOffsetDirection_Forward"].SetValue<float>(value); } }
        public float HorizontalAimOffsetDirection_Right { get { return this["HorizontalAimOffsetDirection_Right"].GetValue<float>(); } set { this["HorizontalAimOffsetDirection_Right"].SetValue<float>(value); } }
        public float HorizontalAimOffsetDirection_Left { get { return this["HorizontalAimOffsetDirection_Left"].GetValue<float>(); } set { this["HorizontalAimOffsetDirection_Left"].SetValue<float>(value); } }
        public float HorizontalAimOffsetDirection_Back { get { return this["HorizontalAimOffsetDirection_Back"].GetValue<float>(); } set { this["HorizontalAimOffsetDirection_Back"].SetValue<float>(value); } }
        public float RootBoneRotationDirection_Forward { get { return this["RootBoneRotationDirection_Forward"].GetValue<float>(); } set { this["RootBoneRotationDirection_Forward"].SetValue<float>(value); } }
        public float RootBoneRotationDirection_Right { get { return this["RootBoneRotationDirection_Right"].GetValue<float>(); } set { this["RootBoneRotationDirection_Right"].SetValue<float>(value); } }
        public float RootBoneRotationDirection_Left { get { return this["RootBoneRotationDirection_Left"].GetValue<float>(); } set { this["RootBoneRotationDirection_Left"].SetValue<float>(value); } }
        public float RootBoneRotationDirection_Back { get { return this["RootBoneRotationDirection_Back"].GetValue<float>(); } set { this["RootBoneRotationDirection_Back"].SetValue<float>(value); } }
    }
    public class DimensionBestLocomotionDirectionsInfo : UEObject
    {
        public DimensionBestLocomotionDirectionsInfo(nint addr) : base(addr) { }
        public DimensionBestLocomotionDirectionsInfo() : base(0) { }
        public EDimensionMovementDirection BestLocomotionDirection { get { return (EDimensionMovementDirection)this["BestLocomotionDirection"].GetValue<int>(); } set { this["BestLocomotionDirection"].SetValue<int>((int)value); } }
        public EDimensionMovementDirection SecondBestLocomotionDirection { get { return (EDimensionMovementDirection)this["SecondBestLocomotionDirection"].GetValue<int>(); } set { this["SecondBestLocomotionDirection"].SetValue<int>((int)value); } }
    }
    public class DamageComponentHandle : ComponentHandle
    {
        public DamageComponentHandle(nint addr) : base(addr) { }
        public DamageComponentHandle() : base(0) { }
    }
    public class DimensionGameplayEffectSet : UEObject
    {
        public DimensionGameplayEffectSet(nint addr) : base(addr) { }
        public DimensionGameplayEffectSet() : base(0) { }
        public EEffectApplyPolicy ApplyPolicy { get { return (EEffectApplyPolicy)this["ApplyPolicy"].GetValue<int>(); } set { this["ApplyPolicy"].SetValue<int>((int)value); } }
        public EWeaponSlotSelectionPolicy WeaponSlotSelectionPolicy { get { return (EWeaponSlotSelectionPolicy)this["WeaponSlotSelectionPolicy"].GetValue<int>(); } set { this["WeaponSlotSelectionPolicy"].SetValue<int>((int)value); } }
        public UEObject Effect { get { return this["Effect"]; } set { this["Effect"] = value; } }
        public UEObject Ability { get { return this["Ability"]; } set { this["Ability"] = value; } }
        public UEObject Modifier { get { return this["Modifier"]; } set { this["Modifier"] = value; } }
        public ActiveGameplayEffectHandle EffectHandle { get { return this[nameof(EffectHandle)].As<ActiveGameplayEffectHandle>(); } set { this["EffectHandle"] = value; } }
        public GameplayAbilitySpecHandle AbilityHandle { get { return this[nameof(AbilityHandle)].As<GameplayAbilitySpecHandle>(); } set { this["AbilityHandle"] = value; } }
        public DamageComponentHandle ModifierHandle { get { return this[nameof(ModifierHandle)].As<DamageComponentHandle>(); } set { this["ModifierHandle"] = value; } }
    }
    public class DimensionItemPropertyDisplayData : TableRowBase
    {
        public DimensionItemPropertyDisplayData(nint addr) : base(addr) { }
        public DimensionItemPropertyDisplayData() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUseCurveTableValue { get { return this["bUseCurveTableValue"].Flag; } set { this["bUseCurveTableValue"].Flag = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public CurveTableRowHandle ValueHandle { get { return this[nameof(ValueHandle)].As<CurveTableRowHandle>(); } set { this["ValueHandle"] = value; } }
        public EDimensionDisplayParameterType Type { get { return (EDimensionDisplayParameterType)this["Type"].GetValue<int>(); } set { this["Type"].SetValue<int>((int)value); } }
        public bool bIsPositive { get { return this["bIsPositive"].Flag; } set { this["bIsPositive"].Flag = value; } }
        public bool bDisplayPositiveSign { get { return this["bDisplayPositiveSign"].Flag; } set { this["bDisplayPositiveSign"].Flag = value; } }
        public int PreviewLevel { get { return this["PreviewLevel"].GetValue<int>(); } set { this["PreviewLevel"].SetValue<int>(value); } }
        public string PreviewValue { get { return this["PreviewValue"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionBeadData : DimensionAssetLoadingData
    {
        public DimensionBeadData(nint addr) : base(addr) { }
        public DimensionBeadData() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public Array<DataTableRowHandle> DisplayProperties { get { return new Array<DataTableRowHandle>(this["DisplayProperties"]); } set { this["DisplayProperties"] = value; } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public int Tier { get { return this["Tier"].GetValue<int>(); } set { this["Tier"].SetValue<int>(value); } }
        public Array<DimensionGameplayEffectSet> BeadEffects { get { return new Array<DimensionGameplayEffectSet>(this["BeadEffects"]); } set { this["BeadEffects"] = value; } }
        public UEObject AttributeRequirements { get { return this["AttributeRequirements"]; } set { this["AttributeRequirements"] = value; } }
        public Array<DimensionItemPropertyDisplayData> GeneratedDisplayProperties { get { return new Array<DimensionItemPropertyDisplayData>(this["GeneratedDisplayProperties"]); } set { this["GeneratedDisplayProperties"] = value; } }
    }
    public class DimensionBeadSlotRequirements : UEObject
    {
        public DimensionBeadSlotRequirements(nint addr) : base(addr) { }
        public DimensionBeadSlotRequirements() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionAttributeRequirementSet AttributeRequirements { get { return this[nameof(AttributeRequirements)].As<DimensionAttributeRequirementSet>(); } set { this["AttributeRequirements"] = value; } }
        public ProgressManagerQuery ProgressionRequirements { get { return this[nameof(ProgressionRequirements)].As<ProgressManagerQuery>(); } set { this["ProgressionRequirements"] = value; } }
    }
    public class BeadSortingRule : UEObject
    {
        public BeadSortingRule(nint addr) : base(addr) { }
        public BeadSortingRule() : base(0) { }
        public EBeadSortingType SortingType { get { return (EBeadSortingType)this["SortingType"].GetValue<int>(); } set { this["SortingType"].SetValue<int>((int)value); } }
        public ESortingOrder Order { get { return (ESortingOrder)this["Order"].GetValue<int>(); } set { this["Order"].SetValue<int>((int)value); } }
    }
    public class BeadPool : UEObject
    {
        public BeadPool(nint addr) : base(addr) { }
        public BeadPool() : base(0) { }
        public string PoolID { get { return this["PoolID"].ToString(); } set { /* String properties are read-only */ } }
        public bool bUnique { get { return this["bUnique"].Flag; } set { this["bUnique"].Flag = value; } }
        public Array<DataTableRowHandle> BeadHandles { get { return new Array<DataTableRowHandle>(this["BeadHandles"]); } set { this["BeadHandles"] = value; } }
    }
    public class LightScenario : UEObject
    {
        public LightScenario(nint addr) : base(addr) { }
        public LightScenario() : base(0) { }
        public UEObject MainScenario { get { return this["MainScenario"]; } set { this["MainScenario"] = value; } }
        public Array<UEObject> PositiveScenarioSubLevels { get { return new Array<UEObject>(this["PositiveScenarioSubLevels"]); } set { this["PositiveScenarioSubLevels"] = value; } }
        public Array<UEObject> NegativeScenarioSubLevels { get { return new Array<UEObject>(this["NegativeScenarioSubLevels"]); } set { this["NegativeScenarioSubLevels"] = value; } }
        public string ReadableScenarioName { get { return this["ReadableScenarioName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionAttribData : TableRowBase
    {
        public DimensionAttribData(nint addr) : base(addr) { }
        public DimensionAttribData() : base(0) { }
    }
    public class HashableDataTableRowHandle : UEObject
    {
        public HashableDataTableRowHandle(nint addr) : base(addr) { }
        public HashableDataTableRowHandle() : base(0) { }
        public DataTableRowHandle Handle { get { return this[nameof(Handle)].As<DataTableRowHandle>(); } set { this["Handle"] = value; } }
    }
    public class AssetLoadingData : UEObject
    {
        public AssetLoadingData(nint addr) : base(addr) { }
        public AssetLoadingData() : base(0) { }
        public int ID { get { return this["ID"].GetValue<int>(); } set { this["ID"].SetValue<int>(value); } }
        public Array<SoftObjectPath> Assets { get { return new Array<SoftObjectPath>(this["Assets"]); } set { this["Assets"] = value; } }
        public UEObject DynamicDelegate { get { return this["DynamicDelegate"]; } set { this["DynamicDelegate"] = value; } }
    }
    public class SimpleTriangle : UEObject
    {
        public SimpleTriangle(nint addr) : base(addr) { }
        public SimpleTriangle() : base(0) { }
        public Vector V0 { get { return this[nameof(V0)].As<Vector>(); } set { this["V0"] = value; } }
        public Vector v1 { get { return this[nameof(v1)].As<Vector>(); } set { this["v1"] = value; } }
        public Vector v2 { get { return this[nameof(v2)].As<Vector>(); } set { this["v2"] = value; } }
    }
    public class ArenaBarrier : UEObject
    {
        public ArenaBarrier(nint addr) : base(addr) { }
        public ArenaBarrier() : base(0) { }
        public DimensionBarrier Barrier { get { return this[nameof(Barrier)].As<DimensionBarrier>(); } set { this["Barrier"] = value; } }
        public bool bReverted { get { return this["bReverted"].Flag; } set { this["bReverted"].Flag = value; } }
        public int NumPointsPerSpline { get { return this["NumPointsPerSpline"].GetValue<int>(); } set { this["NumPointsPerSpline"].SetValue<int>(value); } }
        public string BarrierName { get { return this["BarrierName"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionSpawnData : DimensionAssetLoadingData
    {
        public DimensionSpawnData(nint addr) : base(addr) { }
        public DimensionSpawnData() : base(0) { }
        public bool bGenerateAllPresets { get { return this["bGenerateAllPresets"].Flag; } set { this["bGenerateAllPresets"].Flag = value; } }
        public CurveTableRowHandle CostData { get { return this[nameof(CostData)].As<CurveTableRowHandle>(); } set { this["CostData"] = value; } }
        public bool bFixedTokenCount { get { return this["bFixedTokenCount"].Flag; } set { this["bFixedTokenCount"].Flag = value; } }
        public CurveTableRowHandle TokenData { get { return this[nameof(TokenData)].As<CurveTableRowHandle>(); } set { this["TokenData"] = value; } }
        public int TokenCount { get { return this["TokenCount"].GetValue<int>(); } set { this["TokenCount"].SetValue<int>(value); } }
        public Array<DataTableRowHandle> EnemyPresets { get { return new Array<DataTableRowHandle>(this["EnemyPresets"]); } set { this["EnemyPresets"] = value; } }
        public bool bRandomizeGeneratedPresets { get { return this["bRandomizeGeneratedPresets"].Flag; } set { this["bRandomizeGeneratedPresets"].Flag = value; } }
        public EnumArray<ESpawnPresetSortingType> PresetSorting { get { return new EnumArray<ESpawnPresetSortingType>(this["PresetSorting"]); } set { this["PresetSorting"] = value; } }
        public bool bPreferUniquePresets { get { return this["bPreferUniquePresets"].Flag; } set { this["bPreferUniquePresets"].Flag = value; } }
        public int DifficultyLevel { get { return this["DifficultyLevel"].GetValue<int>(); } set { this["DifficultyLevel"].SetValue<int>(value); } }
        public Array<DimensionSpawnPreset> GeneratedEnemyPresets { get { return new Array<DimensionSpawnPreset>(this["GeneratedEnemyPresets"]); } set { this["GeneratedEnemyPresets"] = value; } }
        public Array<DataTableRowHandle> GeneratedEnemyPresetsHandles { get { return new Array<DataTableRowHandle>(this["GeneratedEnemyPresetsHandles"]); } set { this["GeneratedEnemyPresetsHandles"] = value; } }
    }
    public class DimensionArenaData : TableRowBase
    {
        public DimensionArenaData(nint addr) : base(addr) { }
        public DimensionArenaData() : base(0) { }
        public Array<DataTableRowHandle> AvailableMissions { get { return new Array<DataTableRowHandle>(this["AvailableMissions"]); } set { this["AvailableMissions"] = value; } }
        public DataTableRowHandle SpawnDataHandle { get { return this[nameof(SpawnDataHandle)].As<DataTableRowHandle>(); } set { this["SpawnDataHandle"] = value; } }
        public DimensionSpawnData SpawnData { get { return this[nameof(SpawnData)].As<DimensionSpawnData>(); } set { this["SpawnData"] = value; } }
        public DataTableRowHandle ChosenMission { get { return this[nameof(ChosenMission)].As<DataTableRowHandle>(); } set { this["ChosenMission"] = value; } }
        public bool bGenerated { get { return this["bGenerated"].Flag; } set { this["bGenerated"].Flag = value; } }
    }
    public class DimensionAnimMovementSet : UEObject
    {
        public DimensionAnimMovementSet(nint addr) : base(addr) { }
        public DimensionAnimMovementSet() : base(0) { }
        public bool bIgnore { get { return this["bIgnore"].Flag; } set { this["bIgnore"].Flag = value; } }
        public UEObject Sets { get { return this["Sets"]; } set { this["Sets"] = value; } }
        public UEObject DirectionRanges { get { return this["DirectionRanges"]; } set { this["DirectionRanges"] = value; } }
        public float StopTriggerThreshold { get { return this["StopTriggerThreshold"].GetValue<float>(); } set { this["StopTriggerThreshold"].SetValue<float>(value); } }
        public float UnscaledSpeed2D { get { return this["UnscaledSpeed2D"].GetValue<float>(); } set { this["UnscaledSpeed2D"].SetValue<float>(value); } }
        public bool bEnableSpeedWarping { get { return this["bEnableSpeedWarping"].Flag; } set { this["bEnableSpeedWarping"].Flag = value; } }
        public Vector2D SpeedWarpingRange { get { return this[nameof(SpeedWarpingRange)].As<Vector2D>(); } set { this["SpeedWarpingRange"] = value; } }
    }
    public class DimensionAnimMovementDirectionSet : UEObject
    {
        public DimensionAnimMovementDirectionSet(nint addr) : base(addr) { }
        public DimensionAnimMovementDirectionSet() : base(0) { }
        public UEObject Anims { get { return this["Anims"]; } set { this["Anims"] = value; } }
    }
    public class DimensionAnimInstanceDataCopy : UEObject
    {
        public DimensionAnimInstanceDataCopy(nint addr) : base(addr) { }
        public DimensionAnimInstanceDataCopy() : base(0) { }
        public bool bAnimInstanceIsValid { get { return this["bAnimInstanceIsValid"].Flag; } set { this["bAnimInstanceIsValid"].Flag = value; } }
        public bool bAimOffsetIsValid { get { return this["bAimOffsetIsValid"].Flag; } set { this["bAimOffsetIsValid"].Flag = value; } }
        public AnimSequence IdleAnimation { get { return this[nameof(IdleAnimation)].As<AnimSequence>(); } set { this["IdleAnimation"] = value; } }
        public AimOffsetBlendSpace AimOffset { get { return this[nameof(AimOffset)].As<AimOffsetBlendSpace>(); } set { this["AimOffset"] = value; } }
    }
    public class DimensionMontageGroup3P : DimensionMontageGroup
    {
        public DimensionMontageGroup3P(nint addr) : base(addr) { }
        public DimensionMontageGroup3P() : base(0) { }
        public Array<UEObject> AnimMontages3P { get { return new Array<UEObject>(this["AnimMontages3P"]); } set { this["AnimMontages3P"] = value; } }
    }
    public class DimensionPawnWeaponAnimationSet : DimensionAssetLoadingData
    {
        public DimensionPawnWeaponAnimationSet(nint addr) : base(addr) { }
        public DimensionPawnWeaponAnimationSet() : base(0) { }
        public Vector HipfireOffset { get { return this[nameof(HipfireOffset)].As<Vector>(); } set { this["HipfireOffset"] = value; } }
        public Vector ADSOffset { get { return this[nameof(ADSOffset)].As<Vector>(); } set { this["ADSOffset"] = value; } }
        public Vector ADSDotOffset { get { return this[nameof(ADSDotOffset)].As<Vector>(); } set { this["ADSDotOffset"] = value; } }
        public bool bUseProceduralDotMovement { get { return this["bUseProceduralDotMovement"].Flag; } set { this["bUseProceduralDotMovement"].Flag = value; } }
        public float RecoilVectorLength { get { return this["RecoilVectorLength"].GetValue<float>(); } set { this["RecoilVectorLength"].SetValue<float>(value); } }
        public float HipfireNoKickBlendWeight { get { return this["HipfireNoKickBlendWeight"].GetValue<float>(); } set { this["HipfireNoKickBlendWeight"].SetValue<float>(value); } }
        public float ADSNoKickBlendWeight { get { return this["ADSNoKickBlendWeight"].GetValue<float>(); } set { this["ADSNoKickBlendWeight"].SetValue<float>(value); } }
        public bool bShouldUseAimingAnimationOverMontages { get { return this["bShouldUseAimingAnimationOverMontages"].Flag; } set { this["bShouldUseAimingAnimationOverMontages"].Flag = value; } }
        public DimensionMontageGroup3P FireMontages { get { return this[nameof(FireMontages)].As<DimensionMontageGroup3P>(); } set { this["FireMontages"] = value; } }
        public DimensionMontageGroup3P FireNoRecoilMontages { get { return this[nameof(FireNoRecoilMontages)].As<DimensionMontageGroup3P>(); } set { this["FireNoRecoilMontages"] = value; } }
        public DimensionMontageGroup3P LastFireMontages { get { return this[nameof(LastFireMontages)].As<DimensionMontageGroup3P>(); } set { this["LastFireMontages"] = value; } }
        public DimensionWeaponMontagePair M_Reload { get { return this[nameof(M_Reload)].As<DimensionWeaponMontagePair>(); } set { this["M_Reload"] = value; } }
        public DimensionWeaponMontagePair M_Equip { get { return this[nameof(M_Equip)].As<DimensionWeaponMontagePair>(); } set { this["M_Equip"] = value; } }
        public DimensionWeaponMontagePair M_Unequip { get { return this[nameof(M_Unequip)].As<DimensionWeaponMontagePair>(); } set { this["M_Unequip"] = value; } }
        public DimensionWeaponMontagePair M_Jump { get { return this[nameof(M_Jump)].As<DimensionWeaponMontagePair>(); } set { this["M_Jump"] = value; } }
        public DimensionWeaponMontagePair M_LandSoft { get { return this[nameof(M_LandSoft)].As<DimensionWeaponMontagePair>(); } set { this["M_LandSoft"] = value; } }
        public DimensionWeaponMontagePair M_Land { get { return this[nameof(M_Land)].As<DimensionWeaponMontagePair>(); } set { this["M_Land"] = value; } }
        public DimensionWeaponMontagePair M_LandHard { get { return this[nameof(M_LandHard)].As<DimensionWeaponMontagePair>(); } set { this["M_LandHard"] = value; } }
        public DimensionWeaponMontagePair M_LandVeryHard { get { return this[nameof(M_LandVeryHard)].As<DimensionWeaponMontagePair>(); } set { this["M_LandVeryHard"] = value; } }
        public DimensionWeaponMontagePair M_DashAbility { get { return this[nameof(M_DashAbility)].As<DimensionWeaponMontagePair>(); } set { this["M_DashAbility"] = value; } }
        public DimensionWeaponMontagePair M_Crouch { get { return this[nameof(M_Crouch)].As<DimensionWeaponMontagePair>(); } set { this["M_Crouch"] = value; } }
        public DimensionWeaponMontagePair M_Uncrouch { get { return this[nameof(M_Uncrouch)].As<DimensionWeaponMontagePair>(); } set { this["M_Uncrouch"] = value; } }
        public DimensionWeaponMontagePair M_FireStart { get { return this[nameof(M_FireStart)].As<DimensionWeaponMontagePair>(); } set { this["M_FireStart"] = value; } }
        public DimensionWeaponMontagePair M_FireStop { get { return this[nameof(M_FireStop)].As<DimensionWeaponMontagePair>(); } set { this["M_FireStop"] = value; } }
        public UEObject CustomMontages { get { return this["CustomMontages"]; } set { this["CustomMontages"] = value; } }
        public bool bUseFireStartMontage { get { return this["bUseFireStartMontage"].Flag; } set { this["bUseFireStartMontage"].Flag = value; } }
        public bool bUseFireStopMontage { get { return this["bUseFireStopMontage"].Flag; } set { this["bUseFireStopMontage"].Flag = value; } }
        public float RunStopPlaySpeed { get { return this["RunStopPlaySpeed"].GetValue<float>(); } set { this["RunStopPlaySpeed"].SetValue<float>(value); } }
        public UEObject S_Idle_Ptr { get { return this["S_Idle_Ptr"]; } set { this["S_Idle_Ptr"] = value; } }
        public UEObject S_IdleADS_Ptr { get { return this["S_IdleADS_Ptr"]; } set { this["S_IdleADS_Ptr"] = value; } }
        public UEObject S_Run_Ptr { get { return this["S_Run_Ptr"]; } set { this["S_Run_Ptr"] = value; } }
        public UEObject S_Slide_Ptr { get { return this["S_Slide_Ptr"]; } set { this["S_Slide_Ptr"] = value; } }
        public UEObject S_RunStop_Ptr { get { return this["S_RunStop_Ptr"]; } set { this["S_RunStop_Ptr"] = value; } }
        public UEObject S_WalkStop_Ptr { get { return this["S_WalkStop_Ptr"]; } set { this["S_WalkStop_Ptr"] = value; } }
        public UEObject S_WalkStopADS_Ptr { get { return this["S_WalkStopADS_Ptr"]; } set { this["S_WalkStopADS_Ptr"] = value; } }
        public UEObject S_AimStart_Ptr { get { return this["S_AimStart_Ptr"]; } set { this["S_AimStart_Ptr"] = value; } }
        public UEObject S_AimStop_Ptr { get { return this["S_AimStop_Ptr"]; } set { this["S_AimStop_Ptr"] = value; } }
        public UEObject S_Fall_Ptr { get { return this["S_Fall_Ptr"]; } set { this["S_Fall_Ptr"] = value; } }
        public UEObject S_AO_CC_Ptr { get { return this["S_AO_CC_Ptr"]; } set { this["S_AO_CC_Ptr"] = value; } }
        public UEObject S_AO_ADS_CC_Ptr { get { return this["S_AO_ADS_CC_Ptr"]; } set { this["S_AO_ADS_CC_Ptr"] = value; } }
        public UEObject AO_DO_FB_Ptr { get { return this["AO_DO_FB_Ptr"]; } set { this["AO_DO_FB_Ptr"] = value; } }
        public UEObject AO_DO_LR_Ptr { get { return this["AO_DO_LR_Ptr"]; } set { this["AO_DO_LR_Ptr"] = value; } }
        public UEObject AO_DO_UD_Ptr { get { return this["AO_DO_UD_Ptr"]; } set { this["AO_DO_UD_Ptr"] = value; } }
        public UEObject AO_Ptr { get { return this["AO_Ptr"]; } set { this["AO_Ptr"] = value; } }
        public UEObject AO_DO_ADS_FB_Ptr { get { return this["AO_DO_ADS_FB_Ptr"]; } set { this["AO_DO_ADS_FB_Ptr"] = value; } }
        public UEObject AO_DO_ADS_LR_Ptr { get { return this["AO_DO_ADS_LR_Ptr"]; } set { this["AO_DO_ADS_LR_Ptr"] = value; } }
        public UEObject AO_DO_ADS_UD_Ptr { get { return this["AO_DO_ADS_UD_Ptr"]; } set { this["AO_DO_ADS_UD_Ptr"] = value; } }
        public UEObject AO_ADS_Ptr { get { return this["AO_ADS_Ptr"]; } set { this["AO_ADS_Ptr"] = value; } }
        public UEObject BS_Walk_Ptr { get { return this["BS_Walk_Ptr"]; } set { this["BS_Walk_Ptr"] = value; } }
        public UEObject BS_WalkADS_Ptr { get { return this["BS_WalkADS_Ptr"]; } set { this["BS_WalkADS_Ptr"] = value; } }
        public AnimSequence S_Idle { get { return this[nameof(S_Idle)].As<AnimSequence>(); } set { this["S_Idle"] = value; } }
        public AnimSequence S_IdleADS { get { return this[nameof(S_IdleADS)].As<AnimSequence>(); } set { this["S_IdleADS"] = value; } }
        public AnimSequence S_Run { get { return this[nameof(S_Run)].As<AnimSequence>(); } set { this["S_Run"] = value; } }
        public AnimSequence S_Slide { get { return this[nameof(S_Slide)].As<AnimSequence>(); } set { this["S_Slide"] = value; } }
        public AnimSequence S_RunStop { get { return this[nameof(S_RunStop)].As<AnimSequence>(); } set { this["S_RunStop"] = value; } }
        public AnimSequence S_WalkStop { get { return this[nameof(S_WalkStop)].As<AnimSequence>(); } set { this["S_WalkStop"] = value; } }
        public AnimSequence S_WalkStopADS { get { return this[nameof(S_WalkStopADS)].As<AnimSequence>(); } set { this["S_WalkStopADS"] = value; } }
        public AnimSequence S_AimStart { get { return this[nameof(S_AimStart)].As<AnimSequence>(); } set { this["S_AimStart"] = value; } }
        public AnimSequence S_AimStop { get { return this[nameof(S_AimStop)].As<AnimSequence>(); } set { this["S_AimStop"] = value; } }
        public AnimSequence S_Fall { get { return this[nameof(S_Fall)].As<AnimSequence>(); } set { this["S_Fall"] = value; } }
        public AnimSequence S_AO_CC { get { return this[nameof(S_AO_CC)].As<AnimSequence>(); } set { this["S_AO_CC"] = value; } }
        public AnimSequence S_AO_ADS_CC { get { return this[nameof(S_AO_ADS_CC)].As<AnimSequence>(); } set { this["S_AO_ADS_CC"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_FB { get { return this[nameof(AO_DO_FB)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_FB"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_LR { get { return this[nameof(AO_DO_LR)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_LR"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_UD { get { return this[nameof(AO_DO_UD)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_UD"] = value; } }
        public AimOffsetBlendSpace ao { get { return this[nameof(ao)].As<AimOffsetBlendSpace>(); } set { this["ao"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_ADS_FB { get { return this[nameof(AO_DO_ADS_FB)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_ADS_FB"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_ADS_LR { get { return this[nameof(AO_DO_ADS_LR)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_ADS_LR"] = value; } }
        public AimOffsetBlendSpace1D AO_DO_ADS_UD { get { return this[nameof(AO_DO_ADS_UD)].As<AimOffsetBlendSpace1D>(); } set { this["AO_DO_ADS_UD"] = value; } }
        public AimOffsetBlendSpace AO_ADS { get { return this[nameof(AO_ADS)].As<AimOffsetBlendSpace>(); } set { this["AO_ADS"] = value; } }
        public BlendSpace1D BS_Walk { get { return this[nameof(BS_Walk)].As<BlendSpace1D>(); } set { this["BS_Walk"] = value; } }
        public BlendSpace1D BS_WalkADS { get { return this[nameof(BS_WalkADS)].As<BlendSpace1D>(); } set { this["BS_WalkADS"] = value; } }
    }
    public class DimensionMontageGroup : DimensionAssetLoadingData
    {
        public DimensionMontageGroup(nint addr) : base(addr) { }
        public DimensionMontageGroup() : base(0) { }
        public Array<UEObject> AnimMontages { get { return new Array<UEObject>(this["AnimMontages"]); } set { this["AnimMontages"] = value; } }
        public bool bDebugMontages { get { return this["bDebugMontages"].Flag; } set { this["bDebugMontages"].Flag = value; } }
    }
    public class DimensionWeaponAnimationSet : DimensionAssetLoadingData
    {
        public DimensionWeaponAnimationSet(nint addr) : base(addr) { }
        public DimensionWeaponAnimationSet() : base(0) { }
        public DimensionMontageGroup FireMontages { get { return this[nameof(FireMontages)].As<DimensionMontageGroup>(); } set { this["FireMontages"] = value; } }
        public UEObject M_LastFire { get { return this["M_LastFire"]; } set { this["M_LastFire"] = value; } }
        public UEObject M_Reload { get { return this["M_Reload"]; } set { this["M_Reload"] = value; } }
        public bool bHasFireADSMontages { get { return this["bHasFireADSMontages"].Flag; } set { this["bHasFireADSMontages"].Flag = value; } }
        public DimensionMontageGroup FireADSMontages { get { return this[nameof(FireADSMontages)].As<DimensionMontageGroup>(); } set { this["FireADSMontages"] = value; } }
        public UEObject M_LastFireADS { get { return this["M_LastFireADS"]; } set { this["M_LastFireADS"] = value; } }
        public UEObject CustomMontages { get { return this["CustomMontages"]; } set { this["CustomMontages"] = value; } }
    }
    public class DimensionWeaponMontagePair : DimensionAssetLoadingData
    {
        public DimensionWeaponMontagePair(nint addr) : base(addr) { }
        public DimensionWeaponMontagePair() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Montage1P { get { return this["Montage1P"]; } set { this["Montage1P"] = value; } }
        public UEObject Montage3P { get { return this["Montage3P"]; } set { this["Montage3P"] = value; } }
        public AnimMontage Montage1PInstance { get { return this[nameof(Montage1PInstance)].As<AnimMontage>(); } set { this["Montage1PInstance"] = value; } }
        public AnimMontage Montage3PInstance { get { return this[nameof(Montage3PInstance)].As<AnimMontage>(); } set { this["Montage3PInstance"] = value; } }
    }
    public class DimensionWeaponMontageSet : DimensionAssetLoadingData
    {
        public DimensionWeaponMontageSet(nint addr) : base(addr) { }
        public DimensionWeaponMontageSet() : base(0) { }
        public Array<DimensionWeaponMontagePair> Montages { get { return new Array<DimensionWeaponMontagePair>(this["Montages"]); } set { this["Montages"] = value; } }
    }
    public class AnimationSegmentData : UEObject
    {
        public AnimationSegmentData(nint addr) : base(addr) { }
        public AnimationSegmentData() : base(0) { }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
    }
    public class ObjectAllocationData : UEObject
    {
        public ObjectAllocationData(nint addr) : base(addr) { }
        public ObjectAllocationData() : base(0) { }
        public int AllocationID { get { return this["AllocationID"].GetValue<int>(); } set { this["AllocationID"].SetValue<int>(value); } }
        public UEObject ObjectClass { get { return this["ObjectClass"]; } set { this["ObjectClass"] = value; } }
        public UEObject ObjectSoftClassPtr { get { return this["ObjectSoftClassPtr"]; } set { this["ObjectSoftClassPtr"] = value; } }
        public UEObject ObjectOuter { get { return this[nameof(ObjectOuter)]; } set { this["ObjectOuter"] = value; } }
    }
    public class DimensionAlchemyRecipe : DimensionAssetLoadingData
    {
        public DimensionAlchemyRecipe(nint addr) : base(addr) { }
        public DimensionAlchemyRecipe() : base(0) { }
        public bool bIsWhitelisted { get { return this["bIsWhitelisted"].Flag; } set { this["bIsWhitelisted"].Flag = value; } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GameplayAbility { get { return this["GameplayAbility"]; } set { this["GameplayAbility"] = value; } }
        public Array<DimensionItemRequirement> Ingredients { get { return new Array<DimensionItemRequirement>(this["Ingredients"]); } set { this["Ingredients"] = value; } }
        public DimensionRequirementsData UnlockRequirements { get { return this[nameof(UnlockRequirements)].As<DimensionRequirementsData>(); } set { this["UnlockRequirements"] = value; } }
    }
    public class DimensionGameplayTagMemory : UEObject
    {
        public DimensionGameplayTagMemory(nint addr) : base(addr) { }
        public DimensionGameplayTagMemory() : base(0) { }
        public GameplayTag Tag { get { return this[nameof(Tag)].As<GameplayTag>(); } set { this["Tag"] = value; } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
    }
    public class DimensionEnemySpatialInfo : UEObject
    {
        public DimensionEnemySpatialInfo(nint addr) : base(addr) { }
        public DimensionEnemySpatialInfo() : base(0) { }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
    }
    public class DimensionEnemyInfo : UEObject
    {
        public DimensionEnemyInfo(nint addr) : base(addr) { }
        public DimensionEnemyInfo() : base(0) { }
        public Actor Enemy { get { return this[nameof(Enemy)].As<Actor>(); } set { this["Enemy"] = value; } }
        public Array<DimensionEnemySpatialInfo> SpatialInfos { get { return new Array<DimensionEnemySpatialInfo>(this["SpatialInfos"]); } set { this["SpatialInfos"] = value; } }
        public float SpottedTimestamp { get { return this["SpottedTimestamp"].GetValue<float>(); } set { this["SpottedTimestamp"].SetValue<float>(value); } }
        public float DetectionTimestamp { get { return this["DetectionTimestamp"].GetValue<float>(); } set { this["DetectionTimestamp"].SetValue<float>(value); } }
        public float MinAggro { get { return this["MinAggro"].GetValue<float>(); } set { this["MinAggro"].SetValue<float>(value); } }
        public float MaxAggro { get { return this["MaxAggro"].GetValue<float>(); } set { this["MaxAggro"].SetValue<float>(value); } }
        public float AggroMultiplier { get { return this["AggroMultiplier"].GetValue<float>(); } set { this["AggroMultiplier"].SetValue<float>(value); } }
        public bool bSpotted { get { return this["bSpotted"].Flag; } set { this["bSpotted"].Flag = value; } }
        public bool bDetected { get { return this["bDetected"].Flag; } set { this["bDetected"].Flag = value; } }
        public float Aggro { get { return this["Aggro"].GetValue<float>(); } set { this["Aggro"].SetValue<float>(value); } }
        public TimerHandle DetectionTimerHandle { get { return this[nameof(DetectionTimerHandle)].As<TimerHandle>(); } set { this["DetectionTimerHandle"] = value; } }
        public TimerHandle SpottedTimerHandle { get { return this[nameof(SpottedTimerHandle)].As<TimerHandle>(); } set { this["SpottedTimerHandle"] = value; } }
    }
    public class AbilityCachedDataDebug : UEObject
    {
        public AbilityCachedDataDebug(nint addr) : base(addr) { }
        public AbilityCachedDataDebug() : base(0) { }
    }
    public class AbilityCachedData : UEObject
    {
        public AbilityCachedData(nint addr) : base(addr) { }
        public AbilityCachedData() : base(0) { }
        public GameplayAbilitySpecHandle AbilityHandle { get { return this[nameof(AbilityHandle)].As<GameplayAbilitySpecHandle>(); } set { this["AbilityHandle"] = value; } }
        public DimensionAIControllerBase OwnerController { get { return this[nameof(OwnerController)].As<DimensionAIControllerBase>(); } set { this["OwnerController"] = value; } }
        public DimensionAbilitySystemComponent AbilitySystemComponent { get { return this[nameof(AbilitySystemComponent)].As<DimensionAbilitySystemComponent>(); } set { this["AbilitySystemComponent"] = value; } }
        public string AbilityName { get { return this["AbilityName"].ToString(); } set { /* String properties are read-only */ } }
        public ActionModifiers AbilityFlags { get { return this[nameof(AbilityFlags)].As<ActionModifiers>(); } set { this["AbilityFlags"] = value; } }
        public AbilityCachedDataDebug AbilityCacheDebug { get { return this[nameof(AbilityCacheDebug)].As<AbilityCachedDataDebug>(); } set { this["AbilityCacheDebug"] = value; } }
        public EnvQuery LocationEQS { get { return this[nameof(LocationEQS)].As<EnvQuery>(); } set { this["LocationEQS"] = value; } }
        public EnvQuery TargetEQS { get { return this[nameof(TargetEQS)].As<EnvQuery>(); } set { this["TargetEQS"] = value; } }
        public int RequiredTargetsNum { get { return this["RequiredTargetsNum"].GetValue<int>(); } set { this["RequiredTargetsNum"].SetValue<int>(value); } }
        public Array<Vector> TargetLocations { get { return new Array<Vector>(this["TargetLocations"]); } set { this["TargetLocations"] = value; } }
        public string FailDesc { get { return this["FailDesc"].ToString(); } set { /* String properties are read-only */ } }
        public float SearchRange { get { return this["SearchRange"].GetValue<float>(); } set { this["SearchRange"].SetValue<float>(value); } }
    }
    public class DimensionReactionAnimationDetails : UEObject
    {
        public DimensionReactionAnimationDetails(nint addr) : base(addr) { }
        public DimensionReactionAnimationDetails() : base(0) { }
        public AnimMontage Montage { get { return this[nameof(Montage)].As<AnimMontage>(); } set { this["Montage"] = value; } }
        public EDimensionReactionDirection Direction { get { return (EDimensionReactionDirection)this["Direction"].GetValue<int>(); } set { this["Direction"].SetValue<int>((int)value); } }
        public string BoneName { get { return this["BoneName"].ToString(); } set { /* String properties are read-only */ } }
        public float DirectionRotation { get { return this["DirectionRotation"].GetValue<float>(); } set { this["DirectionRotation"].SetValue<float>(value); } }
    }
    public class DimensionAIAbilityDefinition : UEObject
    {
        public DimensionAIAbilityDefinition(nint addr) : base(addr) { }
        public DimensionAIAbilityDefinition() : base(0) { }
        public UEObject AbilityClass { get { return this["AbilityClass"]; } set { this["AbilityClass"] = value; } }
        public EnvQuery AbilityQuery { get { return this[nameof(AbilityQuery)].As<EnvQuery>(); } set { this["AbilityQuery"] = value; } }
        public float AbilityScoringFactor { get { return this["AbilityScoringFactor"].GetValue<float>(); } set { this["AbilityScoringFactor"].SetValue<float>(value); } }
    }
    public class MapStringToGameplayTag : UEObject
    {
        public MapStringToGameplayTag(nint addr) : base(addr) { }
        public MapStringToGameplayTag() : base(0) { }
        public UEObject Map { get { return this["Map"]; } set { this["Map"] = value; } }
    }
    public class ArrayGameplayTag : UEObject
    {
        public ArrayGameplayTag(nint addr) : base(addr) { }
        public ArrayGameplayTag() : base(0) { }
        public Array<GameplayTag> Array { get { return new Array<GameplayTag>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class ArrayCountableGameplayTag : UEObject
    {
        public ArrayCountableGameplayTag(nint addr) : base(addr) { }
        public ArrayCountableGameplayTag() : base(0) { }
        public Array<CountableGameplayTag> Array { get { return new Array<CountableGameplayTag>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class GameplayAttributeValuePair : UEObject
    {
        public GameplayAttributeValuePair(nint addr) : base(addr) { }
        public GameplayAttributeValuePair() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class GameplayAttributeCounter : UEObject
    {
        public GameplayAttributeCounter(nint addr) : base(addr) { }
        public GameplayAttributeCounter() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public int Counter { get { return this["Counter"].GetValue<int>(); } set { this["Counter"].SetValue<int>(value); } }
    }
    public class ArrayGameplayAttribute : UEObject
    {
        public ArrayGameplayAttribute(nint addr) : base(addr) { }
        public ArrayGameplayAttribute() : base(0) { }
        public Array<GameplayAttribute> Array { get { return new Array<GameplayAttribute>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class DimensionGameplayAttributeCallbackData : UEObject
    {
        public DimensionGameplayAttributeCallbackData(nint addr) : base(addr) { }
        public DimensionGameplayAttributeCallbackData() : base(0) { }
    }
    public class DimensionGameplayGroupedAttributeCallbackData : UEObject
    {
        public DimensionGameplayGroupedAttributeCallbackData(nint addr) : base(addr) { }
        public DimensionGameplayGroupedAttributeCallbackData() : base(0) { }
    }
    public class DimensionAbilitySystemDataEntry : UEObject
    {
        public DimensionAbilitySystemDataEntry(nint addr) : base(addr) { }
        public DimensionAbilitySystemDataEntry() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
    }
    public class DimensionAbilitySystemData : TableRowBase
    {
        public DimensionAbilitySystemData(nint addr) : base(addr) { }
        public DimensionAbilitySystemData() : base(0) { }
        public UEObject AttributeSetClass { get { return this["AttributeSetClass"]; } set { this["AttributeSetClass"] = value; } }
        public Array<DimensionAbilitySystemDataEntry> Attributes { get { return new Array<DimensionAbilitySystemDataEntry>(this["Attributes"]); } set { this["Attributes"] = value; } }
    }
    public class DimensionAbilitySystemComponentSaveData : UEObject
    {
        public DimensionAbilitySystemComponentSaveData(nint addr) : base(addr) { }
        public DimensionAbilitySystemComponentSaveData() : base(0) { }
        public UEObject SaveLoadPropertyValues { get { return this["SaveLoadPropertyValues"]; } set { this["SaveLoadPropertyValues"] = value; } }
    }
    public class DecalArray : UEObject
    {
        public DecalArray(nint addr) : base(addr) { }
        public DecalArray() : base(0) { }
        public Array<DecalComponent> Decals { get { return new Array<DecalComponent>(this["Decals"]); } set { this["Decals"] = value; } }
    }
    public class AstroDecalData : UEObject
    {
        public AstroDecalData(nint addr) : base(addr) { }
        public AstroDecalData() : base(0) { }
        public Material DecalMaterial { get { return this[nameof(DecalMaterial)].As<Material>(); } set { this["DecalMaterial"] = value; } }
        public float DecalSize { get { return this["DecalSize"].GetValue<float>(); } set { this["DecalSize"].SetValue<float>(value); } }
        public float LifeSpan { get { return this["LifeSpan"].GetValue<float>(); } set { this["LifeSpan"].SetValue<float>(value); } }
    }
    public class StringIntPair : UEObject
    {
        public StringIntPair(nint addr) : base(addr) { }
        public StringIntPair() : base(0) { }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
    }
    public class TextFloatPair : UEObject
    {
        public TextFloatPair(nint addr) : base(addr) { }
        public TextFloatPair() : base(0) { }
        public string TextValue { get { return this["TextValue"].ToString(); } set { /* String properties are read-only */ } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
    }
    public class DataTableHandleFloatPair : UEObject
    {
        public DataTableHandleFloatPair(nint addr) : base(addr) { }
        public DataTableHandleFloatPair() : base(0) { }
        public DataTableRowHandle HandleValue { get { return this[nameof(HandleValue)].As<DataTableRowHandle>(); } set { this["HandleValue"] = value; } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
    }
    public class DataTableHandlesPair : UEObject
    {
        public DataTableHandlesPair(nint addr) : base(addr) { }
        public DataTableHandlesPair() : base(0) { }
        public DataTableRowHandle HandleA { get { return this[nameof(HandleA)].As<DataTableRowHandle>(); } set { this["HandleA"] = value; } }
        public DataTableRowHandle HandleB { get { return this[nameof(HandleB)].As<DataTableRowHandle>(); } set { this["HandleB"] = value; } }
    }
    public class MapStringToInt : UEObject
    {
        public MapStringToInt(nint addr) : base(addr) { }
        public MapStringToInt() : base(0) { }
        public UEObject Map { get { return this["Map"]; } set { this["Map"] = value; } }
    }
    public class MapStringToFloat : UEObject
    {
        public MapStringToFloat(nint addr) : base(addr) { }
        public MapStringToFloat() : base(0) { }
        public UEObject Map { get { return this["Map"]; } set { this["Map"] = value; } }
    }
    public class MapStringToString : UEObject
    {
        public MapStringToString(nint addr) : base(addr) { }
        public MapStringToString() : base(0) { }
        public UEObject Map { get { return this["Map"]; } set { this["Map"] = value; } }
    }
    public class ArrayInt32 : UEObject
    {
        public ArrayInt32(nint addr) : base(addr) { }
        public ArrayInt32() : base(0) { }
        public List<int> Array { get { return this["Array"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public class ArrayFloat : UEObject
    {
        public ArrayFloat(nint addr) : base(addr) { }
        public ArrayFloat() : base(0) { }
        public List<float> Array { get { return this["Array"].GetList<float>(); } set { /* Arrays are read-only */ } }
    }
    public class ArrayHitResult : UEObject
    {
        public ArrayHitResult(nint addr) : base(addr) { }
        public ArrayHitResult() : base(0) { }
        public Array<HitResult> Array { get { return new Array<HitResult>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class ArrayTransform : UEObject
    {
        public ArrayTransform(nint addr) : base(addr) { }
        public ArrayTransform() : base(0) { }
        public Array<SDK.Script.CoreUObject.Transform> Array { get { return new Array<SDK.Script.CoreUObject.Transform>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class ArrayDataTableRowHandle : UEObject
    {
        public ArrayDataTableRowHandle(nint addr) : base(addr) { }
        public ArrayDataTableRowHandle() : base(0) { }
        public Array<DataTableRowHandle> Array { get { return new Array<DataTableRowHandle>(this["Array"]); } set { this["Array"] = value; } }
    }
    public class ArrayString : UEObject
    {
        public ArrayString(nint addr) : base(addr) { }
        public ArrayString() : base(0) { }
        public List<string> Array { get { return this["Array"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class FloatFloatPair : UEObject
    {
        public FloatFloatPair(nint addr) : base(addr) { }
        public FloatFloatPair() : base(0) { }
        public float FloatValueA { get { return this["FloatValueA"].GetValue<float>(); } set { this["FloatValueA"].SetValue<float>(value); } }
        public float FloatValueB { get { return this["FloatValueB"].GetValue<float>(); } set { this["FloatValueB"].SetValue<float>(value); } }
    }
    public class NameDescriptionLore : UEObject
    {
        public NameDescriptionLore(nint addr) : base(addr) { }
        public NameDescriptionLore() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public string Lore { get { return this["Lore"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class AnimNode_EvaluatePose : AnimNode_Base
    {
        public AnimNode_EvaluatePose(nint addr) : base(addr) { }
        public AnimNode_EvaluatePose() : base(0) { }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
        public float Time { get { return this["Time"].GetValue<float>(); } set { this["Time"].SetValue<float>(value); } }
        public AnimInstance MyInstance { get { return this[nameof(MyInstance)].As<AnimInstance>(); } set { this["MyInstance"] = value; } }
    }
    public class RootMotionSource_JumpToTargetForce : RootMotionSource
    {
        public RootMotionSource_JumpToTargetForce(nint addr) : base(addr) { }
        public RootMotionSource_JumpToTargetForce() : base(0) { }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public float TrackingSpeed { get { return this["TrackingSpeed"].GetValue<float>(); } set { this["TrackingSpeed"].SetValue<float>(value); } }
        public Vector StartingLocation { get { return this[nameof(StartingLocation)].As<Vector>(); } set { this["StartingLocation"] = value; } }
        public EJumpToTargetForceHeightType HeightType { get { return (EJumpToTargetForceHeightType)this["HeightType"].GetValue<int>(); } set { this["HeightType"].SetValue<int>((int)value); } }
        public float Height { get { return this["Height"].GetValue<float>(); } set { this["Height"].SetValue<float>(value); } }
        public bool bDisableTimeout { get { return this["bDisableTimeout"].Flag; } set { this["bDisableTimeout"].Flag = value; } }
    }
    public enum EAbilityTime : int
    {
        E_AbilityActivationTime = 0,
        E_AbilityDeactivationTime = 1,
        E_AbilityCancelTime = 2,
        E_MAX = 3,
    }
    public enum EAbilityFailureScoring : int
    {
        E_AbilityTreatAsMax = 0,
        E_AbilityTreatAsMin = 1,
        E_MAX = 2,
    }
    public enum EEnemyInfoAgeType : int
    {
        E_EnemyInfoDetectionAge = 0,
        E_EnemyInfoSpottedAge = 1,
        E_MAX = 2,
    }
    public enum ETriangleOrientation : int
    {
        Clockwise = 0,
        CounterClockwise = 1,
        Collinear = 2,
        ETriangleOrientation_MAX = 3,
    }
    public enum EWeaponType : int
    {
        AutoRifle = 0,
        Shotgun = 1,
        SniperRifle = 2,
        HandCannon = 3,
        MachinePistol = 4,
        BoltActionRifle = 5,
        Crossbow = 6,
        MachineGun = 7,
        GrenadeLauncher = 8,
        RayGun = 9,
        StunGun = 10,
        StakeGun = 11,
        LeverActionRifle = 12,
        EWeaponType_MAX = 13,
    }
    public enum EFiringMode : int
    {
        SingleShot = 0,
        AutoFire = 1,
        BurstFire = 2,
        EFiringMode_MAX = 3,
    }
    public enum EChargedFiringMode : int
    {
        None = 0,
        ChargeOnly = 1,
        InstantOrCharge = 2,
        EChargedFiringMode_MAX = 3,
    }
    public enum ELandingType : int
    {
        None = 0,
        Soft = 1,
        Regular = 2,
        Hard = 3,
        FallDamage = 4,
        FallHighDamageLanding = 5,
        ELandingType_MAX = 6,
    }
    public enum EWeaponSlotSelectionPolicy : int
    {
        Current = 0,
        Primary = 1,
        Secondary = 2,
        Tertiary = 3,
        CurrentSingle = 4,
        All = 5,
        EWeaponSlotSelectionPolicy_MAX = 6,
    }
    public enum EEffectPriority : int
    {
        None = 0,
        Lowest = 1,
        Booster = 10,
        Perk = 20,
        Equipment = 30,
        Ability = 40,
        Consumable = 50,
        Action = 60,
        Status = 70,
        GameplayEvent = 80,
        GameModifier = 90,
        Highest = 100,
        EEffectPriority_MAX = 101,
    }
    public enum EMusicIntensity : int
    {
        NoMusic = 0,
        Ambient = 1,
        AmbientAlternative = 2,
        ActionLight = 3,
        ActionMedium = 4,
        ActionHeavy = 5,
        CustomTrack = 6,
        ForcedSilence = 7,
        EMusicIntensity_MAX = 8,
    }
    public enum EModifierType : int
    {
        None = 0,
        Add = 1,
        Mul = 2,
        Inf = 3,
        EModifierType_MAX = 4,
    }
    public enum EDamageCalculationOrder : int
    {
        None = 0,
        PreAdd = 1,
        Mul = 2,
        PostAdd = 3,
        FinalMul = 4,
        EDamageCalculationOrder_MAX = 5,
    }
    public enum EDamageModifierStackApplyPolicy : int
    {
        None = 0,
        ScaleModifiers = 1,
        ReapplyCalculation = 2,
        EDamageModifierStackApplyPolicy_MAX = 3,
    }
    public enum ENumericalOrderType : int
    {
        None = 0,
        Asc = 1,
        Desc = 2,
        NonAsc = 3,
        NonDesc = 4,
        ENumericalOrderType_MAX = 5,
    }
    public enum ESortingOrder : int
    {
        Asc = 0,
        Desc = 1,
        ESortingOrder_MAX = 2,
    }
    public enum EThresholdPolicy : int
    {
        Below = 0,
        Above = 1,
        BelowOrEqual = 2,
        AboveOrEqual = 3,
        EThresholdPolicy_MAX = 4,
    }
    public enum EAggregationEvaluationPolicy : int
    {
        None = 0,
        Any = 1,
        Most = 2,
        All = 3,
        EAggregationEvaluationPolicy_MAX = 4,
    }
    public enum EAdventureEventLogType : int
    {
        Positive = 0,
        Normal = 1,
        Negative = 2,
        EAdventureEventLogType_MAX = 3,
    }
    public enum EItemSortingType : int
    {
        Date = 0,
        Name = 1,
        Type = 2,
        Stacks = 3,
        Rarity = 4,
        Status = 5,
        EItemSortingType_MAX = 6,
    }
    public enum EDimensionStatType : int
    {
        General = 0,
        Collected = 1,
        Spent = 2,
        Used = 3,
        Lost = 4,
        Count = 5,
        EDimensionStatType_MAX = 6,
    }
    public enum EStateInterruptionPolicy : int
    {
        None = 0,
        Uninterruptible = 1,
        Interruptible = 2,
        ActivatableOnly = 3,
        EStateInterruptionPolicy_MAX = 4,
    }
    public enum EStaminaRequirementPolicy : int
    {
        None = 0,
        Always = 1,
        NotExhauted = 2,
        GreaterOrEqualToZero = 3,
        GreaterThenZero = 4,
        HaveRequiredStamina = 5,
        EStaminaRequirementPolicy_MAX = 6,
    }
    public enum EStaminaUsagePolicy : int
    {
        None = 0,
        ApplyRegenDelayWithOverdraw = 1,
        ApplyRegenDelayWithExhaustion = 2,
        ApplyRegenDelayClamped = 3,
        NoRegenDelayWithOverdraw = 4,
        NoRegenDelayWithExhaustion = 5,
        NoRegenDelayClamped = 6,
        EStaminaUsagePolicy_MAX = 7,
    }
    public enum EStaminaEffectivenessScalingPolicy : int
    {
        None = 0,
        NoScaling = 1,
        Exhaustion = 2,
        Value = 3,
        ExhaustionAndValue = 4,
        EStaminaEffectivenessScalingPolicy_MAX = 5,
    }
    public enum ESpawnPresetSortingType : int
    {
        None = 0,
        EnemyCountAsc = 1,
        EnemyCountDesc = 2,
        PresetCostAsc = 3,
        PresetCostDesc = 4,
        TypeVarietyAsc = 5,
        TypeVarietyDesc = 6,
        ESpawnPresetSortingType_MAX = 7,
    }
    public enum ESpawnManagerEntryStatus : int
    {
        Requested = 0,
        Scheduled = 1,
        Spawning = 2,
        Finished = 3,
        Failed = 4,
        ESpawnManagerEntryStatus_MAX = 5,
    }
    public enum EDimensionSettingType : int
    {
        Enum = 0,
        Number = 1,
        EDimensionSettingType_MAX = 2,
    }
    public enum EDimensionSettingDataType : int
    {
        Bool = 0,
        Integer = 1,
        Float = 2,
        String = 3,
        EDimensionSettingDataType_MAX = 4,
    }
    public enum EDimensionGraphicsPresetNames : int
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Ultra = 3,
        Num = 4,
        EDimensionGraphicsPresetNames_MAX = 5,
    }
    public enum ESaveLoadPriority : int
    {
        Never = 0,
        Low = 1,
        High = 2,
        ESaveLoadPriority_MAX = 3,
    }
    public enum ESaveLoadResponse : int
    {
        OK = 0,
        Scheduled = 1,
        InvalidSystem = 2,
        InvalidRequest = 3,
        InvalidPriority = 4,
        NotInitialized = 5,
        MissingData = 6,
        ESaveLoadResponse_MAX = 7,
    }
    public enum ESaveLoadFileType : int
    {
        Main = 0,
        BackupMain = 1,
        BackupUpgrade = 2,
        ESaveLoadFileType_MAX = 3,
    }
    public enum ELoadedFileStatus : int
    {
        None = 0,
        OK = 1,
        Missing = 2,
        Empty = 3,
        Corrupted = 4,
        InvalidHeader = 5,
        VersionLower = 6,
        VersionHigher = 7,
        Incompatible = 8,
        Error = 9,
        ELoadedFileStatus_MAX = 10,
    }
    public enum EFileLoadPolicy : int
    {
        None = 0,
        NewSave = 1,
        LoadFile = 2,
        LoadBackup = 3,
        UpdateFile = 4,
        BackupAndNewSave = 5,
        Ignore = 6,
        CannotProceed = 7,
        EFileLoadPolicy_MAX = 8,
    }
    public enum EFileVersionUpgradeResult : int
    {
        None = 0,
        OK = 1,
        Upgrade = 2,
        Continue = 3,
        Skip = 4,
        Stop = 5,
        Error = 6,
        EFileVersionUpgradeResult_MAX = 7,
    }
    public enum ESaveSlotLoadOrder : int
    {
        None = 0,
        DateAsc = 1,
        DateDesc = 2,
        GameTimeAsc = 3,
        GameTimeDesc = 4,
        LevelAsc = 5,
        LevelDesc = 6,
        SlotAsc = 7,
        SlotDesc = 8,
        ESaveSlotLoadOrder_MAX = 9,
    }
    public enum ESaveLoadBuildType : int
    {
        Default = 0,
        BetaBranch = 1,
        ESaveLoadBuildType_MAX = 2,
    }
    public enum EDimensionResearchOperationResult : int
    {
        Ok = 0,
        InvalidData = 1,
        InvalidStatus = 2,
        MissingProject = 3,
        GeneralError = 4,
        Unavailable = 5,
        RequirementsNotMet = 6,
        AllResearched = 7,
        MaxCurrentProjectsReached = 8,
        EDimensionResearchOperationResult_MAX = 9,
    }
    public enum EDimensionResearchProjectStatus : int
    {
        Invalid = 0,
        Unassigned = 1,
        InProgress = 2,
        Completed = 3,
        Claimed = 4,
        Hidden = 5,
        EDimensionResearchProjectStatus_MAX = 6,
    }
    public enum EDimensionResearchProjectType : int
    {
        Item = 0,
        ItemSet = 1,
        Custom = 2,
        EDimensionResearchProjectType_MAX = 3,
    }
    public enum EResearchSortingType : int
    {
        Date = 0,
        Name = 1,
        Tag = 2,
        TimeUnits = 3,
        EResearchSortingType_MAX = 4,
    }
    public enum ERequirementsFilterType : int
    {
        All = 0,
        MetOnly = 1,
        NotMetOnly = 2,
        ERequirementsFilterType_MAX = 3,
    }
    public enum EAddQuestHandleResult : int
    {
        Success = 0,
        RowNotFound = 1,
        Invalid = 2,
        Error = 3,
        EAddQuestHandleResult_MAX = 4,
    }
    public enum EProjectileHomingRetargetingMode : int
    {
        None = 0,
        Destroy = 1,
        Stop = 2,
        DisableHoming = 3,
        Continue = 4,
        SwitchTarget = 5,
        FindTarget = 6,
        EProjectileHomingRetargetingMode_MAX = 7,
    }
    public enum EPerkAbilityActivationType : int
    {
        ActivateOwner = 0,
        ActivateOwningPawn = 1,
        ActivateTarget = 2,
        ActivateOthers = 3,
        EPerkAbilityActivationType_MAX = 4,
    }
    public enum EDimensionMovementType : int
    {
        Walk = 0,
        Run = 1,
        Sprint = 2,
        EDimensionMovementType_MAX = 3,
    }
    public enum EDimensionMovementDirection : int
    {
        Forward = 0,
        Right = 1,
        Back = 2,
        Left = 3,
        EDimensionMovementDirection_MAX = 4,
    }
    public enum EMissionStatus : int
    {
        Inactive = 0,
        Active = 1,
        Paused = 2,
        Completed = 3,
        Failed = 4,
        PendingRemoval = 5,
        EMissionStatus_MAX = 6,
    }
    public enum EMeleeAttackTraceShape : int
    {
        Box = 0,
        Sphere = 1,
        Capsule = 2,
        EMeleeAttackTraceShape_MAX = 3,
    }
    public enum EDimensionTimelineInput : int
    {
        PlayFromStart = 0,
        Stop = 1,
        EDimensionTimelineInput_MAX = 2,
    }
    public enum EDimensionTimelineOutput : int
    {
        Tick = 0,
        Finished = 1,
        EDimensionTimelineOutput_MAX = 2,
    }
    public enum EDimensionDisplayParameterType : int
    {
        Value = 0,
        ValuePerSecond = 1,
        Multiplier = 2,
        Percent = 3,
        PercentDiff = 4,
        PercentDiffInverse = 5,
        MultiplierAsPercent = 6,
        Range = 7,
        Duration = 8,
        Time = 9,
        HealthPoints = 10,
        Damage = 11,
        DamageShort = 12,
        TextOnly = 13,
        Description = 14,
        Rating = 15,
        Rating100 = 16,
        RatingInverse = 17,
        Rating100Inverse = 18,
        RatingCustom = 19,
        EDimensionDisplayParameterType_MAX = 20,
    }
    public enum EGrantItemHandleResult : int
    {
        Granted = 0,
        Scheduled = 1,
        RowNotFound = 2,
        Error = 3,
        EGrantItemHandleResult_MAX = 4,
    }
    public enum EItemStacksPolicy : int
    {
        Persistent = 0,
        Perishable = 1,
        Stashable = 2,
        InRunOnly = 3,
        EItemStacksPolicy_MAX = 4,
    }
    public enum EItemStashPolicy : int
    {
        Manual = 0,
        StashAll = 1,
        KeepAll = 2,
        EItemStashPolicy_MAX = 3,
    }
    public enum EItemDropPolicy : int
    {
        None = 0,
        ScaleQuantity = 1,
        Block = 2,
        EItemDropPolicy_MAX = 3,
    }
    public enum EItemTransferDirection : int
    {
        InventoryToStash = 0,
        StashToInventory = 1,
        InventoryToInventory = 2,
        StashToStash = 3,
        EItemTransferDirection_MAX = 4,
    }
    public enum EInteractionDurationType : int
    {
        Instant = 0,
        Short = 1,
        Medium = 2,
        Long = 3,
        VeryLong = 4,
        Infinite = 5,
        Custom = 6,
        EInteractionDurationType_MAX = 7,
    }
    public enum EPlatformInputType : int
    {
        None = 0,
        Keyboard = 1,
        Mouse = 2,
        Gamepad = 4,
        PS4 = 8,
        XBOX_ONE = 16,
        Steam = 32,
        EPlatformInputType_MAX = 33,
    }
    public enum EGamepadThumbstickRole : int
    {
        None = 0,
        Rotation = 1,
        Movement = 2,
        EGamepadThumbstickRole_MAX = 3,
    }
    public enum EInputAxisDirectionType : int
    {
        None = 0,
        Left = 1,
        Right = 2,
        Up = 3,
        Down = 4,
        Horizontal = 5,
        Vertical = 6,
        XY = 7,
        XYZ = 8,
        NonDirectional = 9,
        EInputAxisDirectionType_MAX = 10,
    }
    public enum EDimensionHudObjectiveStatus : int
    {
        InProgress = 0,
        Success = 1,
        Failure = 2,
        EDimensionHudObjectiveStatus_MAX = 3,
    }
    public enum ESettingsDashMode : int
    {
        Separate = 0,
        Movement = 1,
        Run = 2,
        ESettingsDashMode_MAX = 3,
    }
    public enum ESettingsSpellMode : int
    {
        Combined = 0,
        Separate = 1,
        ESettingsSpellMode_MAX = 2,
    }
    public enum EDimensionGameplayLatentActionOutput : int
    {
        Finished = 0,
        EarlyOut = 1,
        EDimensionGameplayLatentActionOutput_MAX = 2,
    }
    public enum EDimensionSpawnEnemiesResult : int
    {
        SpawnScheduled = 0,
        SpawnScheduleLocationsFailed = 1,
        SpawnScheduleDataFailed = 2,
        EDimensionSpawnEnemiesResult_MAX = 3,
    }
    public enum EDimensionGameplayEQSOutput : int
    {
        Success = 0,
        Failed = 1,
        EDimensionGameplayEQSOutput_MAX = 2,
    }
    public enum EDimensionGameplayEnemyType : int
    {
        Arquebusier = 0,
        Goon = 1,
        WitchfireWretch = 2,
        Swordsman = 3,
        SwordsmanShield = 4,
        SwordsmanMace = 5,
        Axeman = 6,
        Soldier = 7,
        Bandit = 8,
        Grunt = 9,
        Larva = 10,
        MiniLarva = 11,
        Zombie = 12,
        Husk = 13,
        HuskArcher = 14,
        HuskPrime = 15,
        HuskArcherPrime = 16,
        Ghost = 17,
        Insectoid = 18,
        GuardHalberd = 19,
        GuardBladesman = 20,
        GuardCrossbow = 21,
        SpiderSmall = 22,
        Monk = 23,
        Cleric = 24,
        Madman = 25,
        SwordsmanElite = 26,
        Grenadier = 27,
        Musketeer = 28,
        Heavy = 29,
        HeavyShield = 30,
        Knight = 31,
        Necromancer = 32,
        Sister = 33,
        SisterVillage = 34,
        Gravedigger = 35,
        Executioner = 36,
        SpiderBig = 37,
        Townswoman = 38,
        Sniper = 39,
        Liberator = 40,
        Robinson = 41,
        Flamethrower = 42,
        Mortician = 43,
        Hangman = 44,
        GuardCaptain = 45,
        Bishop = 46,
        Ogre = 47,
        Clergyman = 48,
        SpiderBoss = 49,
        Sentinel = 50,
        SentinelMaster = 51,
        Warden = 52,
        ZombieHorror = 53,
        CosmicZombie = 54,
        CosmicLarva = 55,
        CosmicMusketeer = 56,
        CosmicKnight = 57,
        EDimensionGameplayEnemyType_MAX = 58,
    }
    public enum EAbilityParam : int
    {
        E_AbilityAnchorRange = 0,
        E_AbilityAnchorRangeInPlace = 1,
        E_PivotHeight = 2,
        E_EyeHeightFromPivot = 3,
        E_EyeHeightFromGround = 4,
        E_CharacterMovementVelocity = 5,
        E_HostileInfluenceAtCharacterLocation = 6,
        E_PerceivedLastEnemyVelocity = 7,
        E_DistanceToLastEnemyLocation = 8,
        E_WaitTimestamp = 9,
        E_MAX = 10,
    }
    public enum ELevelType : int
    {
        Default = 0,
        Base = 1,
        Run = 2,
        ELevelType_MAX = 3,
    }
    public enum EDamageSynergyType : int
    {
        None = 0,
        FireWater = 1,
        EarthWater = 2,
        FireAirWater = 3,
        EDST_MAX = 4,
        EDamageSynergyType_MAX = 5,
    }
    public enum EDimensionEasingType : int
    {
        Linear = 0,
        Smoothstep = 1,
        InSine = 2,
        OutSine = 3,
        InOutSine = 4,
        InQuad = 5,
        OutQuad = 6,
        InOutQuad = 7,
        InCubic = 8,
        OutCubic = 9,
        InOutCubic = 10,
        InQuart = 11,
        OutQuart = 12,
        InOutQuart = 13,
        InQuint = 14,
        OutQuint = 15,
        InOutQuint = 16,
        InExpo = 17,
        OutExpo = 18,
        InOutExpo = 19,
        InCirc = 20,
        OutCirc = 21,
        InOutCirc = 22,
        InElastic = 23,
        OutElastic = 24,
        InOutElastic = 25,
        InBack = 26,
        OutBack = 27,
        InOutBack = 28,
        EDimensionEasingType_MAX = 29,
    }
    public enum EDefenseComponentType : int
    {
        None = 0,
        Shield = 1,
        Barrier = 2,
        Reflect = 3,
        Threshold = 4,
        EDefenseComponentType_MAX = 5,
    }
    public enum EDefenseComponentDamageTypePolicy : int
    {
        Default = 0,
        ClearStatusDmg = 1,
        ClearPureDmg = 2,
        ScaleStatusDmg = 3,
        ScalePureDmg = 4,
        EDefenseComponentDamageTypePolicy_MAX = 5,
    }
    public enum EDamageProcessingPolicy : int
    {
        Default = 0,
        Instant = 1,
        Schedule = 2,
        EDamageProcessingPolicy_MAX = 3,
    }
    public enum ERadialTracePolicy : int
    {
        TraceAll = 0,
        OuterRadiusOnly = 1,
        NoTraces = 2,
        ERadialTracePolicy_MAX = 3,
    }
    public enum EDamageTypeConflictPolicy : int
    {
        Add = 0,
        Replace = 1,
        Ignore = 2,
        EDamageTypeConflictPolicy_MAX = 3,
    }
    public enum EDelayedDamageApplyType : int
    {
        DamageFromSpec = 0,
        PointDamageDeferred = 1,
        PointDamageFromSpec = 2,
        RadialDamageDeferred = 3,
        RadialDamageFromSpec = 4,
        EDelayedDamageApplyType_MAX = 5,
    }
    public enum EDamageModifierType : int
    {
        None = 0,
        Offensive = 1,
        Defensive = 2,
        EDamageModifierType_MAX = 3,
    }
    public enum EConsumableItemApplyType : int
    {
        ApplySelf = 0,
        EConsumableItemApplyType_MAX = 1,
    }
    public enum EConsumableItemUsageAttributeRelation : int
    {
        Equals = 0,
        NotEqual = 1,
        Greater = 2,
        GreaterOrEqual = 3,
        Less = 4,
        LessOrEqual = 5,
        EConsumableItemUsageAttributeRelation_MAX = 6,
    }
    public enum EDimBuildConfiguration : int
    {
        Unknown = 0,
        Debug = 1,
        DebugGame = 2,
        Development = 3,
        Shipping = 4,
        Test = 5,
        EDimBuildConfiguration_MAX = 6,
    }
    public enum EDActivationResult : int
    {
        Success = 0,
        NotEnoughCurrency = 1,
        AlreadyActivated = 2,
        NotActiveable = 3,
        UnknownReason = 4,
        EDActivationResult_MAX = 5,
    }
    public enum EEntityType : int
    {
        E_Unit = 0,
        E_Leash = 1,
        E_ActivationDelay = 2,
        E_EliteStatus = 3,
        E_MAX = 4,
    }
    public enum EBoosterType : int
    {
        Persistent = 0,
        Transient = 1,
        Blessing = 2,
        Corrupted = 3,
        EBoosterType_MAX = 4,
    }
    public enum EBoosterCategoryType : int
    {
        Default = 0,
        Corrupted = 1,
        Prophecy = 2,
        EBoosterCategoryType_MAX = 3,
    }
    public enum EBlueprintLogVerbosity : int
    {
        None = 0,
        Fatal = 1,
        Error = 2,
        Warning = 3,
        Display = 4,
        Log = 5,
        Verbose = 6,
        VeryVerbose = 7,
        EBlueprintLogVerbosity_MAX = 8,
    }
    public enum EDimensionBipedLocomotionStatePhase : int
    {
        BlendIn = 0,
        FullyBlended = 1,
        BlendOut = 2,
        Inactive = 3,
        EDimensionBipedLocomotionStatePhase_MAX = 4,
    }
    public enum EDimensionBipedLocomotionStateID : int
    {
        Idle = 0,
        Montage = 1,
        StartMovement = 2,
        StopMovement = 3,
        Movement = 4,
        InPlaceTurn = 5,
        EDimensionBipedLocomotionStateID_MAX = 6,
    }
    public enum EDimensionBipedLocomotionDebugMode : int
    {
        None = 0,
        Default = 1,
        AimOffsets = 2,
        ControlRotation = 3,
        EDimensionBipedLocomotionDebugMode_MAX = 4,
    }
    public enum EBeadSortingType : int
    {
        Default = 0,
        Date = 1,
        DisplayName = 2,
        Category = 3,
        New = 4,
        Equippable = 5,
        RowName = 6,
        Group = 7,
        EBeadSortingType_MAX = 8,
    }
    public enum ELightScenarioMood : int
    {
        Positive = 0,
        Negative = 1,
        ELightScenarioMood_MAX = 2,
    }
    public enum EDimensionAutoRifleHeavyFireProfile : int
    {
        Default = 0,
        LowRPM_HighDmg = 1,
        EDimensionAutoRifleHeavyFireProfile_MAX = 2,
    }
    public enum EDimensionArenaState : int
    {
        Neutral = 0,
        Witchworld = 1,
        Deathworld = 2,
        EDimensionArenaState_MAX = 3,
    }
    public enum EGroupingRequirements : int
    {
        None = 0,
        Distance = 1,
        SameEnemy = 2,
        SameLeash = 4,
        SameRestrictedVolume = 8,
        PathConnection = 16,
        SameTeam = 32,
        DynamicSquad = 64,
        EGroupingRequirements_MAX = 65,
    }
    public enum EDimensionReactionDirection : int
    {
        Front = 0,
        Left = 1,
        Right = 2,
        Back = 3,
        EDimensionReactionDirection_MAX = 4,
    }
    public enum ELightSpellCastingBehavior : int
    {
        CastOnHeavySpellLock = 0,
        CastOnHeavySpellChargeEnd = 1,
        FailOnHeavySpellLock = 2,
        FailOnHeavySpellChargeEnd = 3,
        ELightSpellCastingBehavior_MAX = 4,
    }
    public enum EGameplayAttributeType : int
    {
        None = 0,
        Internal = 1,
        Init = 2,
        Refresh = 4,
        Instant = 8,
        InstantRefresh = 16,
        Aggregated = 32,
        MAX = 64,
    }
    public enum EGameplayAttributeUpdatePolicy : int
    {
        Default = 0,
        Tick = 1,
        Immediate = 2,
        PreUpdate = 3,
        EGameplayAttributeUpdatePolicy_MAX = 4,
    }
    public enum EEffectApplyPolicy : int
    {
        Player = 0,
        Weapon = 1,
        Target = 2,
        EEffectApplyPolicy_MAX = 3,
    }
    public enum EPlayerAttribute : int
    {
        Flesh = 0,
        Mind = 1,
        Blood = 2,
        Witchery = 3,
        Arsenal = 4,
        Faith = 5,
        EPlayerAttribute_MAX = 6,
    }
    public enum EBloodDecalSize : int
    {
        E_Small = 0,
        E_Medium = 1,
        E_Large = 2,
        E_MAX = 3,
    }
    public enum EAnimationSet : int
    {
        VE_Starting = 0,
        VE_Moving = 1,
        VE_Stopping_RUP = 2,
        VE_Stopping_LUP = 3,
        VE_MAX = 4,
    }
    public class DimensionInstantHitData : UEObject
    {
        public DimensionInstantHitData(nint addr) : base(addr) { }
        public DimensionInstantHitData() : base(0) { }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public Vector ShootDir { get { return this[nameof(ShootDir)].As<Vector>(); } set { this["ShootDir"] = value; } }
        public int RandomSeed { get { return this["RandomSeed"].GetValue<int>(); } set { this["RandomSeed"].SetValue<int>(value); } }
        public float ReticleSpread { get { return this["ReticleSpread"].GetValue<float>(); } set { this["ReticleSpread"].SetValue<float>(value); } }
    }
    public class DimensionActiveCurse : UEObject
    {
        public DimensionActiveCurse(nint addr) : base(addr) { }
        public DimensionActiveCurse() : base(0) { }
        public DataTableRowHandle CurseDataHandle { get { return this[nameof(CurseDataHandle)].As<DataTableRowHandle>(); } set { this["CurseDataHandle"] = value; } }
        public float CurseChance { get { return this["CurseChance"].GetValue<float>(); } set { this["CurseChance"].SetValue<float>(value); } }
        public DimensionItemHandleCount ItemCleanseCost { get { return this[nameof(ItemCleanseCost)].As<DimensionItemHandleCount>(); } set { this["ItemCleanseCost"] = value; } }
        public DimensionQuest CurseQuest { get { return this[nameof(CurseQuest)].As<DimensionQuest>(); } set { this["CurseQuest"] = value; } }
        public int CurseID { get { return this["CurseID"].GetValue<int>(); } set { this["CurseID"].SetValue<int>(value); } }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
    }
    public enum EQuestProgressType : int
    {
        Continuous = 0,
        PerRun = 1,
        ContinuousRunOnly = 2,
        EQuestProgressType_MAX = 3,
    }
    public enum EQuestRewardGrantingType : int
    {
        Instant = 0,
        Safe = 1,
        Manual = 2,
        EQuestRewardGrantingType_MAX = 3,
    }
    public enum EQuestResetType : int
    {
        NoReset = 0,
        OnDeath = 1,
        OnExit = 2,
        RemoveOnDeath = 3,
        RemoveOnExit = 4,
        EQuestResetType_MAX = 5,
    }
    public class DimensionQuestObjectiveRule : UEObject
    {
        public DimensionQuestObjectiveRule(nint addr) : base(addr) { }
        public DimensionQuestObjectiveRule() : base(0) { }
        public bool bAllRequired { get { return this["bAllRequired"].Flag; } set { this["bAllRequired"].Flag = value; } }
        public int MinRequired { get { return this["MinRequired"].GetValue<int>(); } set { this["MinRequired"].SetValue<int>(value); } }
        public bool bFromRemainingObjectives { get { return this["bFromRemainingObjectives"].Flag; } set { this["bFromRemainingObjectives"].Flag = value; } }
        public List<int> ObjectiveIndexes { get { return this["ObjectiveIndexes"].GetList<int>(); } set { /* Arrays are read-only */ } }
    }
    public enum EQuestObjectiveType : int
    {
        Kill = 0,
        Target = 1,
        Damage = 2,
        Collect = 3,
        Obtain = 4,
        Cleanse = 5,
        Attribute = 6,
        Progression = 7,
        Custom = 8,
        EQuestObjectiveType_MAX = 9,
    }
    public enum EQuestObjectiveFailType : int
    {
        NoFail = 0,
        BlockProgress = 1,
        ResetProgress = 2,
        RemoveQuest = 3,
        EQuestObjectiveFailType_MAX = 4,
    }
    public enum EObjectiveConditionType : int
    {
        Damage = 0,
        Enemy = 1,
        Location = 2,
        Player = 3,
        Inventory = 4,
        Equipped = 5,
        EObjectiveConditionType_MAX = 6,
    }
    public class DimensionQuestCondition : DimensionAssetLoadingData
    {
        public DimensionQuestCondition(nint addr) : base(addr) { }
        public DimensionQuestCondition() : base(0) { }
        public EObjectiveConditionType ConditionType { get { return (EObjectiveConditionType)this["ConditionType"].GetValue<int>(); } set { this["ConditionType"].SetValue<int>((int)value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDisplayInGame { get { return this["bDisplayInGame"].Flag; } set { this["bDisplayInGame"].Flag = value; } }
        public ActionModifiers Requirements { get { return this[nameof(Requirements)].As<ActionModifiers>(); } set { this["Requirements"] = value; } }
        public bool bFailObjective { get { return this["bFailObjective"].Flag; } set { this["bFailObjective"].Flag = value; } }
        public bool bPreRunCachedItemsOnly { get { return this["bPreRunCachedItemsOnly"].Flag; } set { this["bPreRunCachedItemsOnly"].Flag = value; } }
        public Array<ActionModifiers> AdditionalRequirements { get { return new Array<ActionModifiers>(this["AdditionalRequirements"]); } set { this["AdditionalRequirements"] = value; } }
        public bool bFailed { get { return this["bFailed"].Flag; } set { this["bFailed"].Flag = value; } }
        public bool bHasSelectionRequirements { get { return this["bHasSelectionRequirements"].Flag; } set { this["bHasSelectionRequirements"].Flag = value; } }
        public DimensionRequirementsData SelectionRequirements { get { return this[nameof(SelectionRequirements)].As<DimensionRequirementsData>(); } set { this["SelectionRequirements"] = value; } }
    }
    public enum EQuestModifierType : int
    {
        Enemy = 0,
        Location = 1,
        Exploration = 2,
        Event = 3,
        EQuestModifierType_MAX = 4,
    }
    public class DimensionQuestModifier : DimensionAssetLoadingData
    {
        public DimensionQuestModifier(nint addr) : base(addr) { }
        public DimensionQuestModifier() : base(0) { }
        public EQuestModifierType ModifierType { get { return (EQuestModifierType)this["ModifierType"].GetValue<int>(); } set { this["ModifierType"].SetValue<int>((int)value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bDisplayInGame { get { return this["bDisplayInGame"].Flag; } set { this["bDisplayInGame"].Flag = value; } }
        public GameplayTagContainer CustomTags { get { return this[nameof(CustomTags)].As<GameplayTagContainer>(); } set { this["CustomTags"] = value; } }
        public GameplayTag LevelTag { get { return this[nameof(LevelTag)].As<GameplayTag>(); } set { this["LevelTag"] = value; } }
        public bool bSpecificArenasOnly { get { return this["bSpecificArenasOnly"].Flag; } set { this["bSpecificArenasOnly"].Flag = value; } }
        public GameplayTagContainer ArenaTags { get { return this[nameof(ArenaTags)].As<GameplayTagContainer>(); } set { this["ArenaTags"] = value; } }
        public bool bCustomData { get { return this["bCustomData"].Flag; } set { this["bCustomData"].Flag = value; } }
    }
    public class DimensionQuestObjective : DimensionAssetData
    {
        public DimensionQuestObjective(nint addr) : base(addr) { }
        public DimensionQuestObjective() : base(0) { }
        public EQuestObjectiveType ObjectiveType { get { return (EQuestObjectiveType)this["ObjectiveType"].GetValue<int>(); } set { this["ObjectiveType"].SetValue<int>((int)value); } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public ActionModifiers EnemyTypeTags { get { return this[nameof(EnemyTypeTags)].As<ActionModifiers>(); } set { this["EnemyTypeTags"] = value; } }
        public bool bCountUniqueTargetsOnly { get { return this["bCountUniqueTargetsOnly"].Flag; } set { this["bCountUniqueTargetsOnly"].Flag = value; } }
        public bool bUseItemTags { get { return this["bUseItemTags"].Flag; } set { this["bUseItemTags"].Flag = value; } }
        public DataTableRowHandle ItemDataHandle { get { return this[nameof(ItemDataHandle)].As<DataTableRowHandle>(); } set { this["ItemDataHandle"] = value; } }
        public ActionModifiers ItemTypeOrCategoryTags { get { return this[nameof(ItemTypeOrCategoryTags)].As<ActionModifiers>(); } set { this["ItemTypeOrCategoryTags"] = value; } }
        public EnumArray<EItemAddReason> EligibleItemSources { get { return new EnumArray<EItemAddReason>(this["EligibleItemSources"]); } set { this["EligibleItemSources"] = value; } }
        public DimensionAttributeRequirement AttributeRequirement { get { return this[nameof(AttributeRequirement)].As<DimensionAttributeRequirement>(); } set { this["AttributeRequirement"] = value; } }
        public ProgressManagerQuery ProgressManagerQuery { get { return this[nameof(ProgressManagerQuery)].As<ProgressManagerQuery>(); } set { this["ProgressManagerQuery"] = value; } }
        public ActionModifiers CustomObjectiveTags { get { return this[nameof(CustomObjectiveTags)].As<ActionModifiers>(); } set { this["CustomObjectiveTags"] = value; } }
        public bool bExactMatchCustomObjectiveTags { get { return this["bExactMatchCustomObjectiveTags"].Flag; } set { this["bExactMatchCustomObjectiveTags"].Flag = value; } }
        public bool bInfiniteCount { get { return this["bInfiniteCount"].Flag; } set { this["bInfiniteCount"].Flag = value; } }
        public bool bDeferredCount { get { return this["bDeferredCount"].Flag; } set { this["bDeferredCount"].Flag = value; } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public float PercentRequirement { get { return this["PercentRequirement"].GetValue<float>(); } set { this["PercentRequirement"].SetValue<float>(value); } }
        public bool bDisplayProgressOnlyAsCompleted { get { return this["bDisplayProgressOnlyAsCompleted"].Flag; } set { this["bDisplayProgressOnlyAsCompleted"].Flag = value; } }
        public bool bDisplayProgressAsPercent { get { return this["bDisplayProgressAsPercent"].Flag; } set { this["bDisplayProgressAsPercent"].Flag = value; } }
        public bool bDisplayPercentProgressNormalized { get { return this["bDisplayPercentProgressNormalized"].Flag; } set { this["bDisplayPercentProgressNormalized"].Flag = value; } }
        public bool bInstantComplete { get { return this["bInstantComplete"].Flag; } set { this["bInstantComplete"].Flag = value; } }
        public bool bRemoveAfterComplete { get { return this["bRemoveAfterComplete"].Flag; } set { this["bRemoveAfterComplete"].Flag = value; } }
        public bool bAllowManualProgression { get { return this["bAllowManualProgression"].Flag; } set { this["bAllowManualProgression"].Flag = value; } }
        public Array<DimensionQuestCondition> Conditions { get { return new Array<DimensionQuestCondition>(this["Conditions"]); } set { this["Conditions"] = value; } }
        public Array<DataTableRowHandle> ConditionHandles { get { return new Array<DataTableRowHandle>(this["ConditionHandles"]); } set { this["ConditionHandles"] = value; } }
        public bool bResetProgressOnFailedConditions { get { return this["bResetProgressOnFailedConditions"].Flag; } set { this["bResetProgressOnFailedConditions"].Flag = value; } }
        public int FailedConditionsCustomProgress { get { return this["FailedConditionsCustomProgress"].GetValue<int>(); } set { this["FailedConditionsCustomProgress"].SetValue<int>(value); } }
        public Array<DimensionQuestModifier> Modifiers { get { return new Array<DimensionQuestModifier>(this["Modifiers"]); } set { this["Modifiers"] = value; } }
        public Array<DataTableRowHandle> ModifierHandles { get { return new Array<DataTableRowHandle>(this["ModifierHandles"]); } set { this["ModifierHandles"] = value; } }
        public EQuestObjectiveFailType FailType { get { return (EQuestObjectiveFailType)this["FailType"].GetValue<int>(); } set { this["FailType"].SetValue<int>((int)value); } }
        public int ActiveCount { get { return this["ActiveCount"].GetValue<int>(); } set { this["ActiveCount"].SetValue<int>(value); } }
        public int ActiveRequiredCount { get { return this["ActiveRequiredCount"].GetValue<int>(); } set { this["ActiveRequiredCount"].SetValue<int>(value); } }
        public int Progress { get { return this["Progress"].GetValue<int>(); } set { this["Progress"].SetValue<int>(value); } }
        public int PendingProgress { get { return this["PendingProgress"].GetValue<int>(); } set { this["PendingProgress"].SetValue<int>(value); } }
        public Array<DimensionQuestCondition> ActiveConditions { get { return new Array<DimensionQuestCondition>(this["ActiveConditions"]); } set { this["ActiveConditions"] = value; } }
        public Array<DimensionQuestModifier> ActiveModifiers { get { return new Array<DimensionQuestModifier>(this["ActiveModifiers"]); } set { this["ActiveModifiers"] = value; } }
        public bool bCompleted { get { return this["bCompleted"].Flag; } set { this["bCompleted"].Flag = value; } }
        public bool bFailed { get { return this["bFailed"].Flag; } set { this["bFailed"].Flag = value; } }
        public bool bCustomActiveCount { get { return this["bCustomActiveCount"].Flag; } set { this["bCustomActiveCount"].Flag = value; } }
        public bool bHasSelectionRequirements { get { return this["bHasSelectionRequirements"].Flag; } set { this["bHasSelectionRequirements"].Flag = value; } }
        public DimensionRequirementsData SelectionRequirements { get { return this[nameof(SelectionRequirements)].As<DimensionRequirementsData>(); } set { this["SelectionRequirements"] = value; } }
    }
    public enum EProgressManagerOperationType : int
    {
        Add = 0,
        Remove = 1,
        Update = 2,
        UpdateUpOnly = 3,
        UpdateDownOnly = 4,
        EProgressManagerOperationType_MAX = 5,
    }
    public class ProgressManagerRequest : UEObject
    {
        public ProgressManagerRequest(nint addr) : base(addr) { }
        public ProgressManagerRequest() : base(0) { }
        public EProgressManagerDataType DataType { get { return (EProgressManagerDataType)this["DataType"].GetValue<int>(); } set { this["DataType"].SetValue<int>((int)value); } }
        public EProgressManagerOperationType OperationType { get { return (EProgressManagerOperationType)this["OperationType"].GetValue<int>(); } set { this["OperationType"].SetValue<int>((int)value); } }
        public bool bIncrementMode { get { return this["bIncrementMode"].Flag; } set { this["bIncrementMode"].Flag = value; } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public GameplayTag KeyTag { get { return this[nameof(KeyTag)].As<GameplayTag>(); } set { this["KeyTag"] = value; } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag GameplayTagValue { get { return this[nameof(GameplayTagValue)].As<GameplayTag>(); } set { this["GameplayTagValue"] = value; } }
        public bool bExactCategoryMatch { get { return this["bExactCategoryMatch"].Flag; } set { this["bExactCategoryMatch"].Flag = value; } }
        public bool bExactKeyMatch { get { return this["bExactKeyMatch"].Flag; } set { this["bExactKeyMatch"].Flag = value; } }
        public bool bAddWhenNoMatchFound { get { return this["bAddWhenNoMatchFound"].Flag; } set { this["bAddWhenNoMatchFound"].Flag = value; } }
        public bool bRequireExactValueMatch { get { return this["bRequireExactValueMatch"].Flag; } set { this["bRequireExactValueMatch"].Flag = value; } }
        public string StringError { get { return this["StringError"].ToString(); } set { /* String properties are read-only */ } }
        public string GameplayTagError { get { return this["GameplayTagError"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionQuestReward : DimensionAssetData
    {
        public DimensionQuestReward(nint addr) : base(addr) { }
        public DimensionQuestReward() : base(0) { }
        public DataTableRowHandle ItemBatchRewardHandle { get { return this[nameof(ItemBatchRewardHandle)].As<DataTableRowHandle>(); } set { this["ItemBatchRewardHandle"] = value; } }
        public Array<ProgressManagerRequest> ProgressManagerRequests { get { return new Array<ProgressManagerRequest>(this["ProgressManagerRequests"]); } set { this["ProgressManagerRequests"] = value; } }
    }
    public class DimensionQuest : DimensionAssetLoadingData
    {
        public DimensionQuest(nint addr) : base(addr) { }
        public DimensionQuest() : base(0) { }
        public GameplayTag QuestTypeTag { get { return this[nameof(QuestTypeTag)].As<GameplayTag>(); } set { this["QuestTypeTag"] = value; } }
        public EQuestProgressType ProgressType { get { return (EQuestProgressType)this["ProgressType"].GetValue<int>(); } set { this["ProgressType"].SetValue<int>((int)value); } }
        public EQuestRewardGrantingType RewardGrantingType { get { return (EQuestRewardGrantingType)this["RewardGrantingType"].GetValue<int>(); } set { this["RewardGrantingType"].SetValue<int>((int)value); } }
        public EQuestResetType ResetType { get { return (EQuestResetType)this["ResetType"].GetValue<int>(); } set { this["ResetType"].SetValue<int>((int)value); } }
        public bool bResetPendingProgressOnly { get { return this["bResetPendingProgressOnly"].Flag; } set { this["bResetPendingProgressOnly"].Flag = value; } }
        public Array<DimensionQuestObjective> Objectives { get { return new Array<DimensionQuestObjective>(this["Objectives"]); } set { this["Objectives"] = value; } }
        public Array<DataTableRowHandle> ObjectiveHandles { get { return new Array<DataTableRowHandle>(this["ObjectiveHandles"]); } set { this["ObjectiveHandles"] = value; } }
        public bool bHasRewards { get { return this["bHasRewards"].Flag; } set { this["bHasRewards"].Flag = value; } }
        public DataTableRowHandle RewardHandle { get { return this[nameof(RewardHandle)].As<DataTableRowHandle>(); } set { this["RewardHandle"] = value; } }
        public bool bCustomObjectiveRules { get { return this["bCustomObjectiveRules"].Flag; } set { this["bCustomObjectiveRules"].Flag = value; } }
        public Array<DimensionQuestObjectiveRule> ObjectiveRules { get { return new Array<DimensionQuestObjectiveRule>(this["ObjectiveRules"]); } set { this["ObjectiveRules"] = value; } }
        public bool bHasCustomDisplayName { get { return this["bHasCustomDisplayName"].Flag; } set { this["bHasCustomDisplayName"].Flag = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public int QuestID { get { return this["QuestID"].GetValue<int>(); } set { this["QuestID"].SetValue<int>(value); } }
        public Array<DimensionQuestObjective> ActiveObjectives { get { return new Array<DimensionQuestObjective>(this["ActiveObjectives"]); } set { this["ActiveObjectives"] = value; } }
        public DimensionQuestReward GeneratedReward { get { return this[nameof(GeneratedReward)].As<DimensionQuestReward>(); } set { this["GeneratedReward"] = value; } }
        public bool bCompleted { get { return this["bCompleted"].Flag; } set { this["bCompleted"].Flag = value; } }
        public SerializableDataTableRowHandle TemplateHandle { get { return this[nameof(TemplateHandle)].As<SerializableDataTableRowHandle>(); } set { this["TemplateHandle"] = value; } }
        public int TemplateSeed { get { return this["TemplateSeed"].GetValue<int>(); } set { this["TemplateSeed"].SetValue<int>(value); } }
        public bool bHasSelectionRequirements { get { return this["bHasSelectionRequirements"].Flag; } set { this["bHasSelectionRequirements"].Flag = value; } }
        public DimensionRequirementsData SelectionRequirements { get { return this[nameof(SelectionRequirements)].As<DimensionRequirementsData>(); } set { this["SelectionRequirements"] = value; } }
    }
    public class DimensionItemDropAggregator : UEObject
    {
        public DimensionItemDropAggregator(nint addr) : base(addr) { }
        public DimensionItemDropAggregator() : base(0) { }
        public UEObject ItemDropClass { get { return this["ItemDropClass"]; } set { this["ItemDropClass"] = value; } }
        public Array<DimensionItemDataPackage> ItemPackages { get { return new Array<DimensionItemDataPackage>(this["ItemPackages"]); } set { this["ItemPackages"] = value; } }
        public DimensionItemDropSpawnData SpawnData { get { return this[nameof(SpawnData)].As<DimensionItemDropSpawnData>(); } set { this["SpawnData"] = value; } }
        public GameplayTag LevelTag { get { return this[nameof(LevelTag)].As<GameplayTag>(); } set { this["LevelTag"] = value; } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public int ItemBatchID { get { return this["ItemBatchID"].GetValue<int>(); } set { this["ItemBatchID"].SetValue<int>(value); } }
        public bool bCanCombineItems { get { return this["bCanCombineItems"].Flag; } set { this["bCanCombineItems"].Flag = value; } }
        public Pawn Instigator { get { return this[nameof(Instigator)].As<Pawn>(); } set { this["Instigator"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
    }
    public enum EPlatformType : int
    {
        None = 0,
        PC = 1,
        XBOX_ONE = 2,
        PS4 = 4,
        Steam = 8,
        XBOX = 2,
        PS = 4,
        ALL = 15,
        EPlatformType_MAX = 16,
    }
    public enum ESaveLoadNotificationCategory : int
    {
        None = 0,
        Custom = 1,
        LoadingFileInProgress = 2,
        LoadingFileFinished = 3,
        SavingFileInProgress = 4,
        SavingFileFinished = 5,
        LoadingObjectsInProgress = 6,
        LoadingObjectsFinished = 7,
        SavingObjectsInProgress = 8,
        SavingObjectsFinished = 9,
        FileDeleted = 10,
        FileBackedUp = 11,
        FileRestored = 12,
        FileVersionMatch = 13,
        FileVersionLower = 14,
        FileVersionHigher = 15,
        TaskSaveLoadFileCreate = 16,
        TaskSaveLoadFileComplete = 17,
        TaskSaveLoadFileDelete = 18,
        TaskSaveLoadObjectCreate = 19,
        TaskSaveLoadObjectComplete = 20,
        TaskSaveLoadObjectDelete = 21,
        TransferCompleted = 22,
        ErrorEmptyFileName = 23,
        ErrorFileDoesNotExist = 24,
        ErrorCannotDeleteFile = 25,
        ErrorBackupSaveFileFailed = 26,
        ErrorBackupLoadFileFailed = 27,
        ErrorRestoreSaveFileFailed = 28,
        ErrorBuildSaveLoadStackFailed = 29,
        ErrorInvalidSaveFileLoaded = 30,
        ErrorInvalidSaveFileVersionLoaded = 31,
        ErrorSaveLoadTaskTimeout = 32,
        ErrorInvalidSlotNumber = 33,
        ErrorCannotDeleteSlot = 34,
        ErrorCannotAddSlot = 35,
        ErrorCannotLoadSlot = 36,
        ErrorLoadingFile = 37,
        ErrorMissingLoadResult = 38,
        ErrorTransferSaveFileFaile = 39,
        ESaveLoadNotificationCategory_MAX = 40,
    }
    public enum ESaveLoadMode : int
    {
        None = 0,
        Loading = 1,
        Saving = 2,
        ESaveLoadMode_MAX = 3,
    }
    public class DimensionItemStorageInstanceUpdateData : UEObject
    {
        public DimensionItemStorageInstanceUpdateData(nint addr) : base(addr) { }
        public DimensionItemStorageInstanceUpdateData() : base(0) { }
        public DimensionItemStorage ItemStorage { get { return this[nameof(ItemStorage)].As<DimensionItemStorage>(); } set { this["ItemStorage"] = value; } }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public DimensionItem Instance { get { return this[nameof(Instance)].As<DimensionItem>(); } set { this["Instance"] = value; } }
        public bool bValid { get { return this["bValid"].Flag; } set { this["bValid"].Flag = value; } }
    }
    public class DimensionItemStorageEquipUpdateData : UEObject
    {
        public DimensionItemStorageEquipUpdateData(nint addr) : base(addr) { }
        public DimensionItemStorageEquipUpdateData() : base(0) { }
        public DimensionItemStorage ItemStorage { get { return this[nameof(ItemStorage)].As<DimensionItemStorage>(); } set { this["ItemStorage"] = value; } }
        public GameplayTag EquipCategoryTag { get { return this[nameof(EquipCategoryTag)].As<GameplayTag>(); } set { this["EquipCategoryTag"] = value; } }
        public int EquipSlotIndex { get { return this["EquipSlotIndex"].GetValue<int>(); } set { this["EquipSlotIndex"].SetValue<int>(value); } }
        public int PreviousSlotID { get { return this["PreviousSlotID"].GetValue<int>(); } set { this["PreviousSlotID"].SetValue<int>(value); } }
        public bool bForcedSwitch { get { return this["bForcedSwitch"].Flag; } set { this["bForcedSwitch"].Flag = value; } }
    }
    public enum EItemRemoveReason : int
    {
        None = 0,
        Internal = 1,
        Death = 2,
        Consume = 3,
        Transaction = 4,
        Replace = 5,
        Gameplay = 6,
        Ability = 7,
        Exit = 8,
        Enter = 9,
        Expired = 10,
        EItemRemoveReason_MAX = 11,
    }
    public class DimensionItemStorageUpdateData : UEObject
    {
        public DimensionItemStorageUpdateData(nint addr) : base(addr) { }
        public DimensionItemStorageUpdateData() : base(0) { }
        public DimensionItemStorage ItemStorage { get { return this[nameof(ItemStorage)].As<DimensionItemStorage>(); } set { this["ItemStorage"] = value; } }
        public int SlotID { get { return this["SlotID"].GetValue<int>(); } set { this["SlotID"].SetValue<int>(value); } }
        public int StacksDelta { get { return this["StacksDelta"].GetValue<int>(); } set { this["StacksDelta"].SetValue<int>(value); } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public EItemRemoveReason RemoveReason { get { return (EItemRemoveReason)this["RemoveReason"].GetValue<int>(); } set { this["RemoveReason"].SetValue<int>((int)value); } }
        public bool bShowUINotification { get { return this["bShowUINotification"].Flag; } set { this["bShowUINotification"].Flag = value; } }
        public DimensionItemNotificationOptions NotificationOptions { get { return this[nameof(NotificationOptions)].As<DimensionItemNotificationOptions>(); } set { this["NotificationOptions"] = value; } }
    }
    public class DimensionStateInterruptDefinition : UEObject
    {
        public DimensionStateInterruptDefinition(nint addr) : base(addr) { }
        public DimensionStateInterruptDefinition() : base(0) { }
        public string TransitionName { get { return this["TransitionName"].ToString(); } set { /* String properties are read-only */ } }
        public bool bAddTransitionToQueue { get { return this["bAddTransitionToQueue"].Flag; } set { this["bAddTransitionToQueue"].Flag = value; } }
        public InputActionStateDefinition InputAction { get { return this[nameof(InputAction)].As<InputActionStateDefinition>(); } set { this["InputAction"] = value; } }
        public Array<CountableGameplayTagCondition> CustomConditions { get { return new Array<CountableGameplayTagCondition>(this["CustomConditions"]); } set { this["CustomConditions"] = value; } }
        public Array<CountableGameplayTag> ConditionUpdates { get { return new Array<CountableGameplayTag>(this["ConditionUpdates"]); } set { this["ConditionUpdates"] = value; } }
        public Array<CountableGameplayTag> ConditionResets { get { return new Array<CountableGameplayTag>(this["ConditionResets"]); } set { this["ConditionResets"] = value; } }
        public Array<CountableGameplayTag> ConditionModifies { get { return new Array<CountableGameplayTag>(this["ConditionModifies"]); } set { this["ConditionModifies"] = value; } }
        public List<string> InputBufferStops { get { return this["InputBufferStops"].GetStringList(); } set { /* Arrays are read-only */ } }
        public Array<GameplayTag> EnteredStates { get { return new Array<GameplayTag>(this["EnteredStates"]); } set { this["EnteredStates"] = value; } }
        public GameplayTag CustomEventTag { get { return this[nameof(CustomEventTag)].As<GameplayTag>(); } set { this["CustomEventTag"] = value; } }
    }
    public class DimensionStateCustomProperty : UEObject
    {
        public DimensionStateCustomProperty(nint addr) : base(addr) { }
        public DimensionStateCustomProperty() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTagContainer AvailableStateTags { get { return this[nameof(AvailableStateTags)].As<GameplayTagContainer>(); } set { this["AvailableStateTags"] = value; } }
        public float MinValue { get { return this["MinValue"].GetValue<float>(); } set { this["MinValue"].SetValue<float>(value); } }
        public float MaxValue { get { return this["MaxValue"].GetValue<float>(); } set { this["MaxValue"].SetValue<float>(value); } }
        public bool bFallbackOutOfState { get { return this["bFallbackOutOfState"].Flag; } set { this["bFallbackOutOfState"].Flag = value; } }
        public float FallbackValue { get { return this["FallbackValue"].GetValue<float>(); } set { this["FallbackValue"].SetValue<float>(value); } }
        public float Multiplier { get { return this["Multiplier"].GetValue<float>(); } set { this["Multiplier"].SetValue<float>(value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public float PreviousValue { get { return this["PreviousValue"].GetValue<float>(); } set { this["PreviousValue"].SetValue<float>(value); } }
    }
    public class InputActionStateDefinition : InputActionDefinition
    {
        public InputActionStateDefinition(nint addr) : base(addr) { }
        public InputActionStateDefinition() : base(0) { }
        public byte KeyEvent { get { return this["KeyEvent"].GetValue<byte>(); } set { this["KeyEvent"].SetValue<byte>(value); } }
    }
    public enum EInputConditionType : int
    {
        None = 0,
        Pressed = 1,
        Released = 2,
        PressedSingle = 4,
        ReleasedSingle = 8,
        PressedBuffered = 16,
        PressedSingleBuffered = 32,
        BufferedOnly = 64,
        ReleasedNoBuffer = 128,
        EInputConditionType_MAX = 129,
    }
    public class InputActionConditionDefinition : InputActionDefinition
    {
        public InputActionConditionDefinition(nint addr) : base(addr) { }
        public InputActionConditionDefinition() : base(0) { }
        public EInputConditionType InputCondition { get { return (EInputConditionType)this["InputCondition"].GetValue<int>(); } set { this["InputCondition"].SetValue<int>((int)value); } }
        public bool bEnableParallelComponentBuffering { get { return this["bEnableParallelComponentBuffering"].Flag; } set { this["bEnableParallelComponentBuffering"].Flag = value; } }
    }
    public class DimensionInputChord : InputChord
    {
        public DimensionInputChord(nint addr) : base(addr) { }
        public DimensionInputChord() : base(0) { }
        public bool bAcceptMaskedChord { get { return this["bAcceptMaskedChord"].Flag; } set { this["bAcceptMaskedChord"].Flag = value; } }
    }
    public class InputActionDefinition : UEObject
    {
        public InputActionDefinition(nint addr) : base(addr) { }
        public InputActionDefinition() : base(0) { }
        public string ActionName { get { return this["ActionName"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag TypeTag { get { return this[nameof(TypeTag)].As<GameplayTag>(); } set { this["TypeTag"] = value; } }
        public DimensionInputChord InputChord { get { return this[nameof(InputChord)].As<DimensionInputChord>(); } set { this["InputChord"] = value; } }
    }
    public class CountableGameplayTagCondition : CountableGameplayTag
    {
        public CountableGameplayTagCondition(nint addr) : base(addr) { }
        public CountableGameplayTagCondition() : base(0) { }
        public ENumberComparisonType Relation { get { return (ENumberComparisonType)this["Relation"].GetValue<int>(); } set { this["Relation"].SetValue<int>((int)value); } }
    }
    public class CountableGameplayTag : UEObject
    {
        public CountableGameplayTag(nint addr) : base(addr) { }
        public CountableGameplayTag() : base(0) { }
        public GameplayTag Tag { get { return this[nameof(Tag)].As<GameplayTag>(); } set { this["Tag"] = value; } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public int MinCount { get { return this["MinCount"].GetValue<int>(); } set { this["MinCount"].SetValue<int>(value); } }
    }
    public class DimensionStateTransition : UEObject
    {
        public DimensionStateTransition(nint addr) : base(addr) { }
        public DimensionStateTransition() : base(0) { }
        public string Name { get { return this["Name"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag SourceStateTag { get { return this[nameof(SourceStateTag)].As<GameplayTag>(); } set { this["SourceStateTag"] = value; } }
        public GameplayTag TargetStateTag { get { return this[nameof(TargetStateTag)].As<GameplayTag>(); } set { this["TargetStateTag"] = value; } }
        public Array<InputActionConditionDefinition> InputActionConditions { get { return new Array<InputActionConditionDefinition>(this["InputActionConditions"]); } set { this["InputActionConditions"] = value; } }
        public Array<CountableGameplayTagCondition> CustomConditions { get { return new Array<CountableGameplayTagCondition>(this["CustomConditions"]); } set { this["CustomConditions"] = value; } }
        public bool bIgnoreLocks { get { return this["bIgnoreLocks"].Flag; } set { this["bIgnoreLocks"].Flag = value; } }
        public bool bInstantUpdateEnabled { get { return this["bInstantUpdateEnabled"].Flag; } set { this["bInstantUpdateEnabled"].Flag = value; } }
        public bool bAutoUpdateEnabled { get { return this["bAutoUpdateEnabled"].Flag; } set { this["bAutoUpdateEnabled"].Flag = value; } }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
    }
    public class AirStatusLightningSpawnParameters : UEObject
    {
        public AirStatusLightningSpawnParameters(nint addr) : base(addr) { }
        public AirStatusLightningSpawnParameters() : base(0) { }
        public bool bCustomLightningSpawning { get { return this["bCustomLightningSpawning"].Flag; } set { this["bCustomLightningSpawning"].Flag = value; } }
        public bool bApplyInitialDamageScaling { get { return this["bApplyInitialDamageScaling"].Flag; } set { this["bApplyInitialDamageScaling"].Flag = value; } }
        public bool bUseProvidedDamageValueData { get { return this["bUseProvidedDamageValueData"].Flag; } set { this["bUseProvidedDamageValueData"].Flag = value; } }
        public bool bUseCustomInitialDamageMultiplier { get { return this["bUseCustomInitialDamageMultiplier"].Flag; } set { this["bUseCustomInitialDamageMultiplier"].Flag = value; } }
        public bool bUseCustomJumpDamageMultiplier { get { return this["bUseCustomJumpDamageMultiplier"].Flag; } set { this["bUseCustomJumpDamageMultiplier"].Flag = value; } }
        public bool bUseCustomDelay { get { return this["bUseCustomDelay"].Flag; } set { this["bUseCustomDelay"].Flag = value; } }
        public bool bUseCustomDelayVariance { get { return this["bUseCustomDelayVariance"].Flag; } set { this["bUseCustomDelayVariance"].Flag = value; } }
        public bool bUseCustomMaxRange { get { return this["bUseCustomMaxRange"].Flag; } set { this["bUseCustomMaxRange"].Flag = value; } }
        public bool bUseCustomMaxJumps { get { return this["bUseCustomMaxJumps"].Flag; } set { this["bUseCustomMaxJumps"].Flag = value; } }
        public bool bUseCustomLightningCount { get { return this["bUseCustomLightningCount"].Flag; } set { this["bUseCustomLightningCount"].Flag = value; } }
        public float InitialDamageMultiplier { get { return this["InitialDamageMultiplier"].GetValue<float>(); } set { this["InitialDamageMultiplier"].SetValue<float>(value); } }
        public float JumpDamageMultiplier { get { return this["JumpDamageMultiplier"].GetValue<float>(); } set { this["JumpDamageMultiplier"].SetValue<float>(value); } }
        public float Delay { get { return this["Delay"].GetValue<float>(); } set { this["Delay"].SetValue<float>(value); } }
        public float DelayVariance { get { return this["DelayVariance"].GetValue<float>(); } set { this["DelayVariance"].SetValue<float>(value); } }
        public float MaxRange { get { return this["MaxRange"].GetValue<float>(); } set { this["MaxRange"].SetValue<float>(value); } }
        public int MaxJumps { get { return this["MaxJumps"].GetValue<int>(); } set { this["MaxJumps"].SetValue<int>(value); } }
        public int LightningCount { get { return this["LightningCount"].GetValue<int>(); } set { this["LightningCount"].SetValue<int>(value); } }
    }
    public enum ENetExecutionPolicy : int
    {
        None = 0,
        ClientOnly = 1,
        LocalPredicted = 2,
        LocalOnly = 3,
        Server = 4,
        ServerOnly = 5,
        ServerInitiated = 6,
        Multicast = 7,
        MulticastOnly = 8,
        ENetExecutionPolicy_MAX = 9,
    }
    public class DamageNetData : UEObject
    {
        public DamageNetData(nint addr) : base(addr) { }
        public DamageNetData() : base(0) { }
        public ENetExecutionPolicy NetExecutionPolicy { get { return (ENetExecutionPolicy)this["NetExecutionPolicy"].GetValue<int>(); } set { this["NetExecutionPolicy"].SetValue<int>((int)value); } }
        public int AbilityKey { get { return this["AbilityKey"].GetValue<int>(); } set { this["AbilityKey"].SetValue<int>(value); } }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public byte InitialNetRole { get { return this["InitialNetRole"].GetValue<byte>(); } set { this["InitialNetRole"].SetValue<byte>(value); } }
    }
    public class DamageDeferredData : UEObject
    {
        public DamageDeferredData(nint addr) : base(addr) { }
        public DamageDeferredData() : base(0) { }
        public DamageDeferredActorsData DeferredDamageActors { get { return this[nameof(DeferredDamageActors)].As<DamageDeferredActorsData>(); } set { this["DeferredDamageActors"] = value; } }
        public DamageNetData NetData { get { return this[nameof(NetData)].As<DamageNetData>(); } set { this["NetData"] = value; } }
        public ActionModifiers ActionModifiers { get { return this[nameof(ActionModifiers)].As<ActionModifiers>(); } set { this["ActionModifiers"] = value; } }
        public int DamageSpecID { get { return this["DamageSpecID"].GetValue<int>(); } set { this["DamageSpecID"].SetValue<int>(value); } }
    }
    public class AirStatusLightningSpawnData : UEObject
    {
        public AirStatusLightningSpawnData(nint addr) : base(addr) { }
        public AirStatusLightningSpawnData() : base(0) { }
        public UEObject InstigatingObject { get { return this[nameof(InstigatingObject)]; } set { this["InstigatingObject"] = value; } }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public AggregatedDamageData AggregatedDamageData { get { return this[nameof(AggregatedDamageData)].As<AggregatedDamageData>(); } set { this["AggregatedDamageData"] = value; } }
        public Array<Actor> PriorityTargets { get { return new Array<Actor>(this["PriorityTargets"]); } set { this["PriorityTargets"] = value; } }
        public bool bSelectPriorityTargetsOnly { get { return this["bSelectPriorityTargetsOnly"].Flag; } set { this["bSelectPriorityTargetsOnly"].Flag = value; } }
        public AirStatusLightningSpawnParameters SpawnParameters { get { return this[nameof(SpawnParameters)].As<AirStatusLightningSpawnParameters>(); } set { this["SpawnParameters"] = value; } }
        public DamageDeferredData DamageDeferredData { get { return this[nameof(DamageDeferredData)].As<DamageDeferredData>(); } set { this["DamageDeferredData"] = value; } }
        public DimensionElementalComponent OriginComponent { get { return this[nameof(OriginComponent)].As<DimensionElementalComponent>(); } set { this["OriginComponent"] = value; } }
        public int ID { get { return this["ID"].GetValue<int>(); } set { this["ID"].SetValue<int>(value); } }
    }
    public class AirStatusLightningInstanceData : UEObject
    {
        public AirStatusLightningInstanceData(nint addr) : base(addr) { }
        public AirStatusLightningInstanceData() : base(0) { }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public int Jump { get { return this["Jump"].GetValue<int>(); } set { this["Jump"].SetValue<int>(value); } }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public float SpawnTimestamp { get { return this["SpawnTimestamp"].GetValue<float>(); } set { this["SpawnTimestamp"].SetValue<float>(value); } }
        public Vector CachedSourcePosition { get { return this[nameof(CachedSourcePosition)].As<Vector>(); } set { this["CachedSourcePosition"] = value; } }
        public Array<Actor> PreviousActors { get { return new Array<Actor>(this["PreviousActors"]); } set { this["PreviousActors"] = value; } }
        public AirStatusLightningSpawnData SpawnData { get { return this[nameof(SpawnData)].As<AirStatusLightningSpawnData>(); } set { this["SpawnData"] = value; } }
        public UEObject OnLightningSpawnDelegate { get { return this["OnLightningSpawnDelegate"]; } set { this["OnLightningSpawnDelegate"] = value; } }
    }
    public enum EEnemySpawnBehaviour : int
    {
        None = 0,
        Default = 1,
        ForceAggro = 2,
        Dormant = 3,
        EEnemySpawnBehaviour_MAX = 4,
    }
    public class ActorAllocationData : UEObject
    {
        public ActorAllocationData(nint addr) : base(addr) { }
        public ActorAllocationData() : base(0) { }
        public int AllocationID { get { return this["AllocationID"].GetValue<int>(); } set { this["AllocationID"].SetValue<int>(value); } }
        public UEObject ActorClass { get { return this["ActorClass"]; } set { this["ActorClass"] = value; } }
        public UEObject ActorSoftClassPtr { get { return this["ActorSoftClassPtr"]; } set { this["ActorSoftClassPtr"] = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public Pawn Instigator { get { return this[nameof(Instigator)].As<Pawn>(); } set { this["Instigator"] = value; } }
        public ESpawnActorCollisionHandlingMethod CollisionHandling { get { return (ESpawnActorCollisionHandlingMethod)this["CollisionHandling"].GetValue<int>(); } set { this["CollisionHandling"].SetValue<int>((int)value); } }
    }
    public enum ESpawnSFXSpawningPolicy : int
    {
        None = 0,
        NoSFX = 1,
        First = 2,
        PerType = 3,
        All = 4,
        ESpawnSFXSpawningPolicy_MAX = 5,
    }
    public enum ESpawnSFXSelectionPolicy : int
    {
        None = 0,
        Effect = 1,
        Class = 2,
        Type = 3,
        ESpawnSFXSelectionPolicy_MAX = 4,
    }
    public enum ESpawnGroupSFXSelectionPolicy : int
    {
        None = 0,
        Effect = 1,
        Class = 2,
        Type = 3,
        Count = 4,
        ESpawnGroupSFXSelectionPolicy_MAX = 5,
    }
    public class SpawnEffectData : DimensionAssetLoadingData
    {
        public SpawnEffectData(nint addr) : base(addr) { }
        public SpawnEffectData() : base(0) { }
        public UEObject SpawnQuery { get { return this["SpawnQuery"]; } set { this["SpawnQuery"] = value; } }
        public UEObject SpawnFX { get { return this["SpawnFX"]; } set { this["SpawnFX"] = value; } }
        public UEObject GroupSpawnFX { get { return this["GroupSpawnFX"]; } set { this["GroupSpawnFX"] = value; } }
        public UEObject SpawnSFX { get { return this["SpawnSFX"]; } set { this["SpawnSFX"] = value; } }
        public UEObject GroupSpawnSFX { get { return this["GroupSpawnSFX"]; } set { this["GroupSpawnSFX"] = value; } }
        public bool bUseDefaultSpawnQuery { get { return this["bUseDefaultSpawnQuery"].Flag; } set { this["bUseDefaultSpawnQuery"].Flag = value; } }
        public bool bUseDefaultSpawnFX { get { return this["bUseDefaultSpawnFX"].Flag; } set { this["bUseDefaultSpawnFX"].Flag = value; } }
        public bool bUseDefaultGroupSpawnFX { get { return this["bUseDefaultGroupSpawnFX"].Flag; } set { this["bUseDefaultGroupSpawnFX"].Flag = value; } }
        public bool bUseDefaultSpawnSFX { get { return this["bUseDefaultSpawnSFX"].Flag; } set { this["bUseDefaultSpawnSFX"].Flag = value; } }
        public bool bUseDefaultGroupSpawnSFX { get { return this["bUseDefaultGroupSpawnSFX"].Flag; } set { this["bUseDefaultGroupSpawnSFX"].Flag = value; } }
        public float SpawnDelay { get { return this["SpawnDelay"].GetValue<float>(); } set { this["SpawnDelay"].SetValue<float>(value); } }
        public float ActivationDelay { get { return this["ActivationDelay"].GetValue<float>(); } set { this["ActivationDelay"].SetValue<float>(value); } }
        public float SpawnFXDelay { get { return this["SpawnFXDelay"].GetValue<float>(); } set { this["SpawnFXDelay"].SetValue<float>(value); } }
        public ESpawnSFXSpawningPolicy SFXSpawningPolicy { get { return (ESpawnSFXSpawningPolicy)this["SFXSpawningPolicy"].GetValue<int>(); } set { this["SFXSpawningPolicy"].SetValue<int>((int)value); } }
        public ESpawnSFXSelectionPolicy SFXSelectionPolicy { get { return (ESpawnSFXSelectionPolicy)this["SFXSelectionPolicy"].GetValue<int>(); } set { this["SFXSelectionPolicy"].SetValue<int>((int)value); } }
        public ESpawnGroupSFXSelectionPolicy GroupSFXSelectionPolicy { get { return (ESpawnGroupSFXSelectionPolicy)this["GroupSFXSelectionPolicy"].GetValue<int>(); } set { this["GroupSFXSelectionPolicy"].SetValue<int>((int)value); } }
    }
    public class DimensionSpawnPreset : DimensionAssetLoadingData
    {
        public DimensionSpawnPreset(nint addr) : base(addr) { }
        public DimensionSpawnPreset() : base(0) { }
        public UEObject ActorSets { get { return this["ActorSets"]; } set { this["ActorSets"] = value; } }
        public int Cost { get { return this["Cost"].GetValue<int>(); } set { this["Cost"].SetValue<int>(value); } }
        public EnvQuery SpawnQuery { get { return this[nameof(SpawnQuery)].As<EnvQuery>(); } set { this["SpawnQuery"] = value; } }
        public DataTableRowHandle BasePresetHandle { get { return this[nameof(BasePresetHandle)].As<DataTableRowHandle>(); } set { this["BasePresetHandle"] = value; } }
    }
    public class ActorSpawnData : UEObject
    {
        public ActorSpawnData(nint addr) : base(addr) { }
        public ActorSpawnData() : base(0) { }
        public UEObject ActorClass { get { return this["ActorClass"]; } set { this["ActorClass"] = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
    }
    public class SpawnManagerEntry : UEObject
    {
        public SpawnManagerEntry(nint addr) : base(addr) { }
        public SpawnManagerEntry() : base(0) { }
        public Actor Anchor { get { return this[nameof(Anchor)].As<Actor>(); } set { this["Anchor"] = value; } }
        public SDK.Script.CoreUObject.Transform Transform { get { return this[nameof(Transform)].As<SDK.Script.CoreUObject.Transform>(); } set { this["Transform"] = value; } }
        public Actor AggroActor { get { return this[nameof(AggroActor)].As<Actor>(); } set { this["AggroActor"] = value; } }
        public EEnemySpawnBehaviour SpawnBehaviour { get { return (EEnemySpawnBehaviour)this["SpawnBehaviour"].GetValue<int>(); } set { this["SpawnBehaviour"].SetValue<int>((int)value); } }
        public ActorAllocationData AllocationData { get { return this[nameof(AllocationData)].As<ActorAllocationData>(); } set { this["AllocationData"] = value; } }
        public SpawnEffectData SpawnEffectData { get { return this[nameof(SpawnEffectData)].As<SpawnEffectData>(); } set { this["SpawnEffectData"] = value; } }
        public DimensionSpawnPreset SpawnPreset { get { return this[nameof(SpawnPreset)].As<DimensionSpawnPreset>(); } set { this["SpawnPreset"] = value; } }
        public int LoadingID { get { return this["LoadingID"].GetValue<int>(); } set { this["LoadingID"].SetValue<int>(value); } }
        public bool bGroupFXLoaded { get { return this["bGroupFXLoaded"].Flag; } set { this["bGroupFXLoaded"].Flag = value; } }
        public bool bCharacterClassesLoaded { get { return this["bCharacterClassesLoaded"].Flag; } set { this["bCharacterClassesLoaded"].Flag = value; } }
        public bool bSpawnFXLoaded { get { return this["bSpawnFXLoaded"].Flag; } set { this["bSpawnFXLoaded"].Flag = value; } }
        public string LeashName { get { return this["LeashName"].ToString(); } set { /* String properties are read-only */ } }
        public int PendingAllocationID { get { return this["PendingAllocationID"].GetValue<int>(); } set { this["PendingAllocationID"].SetValue<int>(value); } }
        public List<int> ReservedAllocationIDs { get { return this["ReservedAllocationIDs"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<Vector> SpawnLocations { get { return new Array<Vector>(this["SpawnLocations"]); } set { this["SpawnLocations"] = value; } }
        public int EntryID { get { return this["EntryID"].GetValue<int>(); } set { this["EntryID"].SetValue<int>(value); } }
        public Array<ActorSpawnData> CharacterData { get { return new Array<ActorSpawnData>(this["CharacterData"]); } set { this["CharacterData"] = value; } }
    }
    public class DefenseComponentHandle : ComponentHandle
    {
        public DefenseComponentHandle(nint addr) : base(addr) { }
        public DefenseComponentHandle() : base(0) { }
    }
    public class ComponentHandle : UEObject
    {
        public ComponentHandle(nint addr) : base(addr) { }
        public ComponentHandle() : base(0) { }
        public int ID { get { return this["ID"].GetValue<int>(); } set { this["ID"].SetValue<int>(value); } }
        public UEObject OwnerComponent { get { return this[nameof(OwnerComponent)]; } set { this["OwnerComponent"] = value; } }
    }
    public class DivineInterventionData : UEObject
    {
        public DivineInterventionData(nint addr) : base(addr) { }
        public DivineInterventionData() : base(0) { }
        public string ID { get { return this["ID"].ToString(); } set { /* String properties are read-only */ } }
        public float BaseChance { get { return this["BaseChance"].GetValue<float>(); } set { this["BaseChance"].SetValue<float>(value); } }
        public float ScaledChance { get { return this["ScaledChance"].GetValue<float>(); } set { this["ScaledChance"].SetValue<float>(value); } }
    }
    public enum EItemQuantityScalingType : int
    {
        Default = 0,
        NoScaling = 1,
        ForceScaling = 2,
        EItemQuantityScalingType_MAX = 3,
    }
    public enum EItemGrantingType : int
    {
        Default = 0,
        NoDrop = 1,
        ForceDrop = 2,
        ForceDropDefault = 3,
        EItemGrantingType_MAX = 4,
    }
    public class DimensionItemDropThresholds : UEObject
    {
        public DimensionItemDropThresholds(nint addr) : base(addr) { }
        public DimensionItemDropThresholds() : base(0) { }
        public int GnosisThreshold { get { return this["GnosisThreshold"].GetValue<int>(); } set { this["GnosisThreshold"].SetValue<int>(value); } }
        public float ProvidenceThreshold { get { return this["ProvidenceThreshold"].GetValue<float>(); } set { this["ProvidenceThreshold"].SetValue<float>(value); } }
        public float MetanoiaThreshold { get { return this["MetanoiaThreshold"].GetValue<float>(); } set { this["MetanoiaThreshold"].SetValue<float>(value); } }
    }
    public class DimensionItemDropDataOptions : UEObject
    {
        public DimensionItemDropDataOptions(nint addr) : base(addr) { }
        public DimensionItemDropDataOptions() : base(0) { }
        public float DropChance { get { return this["DropChance"].GetValue<float>(); } set { this["DropChance"].SetValue<float>(value); } }
        public int StackIncrement { get { return this["StackIncrement"].GetValue<int>(); } set { this["StackIncrement"].SetValue<int>(value); } }
        public GameplayTag DropCategoryTag { get { return this[nameof(DropCategoryTag)].As<GameplayTag>(); } set { this["DropCategoryTag"] = value; } }
        public bool bHasDropThresholds { get { return this["bHasDropThresholds"].Flag; } set { this["bHasDropThresholds"].Flag = value; } }
        public DimensionItemDropThresholds DropThresholds { get { return this[nameof(DropThresholds)].As<DimensionItemDropThresholds>(); } set { this["DropThresholds"] = value; } }
        public bool bScavengingCheck { get { return this["bScavengingCheck"].Flag; } set { this["bScavengingCheck"].Flag = value; } }
        public float ScavengingChanceMultiplier { get { return this["ScavengingChanceMultiplier"].GetValue<float>(); } set { this["ScavengingChanceMultiplier"].SetValue<float>(value); } }
        public bool bProvidenceCheck { get { return this["bProvidenceCheck"].Flag; } set { this["bProvidenceCheck"].Flag = value; } }
    }
    public class DimensionItemDropData : UEObject
    {
        public DimensionItemDropData(nint addr) : base(addr) { }
        public DimensionItemDropData() : base(0) { }
        public DataTableRowHandle ItemHandle { get { return this[nameof(ItemHandle)].As<DataTableRowHandle>(); } set { this["ItemHandle"] = value; } }
        public int MinQuantity { get { return this["MinQuantity"].GetValue<int>(); } set { this["MinQuantity"].SetValue<int>(value); } }
        public int MaxQuantity { get { return this["MaxQuantity"].GetValue<int>(); } set { this["MaxQuantity"].SetValue<int>(value); } }
        public bool bCustomDropClass { get { return this["bCustomDropClass"].Flag; } set { this["bCustomDropClass"].Flag = value; } }
        public UEObject CustomDropClass { get { return this["CustomDropClass"]; } set { this["CustomDropClass"] = value; } }
        public DimensionItemDropDataOptions DropOptions { get { return this[nameof(DropOptions)].As<DimensionItemDropDataOptions>(); } set { this["DropOptions"] = value; } }
        public int GeneratedQuantity { get { return this["GeneratedQuantity"].GetValue<int>(); } set { this["GeneratedQuantity"].SetValue<int>(value); } }
        public bool bGenerated { get { return this["bGenerated"].Flag; } set { this["bGenerated"].Flag = value; } }
        public float PreviewExpectedQuantity { get { return this["PreviewExpectedQuantity"].GetValue<float>(); } set { this["PreviewExpectedQuantity"].SetValue<float>(value); } }
    }
    public class DimensionItemDropCollection : DimensionAssetLoadingData
    {
        public DimensionItemDropCollection(nint addr) : base(addr) { }
        public DimensionItemDropCollection() : base(0) { }
        public int MaxNumberOfItems { get { return this["MaxNumberOfItems"].GetValue<int>(); } set { this["MaxNumberOfItems"].SetValue<int>(value); } }
        public bool bUseMaxNumberOfEntriesInstead { get { return this["bUseMaxNumberOfEntriesInstead"].Flag; } set { this["bUseMaxNumberOfEntriesInstead"].Flag = value; } }
        public UEObject CustomDropClass { get { return this["CustomDropClass"]; } set { this["CustomDropClass"] = value; } }
        public bool bShuffleGeneratedItems { get { return this["bShuffleGeneratedItems"].Flag; } set { this["bShuffleGeneratedItems"].Flag = value; } }
        public bool bSortByRarity { get { return this["bSortByRarity"].Flag; } set { this["bSortByRarity"].Flag = value; } }
        public bool bMergeMatchingItems { get { return this["bMergeMatchingItems"].Flag; } set { this["bMergeMatchingItems"].Flag = value; } }
        public bool bUseOneRollForAllEntries { get { return this["bUseOneRollForAllEntries"].Flag; } set { this["bUseOneRollForAllEntries"].Flag = value; } }
        public List<int> EntryPriorityList { get { return this["EntryPriorityList"].GetList<int>(); } set { /* Arrays are read-only */ } }
        public Array<DimensionItemDropData> Items { get { return new Array<DimensionItemDropData>(this["Items"]); } set { this["Items"] = value; } }
        public bool bScavengingCheck { get { return this["bScavengingCheck"].Flag; } set { this["bScavengingCheck"].Flag = value; } }
        public float ScavengingChanceMultiplier { get { return this["ScavengingChanceMultiplier"].GetValue<float>(); } set { this["ScavengingChanceMultiplier"].SetValue<float>(value); } }
        public bool bProvidenceCheck { get { return this["bProvidenceCheck"].Flag; } set { this["bProvidenceCheck"].Flag = value; } }
        public int LoadingID { get { return this["LoadingID"].GetValue<int>(); } set { this["LoadingID"].SetValue<int>(value); } }
        public Array<DimensionItemDropPackage> GeneratedPackages { get { return new Array<DimensionItemDropPackage>(this["GeneratedPackages"]); } set { this["GeneratedPackages"] = value; } }
    }
    public class DimensionItemDropPackage : DimensionItemDataPackage
    {
        public DimensionItemDropPackage(nint addr) : base(addr) { }
        public DimensionItemDropPackage() : base(0) { }
        public UEObject ItemDropClass { get { return this["ItemDropClass"]; } set { this["ItemDropClass"] = value; } }
    }
    public class DimensionItemBatch : DimensionAssetLoadingData
    {
        public DimensionItemBatch(nint addr) : base(addr) { }
        public DimensionItemBatch() : base(0) { }
        public Array<DataTableRowHandle> ItemCollectionHandles { get { return new Array<DataTableRowHandle>(this["ItemCollectionHandles"]); } set { this["ItemCollectionHandles"] = value; } }
        public Array<DimensionItemDropPackage> ItemPackages { get { return new Array<DimensionItemDropPackage>(this["ItemPackages"]); } set { this["ItemPackages"] = value; } }
        public Array<DimensionItemDropData> ItemDropData { get { return new Array<DimensionItemDropData>(this["ItemDropData"]); } set { this["ItemDropData"] = value; } }
        public bool bShuffleGeneratedItems { get { return this["bShuffleGeneratedItems"].Flag; } set { this["bShuffleGeneratedItems"].Flag = value; } }
        public bool bSortByRarity { get { return this["bSortByRarity"].Flag; } set { this["bSortByRarity"].Flag = value; } }
        public bool bMergeMatchingItems { get { return this["bMergeMatchingItems"].Flag; } set { this["bMergeMatchingItems"].Flag = value; } }
        public bool bIgnoreForceSeparateDrop { get { return this["bIgnoreForceSeparateDrop"].Flag; } set { this["bIgnoreForceSeparateDrop"].Flag = value; } }
        public bool bEnsureItemsCanBeAdded { get { return this["bEnsureItemsCanBeAdded"].Flag; } set { this["bEnsureItemsCanBeAdded"].Flag = value; } }
        public EItemQuantityScalingType QuantityScalingType { get { return (EItemQuantityScalingType)this["QuantityScalingType"].GetValue<int>(); } set { this["QuantityScalingType"].SetValue<int>((int)value); } }
        public EItemGrantingType GrantingType { get { return (EItemGrantingType)this["GrantingType"].GetValue<int>(); } set { this["GrantingType"].SetValue<int>((int)value); } }
        public EItemAddReason AddReason { get { return (EItemAddReason)this["AddReason"].GetValue<int>(); } set { this["AddReason"].SetValue<int>((int)value); } }
        public DimensionItemDropSpawnData SpawnData { get { return this[nameof(SpawnData)].As<DimensionItemDropSpawnData>(); } set { this["SpawnData"] = value; } }
        public bool bScavengingCheck { get { return this["bScavengingCheck"].Flag; } set { this["bScavengingCheck"].Flag = value; } }
        public float ScavengingChanceMultiplier { get { return this["ScavengingChanceMultiplier"].GetValue<float>(); } set { this["ScavengingChanceMultiplier"].SetValue<float>(value); } }
        public bool bProvidenceCheck { get { return this["bProvidenceCheck"].Flag; } set { this["bProvidenceCheck"].Flag = value; } }
        public Array<DimensionItemDropCollection> PreparedItemCollections { get { return new Array<DimensionItemDropCollection>(this["PreparedItemCollections"]); } set { this["PreparedItemCollections"] = value; } }
        public Array<DimensionItemDropPackage> PreparedItemPackages { get { return new Array<DimensionItemDropPackage>(this["PreparedItemPackages"]); } set { this["PreparedItemPackages"] = value; } }
        public Array<DimensionItemDropPackage> PreparedItemDropDataPackages { get { return new Array<DimensionItemDropPackage>(this["PreparedItemDropDataPackages"]); } set { this["PreparedItemDropDataPackages"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public Array<DimensionItemDropPackage> GeneratedItemPackages { get { return new Array<DimensionItemDropPackage>(this["GeneratedItemPackages"]); } set { this["GeneratedItemPackages"] = value; } }
        public int ItemBatchID { get { return this["ItemBatchID"].GetValue<int>(); } set { this["ItemBatchID"].SetValue<int>(value); } }
    }
    public class DimensionAssetLoadingData : DimensionAssetData
    {
        public DimensionAssetLoadingData(nint addr) : base(addr) { }
        public DimensionAssetLoadingData() : base(0) { }
        public Array<UEObject> ExtraObjectsToLoad { get { return new Array<UEObject>(this["ExtraObjectsToLoad"]); } set { this["ExtraObjectsToLoad"] = value; } }
        public Array<UEObject> ExtraClassesToLoad { get { return new Array<UEObject>(this["ExtraClassesToLoad"]); } set { this["ExtraClassesToLoad"] = value; } }
        public Array<UEObject> PersistentObjectPointers { get { return new Array<UEObject>(this["PersistentObjectPointers"]); } set { this["PersistentObjectPointers"] = value; } }
        public Array<UEObject> PersistentClassPointers { get { return new Array<UEObject>(this["PersistentClassPointers"]); } set { this["PersistentClassPointers"] = value; } }
    }
    public class DimensionItemDropSpawnData : UEObject
    {
        public DimensionItemDropSpawnData(nint addr) : base(addr) { }
        public DimensionItemDropSpawnData() : base(0) { }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public UEObject CustomItemDropClass { get { return this["CustomItemDropClass"]; } set { this["CustomItemDropClass"] = value; } }
        public Vector SpawnLocation { get { return this[nameof(SpawnLocation)].As<Vector>(); } set { this["SpawnLocation"] = value; } }
        public Vector SpawnDirection { get { return this[nameof(SpawnDirection)].As<Vector>(); } set { this["SpawnDirection"] = value; } }
        public float SpawnAngle { get { return this["SpawnAngle"].GetValue<float>(); } set { this["SpawnAngle"].SetValue<float>(value); } }
        public float InitialSpawnDelay { get { return this["InitialSpawnDelay"].GetValue<float>(); } set { this["InitialSpawnDelay"].SetValue<float>(value); } }
        public float SpawnInterval { get { return this["SpawnInterval"].GetValue<float>(); } set { this["SpawnInterval"].SetValue<float>(value); } }
        public float SpawnIntervalVariance { get { return this["SpawnIntervalVariance"].GetValue<float>(); } set { this["SpawnIntervalVariance"].SetValue<float>(value); } }
        public float TimeToLive { get { return this["TimeToLive"].GetValue<float>(); } set { this["TimeToLive"].SetValue<float>(value); } }
        public float TimeToSpawn { get { return this["TimeToSpawn"].GetValue<float>(); } set { this["TimeToSpawn"].SetValue<float>(value); } }
        public float SpawnPart { get { return this["SpawnPart"].GetValue<float>(); } set { this["SpawnPart"].SetValue<float>(value); } }
    }
    public class DimensionGameplayEventData : UEObject
    {
        public DimensionGameplayEventData(nint addr) : base(addr) { }
        public DimensionGameplayEventData() : base(0) { }
        public GameplayTag EventTag { get { return this[nameof(EventTag)].As<GameplayTag>(); } set { this["EventTag"] = value; } }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public UEObject DamageObject { get { return this[nameof(DamageObject)]; } set { this["DamageObject"] = value; } }
        public AggregatedDamageData AggregatedDamageData { get { return this[nameof(AggregatedDamageData)].As<AggregatedDamageData>(); } set { this["AggregatedDamageData"] = value; } }
        public UEObject CustomAttributes { get { return this["CustomAttributes"]; } set { this["CustomAttributes"] = value; } }
    }
    public class CustomActorHomingMovementData : UEObject
    {
        public CustomActorHomingMovementData(nint addr) : base(addr) { }
        public CustomActorHomingMovementData() : base(0) { }
        public Vector StartingLocation { get { return this[nameof(StartingLocation)].As<Vector>(); } set { this["StartingLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public Vector CurrentLocation { get { return this[nameof(CurrentLocation)].As<Vector>(); } set { this["CurrentLocation"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float InitialSpeed { get { return this["InitialSpeed"].GetValue<float>(); } set { this["InitialSpeed"].SetValue<float>(value); } }
        public float MaxSpeed { get { return this["MaxSpeed"].GetValue<float>(); } set { this["MaxSpeed"].SetValue<float>(value); } }
        public float Acceleration { get { return this["Acceleration"].GetValue<float>(); } set { this["Acceleration"].SetValue<float>(value); } }
        public float HomingStrength { get { return this["HomingStrength"].GetValue<float>(); } set { this["HomingStrength"].SetValue<float>(value); } }
        public float TriggerRadius { get { return this["TriggerRadius"].GetValue<float>(); } set { this["TriggerRadius"].SetValue<float>(value); } }
        public float CurrentRotation { get { return this["CurrentRotation"].GetValue<float>(); } set { this["CurrentRotation"].SetValue<float>(value); } }
    }
    public enum EItemAddReason : int
    {
        None = 0,
        Internal = 1,
        Enemy = 2,
        Reward = 3,
        Pickup = 4,
        Transaction = 5,
        Consume = 6,
        Quest = 7,
        Research = 8,
        Ability = 9,
        Replace = 10,
        Enter = 11,
        Restored = 12,
        Upgrade = 13,
        Refill = 14,
        EItemAddReason_MAX = 15,
    }
    public class WitchfireEssenceData : UEObject
    {
        public WitchfireEssenceData(nint addr) : base(addr) { }
        public WitchfireEssenceData() : base(0) { }
        public ParticleSystemComponent Particle { get { return this[nameof(Particle)].As<ParticleSystemComponent>(); } set { this["Particle"] = value; } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public bool bOnDeathEssence { get { return this["bOnDeathEssence"].Flag; } set { this["bOnDeathEssence"].Flag = value; } }
        public Actor SourceActor { get { return this[nameof(SourceActor)].As<Actor>(); } set { this["SourceActor"] = value; } }
        public Actor TargetPlayer { get { return this[nameof(TargetPlayer)].As<Actor>(); } set { this["TargetPlayer"] = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public float Timestamp { get { return this["Timestamp"].GetValue<float>(); } set { this["Timestamp"].SetValue<float>(value); } }
        public CustomActorHomingMovementData MovementData { get { return this[nameof(MovementData)].As<CustomActorHomingMovementData>(); } set { this["MovementData"] = value; } }
        public Vector RotationAxisStartingPoint { get { return this[nameof(RotationAxisStartingPoint)].As<Vector>(); } set { this["RotationAxisStartingPoint"] = value; } }
        public int RotationDirection { get { return this["RotationDirection"].GetValue<int>(); } set { this["RotationDirection"].SetValue<int>(value); } }
        public Vector PhaseTransitionLocation { get { return this[nameof(PhaseTransitionLocation)].As<Vector>(); } set { this["PhaseTransitionLocation"] = value; } }
        public int MovementPhase { get { return this["MovementPhase"].GetValue<int>(); } set { this["MovementPhase"].SetValue<int>(value); } }
        public Array<DimensionItemDataPackage> ItemsToGrant { get { return new Array<DimensionItemDataPackage>(this["ItemsToGrant"]); } set { this["ItemsToGrant"] = value; } }
        public EItemAddReason ItemAddReason { get { return (EItemAddReason)this["ItemAddReason"].GetValue<int>(); } set { this["ItemAddReason"].SetValue<int>((int)value); } }
        public bool bTriggeredIncomingSFX { get { return this["bTriggeredIncomingSFX"].Flag; } set { this["bTriggeredIncomingSFX"].Flag = value; } }
        public bool bTriggered { get { return this["bTriggered"].Flag; } set { this["bTriggered"].Flag = value; } }
        public AudioComponent IncomingSFXComponent { get { return this[nameof(IncomingSFXComponent)].As<AudioComponent>(); } set { this["IncomingSFXComponent"] = value; } }
        public bool bDelayed { get { return this["bDelayed"].Flag; } set { this["bDelayed"].Flag = value; } }
        public float HomingDelayTimeRemaining { get { return this["HomingDelayTimeRemaining"].GetValue<float>(); } set { this["HomingDelayTimeRemaining"].SetValue<float>(value); } }
    }
    public class DimensionItemNotificationOptions : UEObject
    {
        public DimensionItemNotificationOptions(nint addr) : base(addr) { }
        public DimensionItemNotificationOptions() : base(0) { }
        public bool bNotifyScavenging { get { return this["bNotifyScavenging"].Flag; } set { this["bNotifyScavenging"].Flag = value; } }
        public bool bNotifyProvidence { get { return this["bNotifyProvidence"].Flag; } set { this["bNotifyProvidence"].Flag = value; } }
        public int ProvidenceQuantityMultiplier { get { return this["ProvidenceQuantityMultiplier"].GetValue<int>(); } set { this["ProvidenceQuantityMultiplier"].SetValue<int>(value); } }
    }
    public class DimensionItemDataPackage : DimensionItemHandleCount
    {
        public DimensionItemDataPackage(nint addr) : base(addr) { }
        public DimensionItemDataPackage() : base(0) { }
        public bool bShowNotification { get { return this["bShowNotification"].Flag; } set { this["bShowNotification"].Flag = value; } }
        public DimensionItemNotificationOptions NotificationOptions { get { return this[nameof(NotificationOptions)].As<DimensionItemNotificationOptions>(); } set { this["NotificationOptions"] = value; } }
        public bool bScaledByRandomComponent { get { return this["bScaledByRandomComponent"].Flag; } set { this["bScaledByRandomComponent"].Flag = value; } }
    }
    public class DimensionItemHandleCount : UEObject
    {
        public DimensionItemHandleCount(nint addr) : base(addr) { }
        public DimensionItemHandleCount() : base(0) { }
        public DataTableRowHandle ItemDataHandle { get { return this[nameof(ItemDataHandle)].As<DataTableRowHandle>(); } set { this["ItemDataHandle"] = value; } }
        public int ItemCount { get { return this["ItemCount"].GetValue<int>(); } set { this["ItemCount"].SetValue<int>(value); } }
    }
    public enum EItemStashAccessPolicy : int
    {
        Default = 0,
        NoStash = 1,
        StashOnly = 2,
        ForceIncludeStash = 3,
        EItemStashAccessPolicy_MAX = 4,
    }
    public enum EValueSelectorValueType : int
    {
        Integer = 0,
        Float = 1,
        EValueSelectorValueType_MAX = 2,
    }
    public enum EAttributeSelectorType : int
    {
        Level = 0,
        LevelNorm = 1,
        Gnosis = 2,
        Attribute = 3,
        EAttributeSelectorType_MAX = 4,
    }
    public enum EFloatRoundingType : int
    {
        FromZero = 0,
        ToZero = 1,
        HalfFromZero = 2,
        HalfToZero = 3,
        HalfToEven = 4,
        ToPositiveInf = 5,
        ToNegativeInf = 6,
        EFloatRoundingType_MAX = 7,
    }
    public class DimensionValueSelector : UEObject
    {
        public DimensionValueSelector(nint addr) : base(addr) { }
        public DimensionValueSelector() : base(0) { }
        public int IntegerValue { get { return this["IntegerValue"].GetValue<int>(); } set { this["IntegerValue"].SetValue<int>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public EValueSelectorValueType ValueType { get { return (EValueSelectorValueType)this["ValueType"].GetValue<int>(); } set { this["ValueType"].SetValue<int>((int)value); } }
        public bool bUseCurveValue { get { return this["bUseCurveValue"].Flag; } set { this["bUseCurveValue"].Flag = value; } }
        public EAttributeSelectorType InputType { get { return (EAttributeSelectorType)this["InputType"].GetValue<int>(); } set { this["InputType"].SetValue<int>((int)value); } }
        public GameplayAttribute InputAttribute { get { return this[nameof(InputAttribute)].As<GameplayAttribute>(); } set { this["InputAttribute"] = value; } }
        public CurveFloat ValueCurve { get { return this[nameof(ValueCurve)].As<CurveFloat>(); } set { this["ValueCurve"] = value; } }
        public EFloatRoundingType RoundingMode { get { return (EFloatRoundingType)this["RoundingMode"].GetValue<int>(); } set { this["RoundingMode"].SetValue<int>((int)value); } }
        public bool bAutoCacheRefresh { get { return this["bAutoCacheRefresh"].Flag; } set { this["bAutoCacheRefresh"].Flag = value; } }
        public int CachedIntegerValue { get { return this["CachedIntegerValue"].GetValue<int>(); } set { this["CachedIntegerValue"].SetValue<int>(value); } }
        public float CachedFloatValue { get { return this["CachedFloatValue"].GetValue<float>(); } set { this["CachedFloatValue"].SetValue<float>(value); } }
        public bool bValuesCached { get { return this["bValuesCached"].Flag; } set { this["bValuesCached"].Flag = value; } }
    }
    public class DimensionItemRequirement : UEObject
    {
        public DimensionItemRequirement(nint addr) : base(addr) { }
        public DimensionItemRequirement() : base(0) { }
        public DataTableRowHandle ItemDataHandle { get { return this[nameof(ItemDataHandle)].As<DataTableRowHandle>(); } set { this["ItemDataHandle"] = value; } }
        public DimensionValueSelector RequiredCount { get { return this[nameof(RequiredCount)].As<DimensionValueSelector>(); } set { this["RequiredCount"] = value; } }
        public bool bConsumeItems { get { return this["bConsumeItems"].Flag; } set { this["bConsumeItems"].Flag = value; } }
        public bool bDisplayCountForOneStack { get { return this["bDisplayCountForOneStack"].Flag; } set { this["bDisplayCountForOneStack"].Flag = value; } }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionItemRequirementSet : UEObject
    {
        public DimensionItemRequirementSet(nint addr) : base(addr) { }
        public DimensionItemRequirementSet() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public bool bHasCustomFormatting { get { return this["bHasCustomFormatting"].Flag; } set { this["bHasCustomFormatting"].Flag = value; } }
        public string CustomFormatting { get { return this["CustomFormatting"].ToString(); } set { /* String properties are read-only */ } }
        public int MinRequired { get { return this["MinRequired"].GetValue<int>(); } set { this["MinRequired"].SetValue<int>(value); } }
        public Array<DimensionItemRequirement> Requirements { get { return new Array<DimensionItemRequirement>(this["Requirements"]); } set { this["Requirements"] = value; } }
    }
    public class DimensionAttributeRequirement : UEObject
    {
        public DimensionAttributeRequirement(nint addr) : base(addr) { }
        public DimensionAttributeRequirement() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public bool bIsLevelAttribute { get { return this["bIsLevelAttribute"].Flag; } set { this["bIsLevelAttribute"].Flag = value; } }
        public ENumberComparisonType Relation { get { return (ENumberComparisonType)this["Relation"].GetValue<int>(); } set { this["Relation"].SetValue<int>((int)value); } }
        public float Value { get { return this["Value"].GetValue<float>(); } set { this["Value"].SetValue<float>(value); } }
        public float Precision { get { return this["Precision"].GetValue<float>(); } set { this["Precision"].SetValue<float>(value); } }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionAttributeRequirementSet : UEObject
    {
        public DimensionAttributeRequirementSet(nint addr) : base(addr) { }
        public DimensionAttributeRequirementSet() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public int MinRequired { get { return this["MinRequired"].GetValue<int>(); } set { this["MinRequired"].SetValue<int>(value); } }
        public Array<DimensionAttributeRequirement> Requirements { get { return new Array<DimensionAttributeRequirement>(this["Requirements"]); } set { this["Requirements"] = value; } }
    }
    public enum EProgressManagerQueryType : int
    {
        HasEntry = 0,
        MatchesValue = 1,
        EntryCount = 2,
        EProgressManagerQueryType_MAX = 3,
    }
    public enum EProgressManagerNonExactMatchPolicy : int
    {
        First = 0,
        Any = 1,
        All = 2,
        EProgressManagerNonExactMatchPolicy_MAX = 3,
    }
    public enum ENumberComparisonType : int
    {
        None = 0,
        Equal = 1,
        NotEqual = 2,
        Greater = 3,
        GreaterOrEqual = 4,
        Less = 5,
        LessOrEqual = 6,
        ENumberComparisonType_MAX = 7,
    }
    public enum EProgressManagerDataType : int
    {
        Integer = 0,
        Float = 1,
        String = 2,
        GameplayTag = 3,
        EProgressManagerDataType_MAX = 4,
    }
    public class ProgressManagerQueryEntry : UEObject
    {
        public ProgressManagerQueryEntry(nint addr) : base(addr) { }
        public ProgressManagerQueryEntry() : base(0) { }
        public EProgressManagerQueryType QueryType { get { return (EProgressManagerQueryType)this["QueryType"].GetValue<int>(); } set { this["QueryType"].SetValue<int>((int)value); } }
        public GameplayTag CategoryTag { get { return this[nameof(CategoryTag)].As<GameplayTag>(); } set { this["CategoryTag"] = value; } }
        public bool bExactCategoryMatch { get { return this["bExactCategoryMatch"].Flag; } set { this["bExactCategoryMatch"].Flag = value; } }
        public GameplayTag KeyTag { get { return this[nameof(KeyTag)].As<GameplayTag>(); } set { this["KeyTag"] = value; } }
        public bool bExactKeyMatch { get { return this["bExactKeyMatch"].Flag; } set { this["bExactKeyMatch"].Flag = value; } }
        public EProgressManagerNonExactMatchPolicy NonExactMatchPolicy { get { return (EProgressManagerNonExactMatchPolicy)this["NonExactMatchPolicy"].GetValue<int>(); } set { this["NonExactMatchPolicy"].SetValue<int>((int)value); } }
        public ENumberComparisonType Relation { get { return (ENumberComparisonType)this["Relation"].GetValue<int>(); } set { this["Relation"].SetValue<int>((int)value); } }
        public int Count { get { return this["Count"].GetValue<int>(); } set { this["Count"].SetValue<int>(value); } }
        public bool bMatchingDataTypeOnly { get { return this["bMatchingDataTypeOnly"].Flag; } set { this["bMatchingDataTypeOnly"].Flag = value; } }
        public EProgressManagerDataType DataType { get { return (EProgressManagerDataType)this["DataType"].GetValue<int>(); } set { this["DataType"].SetValue<int>((int)value); } }
        public int IntValue { get { return this["IntValue"].GetValue<int>(); } set { this["IntValue"].SetValue<int>(value); } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTag GameplayTagValue { get { return this[nameof(GameplayTagValue)].As<GameplayTag>(); } set { this["GameplayTagValue"] = value; } }
        public bool bExactValueMatch { get { return this["bExactValueMatch"].Flag; } set { this["bExactValueMatch"].Flag = value; } }
    }
    public class ProgressManagerQuery : UEObject
    {
        public ProgressManagerQuery(nint addr) : base(addr) { }
        public ProgressManagerQuery() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public Array<ProgressManagerQueryEntry> RequiredEntries { get { return new Array<ProgressManagerQueryEntry>(this["RequiredEntries"]); } set { this["RequiredEntries"] = value; } }
        public Array<ProgressManagerQueryEntry> AllowedEntries { get { return new Array<ProgressManagerQueryEntry>(this["AllowedEntries"]); } set { this["AllowedEntries"] = value; } }
        public Array<ProgressManagerQueryEntry> BlockedEntries { get { return new Array<ProgressManagerQueryEntry>(this["BlockedEntries"]); } set { this["BlockedEntries"] = value; } }
    }
    public class DimensionLocationRequirements : UEObject
    {
        public DimensionLocationRequirements(nint addr) : base(addr) { }
        public DimensionLocationRequirements() : base(0) { }
        public ActionModifiers Requirements { get { return this[nameof(Requirements)].As<ActionModifiers>(); } set { this["Requirements"] = value; } }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionInventoryRequirements : UEObject
    {
        public DimensionInventoryRequirements(nint addr) : base(addr) { }
        public DimensionInventoryRequirements() : base(0) { }
        public bool bEquippedItemsOnly { get { return this["bEquippedItemsOnly"].Flag; } set { this["bEquippedItemsOnly"].Flag = value; } }
        public ActionModifiers Requirements { get { return this[nameof(Requirements)].As<ActionModifiers>(); } set { this["Requirements"] = value; } }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
    }
    public class DimensionRequirementsData : TableRowBase
    {
        public DimensionRequirementsData(nint addr) : base(addr) { }
        public DimensionRequirementsData() : base(0) { }
        public bool bHasCustomDescription { get { return this["bHasCustomDescription"].Flag; } set { this["bHasCustomDescription"].Flag = value; } }
        public string Description { get { return this["Description"].ToString(); } set { /* String properties are read-only */ } }
        public DimensionItemRequirementSet ItemRequirements { get { return this[nameof(ItemRequirements)].As<DimensionItemRequirementSet>(); } set { this["ItemRequirements"] = value; } }
        public DimensionAttributeRequirementSet AttributeRequirements { get { return this[nameof(AttributeRequirements)].As<DimensionAttributeRequirementSet>(); } set { this["AttributeRequirements"] = value; } }
        public ProgressManagerQuery ProgressionRequirements { get { return this[nameof(ProgressionRequirements)].As<ProgressManagerQuery>(); } set { this["ProgressionRequirements"] = value; } }
        public DimensionLocationRequirements LocationRequirements { get { return this[nameof(LocationRequirements)].As<DimensionLocationRequirements>(); } set { this["LocationRequirements"] = value; } }
        public DimensionInventoryRequirements InventoryRequirements { get { return this[nameof(InventoryRequirements)].As<DimensionInventoryRequirements>(); } set { this["InventoryRequirements"] = value; } }
    }
    public class DimensionVendorItemEntry : DimensionAssetData
    {
        public DimensionVendorItemEntry(nint addr) : base(addr) { }
        public DimensionVendorItemEntry() : base(0) { }
        public bool bGrantItemBatch { get { return this["bGrantItemBatch"].Flag; } set { this["bGrantItemBatch"].Flag = value; } }
        public DataTableRowHandle ItemDataHandle { get { return this[nameof(ItemDataHandle)].As<DataTableRowHandle>(); } set { this["ItemDataHandle"] = value; } }
        public DataTableRowHandle ItemBatchHandle { get { return this[nameof(ItemBatchHandle)].As<DataTableRowHandle>(); } set { this["ItemBatchHandle"] = value; } }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject Icon { get { return this["Icon"]; } set { this["Icon"] = value; } }
        public DimensionValueSelector StockLimit { get { return this[nameof(StockLimit)].As<DimensionValueSelector>(); } set { this["StockLimit"] = value; } }
        public DimensionValueSelector StockRefreshTime { get { return this[nameof(StockRefreshTime)].As<DimensionValueSelector>(); } set { this["StockRefreshTime"] = value; } }
        public DataTableRowHandle PurchaseRequirementsHandle { get { return this[nameof(PurchaseRequirementsHandle)].As<DataTableRowHandle>(); } set { this["PurchaseRequirementsHandle"] = value; } }
        public DataTableRowHandle AvailabilityRequirementsHandle { get { return this[nameof(AvailabilityRequirementsHandle)].As<DataTableRowHandle>(); } set { this["AvailabilityRequirementsHandle"] = value; } }
        public EItemStashAccessPolicy StashAccessPolicy { get { return (EItemStashAccessPolicy)this["StashAccessPolicy"].GetValue<int>(); } set { this["StashAccessPolicy"].SetValue<int>((int)value); } }
        public int StacksPerPurchase { get { return this["StacksPerPurchase"].GetValue<int>(); } set { this["StacksPerPurchase"].SetValue<int>(value); } }
        public int RemainingStockCount { get { return this["RemainingStockCount"].GetValue<int>(); } set { this["RemainingStockCount"].SetValue<int>(value); } }
        public float RemainingStockRefreshTime { get { return this["RemainingStockRefreshTime"].GetValue<float>(); } set { this["RemainingStockRefreshTime"].SetValue<float>(value); } }
        public DimensionRequirementsData PurchaseRequirements { get { return this[nameof(PurchaseRequirements)].As<DimensionRequirementsData>(); } set { this["PurchaseRequirements"] = value; } }
        public DimensionRequirementsData AvailabilityRequirements { get { return this[nameof(AvailabilityRequirements)].As<DimensionRequirementsData>(); } set { this["AvailabilityRequirements"] = value; } }
    }
    public class SerializableDataTableRowHandle : UEObject
    {
        public SerializableDataTableRowHandle(nint addr) : base(addr) { }
        public SerializableDataTableRowHandle() : base(0) { }
        public DataTableRowHandle Handle { get { return this[nameof(Handle)].As<DataTableRowHandle>(); } set { this["Handle"] = value; } }
        public string RowName { get { return this["RowName"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject DataTablePtr { get { return this["DataTablePtr"]; } set { this["DataTablePtr"] = value; } }
    }
    public class DimensionAssetData : TableRowBase
    {
        public DimensionAssetData(nint addr) : base(addr) { }
        public DimensionAssetData() : base(0) { }
        public SerializableDataTableRowHandle SourceHandle { get { return this[nameof(SourceHandle)].As<SerializableDataTableRowHandle>(); } set { this["SourceHandle"] = value; } }
        public bool bGenerated { get { return this["bGenerated"].Flag; } set { this["bGenerated"].Flag = value; } }
        public bool bPendingRemove { get { return this["bPendingRemove"].Flag; } set { this["bPendingRemove"].Flag = value; } }
    }
    public class DamageDeferredActorsData : DamageActorsData
    {
        public DamageDeferredActorsData(nint addr) : base(addr) { }
        public DamageDeferredActorsData() : base(0) { }
        public GameplayTag InstigatorTeamTag { get { return this[nameof(InstigatorTeamTag)].As<GameplayTag>(); } set { this["InstigatorTeamTag"] = value; } }
        public Vector InstigatorOrigin { get { return this[nameof(InstigatorOrigin)].As<Vector>(); } set { this["InstigatorOrigin"] = value; } }
        public Rotator InstigatorEyesViewRotation { get { return this[nameof(InstigatorEyesViewRotation)].As<Rotator>(); } set { this["InstigatorEyesViewRotation"] = value; } }
        public Actor PermanentActor { get { return this[nameof(PermanentActor)].As<Actor>(); } set { this["PermanentActor"] = value; } }
    }
    public class DamageActorsData : UEObject
    {
        public DamageActorsData(nint addr) : base(addr) { }
        public DamageActorsData() : base(0) { }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public Actor DamageCauser { get { return this[nameof(DamageCauser)].As<Actor>(); } set { this["DamageCauser"] = value; } }
        public UEObject DamageObject { get { return this[nameof(DamageObject)]; } set { this["DamageObject"] = value; } }
    }
    public enum EActionApplyType : int
    {
        None = 0,
        Self = 1,
        Friendly = 2,
        FriendlyAndSelf = 3,
        Hostile = 4,
        NotHostile = 5,
        Unfriendly = 6,
        UnfriendlyAndSelf = 7,
        Others = 8,
        All = 9,
        Players = 10,
        Enemies = 11,
        Characters = 12,
        OtherActors = 13,
        EActionApplyType_MAX = 14,
    }
    public enum EDamageType : int
    {
        None = 0,
        Physical = 1,
        Fire = 2,
        Earth = 3,
        Water = 4,
        Air = 5,
        EDT_MAX = 6,
        EDamageType_MAX = 7,
    }
    public class StatusDamageData : UEObject
    {
        public StatusDamageData(nint addr) : base(addr) { }
        public StatusDamageData() : base(0) { }
        public float StatusDamage { get { return this["StatusDamage"].GetValue<float>(); } set { this["StatusDamage"].SetValue<float>(value); } }
        public EDamageType StatusDamageType { get { return (EDamageType)this["StatusDamageType"].GetValue<int>(); } set { this["StatusDamageType"].SetValue<int>((int)value); } }
        public float CustomStatusDamageMultiplier { get { return this["CustomStatusDamageMultiplier"].GetValue<float>(); } set { this["CustomStatusDamageMultiplier"].SetValue<float>(value); } }
        public float Power { get { return this["Power"].GetValue<float>(); } set { this["Power"].SetValue<float>(value); } }
    }
    public class DamageValueData : UEObject
    {
        public DamageValueData(nint addr) : base(addr) { }
        public DamageValueData() : base(0) { }
        public float Damage { get { return this["Damage"].GetValue<float>(); } set { this["Damage"].SetValue<float>(value); } }
        public EDamageType DamageType { get { return (EDamageType)this["DamageType"].GetValue<int>(); } set { this["DamageType"].SetValue<int>((int)value); } }
        public EActionApplyType DamageApplyPolicy { get { return (EActionApplyType)this["DamageApplyPolicy"].GetValue<int>(); } set { this["DamageApplyPolicy"].SetValue<int>((int)value); } }
        public float CustomDamageMultiplier { get { return this["CustomDamageMultiplier"].GetValue<float>(); } set { this["CustomDamageMultiplier"].SetValue<float>(value); } }
        public Array<StatusDamageData> StatusDamages { get { return new Array<StatusDamageData>(this["StatusDamages"]); } set { this["StatusDamages"] = value; } }
        public string DamageValueID { get { return this["DamageValueID"].ToString(); } set { /* String properties are read-only */ } }
        public GameplayTagContainer DamageTags { get { return this[nameof(DamageTags)].As<GameplayTagContainer>(); } set { this["DamageTags"] = value; } }
        public ActionModifiers DamageActionModifiers { get { return this[nameof(DamageActionModifiers)].As<ActionModifiers>(); } set { this["DamageActionModifiers"] = value; } }
    }
    public class ActionModifiers : TableRowBase
    {
        public ActionModifiers(nint addr) : base(addr) { }
        public ActionModifiers() : base(0) { }
        public Actor Instigator { get { return this[nameof(Instigator)].As<Actor>(); } set { this["Instigator"] = value; } }
        public GameplayTagContainer Modifiers { get { return this[nameof(Modifiers)].As<GameplayTagContainer>(); } set { this["Modifiers"] = value; } }
        public GameplayTagContainer RequiredModifiers { get { return this[nameof(RequiredModifiers)].As<GameplayTagContainer>(); } set { this["RequiredModifiers"] = value; } }
        public GameplayTagContainer AllowedModifiers { get { return this[nameof(AllowedModifiers)].As<GameplayTagContainer>(); } set { this["AllowedModifiers"] = value; } }
        public GameplayTagContainer BlockedModifiers { get { return this[nameof(BlockedModifiers)].As<GameplayTagContainer>(); } set { this["BlockedModifiers"] = value; } }
    }
    public enum EValueCombineMode : int
    {
        None = 0,
        Average = 1,
        Min = 2,
        Max = 3,
        Sum = 4,
        Multiply = 5,
        Subtract = 6,
    }
    public class StringFloatPair : UEObject
    {
        public StringFloatPair(nint addr) : base(addr) { }
        public StringFloatPair() : base(0) { }
        public string StringValue { get { return this["StringValue"].ToString(); } set { /* String properties are read-only */ } }
        public float FloatValue { get { return this["FloatValue"].GetValue<float>(); } set { this["FloatValue"].SetValue<float>(value); } }
    }
    public class DamageResultData : UEObject
    {
        public DamageResultData(nint addr) : base(addr) { }
        public DamageResultData() : base(0) { }
        public GameplayTagContainer DamageTags { get { return this[nameof(DamageTags)].As<GameplayTagContainer>(); } set { this["DamageTags"] = value; } }
        public Array<StringFloatPair> DamageProperties { get { return new Array<StringFloatPair>(this["DamageProperties"]); } set { this["DamageProperties"] = value; } }
        public List<string> DamageModifiers { get { return this["DamageModifiers"].GetStringList(); } set { /* Arrays are read-only */ } }
        public List<string> StatusDamageModifiers { get { return this["StatusDamageModifiers"].GetStringList(); } set { /* Arrays are read-only */ } }
    }
    public class AggregatedDamageData : UEObject
    {
        public AggregatedDamageData(nint addr) : base(addr) { }
        public AggregatedDamageData() : base(0) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public float TargetHealth { get { return this["TargetHealth"].GetValue<float>(); } set { this["TargetHealth"].SetValue<float>(value); } }
        public GameplayTagContainer TargetStatusTags { get { return this[nameof(TargetStatusTags)].As<GameplayTagContainer>(); } set { this["TargetStatusTags"] = value; } }
        public DamageDeferredActorsData DamageActors { get { return this[nameof(DamageActors)].As<DamageDeferredActorsData>(); } set { this["DamageActors"] = value; } }
        public DamageValueData DamageValueData { get { return this[nameof(DamageValueData)].As<DamageValueData>(); } set { this["DamageValueData"] = value; } }
        public float DamageClamped { get { return this["DamageClamped"].GetValue<float>(); } set { this["DamageClamped"].SetValue<float>(value); } }
        public float AccumulatedForce { get { return this["AccumulatedForce"].GetValue<float>(); } set { this["AccumulatedForce"].SetValue<float>(value); } }
        public HitResult FinalHit { get { return this[nameof(FinalHit)].As<HitResult>(); } set { this["FinalHit"] = value; } }
        public ActionModifiers ActionModifiers { get { return this[nameof(ActionModifiers)].As<ActionModifiers>(); } set { this["ActionModifiers"] = value; } }
        public EValueCombineMode ForceCombineMethod { get { return (EValueCombineMode)this["ForceCombineMethod"].GetValue<int>(); } set { this["ForceCombineMethod"].SetValue<int>((int)value); } }
        public List<float> Forces { get { return this["Forces"].GetList<float>(); } set { /* Arrays are read-only */ } }
        public Vector DamageOrigin { get { return this[nameof(DamageOrigin)].As<Vector>(); } set { this["DamageOrigin"] = value; } }
        public DamageResultData ResultData { get { return this[nameof(ResultData)].As<DamageResultData>(); } set { this["ResultData"] = value; } }
        public int DamageSpecID { get { return this["DamageSpecID"].GetValue<int>(); } set { this["DamageSpecID"].SetValue<int>(value); } }
        public int DamageInstanceID { get { return this["DamageInstanceID"].GetValue<int>(); } set { this["DamageInstanceID"].SetValue<int>(value); } }
    }
    public class DimensionGameplayEffectProperties : UEObject
    {
        public DimensionGameplayEffectProperties(nint addr) : base(addr) { }
        public DimensionGameplayEffectProperties() : base(0) { }
        public string DisplayName { get { return this["DisplayName"].ToString(); } set { /* String properties are read-only */ } }
        public float Level { get { return this["Level"].GetValue<float>(); } set { this["Level"].SetValue<float>(value); } }
        public float RemainingDuration { get { return this["RemainingDuration"].GetValue<float>(); } set { this["RemainingDuration"].SetValue<float>(value); } }
        public float TotalDuration { get { return this["TotalDuration"].GetValue<float>(); } set { this["TotalDuration"].SetValue<float>(value); } }
        public float StartTime { get { return this["StartTime"].GetValue<float>(); } set { this["StartTime"].SetValue<float>(value); } }
        public float ExpectedEndTime { get { return this["ExpectedEndTime"].GetValue<float>(); } set { this["ExpectedEndTime"].SetValue<float>(value); } }
        public int StackCount { get { return this["StackCount"].GetValue<int>(); } set { this["StackCount"].SetValue<int>(value); } }
        public int StackLimitCount { get { return this["StackLimitCount"].GetValue<int>(); } set { this["StackLimitCount"].SetValue<int>(value); } }
        public string DebugString { get { return this["DebugString"].ToString(); } set { /* String properties are read-only */ } }
        public UEObject GameplayEffectClass { get { return this["GameplayEffectClass"]; } set { this["GameplayEffectClass"] = value; } }
        public ActiveGameplayEffectHandle Handle { get { return this[nameof(Handle)].As<ActiveGameplayEffectHandle>(); } set { this["Handle"] = value; } }
    }
    public enum EGameplayAttributeModOperationType : int
    {
        Init = 0,
        Internal = 1,
        Base = 2,
        Bonus = 3,
        Magnitude = 4,
        Refresh = 5,
        EffectBase = 6,
        EffectBonus = 7,
        EGameplayAttributeModOperationType_MAX = 8,
    }
    public class DimensionAttributeChangeData : UEObject
    {
        public DimensionAttributeChangeData(nint addr) : base(addr) { }
        public DimensionAttributeChangeData() : base(0) { }
        public GameplayAttribute Attribute { get { return this[nameof(Attribute)].As<GameplayAttribute>(); } set { this["Attribute"] = value; } }
        public float OldValue { get { return this["OldValue"].GetValue<float>(); } set { this["OldValue"].SetValue<float>(value); } }
        public float NewValue { get { return this["NewValue"].GetValue<float>(); } set { this["NewValue"].SetValue<float>(value); } }
        public EGameplayAttributeModOperationType OperationType { get { return (EGameplayAttributeModOperationType)this["OperationType"].GetValue<int>(); } set { this["OperationType"].SetValue<int>((int)value); } }
        public DimensionAbilitySystemComponent AbilitySystem { get { return this[nameof(AbilitySystem)].As<DimensionAbilitySystemComponent>(); } set { this["AbilitySystem"] = value; } }
    }
}
